<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">false</Value>
		<Value xsi:type="xs:string">Архивация документов</Value>
		<Value xsi:type="xs:string">ПроизвольныйАрхивацияДокументов</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">    //++Архивация документов по значению из доп констант EDI_СрокАрхивацииДокументовПоДатеЗаказа 
		EDI_СрокАрхивацииДокументовПоДатеЗаказа = Настройка_Параметр_Прочитать("EDI_СрокАрхивацииДокументовПоДатеЗаказа");  
		ПериодСвязиДокументов = Настройка_Параметр_Прочитать("EDI_ПериодСвязиДокументов");  
		
		ВыбранныеСтроки = ?(ВыбранныеСтроки = Неопределено, Новый Массив, ВыбранныеСтроки); 
		 	
		ИсключитьВидыДокументов = Новый Массив; 
		ИсключитьВидыДокументов.Добавить("CONDRA_Исходящий");
	    ИсключитьВидыДокументов.Добавить("CONDRA_Входящий");                                                                                    
	    ИсключитьВидыДокументов.Добавить("PRICAT_Исходящий"); 
	    ИсключитьВидыДокументов.Добавить("PRICAT_Входящий"); 
	    ИсключитьВидыДокументов.Добавить("УстановкаЦенНоменклатуры_Исходящий"); 
	    ИсключитьВидыДокументов.Добавить("УстановкаЦенНоменклатуры_Входящий");                                                                                   
	                                                                                        
		Если ЗначениеЗаполнено(EDI_СрокАрхивацииДокументовПоДатеЗаказа) Тогда  
		
			МассивИдентификаторов = Новый Массив;
			Для Каждого Стр Из ВыбранныеСтроки Цикл
				МассивИдентификаторов.Добавить(Стр.ИдентификаторЦепочки);
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
			               |	DR_События.Документ КАК Документ,
			               |	DR_События.Идентификатор КАК Идентификатор,
			               |	DR_События.ВидДокумента КАК ВидДокумента,
			               |	ВЫБОР
			               |		КОГДА РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ) &lt; 0
			               |			ТОГДА -РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ)
			               |		ИНАЧЕ РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ)
			               |	КОНЕЦ КАК ПериодПроверкиВДнях
			               |ИЗ
			               |	РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События
			               |		ПО (DR_ЦепочкиДокументов.ИдентификаторЦепочки = DR_События.ИдентификаторЦепочки)
			               |			И (РАЗНОСТЬДАТ(DR_ЦепочкиДокументов.ДатаЗаказа, DR_События.ДатаЗаписи, ДЕНЬ) МЕЖДУ 0 И &amp;ПериодСвязиДокументов)
			               |ГДЕ
			               |	DR_События.Статус &lt;&gt; ""Архивный""
			               |	И ВЫБОР
			               |			КОГДА РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ) &lt; 0
			               |				ТОГДА -РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ)
			               |			ИНАЧЕ РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ)
			               |		КОНЕЦ &gt; &amp;ПериодАрхивации
			               |	И DR_События.ИдентификаторЦепочки В(&amp;ИдентификаторыЦепочек)
			               |	И НЕ DR_События.ВидДокумента В (&amp;ИсключитьВидыДокументов)
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	DR_События.ВидДокумента,
			               |	DR_События.Идентификатор,
			               |	DR_События.Документ,
			               |	DR_События.ИдентификаторЦепочки,
			               |	ВЫБОР
			               |		КОГДА РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ) &lt; 0
			               |			ТОГДА -РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ)
			               |		ИНАЧЕ РАЗНОСТЬДАТ(&amp;ТекДата, DR_ЦепочкиДокументов.ДатаЗаказа, ДЕНЬ)
			               |	КОНЕЦ";
			
			Запрос.УстановитьПараметр("ТекДата",ТекущаяДата()); 
			Запрос.УстановитьПараметр("ПериодАрхивации",EDI_СрокАрхивацииДокументовПоДатеЗаказа);  
			Запрос.УстановитьПараметр("ПериодСвязиДокументов", ПериодСвязиДокументов); 
			Если Не ВыбранныеСтроки.Количество() Тогда 
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"И DR_События.ИдентификаторЦепочки В(&amp;ИдентификаторыЦепочек)","");
			КонецЕсли;
            Запрос.УстановитьПараметр("ИдентификаторыЦепочек", МассивИдентификаторов);
            Запрос.УстановитьПараметр("ИсключитьВидыДокументов", ИсключитьВидыДокументов);	
			
			ВыборкаАрхивныхДокументов = Запрос.Выполнить().Выбрать();
			
			Сч = 0;
			Пока ВыборкаАрхивныхДокументов.Следующий() Цикл    
				
				Архив_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				Архив_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(ВыборкаАрхивныхДокументов.ИдентификаторЦепочки);
				Архив_DRСобытия.Отбор.Документ.Установить(ВыборкаАрхивныхДокументов.Документ);
				Архив_DRСобытия.Отбор.ВидДокумента.Установить(ВыборкаАрхивныхДокументов.ВидДокумента);
				Архив_DRСобытия.Отбор.Идентификатор.Установить(ВыборкаАрхивныхДокументов.Идентификатор);
				Архив_DRСобытия.Прочитать();
				
				Если Архив_DRСобытия.Количество() &gt; 0 Тогда 
					
					Если ТипЗнч(ВыборкаАрхивныхДокументов.Документ) = Тип("ДокументСсылка.DR_Документ") Тогда 
						
						Docrobot = ВыборкаАрхивныхДокументов.Документ;
						DocrobotОбъект = Docrobot.ПолучитьОбъект();
						DocrobotОбъект.Статус = "Архивный";
						DocrobotОбъект.Записать();    
						
					КонецЕсли;	
					
					НоваяЗапись = Архив_DRСобытия[0];  
					НоваяЗапись.Статус = "Архивный"; 
					
					Архив_DRСобытия.Записать();
					
				КонецЕсли;			
			    
			    Сч = Сч + 1;
			    	
			КонецЦикла;     	
			
			ТекстЛогаСобытий = "Архивировано "+ Сч + " записей в РС DR_События";
		    ЗаписьСтруктурыЛога = Вычислить("DR_EDI_ОбщегоНазначения.ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, ""Успешно"", ИмяСобытия)");
		    МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  
						
		КонецЕсли;
		
		//--
</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">5</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Архивация документов</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ПроизвольныйАрхивацияДокументов</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">5</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string"/>
				<presentation>ТекстЗапроса</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
	</row>
</ValueTree>