<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ клиента</Value>
		<Value xsi:type="xs:string">//&lt;Служебные переменные&gt;
ТипПриемника = "СчетНаОплатуПокупателю";
ИмяСобытия   = "Создание документов по кнопке &lt;&lt;&lt; Создать заказ клиента &gt;&gt;&gt;";

ОперацияЗапись = Ложь;
ЛогСобытий = "";

ВыбранныеСтроки 	= ?(ВыбранныеСтроки = Неопределено, Новый Массив, ВыбранныеСтроки);
ВызовВходящимORDER 	= ?(ВызовВходящимORDER = Неопределено, Ложь, ВызовВходящимORDER);
АвтоЗаказ 			= ?(АвтоЗаказ = Неопределено, Ложь, АвтоЗаказ);
ПерезаписыватьЗаказ	= ?(ВызовВходящимORDER = Истина, ПерезаписыватьЗаказ, Настройка_Параметр_Прочитать("EDI_ПерезаписыватьЗаказПриЗагрузкеORDER", Ложь));	
РазделятьЗаказы 	= ?(ВызовВходящимORDER = Истина, Ложь, Настройка_Параметр_Прочитать("EDI_РазделятьЗаказы", Ложь));
//&lt;/Служебные переменные&gt;

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"				, Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"	, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	
	Элемент.Вставить("Идентификатор", Элемент.Документ.ИдентификаторДокумента);
	
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	
КонецЦикла;			

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВТ_ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_ВыбранныеЗаписи.Документ КАК Документ,
|	ВТ_ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВТ_ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВТ_Отбор
|ИЗ
|	ВТ_ВыбранныеЗаписи КАК ВТ_ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
|		ПО ВТ_ВыбранныеЗаписи.Документ = DR_Документ.Ссылка
|ГДЕ
|	DR_Документ.Статус = ""Обработан""
|	И НЕ DR_Документ.ПометкаУдаления
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_Отбор.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВТ_Отбор.Документ КАК Источник,
|	ВТ_Отбор.Идентификатор КАК Идентификатор,
|	МАКСИМУМ(ЕСТЬNULL(Заказ_События.Документ, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка))) КАК ДокументСчетПокупателя1С,
|	МАКСИМУМ(ВЫБОР
|			КОГДА Заказ_События.Документ ЕСТЬ NULL
|				ТОГДА ЛОЖЬ
|			ИНАЧЕ ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.СчетНаОплатуПокупателю).Проведен
|		КОНЕЦ) КАК ЗаказПроведен,
|	МАКСИМУМ(ЕСТЬNULL(Реализация_События.Документ, ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка))) КАК ДокументРеализации
|ИЗ
|	ВТ_Отбор КАК ВТ_Отбор
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
|		ПО ВТ_Отбор.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Реализация_События
|		ПО ВТ_Отбор.ИдентификаторЦепочки = Реализация_События.ИдентификаторЦепочки
|			И (Реализация_События.ВидДокумента = ""Накладная_Исходящая"")
|
|СГРУППИРОВАТЬ ПО
|	ВТ_Отбор.Документ,
|	ВТ_Отбор.ИдентификаторЦепочки,
|	ВТ_Отбор.Идентификатор";

Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);     

Выборка = Запрос.Выполнить().Выбрать(); 

Пока Выборка.Следующий() Цикл
	
	ЗапрещеноИзменениеЗаказа = Ложь;
	
	//&lt;Проверка необходимоти создания или перезаписи созданного Заказа 1С&gt;
	Если РазделятьЗаказы И ЗначениеЗаполнено(Выборка.ДокументСчетПокупателя1С) И Выборка.ЗаказПроведен И ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда		
		ЗапрещеноИзменениеЗаказа = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ДокументСчетПокупателя1С) И (НЕ АвтоЗаказ И ВызовВходящимORDER) Тогда
		
		Продолжить;
	ИначеЕсли ЗначениеЗаполнено(Выборка.ДокументСчетПокупателя1С) И (НЕ ПерезаписыватьЗаказ И ВызовВходящимORDER) Тогда
		
		ТекстЛогаСобытий = НСтр("ru = 'Автоматическая перезапись созданного %Счет% не выполнена. По причине отключенной настройки ""Перезаписывать заказ"".'", 
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
							
		ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Счет%", Строка(Выборка.ДокументСчетПокупателя1С));
		
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		
		Продолжить;
	КонецЕсли;		
	
	Если Не ЗапрещеноИзменениеЗаказа Тогда
		
		Если КэшированныеЗначения = Неопределено Тогда
			КэшированныеЗначения = Новый Структура;
		КонецЕсли;			
		
		ПроводитьЗаказ 				= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ПроводитьЗаказ", ПроводитьЗаказ) Тогда
			ПроводитьЗаказ 			= Настройка_Параметр_Прочитать("EDI_СоздаватьДокументЗаказ1СПроведенным");
			КэшированныеЗначения.Вставить("ПроводитьЗаказ", ПроводитьЗаказ);
		КонецЕсли;
		
		ЗагружатьТекущейДатой 		= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой) Тогда
			ЗагружатьТекущейДатой 	= Настройка_Параметр_Прочитать("EDI_ЗаказыЗагружатьТекущейДатой");
			КэшированныеЗначения.Вставить("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой);
		КонецЕсли;
		
		Приемник = Документы[ТипПриемника].СоздатьДокумент();
		
		// Основной запрос для заполнения шапки документа.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&amp;Источник КАК Ссылка
		|ПОМЕСТИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ДР_Грузополучатель.Значение КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента,
		|	ВЫРАЗИТЬ(ДР_Контрагент.Значение КАК Справочник.Контрагенты) КАК Контрагент,
		|	ВЫРАЗИТЬ(ДР_Организация.Значение КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ДР_ЗаказНомер.Значение КАК СТРОКА(35)) КАК ЗаказНомер,
		|	ВЫРАЗИТЬ(ДР_ЗаказДата.Значение КАК ДАТА) КАК ЗаказДата,
		|	ЕСТЬNULL(ДР_POSITION.ХранилищеЗначения, НЕОПРЕДЕЛЕНО) КАК POSITION
		|ПОМЕСТИТЬ ВТ_DRДокумент
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Контрагент
		|		ПО ВТ.Ссылка = ДР_Контрагент.Ссылка
		|			И (ДР_Контрагент.Реквизит = ""Контрагент"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Грузополучатель
		|		ПО ВТ.Ссылка = ДР_Грузополучатель.Ссылка
		|			И (ДР_Грузополучатель.Реквизит = ""ТочкаДоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Организация
		|		ПО ВТ.Ссылка = ДР_Организация.Ссылка
		|			И (ДР_Организация.Реквизит = ""Организация"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказНомер
		|		ПО ВТ.Ссылка = ДР_ЗаказНомер.Ссылка
		|			И (ДР_ЗаказНомер.Реквизит = ""NUMBER"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказДата
		|		ПО ВТ.Ссылка = ДР_ЗаказДата.Ссылка
		|			И (ДР_ЗаказДата.Реквизит = ""ДатаЭлектронногоДокумента"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_POSITION
		|		ПО ВТ.Ссылка = ДР_POSITION.Ссылка
		|			И (ДР_POSITION.Реквизит = ""POSITION"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_DRДокумент.Ссылка КАК Ссылка,
		|	ВТ_DRДокумент.Организация КАК Организация,
		|	ВТ_DRДокумент.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ВТ_DRДокумент.Контрагент КАК Контрагент,
		|	DR_ТочкиДоставки.Адрес КАК АдресДоставки,
		|	ЕСТЬNULL(DR_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ИспользоватьЦеныИз1С,
		|	ЕСТЬNULL(ВТ_DRДокумент.ДоговорКонтрагента.ТипЦен, ЗНАЧЕНИЕ(Справочник.ТипыЦенНоменклатуры.ПустаяСсылка)) КАК ТипЦен,
		|	ЕСТЬNULL(ТипЦенДоговор.ЦенаВключаетНДС, ВЫРАЗИТЬ(ТаблЧастьDR_ИнфоПоля.Значение КАК БУЛЕВО)) КАК СуммаВключаетНДС,		
		|	ВТ_DRДокумент.ЗаказНомер КАК НомерВходящегоДокумента,
		|	ВТ_DRДокумент.ЗаказДата КАК ДатаВходящегоДокумента,
		|	ВТ_DRДокумент.POSITION КАК POSITION
		|ИЗ
		|	ВТ_DRДокумент КАК ВТ_DRДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипЦенДоговор
		|		ПО ВТ_DRДокумент.ДоговорКонтрагента = ТипЦенДоговор.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN
		|		ПО ВТ_DRДокумент.Контрагент = DR_GLN.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК DR_ТочкиДоставки
		|		ПО ВТ_DRДокумент.ДоговорКонтрагента = DR_ТочкиДоставки.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки КАК DR_ИнфоПоля
		|		ПО (DR_ИнфоПоля.ВидНастройки = ""ИнфоПоля"")
		|			И (DR_GLN.Контрагент_ФорматЭСФ = DR_ИнфоПоля.Наименование)
		|			И (НЕ DR_ИнфоПоля.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ТаблЧастьDR_ИнфоПоля
		|		ПО (DR_ИнфоПоля.Ссылка = ТаблЧастьDR_ИнфоПоля.Ссылка)
		|			И (ТаблЧастьDR_ИнфоПоля.Реквизит = ""СхемаПодсчета"")";
		
		Запрос.УстановитьПараметр("Источник", Выборка.Источник);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		//&lt;Получение данных элемента POSITION&gt;
		POSITION = РезультатЗапроса[0].POSITION;
		
		ЗначениеИзХранилища = ?(POSITION &lt;&gt; Неопределено, POSITION.Получить(), "");
		
		МассивСтруктурPOSITION = ?(ЗначениеЗаполнено(ЗначениеИзХранилища), ЗначениеИзХранилища, Неопределено);
		
		Если МассивСтруктурPOSITION = Неопределено Тогда
			
			ТекстЛогаСобытий = НСтр("ru = 'Счет покупателя по документу %ORDER% не создан, т.к. отсутствует либо элемент POSITION либо его значения.'", 
								ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
								
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Строка(РезультатЗапроса[0].Ссылка));
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
		КвалификаторЧисло = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		
		ТаблицаPOSITION = Новый ТаблицаЗначений;
		ТаблицаPOSITION.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаPOSITION.Колонки.Добавить("ORDEREDQUANTITY"	, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));  
		ТаблицаPOSITION.Колонки.Добавить("ORDERPRICE"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
		ТаблицаPOSITION.Колонки.Добавить("PRICEWITHVAT"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
		ТаблицаPOSITION.Колонки.Добавить("VAT"				, Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
		
		Для каждого ЭлСтруктура Из МассивСтруктурPOSITION Цикл
			НоваяСтрока = ТаблицаPOSITION.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлСтруктура);
		КонецЦикла;
		
		// Получение данных табличной части Товары.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&amp;Источник КАК Ссылка,
		|	POSITION.Номенклатура КАК Номенклатура,
		|	POSITION.ORDEREDQUANTITY КАК Количество,
		|	POSITION.ORDERPRICE КАК Цена,
		|	POSITION.PRICEWITHVAT КАК ЦенаСНДС,
		|	POSITION.VAT КАК СтавкаНДС
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&amp;POSITION КАК POSITION
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.Номенклатура КАК Номенклатура,
		|	СУММА(ВТ.Количество) КАК Количество,
		|	ВТ.Цена КАК ЦенаOrder,
		|	ВТ.СтавкаНДС КАК СтавкаНДСOrder,
		|	ВТ.ЦенаСНДС КАК ЦенаСНДСOrder
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Ссылка,
		|	ВТ.Номенклатура,
		|	ВТ.Цена,
		|	ВТ.СтавкаНДС,
		|	ВТ.ЦенаСНДС";
		
		Запрос.УстановитьПараметр("POSITION", ТаблицаPOSITION);
		Запрос.УстановитьПараметр("Источник", Выборка.Источник);
		
		РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();
		
		ТаблицаОстатки = Новый ТаблицаЗначений;
		
		Если РазделятьЗаказы Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&amp;Источник КАК Ссылка,
			|	&amp;ИдентификаторЦепочки КАК ИдентификаторЦепочки,
			|	&amp;Идентификатор КАК Идентификатор
			|ПОМЕСТИТЬ ВТ_ДРСсылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДРСсылка.Ссылка КАК Ссылка,
			|	Заказ_События.Документ КАК ДокументСвязанный
			|ПОМЕСТИТЬ ДокументыСвязанные
			|ИЗ
			|	ВТ_ДРСсылка КАК ВТ_ДРСсылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
			|		ПО ВТ_ДРСсылка.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
			|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	DR_Документы_Товары.Ссылка КАК ДокументИсточник,
			|	DR_Документы_Товары.Количество КАК Количество,
			|	DR_Документы_Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТоварыOrder
			|ИЗ
			|	&amp;РезультатЗапросаТЧТовары КАК DR_Документы_Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыСвязанные.Ссылка КАК ДокументИсточник,
			|	СчетНаОплатуПокупателюТовары.Номенклатура КАК Номенклатура,
			|	СУММА(СчетНаОплатуПокупателюТовары.Количество) КАК Количество
			|ПОМЕСТИТЬ ТоварыЗаказы
			|ИЗ
			|	ДокументыСвязанные КАК ДокументыСвязанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
			|		ПО ДокументыСвязанные.ДокументСвязанный = СчетНаОплатуПокупателюТовары.Ссылка
			|ГДЕ
			|	СчетНаОплатуПокупателюТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	СчетНаОплатуПокупателюТовары.Номенклатура,
			|	ДокументыСвязанные.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыOrder.ДокументИсточник КАК ДокументИсточник,
			|	ТоварыOrder.Номенклатура КАК Номенклатура,
			|	ТоварыOrder.Количество - ЕСТЬNULL(ТоварыЗаказы.Количество, 0) КАК КоличествоОстаток
			|ИЗ
			|	ТоварыOrder КАК ТоварыOrder
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказы КАК ТоварыЗаказы
			|		ПО ТоварыOrder.Номенклатура = ТоварыЗаказы.Номенклатура
			|			И ТоварыOrder.ДокументИсточник = ТоварыЗаказы.ДокументИсточник";
			
			Запрос.УстановитьПараметр("Источник"					, Выборка.Источник);
			Запрос.УстановитьПараметр("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
			Запрос.УстановитьПараметр("Идентификатор"				, Выборка.Идентификатор);
			Запрос.УстановитьПараметр("РезультатЗапросаТЧТовары"	, РезультатЗапросаТЧТовары.Скопировать(,"Ссылка, Количество, Номенклатура"));
			
			ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Для каждого Запись Из РезультатЗапроса Цикл		
			
			Если ЗначениеЗаполнено(Выборка.ДокументСчетПокупателя1С) И (НЕ РазделятьЗаказы И ПерезаписыватьЗаказ) Тогда
				
				// Проверка заполненности Заказа в текущей цепочке, если заполнена - выполняется перезапись объекта
				Приемник = Выборка.ДокументСчетПокупателя1С.ПолучитьОбъект();
				Приемник.Товары.Очистить();
				
				ОперацияЗапись = Истина;
				
			КонецЕсли;
			
			ДатаЗаказа = ?(ЗагружатьТекущейДатой, ТекущаяДата(), Запись.ДатаВходящегоДокумента);
			Приемник.Дата = ДатаЗаказа;		
			
			// Заполнение реквизитов из запроса.
			ЗаполнитьЗначенияСвойств(Приемник, Запись);
			
			РеквизитыДокумента = Документы[ТипПриемника].ПустаяСсылка().Реквизиты;
			
			Если РеквизитыДокумента.Найти("ВидОперации") &lt;&gt; Неопределено Тогда
				Приемник["ВидОперации"] = Вычислить("Перечисления.ВидыОперацийСчетаПокупателю.ТоварыИУслуги");
			КонецЕсли;
			
			Приемник.КурсВзаиморасчетов      = 1;
			Приемник.КратностьВзаиморасчетов = 1;			
			Приемник.ОрганизацияПолучатель   = Приемник.Организация;
			Приемник.Ответственный           = ПользователиКлиентСервер.ТекущийПользователь();
			Приемник.Комментарий             = "Заказ №" + Запись.НомерВходящегоДокумента + " от " + Формат(Запись.ДатаВходящегоДокумента, "ДЛФ=Д");
			Приемник.СтруктурнаяЕдиница  	 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приемник.Организация, "ОсновнойБанковскийСчет");	
			Приемник.Склад 					 = Справочники.Склады.ПолучитьСкладПоУмолчанию();
			
			Если Не (Приемник.ДоговорКонтрагента.Владелец = Приемник.Контрагент И Приемник.ДоговорКонтрагента.Организация = Приемник.Организация) Тогда
				
				ТекстЛогаСобытий = "Счет покупателя не создан. Владелец договора отличается от контрагента или не относится к организации в "
								 + "ORDER №" + Запись.НомерВходящегоДокумента + " от " + Формат(Запись.ДатаВходящегоДокумента, "ДЛФ=Д"); 
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);					
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
			Если РазделятьЗаказы Тогда
				
				Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
					
					КоличествоОстаток = СтрокаОстатки.КоличествоОстаток;
					
					ПараметрыОтбора = Новый Структура("Ссылка, Номенклатура", СтрокаОстатки.ДокументИсточник, СтрокаОстатки.Номенклатура);
					НайденныеСтроки = РезультатЗапросаТЧТовары.НайтиСтроки(ПараметрыОтбора);
					
					Для Каждого Строка Из НайденныеСтроки Цикл
						Строка.Количество = Мин(КоличествоОстаток, Строка.Количество);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Запись.ИспользоватьЦеныИз1С И ЗначениеЗаполнено(Запись.ТипЦен) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
				|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
				|	ЦеныНоменклатурыСрезПоследних.ТипЦен КАК ТипЦен
				|ПОМЕСТИТЬ ЦеныНоменклатуры
				|ИЗ
				|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|			&amp;Период,
				|			ТипЦен = &amp;ТипЦен
				|				И Номенклатура В (&amp;МассивНоменклатуры)) КАК ЦеныНоменклатурыСрезПоследних
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Товары.Ссылка КАК Ссылка,
				|	Товары.Номенклатура КАК Номенклатура,
				|	Товары.Количество КАК Количество,
				|	Товары.СтавкаНДСOrder КАК СтавкаНДСOrder,
				|	Товары.ЦенаOrder КАК ЦенаOrder,
				|	Товары.ЦенаСНДСOrder КАК ЦенаСНДСOrder
				|ПОМЕСТИТЬ ВТ_Товары
				|ИЗ
				|	&amp;Товары КАК Товары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_Товары.Номенклатура КАК Номенклатура,
				|	ВТ_Товары.Количество КАК Количество,
				|	ВТ_Товары.СтавкаНДСOrder КАК СтавкаНДСOrder,
				|	ВТ_Товары.ЦенаOrder КАК ЦенаOrder,
				|	ВТ_Товары.ЦенаСНДСOrder КАК ЦенаСНДСOrder,
				|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК ЦенаИз1С,
				|	ЕСТЬNULL(ТипыЦенНоменклатуры.ЦенаВключаетНДС, ЛОЖЬ) КАК ЦенаВключаетНДС
				|ИЗ
				|	ВТ_Товары КАК ВТ_Товары
				|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
				|		ПО (ЦеныНоменклатуры.Номенклатура = ВТ_Товары.Номенклатура)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
				|		ПО ЦеныНоменклатуры.ТипЦен = ТипыЦенНоменклатуры.Ссылка";
				
				Запрос.УстановитьПараметр("Период"				, 	Приемник.Дата);
				Запрос.УстановитьПараметр("ТипЦен"				,	Запись.ТипЦен);
				Запрос.УстановитьПараметр("МассивНоменклатуры"	,	РезультатЗапросаТЧТовары.Скопировать(,"Номенклатура"));
				Запрос.УстановитьПараметр("Товары"				,	РезультатЗапросаТЧТовары);
				
				РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();
				
			ИначеЕсли Запись.ИспользоватьЦеныИз1С И НЕ ЗначениеЗаполнено(Запись.ТипЦен) Тогда
				
				Причина = "Заполните тип цен в Договоре %Договор% или отключите в настройках соответствия интеграционного решения ""Docrobot"" опцию ""Цены из базы 1С"" по контрагенту %Контрагент%.";
				
				ТекстЛогаСобытий = "Счет покупателя не создан! В Договоре %Договор% не заполнен Тип цен. %Причина%";				
				
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Причина%"	, Причина);
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Договор%"	, Строка(Запись.ДоговорКонтрагента));
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Контрагент%"	, Строка(Запись.Контрагент));
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);					
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;				
			КонецЕсли;
			
			Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл
				
				НоваяСтрока = Приемник.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.СтавкаНДС    = СтавкаНДССсылка(Строка.СтавкаНДСOrder);
				
				Цена = 0;
				
				Если Запись.ИспользоватьЦеныИз1С И Строка.ЦенаИз1С &lt;&gt; 0 Тогда
					
					Если Приемник.СуммаВключаетНДС И Строка.ЦенаВключаетНДС Тогда
						Цена = Строка.ЦенаИз1С;
					ИначеЕсли НЕ Приемник.СуммаВключаетНДС И НЕ Строка.ЦенаВключаетНДС Тогда
						Цена = Строка.ЦенаИз1С;
					ИначеЕсли Приемник.СуммаВключаетНДС И НЕ Строка.ЦенаВключаетНДС Тогда
						Цена  = Окр((Строка.ЦенаИз1С * (100 + Строка.СтавкаНДСOrder)) / 100 , 4);
					ИначеЕсли НЕ Приемник.СуммаВключаетНДС И Строка.ЦенаВключаетНДС Тогда
						Цена = Окр((Строка.Цена * 100) / (100 + Строка.СтавкаНДСOrder) , 4);
					КонецЕсли;
					
				Иначе
					
					Если Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДСOrder) Тогда
						Цена = Строка.ЦенаСНДСOrder;
					ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаOrder) Тогда
						Цена = Строка.ЦенаOrder;
					ИначеЕсли Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
						Цена  = Окр((Строка.ЦенаOrder * (100 + Строка.СтавкаНДСOrder)) / 100 , 4);
					ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДСOrder) Тогда
						Цена = Окр((Строка.ЦенаСНДСOrder * 100) / (100 + Строка.СтавкаНДСOrder) , 4);
					КонецЕсли;			
					
				КонецЕсли;
				
				НоваяСтрока.Цена = Цена;
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(НоваяСтрока, 0);
				
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(НоваяСтрока, Приемник.СуммаВключаетНДС);			
				
			КонецЦикла;	
			
			ПоследнийИндекс = Приемник.Товары.Количество() - 1;
			
			Для Счетчик = 0 По ПоследнийИндекс Цикл
				
				Индекс = ПоследнийИндекс - Счетчик;
				
				Если Приемник.Товары[Индекс].Количество = 0 Тогда
					Приемник.Товары.Удалить(Индекс);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Приемник.Товары.Количество() = 0 Тогда
				
				ТекстЛогаСобытий = "Документ Счет покупателя по документу " + Строка(Запись.Ссылка) +
									" не создан, т.к. не заполнены товары. Возможно по ORDER уже созданы другие ""Счета на оплату"" на все заказанное количество.";
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
			ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
			
			Если ОшибокНеОбнаружено Тогда
				
				НачатьТранзакцию();
				
				Попытка
					
					Если НЕ ОперацияЗапись Тогда
						ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
						Идентификатор = ДокументСсылка.УникальныйИдентификатор();	
						Приемник.УстановитьСсылкуНового(ДокументСсылка);
					Иначе
						ДокументСсылка = Приемник.Ссылка;
						Идентификатор = Приемник.Ссылка.УникальныйИдентификатор();		
					КонецЕсли;
					
					ВидДокументаПриемник = "Заказ_Входящий";
					
					СтруктураРегистраDR_События = Новый Структура;
					СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
					СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);
					СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
					СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
					СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
					СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
					
					НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
					НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
					НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
					НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
					НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
					НЗ_DRСобытия.Прочитать();
					
					Если НЗ_DRСобытия.Количество() = 0 Тогда
						НоваяЗапись = НЗ_DRСобытия.Добавить();
					Иначе
						НоваяЗапись = НЗ_DRСобытия[0];
					КонецЕсли;
					
					Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
						НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
					КонецЦикла;
					
					НЗ_DRСобытия.Записать();
					
					Приемник.Записать(?(ПроводитьЗаказ, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ТекстЛогаСобытий = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" 
									 + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
									 
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%"	, ?(ПроводитьЗаказ, "проведения", "записи"));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлНомер%"				, Запись.НомерВходящегоДокумента);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлДата%"				, Формат(Запись.ДатаВходящегоДокумента, "ДФ=dd.MM.yyyy"));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецПопытки;
				
				Если РазделятьЗаказы И ЗначениеЗаполнено(Выборка.ДокументСчетПокупателя1С) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% разделена цепочка. Создан новый документ %Счет%. '", 
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
										
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%"	, Строка(Выборка.Источник));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Счет%"	, Строка(Приемник.Ссылка));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				ИначеЕсли ПерезаписыватьЗаказ И ЗначениеЗаполнено(Выборка.ДокументСчетПокупателя1С) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% перезаписан уже существующий документ %Счет%. '", 
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
										
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%"	, Строка(Выборка.Источник));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Счет%"	, Строка(Выборка.ДокументСчетПокупателя1С));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				КонецЕсли;
			
			Иначе
	
				МассивСообщенийПользователю = ПолучитьСообщенияПользователю();
						
				Для каждого Элемент Из МассивСообщенийПользователю Цикл
						
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(Элемент.Текст, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);	
						
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЦикла;	
	Иначе
		
		Если ЗапрещеноИзменениеЗаказа Тогда
			
			ТекстЛогаСобытий = "По документу " + Строка(Выборка.ДокументСчетПокупателя1С) + " создана реализация " 
							 + Строка(Выборка.ДокументРеализации) + ". Изменение документа запрещено.";
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// служебные операции
	Если Не Приемник = Неопределено И ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;    
		
КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокOrderВходящиеПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Создать заказ клиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>СоздатьЗаказКлиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string">ТекстЗапроса = "ВЫБРАТЬ
				|	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
				|	DR_События.Документ КАК Документ,
				|	DR_События.Идентификатор КАК Идентификатор
				|ПОМЕСТИТЬ ВТ_ORDER
				|ИЗ
				|	РегистрСведений.DR_События КАК DR_События
				|ГДЕ
				|	DR_События.ВидДокумента = ""ORDER_Входящий""
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
				|	DR_События.ИдентификаторОснования КАК ИдентификаторОснования,
				|	DR_События.Документ КАК Документ,
				|	МАКСИМУМ(DR_События.ДатаЗаписи) КАК ДатаЗаписи
				|ПОМЕСТИТЬ ВТ_ЗАКАЗ
				|ИЗ
				|	РегистрСведений.DR_События КАК DR_События
				|ГДЕ
				|	DR_События.ВидДокумента = ""Заказ_Входящий""
				|
				|СГРУППИРОВАТЬ ПО
				|	DR_События.ИдентификаторЦепочки,
				|	DR_События.ИдентификаторОснования,
				|	DR_События.Документ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ ПЕРВЫЕ 2
				|	ВТ_ORDER.Документ КАК Документ,
				|	ВТ_ORDER.ИдентификаторЦепочки КАК ИдентификаторЦепочки
				|ИЗ
				|	ВТ_ORDER КАК ВТ_ORDER
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗАКАЗ КАК ВТ_ЗАКАЗ
				|		ПО ВТ_ORDER.ИдентификаторЦепочки = ВТ_ЗАКАЗ.ИдентификаторЦепочки
				|			И ВТ_ORDER.Идентификатор = ВТ_ЗАКАЗ.ИдентификаторОснования
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
				|		ПО ВТ_ORDER.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки
				|ГДЕ
				|	ВТ_ЗАКАЗ.ИдентификаторЦепочки ЕСТЬ NULL
				|
				|УПОРЯДОЧИТЬ ПО
				|	DR_ЦепочкиДокументов.ДатаЗаказа УБЫВ";</value>
				<presentation>ТекстЗапроса</presentation>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
		<Value xsi:type="xs:string">СоздатьЗаказКлиента</Value>
	</row>
</ValueTree>