<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать возврат от покупателя</Value>
		<Value xsi:type="xs:string">RETANN_Входящий</Value>
		<Value xsi:type="xs:string">RETANN_Входящий</Value>
		<Value xsi:type="xs:string">ВозвратнаяНакладная_Входящая</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">	ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать возврат от клиента &gt;&gt;&gt;";
	ИмяДокументаПрименика = "Возврат товаров от клиента 1С";
	// служебные переменные гибких настроек ++
	ТипПриемника   = "ВозвратТоваровОтКлиента";
	ОперацияЗапись = Ложь;
	ЛогСобытий	   = ""; 
	// служебные переменные гибких настроек -- 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВыбранныеЗаписи.Документ КАК Документ,
	|	ВыбранныеЗаписи.ИдентификаторОснования КАК ИдентификаторОснования
	|ПОМЕСТИТЬ ВыбранныеЗаписи
	|ИЗ
	|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеЗаписи.Документ КАК Источник,
	|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки
	|ИЗ
	|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеЗаписи.Документ КАК Источник,
	|	RECADV_Товары.Номенклатура КАК Номенклатура,
	|	RECADV_Товары.КоличествоПринятое КАК Колжичество,
	|	RECADV_Товары.КоличествоПринятое КАК КоличествоУпаковок,
	|	RECADV_Товары.Цена КАК Цена,
	|	RECADV_Товары.Сумма КАК Сумма,
	|	RECADV_Товары.СуммаНДС КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА RECADV_Товары.СтавкаНДС = 10
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|		КОГДА RECADV_Товары.СтавкаНДС = 18
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|		КОГДА RECADV_Товары.СтавкаНДС = 20
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	RECADV_Товары.ЕдиницаИзмерения КАК Упаковка,
	|	RECADV_Товары.Сумма_с_НДС КАК СуммаСНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимости.ИзДокументаПродажи) КАК СпособОпределенияСебестоимости,
	|	Накладная_События.Документ КАК Накладная
	|ИЗ
	|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭКОМ_Документы.ТЧ_Товары КАК RECADV_Товары
	|		ПО ВыбранныеЗаписи.Документ = RECADV_Товары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Накладная_События
	|		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Накладная_События.ИдентификаторЦепочки
	|			И (Накладная_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Накладная_Исходящая))
	|			И ВыбранныеЗаписи.ИдентификаторОснования = Накладная_События.Идентификатор
	|ГДЕ
	|	НЕ Накладная_События.ИдентификаторЦепочки ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаRETANN = РезультатЗапроса[1].Выгрузить();
	ТаблицаТовары = РезультатЗапроса[2].Выгрузить();
	
	Для Каждого Запись Из ТаблицаRETANN Цикл
		
		ТоварыRETANN = ТаблицаТовары.Скопировать(Новый Структура("Источник", Запись.Источник));
		Если ТоварыRETANN.Количество() Тогда
			
			Приемник = Документы[ТипПриемника].СоздатьДокумент();
			
			Приемник.Заполнить(ТоварыRETANN[0].Накладная);
			Приемник.Дата = ТекущаяДата();
			
			Приемник.Товары.Очистить();    
			Приемник.Товары.Загрузить(ТоварыRETANN);			
		КонецЕсли;
		
		// Запись документа
		Если Приемник.Товары.Количество() = 0 Тогда
			ТекстЛогаСобытий = "Документ " + ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) +
			" не создан, т.к. не удалось заполнить табличную часть товары";
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
		Иначе    
			Попытка
				Приемник.Записать(РежимЗаписиДокумента.Запись);
				
				ВидДокументаПриемник = Перечисления.ЭКОМ_ВидыДокументов.ВозвратнаяНакладная_Входящая;	
				
				СтруктураРегистраDR_События = Новый Структура;
				СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Запись.ИдентификаторЦепочки);
				СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);
				СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
				СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
				СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Запись.Источник.УникальныйИдентификатор());
				СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
				ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);
			Исключение               	       
				ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) + " не создан!!! " + СокрЛП(ОписаниеОшибки()); 
				ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
			КонецПопытки;
		КонецЕсли;
		
		// служебные операции ++  
		Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
			КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЛогСобытий) Тогда
			ТекстЛогаСобытий = ЛогСобытий;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
		КонецЕсли;  
		// служебные операции --
	КонецЦикла;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать возврат от покупателя</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>