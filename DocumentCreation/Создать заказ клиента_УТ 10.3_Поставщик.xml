<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ клиента</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">	ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать заказ клиента &gt;&gt;&gt;";
	
	КвалификаторСтрок = Новый КвалификаторыСтроки(36);
	
	ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
	ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"				, Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
	ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"	, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
	ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
	
	Для Каждого Элемент Из ВыбранныеСтроки Цикл
		Элемент.Вставить("Идентификатор", Элемент.Документ.ИдентификаторДокумента);
		НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	КонецЦикла;			
	
	ВызовВходящимORDER 	= ?(ВызовВходящимORDER = Неопределено, Ложь, ВызовВходящимORDER);
	АвтоЗаказ 			= ?(АвтоЗаказ = Неопределено, Ложь, АвтоЗаказ);
	ПерезаписыватьЗаказ	= ?(ВызовВходящимORDER = Истина, ПерезаписыватьЗаказ, Настройка_Параметр_Прочитать("ПерезаписыватьЗаказПриЗагрузкеORDER", Ложь));
	РазделятьЗаказы 	= ?(ВызовВходящимORDER = Истина, Ложь, Настройка_Параметр_Прочитать("ЭКОМ_РазделятьЗаказы", Ложь));
	
	// служебные переменные гибких настроек ++
	ТипПриемника   	= "ЗаказПокупателя";
	ОперацияЗапись 	= Ложь;
	ЛогСобытий 		= ""; 
	// служебные переменные гибких настроек --
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыбранныеЗаписи.Документ КАК Документ,
	|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ТЗ_ВыбранныеЗаписи
	|ИЗ
	|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ_ВыбранныеЗаписи.Документ КАК Документ,
	|	ТЗ_ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ТЗ_ВыбранныеЗаписи.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_Отбор
	|ИЗ
	|	ТЗ_ВыбранныеЗаписи КАК ТЗ_ВыбранныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
	|		ПО ТЗ_ВыбранныеЗаписи.Документ = DR_Документ.Ссылка
	|ГДЕ
	|	DR_Документ.Статус = ""Обработан""
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Отбор.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВТ_Отбор.Документ КАК Источник,
	|	ВТ_Отбор.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(ЕСТЬNULL(Заказ_События.Документ, ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ДокументЗаказа1С,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Заказ_События.Документ ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.ЗаказПокупателя).Проведен
	|		КОНЕЦ) КАК ЗаказПроведен,
	|	МАКСИМУМ(ЕСТЬNULL(Реализация_События.Документ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))) КАК ДокументРеализации
	|ИЗ
	|	ВТ_Отбор КАК ВТ_Отбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
	|		ПО ВТ_Отбор.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
	|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Реализация_События
	|		ПО ВТ_Отбор.ИдентификаторЦепочки = Реализация_События.ИдентификаторЦепочки
	|			И (Реализация_События.ВидДокумента = ""Накладная_Исходящая"")
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Отбор.Документ,
	|	ВТ_Отбор.ИдентификаторЦепочки,
	|	ВТ_Отбор.Идентификатор";
	
	Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);     	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		
		ЗапрещеноИзменениеЗаказа = Ложь;
		
		//&lt;Проверка необходимоти создания или перезаписи созданного Заказа 1С&gt;	
		Если РазделятьЗаказы И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И Выборка.ЗаказПроведен И ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
			ЗапрещеноИзменениеЗаказа = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И (НЕ АвтоЗаказ И ВызовВходящимORDER) Тогда		
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И (НЕ ПерезаписыватьЗаказ И ВызовВходящимORDER) Тогда
			
			ТекстЛогаСобытий = НСтр("ru = 'Автоматическая перезапись созданного %ЗаказПокупателя% не выполнена. По причине отключенной настройки ""Перезаписывать заказ"".'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказПокупателя%", Строка(Выборка.ДокументЗаказа1С));
				
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
				 
		Если НЕ ЗапрещеноИзменениеЗаказа Тогда
			
											 
			Приемник = Документы[ТипПриемника].СоздатьДокумент();
			
			// Получение общих для всех документов значений.
			Если КэшированныеЗначения 	= Неопределено Тогда
				КэшированныеЗначения 	= Новый Структура;
			КонецЕсли;
			
			ПроводитьЗаказ 				= Неопределено;
			Если НЕ КэшированныеЗначения.Свойство("ПроводитьЗаказ", ПроводитьЗаказ) Тогда
				ПроводитьЗаказ 			= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументЗаказ1СПроведенным");
				КэшированныеЗначения.Вставить("ПроводитьЗаказ", ПроводитьЗаказ);
			КонецЕсли;
			
			ЗагружатьТекущейДатой 		= Неопределено;
			Если НЕ КэшированныеЗначения.Свойство("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой) Тогда
				ЗагружатьТекущейДатой 	= Настройка_Параметр_Прочитать("ЭКОМ_ЗаказыЗагружатьТекущейДатой");
				КэшированныеЗначения.Вставить("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой);
			КонецЕсли;
			
			глТекущийПользователь = Неопределено;
			Если НЕ КэшированныеЗначения.Свойство("глТекущийПользователь", глТекущийПользователь) Тогда
				глТекущийПользователь 	= глЗначениеПеременной("глТекущийПользователь");
				КэшированныеЗначения.Вставить("глТекущийПользователь", глТекущийПользователь);
			КонецЕсли;
			
			мВалютаРегламентированногоУчета = Неопределено;
			Если НЕ КэшированныеЗначения.Свойство("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета) Тогда
				мВалютаРегламентированногоУчета 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
				КэшированныеЗначения.Вставить("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
			КонецЕсли;
			
			ОсновнойСклад = Неопределено;
			Если НЕ КэшированныеЗначения.Свойство("ОсновнойСклад", ОсновнойСклад) Тогда
				ОсновнойСклад	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
				КэшированныеЗначения.Вставить("ОсновнойСклад", ОсновнойСклад);
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Истина);
			
			// Основной запрос для заполнения шапки документа.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&amp;Источник КАК Ссылка
			|ПОМЕСТИТЬ ВТ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.Ссылка КАК Ссылка,
			|	ВЫРАЗИТЬ(ДР_Грузополучатель.Значение КАК Справочник.Контрагенты) КАК ТочкаДоставки,
			|	ВЫРАЗИТЬ(ДР_Контрагент.Значение КАК Справочник.Контрагенты) КАК Контрагент,
			|	ВЫРАЗИТЬ(ДР_Организация.Значение КАК Справочник.Организации) КАК Организация,
			|	ВЫРАЗИТЬ(ДР_ЗаказНомер.Значение КАК СТРОКА(35)) КАК ЗаказНомер,
			|	ВЫРАЗИТЬ(ДР_ЗаказДата.Значение КАК ДАТА) ЗаказДата,
			|	ВЫРАЗИТЬ(ДР_ДатаПоставки.Значение КАК ДАТА) КАК ДатаПоставки,
			|	ЕСТЬNULL(ДР_POSITION.ХранилищеЗначения, Неопределено) КАК POSITION
			|ПОМЕСТИТЬ ВТ_DRДокумент
			|ИЗ
			|	ВТ КАК ВТ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Контрагент
			|		ПО ВТ.Ссылка = ДР_Контрагент.Ссылка
			|			И (ДР_Контрагент.Реквизит = ""Контрагент"")
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Грузополучатель
			|		ПО ВТ.Ссылка = ДР_Грузополучатель.Ссылка
			|			И (ДР_Грузополучатель.Реквизит = ""ТочкаДоставки"")
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Организация
			|		ПО ВТ.Ссылка = ДР_Организация.Ссылка
			|			И (ДР_Организация.Реквизит = ""Организация"")
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказНомер
			|		ПО ВТ.Ссылка = ДР_ЗаказНомер.Ссылка
			|			И (ДР_ЗаказНомер.Реквизит = ""NUMBER"")
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказДата
			|		ПО ВТ.Ссылка = ДР_ЗаказДата.Ссылка
			|			И (ДР_ЗаказДата.Реквизит = ""ДатаЭлектронногоДокумента"")
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаПоставки
			|		ПО ВТ.Ссылка = ДР_ДатаПоставки.Ссылка
			|			И (ДР_ДатаПоставки.Реквизит = ""ДатаПоставки"")
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_POSITION
			|		ПО ВТ.Ссылка = ДР_POSITION.Ссылка
			|			И (ДР_POSITION.Реквизит = ""POSITION"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление КАК АдресДоставки,
			|	ВТ_DRДокумент.Ссылка КАК Ссылка,
			|	ВТ_DRДокумент.ТочкаДоставки КАК Грузополучатель,
			|	ВТ_DRДокумент.Контрагент КАК Контрагент,
			|	ВТ_DRДокумент.Контрагент.ОсновноеКонтактноеЛицо КАК ОсновноеКонтактноеЛицо,
			|	ВТ_DRДокумент.Организация КАК Организация,
			|	ЕСТЬNULL(DR_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ЦеныИз1С,
			|	ВТ_DRДокумент.ЗаказНомер КАК НомерВходящегоДокументаЭлектронногоОбмена,
			|	ВТ_DRДокумент.ЗаказДата КАК ДатаВходящегоДокументаЭлектронногоОбмена,
			|	ВТ_DRДокумент.ДатаПоставки КАК ДатаОтгрузки, 
			|	ВТ_DRДокумент.POSITION КАК POSITION
			|ИЗ
			|	ВТ_DRДокумент КАК ВТ_DRДокумент
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN
			|		ПО ВТ_DRДокумент.Контрагент = DR_GLN.Объект 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|		ПО ВТ_DRДокумент.ТочкаДоставки = КонтактнаяИнформация.Объект
			|			И (КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
			|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента))";
			
			Запрос.УстановитьПараметр("Источник", Выборка.Источник);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			//&lt;Получение данных элемента POSITION&gt;
			POSITION = РезультатЗапроса[0].POSITION;
			
			ЗначениеИзХранилища = ?(POSITION &lt;&gt; Неопределено, POSITION.Получить(), "");
			
			МассивСтруктурPOSITION = ?(ЗначениеЗаполнено(ЗначениеИзХранилища), ЗначениеИзХранилища, Неопределено);
			
			Если МассивСтруктурPOSITION = Неопределено Тогда
				
				ТекстЛогаСобытий = НСтр("ru = 'Заказ покупателя по документу %ORDER% не создан, т.к. отсутствует либо элемент POSITION либо его значения.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Строка(РезультатЗапроса[0].Ссылка));
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
			КвалификаторЧисло = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
			
			ТаблицаPOSITION = Новый ТаблицаЗначений;
			ТаблицаPOSITION.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаPOSITION.Колонки.Добавить("ORDEREDQUANTITY"	, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));  
			ТаблицаPOSITION.Колонки.Добавить("ORDERPRICE"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
			ТаблицаPOSITION.Колонки.Добавить("PRICEWITHVAT"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
			ТаблицаPOSITION.Колонки.Добавить("VAT"				, Новый ОписаниеТипов("Число",,,,Новый КвалификаторыЧисла(10)));
			ТаблицаPOSITION.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
			
			//Результат полученных данных POSITION помещаем в таблицу значений
			Для каждого ЭлСтруктура Из МассивСтруктурPOSITION Цикл
				НоваяСтрока = ТаблицаPOSITION.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлСтруктура);
			КонецЦикла;
			
			//Полученную таблицу значений прогоняем через запрос,
			//с целью изминения имен и добавления новых полей 
			//для последующей обработки табличной части создаваемого Заказа
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&amp;Источник КАК Ссылка,
			|	ВЫРАЗИТЬ(POSITION.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	POSITION.ORDEREDQUANTITY КАК Количество,
			|	POSITION.ORDERPRICE КАК Цена,
			|	POSITION.PRICEWITHVAT КАК ЦенаСНДС,
			|	POSITION.VAT КАК СтавкаНДС,
			|	ВЫРАЗИТЬ(POSITION.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	&amp;POSITION КАК POSITION
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.Ссылка КАК Ссылка,
			|	ВТ.Номенклатура КАК Номенклатура,
			|	СУММА(ВТ.Количество) КАК Количество,
			|	ВТ.Цена КАК Цена,
			|	ВТ.ЦенаСНДС КАК ЦенаСНДС,
			|	ВТ.СтавкаНДС КАК ORDERСтавкаНДС,
			|	ВТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	ЛОЖЬ КАК Отменено,
			|	ВТ.ЕдиницаИзмерения.Коэффициент КАК Коэффициент,
			|	ВТ.Номенклатура.ВидНоменклатуры.ТипНоменклатуры КАК ТипНоменклатуры,
			|	ВТ.Номенклатура.СтавкаНДС КАК СтавкаНДСНоменклатура,
			|	ВТ.Номенклатура.Наименование КАК Содержание
			|ИЗ
			|	ВТ КАК ВТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ.Ссылка,
			|	ВТ.Номенклатура,
			|	ВТ.Цена,
			|	ВТ.ЦенаСНДС,
			|	ВТ.СтавкаНДС,
			|	ВТ.ЕдиницаИзмерения,
			|	ВТ.ЕдиницаИзмерения.Коэффициент,
			|	ВТ.Номенклатура.ВидНоменклатуры.ТипНоменклатуры,
			|	ВТ.Номенклатура.СтавкаНДС,
			|	ВТ.Номенклатура.Наименование";
			
			Запрос.УстановитьПараметр("POSITION"	, ТаблицаPOSITION);
			Запрос.УстановитьПараметр("Источник"	, Выборка.Источник);
			
			РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();
			
			ТаблицаОстатки = Новый ТаблицаЗначений;
			
			Если РазделятьЗаказы Тогда
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	&amp;Источник КАК Ссылка,
				|	&amp;ИдентификаторЦепочки КАК ИдентификаторЦепочки,
				|	&amp;Идентификатор КАК Идентификатор
				|ПОМЕСТИТЬ ВТ_ДРСсылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ДРСсылка.Ссылка КАК Ссылка,
				|	Заказ_События.Документ КАК ДокументСвязанный
				|ПОМЕСТИТЬ ДокументыСвязанные
				|ИЗ
				|	ВТ_ДРСсылка КАК ВТ_ДРСсылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
				|		ПО ВТ_ДРСсылка.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
				|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	DR_Документы_Товары.Ссылка КАК ДокументИсточник,
				|	DR_Документы_Товары.Количество КАК Количество,
				|	DR_Документы_Товары.Номенклатура КАК Номенклатура
				|ПОМЕСТИТЬ ТоварыOrder
				|ИЗ
				|	&amp;РезультатЗапросаТЧТовары КАК DR_Документы_Товары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДокументыСвязанные.Ссылка КАК ДокументИсточник,
				|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
				|	СУММА(ЗаказКлиентаТовары.Количество) КАК Количество
				|ПОМЕСТИТЬ ТоварыЗаказы
				|ИЗ
				|	ДокументыСвязанные КАК ДокументыСвязанные
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказКлиентаТовары
				|		ПО ДокументыСвязанные.ДокументСвязанный = ЗаказКлиентаТовары.Ссылка
				|ГДЕ
				|	ЗаказКлиентаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗаказКлиентаТовары.Номенклатура,
				|	ДокументыСвязанные.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТоварыOrder.ДокументИсточник КАК ДокументИсточник,
				|	ТоварыOrder.Номенклатура КАК Номенклатура,
				|	ТоварыOrder.Количество - ЕСТЬNULL(ТоварыЗаказы.Количество, 0) КАК КоличествоОстаток
				|ИЗ
				|	ТоварыOrder КАК ТоварыOrder
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказы КАК ТоварыЗаказы
				|		ПО ТоварыOrder.Номенклатура = ТоварыЗаказы.Номенклатура
				|			И ТоварыOrder.ДокументИсточник = ТоварыЗаказы.ДокументИсточник";
				
				Запрос.УстановитьПараметр("Источник"					, Выборка.Источник);
				Запрос.УстановитьПараметр("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
				Запрос.УстановитьПараметр("Идентификатор"				, Выборка.Идентификатор);
				Запрос.УстановитьПараметр("РезультатЗапросаТЧТовары"	, РезультатЗапросаТЧТовары.Скопировать(,"Ссылка, Количество, Номенклатура"));
				
				ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
				
			КонецЕсли;                                                      
			
			УстановитьПривилегированныйРежим(Ложь);
			                                  
			Для Каждого Запись Из РезультатЗапроса Цикл
				                                                     
				Если ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И (НЕ РазделятьЗаказы И ПерезаписыватьЗаказ) Тогда
					
					// Проверка заполненности Заказа в текущей цепочке, если заполнена - выполняется перезапись объекта
					Приемник = Выборка.ДокументЗаказа1С.ПолучитьОбъект();
					Приемник.Товары.Очистить();
					
					ОперацияЗапись = Истина;
												   
					
				КонецЕсли;
				
				// Заполнение шапки.
				ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Приемник, глТекущийПользователь, мВалютаРегламентированногоУчета, "Продажа");
				
				// Заполнение реквизитов из запроса.
				ЗаполнитьЗначенияСвойств(Приемник, Запись);
				
				// Выполняем общие действия для всех документов при изменении Контрагент.
				ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Приемник, Неопределено);
				
				// Укажем тип цены в случае отсутствия.
				Если НЕ ЗначениеЗаполнено(Приемник.ТипЦен) И ЗначениеЗаполнено(Приемник.ДоговорКонтрагента) Тогда
					Приемник.ТипЦен	= Приемник.ДоговорКонтрагента.ТипЦен;
					Приемник.СуммаВключаетНДС = Приемник.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Приемник.КонтактноеЛицоКонтрагента) Тогда
					Приемник.КонтактноеЛицоКонтрагента = Запись.ОсновноеКонтактноеЛицо;
				ИначеЕсли Приемник.КонтактноеЛицоКонтрагента.Владелец &lt;&gt; Приемник.Контрагент Тогда
					Приемник.КонтактноеЛицоКонтрагента = Запись.ОсновноеКонтактноеЛицо;
				КонецЕсли;
				
				ДатаЗаказа = ?(ЗагружатьТекущейДатой, ТекущаяДата(), Запись.ДатаВходящегоДокументаЭлектронногоОбмена);
				
				Приемник.Дата = ДатаЗаказа;
				Приемник.ДатаОтгрузки = ?(ЗначениеЗаполнено(Приемник.ДатаОтгрузки) И Приемник.ДатаОтгрузки &lt; НачалоДня(Приемник.Дата),
											НачалоДня(Приемник.Дата), Приемник.ДатаОтгрузки);
											
				Приемник.Ответственный 	= Пользователи.ТекущийПользователь();
				
				Приемник.Комментарий 	= ?(ЗначениеЗаполнено(Запись.НомерВходящегоДокументаЭлектронногоОбмена), "Заказ № " + Запись.НомерВходящегоДокументаЭлектронногоОбмена, "");
				Приемник.Комментарий 	= Приемник.Комментарий + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаВходящегоДокументаЭлектронногоОбмена), 
											" от " + Формат(Запись.ДатаВходящегоДокументаЭлектронногоОбмена, "ДФ=dd.MM.yyyy"), "");
				
				// Заполнение (перезаполнение) табличной части Товары(Услуги) Заказа.
				Приемник.Товары.Очистить();
				
				Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл
					
					Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
						
						СтрокаТабличнойЧасти = Приемник.Товары.Добавить();
						
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка, "Номенклатура, Количество, ЕдиницаИзмерения, Коэффициент");
						СтрокаТабличнойЧасти.Размещение = ОсновнойСклад;
						
					Иначе
						
						СтрокаТабличнойЧасти = Приемник.Услуги.Добавить();
						
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Строка, "Номенклатура, Количество, Содержание");
						
					КонецЕсли;
					
					// Заполнение данных строки.
					//ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник, "Реализация");
					
					Если Строка.ORDERСтавкаНДС &lt;&gt; 0 Тогда
						
						Если Строка.ORDERСтавкаНДС = 10 Тогда
							ЗначениеНалога = Перечисления.СтавкиНДС.НДС10;
						ИначеЕсли Строка.ORDERСтавкаНДС = 18 Тогда
							ЗначениеНалога = Перечисления.СтавкиНДС.НДС18;
						ИначеЕсли Строка.ORDERСтавкаНДС = 20 Тогда
							ЗначениеНалога = Перечисления.СтавкиНДС.НДС20;						
						КонецЕсли;
						
						СтрокаТабличнойЧасти.СтавкаНДС = ЗначениеНалога;
						
					Иначе
						
						СтрокаТабличнойЧасти.СтавкаНДС = Строка.СтавкаНДСНоменклатура;
						
					КонецЕсли;
					
					
					Если Запись.ЦеныИз1С Тогда
						ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, Приемник, мВалютаРегламентированногоУчета);
					Иначе
						
						Цена = 0;
						
						Если Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
							Цена = Строка.ЦенаСНДС;
						ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
							Цена = Строка.Цена;
						ИначеЕсли Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
							Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС))) / 100 , 4);
						ИначеЕсли НЕ Приемник.СуммаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
							Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(СтрокаТабличнойЧасти.СтавкаНДС)) , 4);
						КонецЕсли;
						
						СтрокаТабличнойЧасти.Цена = Цена;
						
					КонецЕсли;
					
					ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, Приемник);
					ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Приемник);
					
					// Рассчитываем плановую себестоимость.
					Если Строка.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
						ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, Приемник, мВалютаРегламентированногоУчета);
					КонецЕсли;
					
				КонецЦикла;
				
				Если РазделятьЗаказы Тогда
					
					// актуализация количества с учетом ранее созданных заказов клиента по данному ордеру
					ОстаткиПоОрдеру = ТаблицаОстатки.НайтиСтроки(Новый Структура("ДокументИсточник", Запись.Ссылка));
					
					Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
						
						КоличествоОстаток = СтрокаОстатки.КоличествоОстаток;
						
						ПараметрыОтбора = Новый Структура("Номенклатура");
						ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаОстатки);
						
						НайденныеСтроки = Приемник.Товары.НайтиСтроки(ПараметрыОтбора);
						
						Для Каждого Строка Из НайденныеСтроки Цикл
							
							Если КоличествоОстаток &lt;= 0 Тогда
								Приемник.Товары.Удалить(Строка);
							Иначе
								Строка.Количество = Мин(КоличествоОстаток, Строка.Количество);
								КоличествоОстаток = КоличествоОстаток - Строка.Количество;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ПоследнийИндекс = Приемник.Товары.Количество() - 1;
				
				Для Счетчик = 0 По ПоследнийИндекс Цикл
					
					Индекс = ПоследнийИндекс - Счетчик;
					
					Если Приемник.Товары[Индекс].Количество = 0 Тогда
						Приемник.Товары.Удалить(Индекс);
					КонецЕсли;
					
				КонецЦикла;
				
				Если Приемник.Товары.Количество() = 0 И Приемник.Услуги.Количество() = 0 Тогда  
					
					ТекстБлок1 = "Документ Заказ покупателя не создан, т.к. количество товарных позиций в табличной части ""Товары"" создаваемого документа равно 0.";
					ТекстБлок2 = "Возможно по %ORDER% уже созданы другие заказы на все заказанное количество.";
					
					ТекстЛогаСобытий = НСтр("ru = '%ТекстБлок1% %ТекстБлок2%'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ТекстБлок1%", ТекстБлок1);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ТекстБлок2%", ТекстБлок2);					
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Строка(Запись.Ссылка));		
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
					
					Продолжить;
				КонецЕсли;
				
                // Проверка и запись документов.
				НачатьТранзакцию();
				
				Попытка					
					
					Если НЕ ОперацияЗапись Тогда
						ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
						Идентификатор = ДокументСсылка.УникальныйИдентификатор();	
						Приемник.УстановитьСсылкуНового(ДокументСсылка);
					Иначе
						ДокументСсылка = Приемник.Ссылка;
						Идентификатор = Приемник.Ссылка.УникальныйИдентификатор();		
					КонецЕсли;
					
					ВидДокументаПриемник = "Заказ_Входящий";
					
					СтруктураРегистраDR_События = Новый Структура;
					СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
					СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);
					СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
					СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
					СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
					СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
					
					НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
					НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
					НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
					НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
					НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
					НЗ_DRСобытия.Прочитать();
					
					Если НЗ_DRСобытия.Количество() = 0 Тогда
						НоваяЗапись = НЗ_DRСобытия.Добавить();
					Иначе
						НоваяЗапись = НЗ_DRСобытия[0];
					КонецЕсли;
					
					Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
						НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
					КонецЦикла;
					
					НЗ_DRСобытия.Записать();
					
					Приемник.Записать(?(ПроводитьЗаказ, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ТекстЛогаСобытий = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%", ?(ПроводитьЗаказ, "проведения", "записи"));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлНомер%", Запись.НомерВходящегоДокументаЭлектронногоОбмена);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлДата%", Формат(Запись.ДатаВходящегоДокументаЭлектронногоОбмена, "ДФ=dd.MM.yyyy"));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецПопытки;
				
				Если РазделятьЗаказы И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% разделена цепочка. Создан новый документ %ЗаказПокупателя%. '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Строка(Выборка.Источник));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказПокупателя%", Строка(Приемник.Ссылка));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				ИначеЕсли ПерезаписыватьЗаказ И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% перезаписан уже существующий документ %ЗаказПокупателя%. '", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Строка(Выборка.Источник));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказПокупателя%", Строка(Выборка.ДокументЗаказа1С));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				КонецЕсли;				
				
			КонецЦикла;
			
		Иначе
			
			Если ЗапрещеноИзменениеЗаказа Тогда
				
				ТекстЛогаСобытий = НСтр("ru = 'По заказу %ЗаказПокупателя% создана реализация %Реализация%. Разделение заказа не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Реализация%", Строка(Выборка.ДокументРеализации));
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказПокупателя%", Строка(Выборка.ДокументЗаказа1С));
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				
			КонецЕсли;
			
		КонецЕсли;
		
		// служебные операции ++  
		Если Не Приемник = Неопределено И ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
			КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
		КонецЕсли;    
		// служебные операции --
		
	КонецЦикла;
	</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокOrderВходящиеПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать заказ клиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>