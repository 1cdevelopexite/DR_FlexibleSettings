<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать корректировку реализации</Value>
		<Value xsi:type="xs:string">Реализация товаров и услуг</Value>
		<Value xsi:type="xs:string">КорректировочнаяНакладная_Исходящая</Value>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать корректировку реализации товаров &gt;&gt;&gt;";

// служебные переменные гибких настроек ++
ТипПриемника   = "КорректировкаРеализации";
ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 
// служебные переменные гибких настроек --

ИспользоватьКорректировкиРеализаций = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций");
Если ИспользоватьКорректировкиРеализаций = Истина Тогда
    ПроводитьРеализацию = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
    
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
   |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
   |	ВыбранныеЗаписи.Документ КАК Документ,
   |	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
   |ПОМЕСТИТЬ ВыбранныеЗаписи
   |ИЗ
   |	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
   |;
   |
   |////////////////////////////////////////////////////////////////////////////////
   |ВЫБРАТЬ
   |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
   |	ВыбранныеЗаписи.Документ КАК РеализацияСсылка,
   |	RECADV_События.Документ КАК RECADV,
   |	DR_ЦепочкиДокументов.НомерЗаказа КАК ORDERNUMBER,
   |	DR_ЦепочкиДокументов.ДатаЗаказа КАК ORDERDATE,
   |	ВЫРАЗИТЬ(RECADV_События.Документ КАК Документ.ЭКОМ_Документы).ФайлНомер КАК RECADVФайлНомер,
   |	ВЫРАЗИТЬ(RECADV_События.Документ КАК Документ.ЭКОМ_Документы).ФайлДата КАК RECADVФайлДата,
   |	РеализацияТоваровУслуг.Основание КАК НакладнаяОснование,
   |	РеализацияТоваровУслуг.ОснованиеНомер КАК НакладнаяОснованиеНомер,
   |	РеализацияТоваровУслуг.ОснованиеДата КАК НакладнаяОснованиеДата
   |ИЗ
   |	ВыбранныеЗаписи КАК ВыбранныеЗаписи
   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
   |		ПО (ВыбранныеЗаписи.Документ = РеализацияТоваровУслуг.Ссылка)
   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
   |		ПО (ВыбранныеЗаписи.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК RECADV_События
   |		ПО (ВыбранныеЗаписи.ИдентификаторЦепочки = RECADV_События.ИдентификаторЦепочки)
   |			И (RECADV_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.RECADV_Входящий))
   |			И (ВыбранныеЗаписи.Идентификатор = RECADV_События.ИдентификаторОснования)";
	Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);

    РезультатЗапроса = Запрос.Выполнить();

    Запись = РезультатЗапроса.Выбрать();
    КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

    Пока Запись.Следующий() Цикл  
    
    	Если Не ЗначениеЗаполнено(Запись.RECADV) Тогда
            ТекстОшибки = "Не найден документ RECADV для накладной: " + Строка(Запись.РеализацияСсылка);                          
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстОшибки, Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  
			Продолжить;
    	КонецЕсли;

        Приемник = Документы[ТипПриемника].СоздатьДокумент();
        Приемник.Заполнить(Запись.РеализацияСсылка);
        Приемник.Дата = ТекущаяДатаСеанса();
        Приемник.Комментарий = "Заказ № %ORDERNUMBER% от %ORDERDATE%";
        Приемник.Комментарий = СтрЗаменить(Приемник.Комментарий, "%ORDERNUMBER%", Запись.ORDERNUMBER);
        Приемник.Комментарий = СтрЗаменить(Приемник.Комментарий, "%ORDERDATE%", Формат(Запись.ORDERDATE, "ДФ=dd.MM.yyyy"));
        Приемник.Основание = Запись.НакладнаяОснование;
        Приемник.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон");
        Приемник.ОснованиеНомер = Запись.НакладнаяОснованиеНомер;
        Приемник.ОснованиеДата = Запись.НакладнаяОснованиеДата;  
        
        // Перезаполняем ТЧ Товары.
        Для Каждого СтрокаRECADV Из Запись.RECADV.ТЧ_Товары Цикл
            СтрокаКорректировки = Приемник.Товары.Найти(СтрокаRECADV.Номенклатура, "Номенклатура");
            Если СтрокаКорректировки = Неопределено Тогда
                Продолжить;
            КонецЕсли;
            СтрокаКорректировки.КоличествоУпаковок = СтрокаRECADV.КоличествоПринятое;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(СтрокаКорректировки, Новый Структура("ПересчитатьКоличествоЕдиниц", СтрокаКорректировки.Упаковка), КэшированныеЗначения);
            СтрокаКорректировки.Содержание = "Строка скорректирована RECADV"; // Временно для удаления удаленных в RECADV строк
            СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приемник);
            СтруктураДействий = Новый Структура;
            СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
            СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
            СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
            СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");

            ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКорректировки, СтруктураДействий, КэшированныеЗначения);

        КонецЦикла;
        // Удаление отсутствующих в RECADV строк.
        СтрокиДляУдаления = Новый Массив;

        Для Каждого СтрокаКорректировки Из Приемник.Товары Цикл
            Если НЕ СтрокаКорректировки.Содержание = "Строка скорректирована RECADV"
                ИЛИ СтрокаКорректировки.Количество = 0 Тогда
                СтрокиДляУдаления.Добавить(СтрокаКорректировки);
            КонецЕсли;
            СтрокаКорректировки.Содержание = "";
        КонецЦикла;

        Для Каждого СтрокаКорректировки Из СтрокиДляУдаления Цикл
            ИндексСтрокаКорректировки = Приемник.Товары.Индекс(СтрокаКорректировки);
            Если ИндексСтрокаКорректировки &gt;= 0 Тогда
                Приемник.Товары.Удалить(ИндексСтрокаКорректировки);
            КонецЕсли;
        КонецЦикла;

        // Заполняем ТЧ расхождений.
        Если Не ЗначениеЗаполнено(Приемник.ДокументОснование) Тогда
            ТекстОшибки = НСтр("ru = 'Поле ""Документ основание"" не заполнено';
                |en = '""Base document"" is required'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
            ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
            Продолжить;
        КонецЕсли;

        НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(Приемник);
        Приемник.ЗаполнитьРасхождения();

        ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Приемник, Документы.КорректировкаРеализации);
        ПараметрыУказанияСерий.ИмяТЧТовары = "Расхождения";
        ПараметрыУказанияСерий.ИмяТЧСерии  = "Расхождения";
        НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Приемник, ПараметрыУказанияСерий);
        ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
        ПараметрыУказанияСерий.ИмяТЧСерии  = "Товары";

        СтруктураДействий = Новый Структура;
        СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
        ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Приемник.Расхождения, СтруктураДействий, КэшированныеЗначения);
        // Установка варианта отражения расхождений.
        Для Каждого СтрокаРасхождения Из Приемник.Расхождения Цикл
            СтрокаРасхождения.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций." + ?(СтрокаРасхождения.КоличествоУпаковок &gt; 0, "УвеличитьРеализациюУчестьПриИнвентаризации",  "УменьшитьРеализациюУчестьПриИнвентаризации"));
        КонецЦикла;

        ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
        Если ОшибокНеОбнаружено Тогда
            НачатьТранзакцию();
            Попытка 
                Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));

					ВидДокументаПриемник = Перечисления.ЭКОМ_ВидыДокументов.КорректировочнаяНакладная_Исходящая;					           	  					
					СтруктураРегистраDR_События = Новый Структура;
					СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Запись.ИдентификаторЦепочки);    
					СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);  
					СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);   
					СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
					СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Запись.РеализацияСсылка.УникальныйИдентификатор());
					СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());  
					ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);                
  		            
            Исключение
                Ошибка = ОписаниеОшибки();
                ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
                ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
                ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.RECADVФайлНомер);
                ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.RECADVФайлДата, "ДФ=dd.MM.yyyy"));
                                  
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстОшибки, Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);	
				                
                ОтменитьТранзакцию();
                Продолжить;
            КонецПопытки;
            ЗафиксироватьТранзакцию();
        КонецЕсли;
        
		// служебные операции ++  
		Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
			КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
		КонецЕсли;

		Если ЗначениеЗаполнено(ЛогСобытий) Тогда
			ТекстЛогаСобытий = ЛогСобытий;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);			
		КонецЕсли;  
		// служебные операции --

    КонецЦикла;
Иначе
    ТекстОшибки = НСтр("ru = 'В настройках программы отключена возможность создания корректировок реализации'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
    ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Накладная_Исходящая</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать корректировку реализации товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>