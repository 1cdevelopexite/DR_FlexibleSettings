<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать корректировку реализации</Value>
		<Value xsi:type="xs:string">Накладная_Исходящая</Value>
		<Value xsi:type="xs:string">Накладная_Исходящая</Value>
		<Value xsi:type="xs:string">КорректировочнаяНакладная_Исходящая</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать корректировку реализации товаров &gt;&gt;&gt;";

// служебные переменные гибких настроек ++
ТипПриемника   = "КорректировкаРеализации";
ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 
// служебные переменные гибких настроек --

Если КэшированныеЗначения = Неопределено Тогда
	КэшированныеЗначения = новый Структура;
КонецЕсли;
// Получение общих для всех документов значений.
ПроводитьРеализацию			= Неопределено;
Если НЕ КэшированныеЗначения.Свойство("ПроводитьРеализацию", ПроводитьРеализацию) Тогда
	ПроводитьРеализацию		= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
	КэшированныеЗначения.Вставить("ПроводитьРеализацию", ПроводитьРеализацию);
КонецЕсли;


ПроводитьРеализацию = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК РеализацияСсылка,
|	RECADV_События.Документ КАК RECADV,
|	DR_ЦепочкиДокументов.НомерЗаказа КАК ORDERNUMBER,
|	DR_ЦепочкиДокументов.ДатаЗаказа КАК ORDERDATE,
|	ВЫРАЗИТЬ(RECADV_События.Документ КАК Документ.ЭКОМ_Документы).ФайлНомер КАК RECADVФайлНомер,
|	ВЫРАЗИТЬ(RECADV_События.Документ КАК Документ.ЭКОМ_Документы).ФайлДата КАК RECADVФайлДата,
|	РеализацияТоваровУслуг.Сделка КАК НакладнаяОснование,
|	РеализацияТоваровУслуг.Сделка.Номер КАК НакладнаяОснованиеНомер,
|	РеализацияТоваровУслуг.Сделка.Дата КАК НакладнаяОснованиеДата
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
|		ПО (ВыбранныеЗаписи.Документ = РеализацияТоваровУслуг.Ссылка)
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
|		ПО (ВыбранныеЗаписи.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК RECADV_События
|		ПО (ВыбранныеЗаписи.ИдентификаторЦепочки = RECADV_События.ИдентификаторЦепочки)
|			И (RECADV_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.RECADV_Входящий))
|			И (ВыбранныеЗаписи.Идентификатор = RECADV_События.ИдентификаторОснования)";
Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);

РезультатЗапроса = Запрос.Выполнить();

Запись = РезультатЗапроса.Выбрать();  	
Пока Запись.Следующий() Цикл  
	
	Если Не ЗначениеЗаполнено(Запись.RECADV) Тогда
		ТекстОшибки = "Не найден документ RECADV для накладной: " + Строка(Запись.РеализацияСсылка);                          
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстОшибки, Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  
		Продолжить;
	КонецЕсли;     		
	
	Приемник = Документы.КорректировкаРеализации.СоздатьДокумент();
	Приемник.Заполнить(Запись.РеализацияСсылка);
	Приемник.Дата = ТекущаяДатаСеанса();
	Приемник.Комментарий = "Заказ № %ORDERNUMBER% от %ORDERDATE%";
	Приемник.Комментарий = СтрЗаменить(Приемник.Комментарий, "%ORDERNUMBER%", Запись.ORDERNUMBER);
	Приемник.Комментарий = СтрЗаменить(Приемник.Комментарий, "%ORDERDATE%", Формат(Запись.ORDERDATE, "ДФ=dd.MM.yyyy"));
	Приемник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение");
	Приемник.ДокументОснование = Запись.РеализацияСсылка;
	// Перезаполняем ТЧ Товары.
	СкорректированныеСтроки = Новый Массив;
	Для Каждого СтрокаRECADV Из Запись.RECADV.ТЧ_Товары Цикл
		СтрокаКорректировки = Приемник.Товары.Найти(СтрокаRECADV.Номенклатура, "Номенклатура");
		Если СтрокаКорректировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКорректировки.Количество = СтрокаRECADV.КоличествоПринятое;
		
		Если ТипЗнч(СтрокаКорректировки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда // изменен реквизит Количество
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаКорректировки, ЭтотОбъект);
		КонецЕсли;
		СтрокаКорректировки.ОтражатьТоварныйУчет = Истина;
		
		СтрокаКорректировки.Сумма = СтрокаКорректировки.Цена * СтрокаКорректировки.Количество;
		СтрокаКорректировки.СуммаНДС = 
		УчетНДС.РассчитатьСуммуНДС(
		СтрокаКорректировки.Сумма,
		Приемник.УчитыватьНДС,
		Приемник.СуммаВключаетНДС,
		УчетНДС.ПолучитьСтавкуНДС(
		СтрокаКорректировки.СтавкаНДС));
		СкорректированныеСтроки.Добавить(СтрокаКорректировки);			
	КонецЦикла;
	// Удаление отсутствующих в RECADV строк.
	
	СтрокиДляУдаления = Новый Массив;
	
	Для Каждого СтрокаКорректировки Из Приемник.Товары Цикл
		Если СкорректированныеСтроки.Найти(СтрокаКорректировки) = Неопределено Тогда
			СтрокиДляУдаления.Добавить(СтрокаКорректировки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКорректировки Из СтрокиДляУдаления Цикл
		ИндексСтрокаКорректировки = Приемник.Товары.Индекс(СтрокаКорректировки);
		Если ИндексСтрокаКорректировки &gt;= 0 Тогда
			Приемник.Товары.Удалить(ИндексСтрокаКорректировки);
		КонецЕсли;
	КонецЦикла;
	
	Если Приемник.Товары.Итог("Количество") = 0 Тогда                                                  
		ТекстЛогаСобытий = "Документ на основании входящего документа № "+ Запись.RECADVФайлНомер +" от " + Формат(Запись.RECADVФайлДата, "ДФ=dd.MM.yyyy")+ " не был создан. Отсутсвуют позиции по номенклатуре. ";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		Продолжить;
	КонецЕсли;
	
	ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	Если ОшибокНеОбнаружено Тогда
		Попытка
			Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			ВидДокументаПриемник = Перечисления.ЭКОМ_ВидыДокументов.КорректировочнаяНакладная_Исходящая;
			
			СтруктураРегистраDR_События = Новый Структура;
			СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Запись.ИдентификаторЦепочки);    
			СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);  
			СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);   
			СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
			СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Запись.РеализацияСсылка.УникальныйИдентификатор());
			СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());  
			ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);                
		Исключение
			Ошибка = ОписаниеОшибки();
			ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Запись.RECADVФайлНомер);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Запись.RECADVФайлДата, "ДФ=dd.MM.yyyy"));
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			Продолжить;
		КонецПопытки;
	КонецЕсли;
	
	// служебные операции ++  
	Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛогСобытий) Тогда
		ТекстЛогаСобытий = ЛогСобытий;
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);			
	КонецЕсли;  
	// служебные операции --
	
КонецЦикла;
</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать корректировку реализации товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>