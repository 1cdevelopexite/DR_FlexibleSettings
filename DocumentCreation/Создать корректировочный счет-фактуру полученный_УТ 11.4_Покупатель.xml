<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать корректировочный  счет-фактуру полученный</Value>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать счет-фактуру полученный &gt;&gt;&gt;";

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки", Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
КонецЦикла;

// служебные переменные гибких настроек ++
ТипПриемника   = "СчетФактураПолученный";
ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 
// служебные переменные гибких настроек --

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ВыбранныеЗаписи.Документ КАК Документ
               |ПОМЕСТИТЬ ВыбранныеЗаписи
               |ИЗ
               |	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ВыбранныеЗаписи.Документ КАК Источник,
               |	ВЫРАЗИТЬ(ВыбранныеЗаписи.Документ КАК Документ.DR_Документ).ИдентификаторДокумента КАК Идентификатор
               |ИЗ
               |	ВыбранныеЗаписи КАК ВыбранныеЗаписи
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	DR_Накладная.Документ КАК Накладная,
               |	DR_Накладная.Документ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
               |	DR_Накладная.Документ.НомерВходящегоДокумента КАК НомерВходящегоДокумента
               |ИЗ
               |	ВыбранныеЗаписи КАК ВыбранныеЗаписи
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_Накладная
               |		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = DR_Накладная.ИдентификаторЦепочки
               |			И (DR_Накладная.ВидДокумента = ""КорректировочнаяНакладная_Входящая"")
               |ГДЕ
               |	НЕ DR_Накладная.Документ ЕСТЬ NULL
               |	И ВЫРАЗИТЬ(DR_Накладная.Документ КАК Документ.КорректировкаПриобретения).ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	DR_СчетФактура.Документ КАК СчетФактура,
               |	DR_СчетФактура.ИдентификаторОснования КАК ИдентификаторОснования,
               |	DR_ДокументыОснования.ДокументОснование КАК ДокументОснование
               |ИЗ
               |	ВыбранныеЗаписи КАК ВыбранныеЗаписи
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_СчетФактура
               |		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = DR_СчетФактура.ИдентификаторЦепочки
               |			И (DR_СчетФактура.ВидДокумента = ""СчетФактура_Входящий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК DR_ДокументыОснования
               |		ПО (DR_СчетФактура.Документ = DR_ДокументыОснования.Ссылка)
               |ГДЕ
               |	НЕ DR_СчетФактура.Документ ЕСТЬ NULL";

Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);

Пакет = Запрос.ВыполнитьПакет(); 
Выборка   = Пакет[1].Выбрать();  
Накладные = Пакет[2].Выгрузить();
Накладные.Индексы.Добавить("ИдентификаторЦепочки");
СчФактуры = Пакет[3].Выгрузить();
СчФактуры.Индексы.Добавить("ИдентификаторЦепочки, ИдентификаторОснования");
СчФактуры.Индексы.Добавить("ДокументОснование");
ИмяДокументаПрименика = "Счет-фактура полученный 1С";

Пока Выборка.Следующий() Цикл 
	
	СтрокиСчФактуры = СчФактуры.НайтиСтроки(Новый Структура("ИдентификаторЦепочки, ИдентификаторОснования", Выборка.ИдентификаторЦепочки, Выборка.Идентификатор)); 
	Если СтрокиСчФактуры.Количество() &gt; 0 Тогда
		ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) + " уже создана";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		Продолжить;	
	КонецЕсли;
	
	Накладная = Неопределено;
	СтрокиНакладные = Накладные.НайтиСтроки(Новый Структура("ИдентификаторЦепочки", Выборка.ИдентификаторЦепочки)); 
	Если СтрокиНакладные.Количество() = 1 Тогда 
		СтрокаТЗНакладные = СтрокиНакладные.Получить(0);
		СтрокиСчФактуры = СчФактуры.НайтиСтроки(Новый Структура("ДокументОснование", СтрокаТЗНакладные.Накладная));
		Если СтрокиСчФактуры.Количество() = 0 Тогда	
			Накладная = СтрокаТЗНакладные.Накладная;   
			ДатаВходящегоДокумента = СтрокаТЗНакладные.ДатаВходящегоДокумента;
			НомерВходящегоДокумента = СтрокаТЗНакладные.НомерВходящегоДокумента;
		Иначе 
			ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) + " не создан, уже существует для накладной. ";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			Продолжить;	
		КонецЕсли;
		
	ИначеЕсли СтрокиНакладные.Количество() &gt; 1 Тогда
		ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) + " не создан, обнаружено более одной накладной. ";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		Продолжить; 
		
	ИначеЕсли СтрокиНакладные.Количество() = 0 Тогда 
	    ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) + " не создан, не обнаружена накладная. ";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		Продолжить; 
		
	КонецЕсли;
	
	Приемник = Документы[ТипПриемника].СоздатьДокумент();
	
	//Выполняется через проверку переменной для удобства чтения.
	Если Накладная &lt;&gt; Неопределено Тогда
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ДокументОснование", Накладная);
		Приемник.Заполнить(ПараметрыДокумента);
		Приемник.ДатаСоставления = ДатаВходящегоДокумента;
		Приемник.Номер = НомерВходящегоДокумента; 
		
	Иначе 
		Продолжить;
	КонецЕсли;
	
	Приемник.Дата = ТекущаяДата();
	Приемник.ПолученВЭлектронномВиде = Ложь;
	СоздаватьДокумент1СПроведенным = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументПолученныйСЧФ1СПроведенным", Ложь); 
	
	ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	
	Если ОшибокНеОбнаружено Тогда
		Попытка
			Приемник.Записать(?(СоздаватьДокумент1СПроведенным, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		Исключение
			Приемник.Записать(РежимЗаписиДокумента.Запись);
			ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) + " не создано!!! " + СокрЛП(ОписаниеОшибки()); 
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		КонецПопытки;  
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Приемник.Ссылка) Тогда
		ВидДокументаПриемник = "СчетФактура_Входящий";	
		
		СтруктураРегистраDR_События = Новый Структура;
		СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
		СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);
		СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
		СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
		СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
		СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
		DR_EDI_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);
		
	КонецЕсли;
	
	// служебные операции ++  
	Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда 
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;
	// служебные операции -- 
	
КонецЦикла;
</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокНакладныеИсходящиеПоставщик</presentation>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<presentation>СписокКорректировочныеСчетаФактурыВходящиеПокупатель</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать корректировочный  счет-фактуру полученный</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>