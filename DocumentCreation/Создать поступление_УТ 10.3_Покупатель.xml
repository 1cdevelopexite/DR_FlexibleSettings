<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать поступление</Value>
		<Value xsi:type="xs:string">Заказ_Исходящий</Value>
		<Value xsi:type="xs:string">Заказ_Исходящий</Value>
		<Value xsi:type="xs:string">Накладная_Входящая</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать поступление &gt;&gt;&gt;";
СоздаватьДокумент1СПроведенным = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументПоступления1СПроведенным", Ложь);   
ИмяДокументаПриемника = "Поступление 1С";

// служебные переменные гибких настроек ++
ТипПриемника   = "ПоступлениеТоваровУслуг";
ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 
// служебные переменные гибких настроек -- 

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Источник,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор,
|	Заказ_События.Документ КАК Заказ
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
|		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
|			И (Заказ_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Заказ_Исходящий))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ЗаказПоставщикуТовары.Ссылка,
|	ЗаказПоставщикуТовары.НомерСтроки,
|	ЗаказПоставщикуТовары.ЕдиницаИзмерения,
|	ЗаказПоставщикуТовары.ЕдиницаИзмеренияМест,
|	ЗаказПоставщикуТовары.Заказ,
|	ЗаказПоставщикуТовары.Количество,
|	ЗаказПоставщикуТовары.КоличествоМест,
|	ЗаказПоставщикуТовары.Коэффициент,
|	ЗаказПоставщикуТовары.Номенклатура,
|	ЗаказПоставщикуТовары.ПлановаяСебестоимость,
|	ЗаказПоставщикуТовары.СтавкаНДС,
|	ЗаказПоставщикуТовары.Сумма,
|	ЗаказПоставщикуТовары.СуммаНДС,
|	ЗаказПоставщикуТовары.ХарактеристикаНоменклатуры,
|	ЗаказПоставщикуТовары.Цена
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
|		ПО ВыбранныеЗаписи.Документ = ЗаказПоставщикуТовары.Ссылка";
Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);
РезультатЗапроса = Запрос.ВыполнитьПакет();
Выборка = РезультатЗапроса[1].Выбрать();
ТаблицаТовары = РезультатЗапроса[2].Выгрузить();

Пока Выборка.Следующий() Цикл
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = новый Структура;
	КонецЕсли;
	
	// Получение общих для всех документов значений.
	СоздаватьДокумент1СПроведенным			= Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("СоздаватьДокумент1СПроведенным", СоздаватьДокумент1СПроведенным) Тогда
		СоздаватьДокумент1СПроведенным		= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументПоступления1СПроведенным", Ложь);
		КэшированныеЗначения.Вставить("СоздаватьДокумент1СПроведенным", СоздаватьДокумент1СПроведенным);
	КонецЕсли;
	
	ИмяДокументаПрименика = "Поступление 1С";
	
	
	Приемник = Документы[ТипПриемника].СоздатьДокумент();
	Приемник.Заполнить(Выборка.Заказ);
	Приемник.Дата = ТекущаяДата();
	
	// Запишем документ в базу
	Если Приемник.Товары.Количество() = 0 Тогда
		ТекстЛогаСобытий = "Документ """ + ИмяДокументаПрименика + """ по документу " + Строка(Выборка.Источник) +
		" не создан, т.к. не заполнены товары, возможно документ был сформирован вручную, проверьте документ.";
		ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
	Иначе
		
		Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
			
			ЭКОМ_ДокументОбъект = Выборка.Источник.ПолучитьОбъект();
			ЭКОМ_ДокументОбъект.ДокументыСвязанные.Очистить();
			Нов = ЭКОМ_ДокументОбъект.ДокументыСвязанные.Добавить();
			Нов.ДокументСвязанный = Приемник.Ссылка;
			ЭКОМ_ДокументОбъект.Записать();
			
			Приемник.НомерВходящегоДокумента = ЭКОМ_ДокументОбъект.НакладнаяНомер; 
			Приемник.ДатаВходящегоДокумента  = ЭКОМ_ДокументОбъект.НакладнаяДата;
			Приемник.Товары.Очистить();
			// Обновляем табличную часть
			Для каждого СтрЭКОМ Из ЭКОМ_ДокументОбъект.ТЧ_Товары Цикл        
				НайденныеСтроки = ТаблицаТовары.НайтиСтроки(Новый Структура("Ссылка, Номенклатура", Выборка.Заказ, СтрЭКОМ.Номенклатура));    
				Если НайденныеСтроки.Количество()
					И СтрЭКОМ.КоличествоПоставляемое &gt; 0 Тогда  
					НовСтр = Приемник.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, НайденныеСтроки[0]);
					НовСтр.Количество = СтрЭКОМ.КоличествоПоставляемое;
				КонецЕсли;          
			КонецЦикла;
			
			Приемник.НомерВходящегоДокумента = ЭКОМ_ДокументОбъект.НакладнаяНомер;  			
			Приемник.ДатаВходящегоДокумента  = ЭКОМ_ДокументОбъект.НакладнаяДата;	
			
			ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
			Если ОшибокНеОбнаружено Тогда
				Попытка
					Приемник.Записать(?(СоздаватьДокумент1СПроведенным, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					
					ВидДокументаПриемник = Перечисления.ЭКОМ_ВидыДокументов.Накладная_Входящая;	
					
					СтруктураРегистраDR_События = Новый Структура;
					СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
					СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);
					СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
					СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
					СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Источник.УникальныйИдентификатор());
					СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
					ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);
				Исключение
					Ошибка = ОписаниеОшибки();
					ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе %Источник%'" + ОписаниеОшибки());
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(СоздаватьДокумент1СПроведенным, "проведения", "записи"));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Источник%", Строка(Выборка.Источник));
					ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТекстЛогаСобытий = "В цепочке не найден DESADV по документу " + Строка(Выборка.Заказ); 
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
	КонецЕсли;
	
	
	// служебные операции ++  
	Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЛогСобытий) Тогда
		ТекстЛогаСобытий = ЛогСобытий;
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
	КонецЕсли;  
	// служебные операции --
	
КонецЦикла;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
	</row>
</ValueTree>