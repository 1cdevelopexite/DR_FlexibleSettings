<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать поступление</Value>
		<Value xsi:type="xs:string">Заказ поставщику</Value>
		<Value xsi:type="xs:string">Накладная_Входящая</Value>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать поступление &gt;&gt;&gt;";
СоздаватьДокумент1СПроведенным = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументПоступления1СПроведенным", Ложь);   
ИмяДокументаПриемника = "Поступление 1С";

// служебные переменные гибких настроек ++
ТипПриемника   = "ПриобретениеТоваровУслуг";
ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 
// служебные переменные гибких настроек -- 

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Источник,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор,
|	Заказ_События.Документ.Статус КАК ЗаказСтатус,
|	Заказ_События.Документ КАК Заказ
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
|		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
|			И (Заказ_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Заказ_Исходящий))
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ЗаказПоставщикуТовары.Ссылка КАК Ссылка,
|	ЗаказПоставщикуТовары.НомерСтроки КАК НомерСтроки,
|	ЗаказПоставщикуТовары.НоменклатураПартнера КАК НоменклатураПартнера,
|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
|	ЗаказПоставщикуТовары.Упаковка КАК Упаковка,
|	ЗаказПоставщикуТовары.КоличествоУпаковок КАК КоличествоУпаковок,
|	ЗаказПоставщикуТовары.Количество КАК Количество,
|	ЗаказПоставщикуТовары.ДатаПоступления КАК ДатаПоступления,
|	ЗаказПоставщикуТовары.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
|	ЗаказПоставщикуТовары.Цена КАК Цена,
|	ЗаказПоставщикуТовары.Сумма КАК Сумма,
|	ЗаказПоставщикуТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
|	ЗаказПоставщикуТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
|	ЗаказПоставщикуТовары.СуммаНДС КАК СуммаНДС,
|	ЗаказПоставщикуТовары.СуммаСНДС КАК СуммаСНДС,
|	ЗаказПоставщикуТовары.КодСтроки КАК КодСтроки,
|	ЗаказПоставщикуТовары.Отменено КАК Отменено,
|	ЗаказПоставщикуТовары.СтатьяРасходов КАК СтатьяРасходов,
|	ЗаказПоставщикуТовары.АналитикаРасходов КАК АналитикаРасходов,
|	ЗаказПоставщикуТовары.ПричинаОтмены КАК ПричинаОтмены,
|	ЗаказПоставщикуТовары.Склад КАК Склад,
|	ЗаказПоставщикуТовары.Назначение КАК Назначение,
|	ЗаказПоставщикуТовары.Подразделение КАК Подразделение,
|	ЗаказПоставщикуТовары.СписатьНаРасходы КАК СписатьНаРасходы
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
|			ПО Заказ_События.Документ = ЗаказПоставщикуТовары.Ссылка
|		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
|			И (Заказ_События.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ЭКОМ_ВидыДокументов.Заказ_Исходящий))
|
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ЭКОМ_ДокументыТЧ_Товары.Ссылка КАК Ссылка,
|	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
|	СУММА(ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое) КАК Количество,
|	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
|	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
|		ПО (ВыбранныеЗаписи.Документ = ЭКОМ_ДокументыТЧ_Товары.Ссылка)
|
|СГРУППИРОВАТЬ ПО
|	ЭКОМ_ДокументыТЧ_Товары.Ссылка,
|	ЭКОМ_ДокументыТЧ_Товары.Номенклатура,
|	ЭКОМ_ДокументыТЧ_Товары.Цена,
|	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС";


Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);
РезультатЗапроса = Запрос.ВыполнитьПакет();
Выборка = РезультатЗапроса[1].Выбрать();
ТаблицаТовары = РезультатЗапроса[2].Выгрузить();
DESADV_Товары = РезультатЗапроса[3].Выгрузить();

Пока Выборка.Следующий() Цикл
	
	Если НЕ (Выборка.ЗаказСтатус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден 
		ИЛИ Выборка.ЗаказСтатус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт) Тогда    
		ТекстЛогаСобытий = "Документ """ + ИмяДокументаПриемника + """ по документу " + Строка(Выборка.Источник) +
		" не создан, т.к. ввод на основании разрешен только в статусах ""Подтвержден"", ""Закрыт"".";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
	Иначе  
		Приемник = Документы[ТипПриемника].СоздатьДокумент();
		
		ПараметрыДокумента = Новый Структура;
		ПараметрыДокумента.Вставить("ДокументОснование", Выборка.Заказ);
		Приемник.Заполнить(ПараметрыДокумента);
		Приемник.Дата = ТекущаяДата();    
		
		// Запишем документ в базу
		Если Приемник.Товары.Количество() = 0 Тогда
			ТекстЛогаСобытий = "Документ """ + ИмяДокументаПриемника + """ по документу " + Строка(Выборка.Источник) +
			" не создан, т.к. не заполнены товары, возможно документ был сформирован вручную, проверьте документ.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
		Иначе    
			
			// Поиск документа ЭКОМ
			Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
				ЭКОМ_ДокументОбъект = Выборка.Источник.ПолучитьОбъект();
				ЭКОМ_ДокументОбъект.ДокументыСвязанные.Очистить();
				
				Приемник.НомерВходящегоДокумента = ЭКОМ_ДокументОбъект.НакладнаяНомер; 
				Приемник.ДатаВходящегоДокумента  = ЭКОМ_ДокументОбъект.НакладнаяДата;
				Приемник.Товары.Очистить();
				
				// Обновляем табличную часть
				Для каждого СтрЭКОМ Из DESADV_Товары.НайтиСтроки(Новый Структура("Ссылка", Выборка.Источник)) Цикл        
					Если СтрЭКОМ.Количество > 0 Тогда  
						
						НовСтр = Приемник.Товары.Добавить();
						
						НайденныеСтроки = ТаблицаТовары.НайтиСтроки(Новый Структура("Ссылка, Номенклатура", Выборка.Заказ, СтрЭКОМ.Номенклатура));    
						Если НайденныеСтроки.Количество() Тогда
							ЗаполнитьЗначенияСвойств(НовСтр, НайденныеСтроки[0]);
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(НовСтр, СтрЭКОМ);
					
					КонецЕсли;          
				КонецЦикла;
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Приемник);
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");        
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));        
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Приемник.НалогообложениеНДС, Приемник.Дата));
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приемник.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());    
				СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Приемник.Товары, СтруктураДействий, Неопределено); 
				
				//Нужно получить ссылку для записи в DR_События до выполнения подписок.
				НоваяСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
				Приемник.УстановитьСсылкуНового(НоваяСсылка);
			
				ВидДокументаПриемник = Перечисления.ЭКОМ_ВидыДокументов.Накладная_Входящая;	
				
				СтруктураРегистраDR_События = Новый Структура;
				СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
				СтруктураРегистраDR_События.Вставить("Документ"					, НоваяСсылка);
				СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
				СтруктураРегистраDR_События.Вставить("Идентификатор"			, НоваяСсылка.УникальныйИдентификатор());
				СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
				СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
				ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);
				
				Нов = ЭКОМ_ДокументОбъект.ДокументыСвязанные.Добавить();
				Нов.ДокументСвязанный = НоваяСсылка;
				ЭКОМ_ДокументОбъект.Записать();
				
				СоздаватьДокумент1СПроведенным = ?(Приемник.ПроверитьЗаполнение(),СоздаватьДокумент1СПроведенным,Ложь);
					Попытка                                       
						Приемник.Записать(?(СоздаватьДокумент1СПроведенным, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));       
						ДокументЗаписан = Истина;    		        
					Исключение
						Приемник.Записать(РежимЗаписиДокумента.Запись);
						ТекстЛогаСобытий = ИмяДокументаПриемника + " по документу " + Строка(Выборка.Заказ) + " не создано!!! " + СокрЛП(ОписаниеОшибки()); 
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
						ДокументЗаписан = Истина;
					КонецПопытки;
			Иначе
				ТекстЛогаСобытий = "В цепочке не найден DESADV по документу " + Строка(Выборка.Заказ); 
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
			КонецЕсли;
			
			// служебные операции ++  
			Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЛогСобытий) Тогда
				ТекстЛогаСобытий = ЛогСобытий;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
			КонецЕсли;  
			// служебные операции --
			//КонецЕсли;    
		КонецЕсли;
	КонецЕсли;
	
	
КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">DESADV_Входящий</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать поступление</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>