<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать поступление</Value>
		<Value xsi:type="xs:string">	ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать поступление &gt;&gt;&gt;";
	
	КвалификаторСтрок = Новый КвалификаторыСтроки(36);
	
	ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
	ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"				, Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
	ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"	, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
	ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
	
	Для Каждого Элемент Из ВыбранныеСтроки Цикл
		Элемент.Вставить("Идентификатор", Элемент.Документ.ИдентификаторДокумента);
		НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	КонецЦикла;
	
	ИмяДокументаПриемника 		= "Поступление 1С";
	ПроводитьПоступление 		= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументПоступления1СПроведенным", Ложь);
	ВызовВходящимDESADV 		= ?(ВызовВходящимDESADV = Неопределено, Ложь, ВызовВходящимDESADV);
	АвтоПоступление 			= ?(АвтоПоступление = Неопределено, Ложь, АвтоПоступление);
	ПерезаписыватьПоступление 	= ?(ПерезаписыватьПоступление = Неопределено, Ложь, ПерезаписыватьПоступление);
	
	
	// служебные переменные гибких настроек ++
	ТипПриемника   = "ПриобретениеТоваровУслуг";
	ОперацияЗапись = Ложь;
	ЛогСобытий	   = ""; 
	// служебные переменные гибких настроек -- 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыбранныеЗаписи.Документ КАК Документ,
	               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	               |	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
	               |ПОМЕСТИТЬ ВыбранныеЗаписи
	               |ИЗ
	               |	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	               |	ВыбранныеЗаписи.Документ КАК Источник,
	               |	ВыбранныеЗаписи.Идентификатор КАК Идентификатор,
	               |	ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.ЗаказПоставщику) КАК Заказ,
	               |	ВЫРАЗИТЬ(Поступление_События.Документ КАК Документ.ПриобретениеТоваровУслуг) КАК Поступление
	               |ПОМЕСТИТЬ ВТ_События
	               |ИЗ
	               |	ВыбранныеЗаписи КАК ВыбранныеЗаписи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
	               |		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
	               |			И (Заказ_События.ВидДокумента = ""Заказ_Исходящий"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Поступление_События
	               |		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Поступление_События.ИдентификаторЦепочки
				   |			И (Поступление_События.ИдентификаторОснования = ВыбранныеЗаписи.Идентификатор)
	               |			И (Поступление_События.ВидДокумента = ""Накладная_Входящая"")
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	               |	ВТ_События.Источник КАК Источник,
	               |	ВТ_События.Идентификатор КАК Идентификатор,
	               |	ВТ_События.Заказ.Статус КАК ЗаказСтатус,
	               |	ВТ_События.Заказ.Склад КАК ЗаказСклад,
	               |	ВТ_События.Заказ КАК Заказ,
	               |	ВТ_События.Поступление КАК Поступление,
	               |	ВТ_События.Поступление.Проведен КАК ПоступлениеПроведено,
	               |	ВЫРАЗИТЬ(ДР_NUMBER.Значение КАК СТРОКА(35)) КАК НомерЭлектронногоДокумента,
	               |	ДР_ДатаЭлектронногоДокумента.Значение КАК ДатаЭлектронногоДокумента,
	               |	ВЫРАЗИТЬ(ДР_НомерНакладной.Значение КАК СТРОКА(35)) КАК НомерНакладной,
	               |	ДР_ДатаНакладной.Значение КАК ДатаНакладной,
	               |	ЕСТЬNULL(ДР_POSITION.ХранилищеЗначения, НЕОПРЕДЕЛЕНО) КАК POSITION
	               |ИЗ
	               |	ВТ_События КАК ВТ_События
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_НомерНакладной
	               |		ПО ВТ_События.Источник = ДР_НомерНакладной.Ссылка
	               |			И (ДР_НомерНакладной.Реквизит = ""DELIVERYNOTENUMBER"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаНакладной
	               |		ПО ВТ_События.Источник = ДР_ДатаНакладной.Ссылка
	               |			И (ДР_ДатаНакладной.Реквизит = ""ДатаНакладной"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_NUMBER
	               |		ПО ВТ_События.Источник = ДР_NUMBER.Ссылка
	               |			И (ДР_NUMBER.Реквизит = ""NUMBER"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаЭлектронногоДокумента
	               |		ПО ВТ_События.Источник = ДР_ДатаЭлектронногоДокумента.Ссылка
	               |			И (ДР_ДатаЭлектронногоДокумента.Реквизит = ""ДатаЭлектронногоДокумента"")
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_POSITION
	               |		ПО ВТ_События.Источник = ДР_POSITION.Ссылка
	               |			И (ДР_POSITION.Реквизит = ""POSITION"")";
	
	Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// служебные переменные гибких настроек ++
		ДокументЗаписан = Ложь;
		// служебные переменные гибких настроек --
		
		Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
			
			Если НЕ (Выборка.ЗаказСтатус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден 
				ИЛИ Выборка.ЗаказСтатус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт) Тогда    
				
				ТекстЛогаСобытий = "Документ """ + ИмяДокументаПриемника + """ по документу " + Строка(Выборка.Заказ) 
									+ " не создан, т.к. ввод на основании разрешен только в статусах ""Подтвержден"", ""Закрыт"".";			
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.Поступление) И (НЕ АвтоПоступление И ВызовВходящимDESADV) Тогда
				
				Продолжить;	
			ИначеЕсли ЗначениеЗаполнено(Выборка.Поступление) И (НЕ ПерезаписыватьПоступление И ВызовВходящимDESADV) Тогда
				
				ТекстЛогаСобытий = "Автоматическая перезапись " + Строка(Выборка.Поступление) 
									+ " не выполнена. По причине отключенной настройки ""Перезаписывать поступление"".";			
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(Выборка.Поступление) И Выборка.ПоступлениеПроведено И (ПерезаписыватьПоступление И ВызовВходящимDESADV) Тогда
				ТекстЛогаСобытий = "Автоматическая перезапись " + Строка(Выборка.Поступление) 
									+ " не выполнена. По причине: Документ проведен!";			
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
			//&lt;Получение данных элемента POSITION&gt;
			POSITION = Выборка.POSITION;
			
			ЗначениеИзХранилища = ?(POSITION &lt;&gt; Неопределено, POSITION.Получить(), "");
			
			МассивСтруктурPOSITION = ?(ЗначениеЗаполнено(ЗначениеИзХранилища), ЗначениеИзХранилища, Неопределено);
			
			Если МассивСтруктурPOSITION = Неопределено Тогда
			
				ТекстЛогаСобытий = "Заказ покупателя по документу " + РезультатЗапроса[0].ИсточникПредставление + " не создан, т.к. отсутсвует либо элемент POSITION либо его значения.";
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
			КвалификаторЧисло = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
			
			ТаблицаPOSITION = Новый ТаблицаЗначений;
			ТаблицаPOSITION.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			ТаблицаPOSITION.Колонки.Добавить("DELIVEREDQUANTITY"	, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));  
			ТаблицаPOSITION.Колонки.Добавить("PRICE"				, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
			ТаблицаPOSITION.Колонки.Добавить("PRICEWITHVAT"			, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
			ТаблицаPOSITION.Колонки.Добавить("TAXRATE"				, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
			ТаблицаPOSITION.Колонки.Добавить("ЕдиницаИзмерения"		, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
			
			Для каждого ЭлСтруктура Из МассивСтруктурPOSITION Цикл
				НоваяСтрока = ТаблицаPOSITION.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлСтруктура);
			КонецЦикла;
			
			// Получение данных табличной части Товары.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	POSITION.Номенклатура КАК Номенклатура,
			|	POSITION.DELIVEREDQUANTITY КАК Количество,
			|	POSITION.PRICE КАК Цена,
			|	POSITION.PRICEWITHVAT КАК ЦенаСНДС,
			|	POSITION.TAXRATE КАК СтавкаНДС,
			|	POSITION.ЕдиницаИзмерения КАК ЕдиницаИзмерения
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	&amp;POSITION КАК POSITION
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.Номенклатура КАК Номенклатура,
			|	СУММА(ВТ.Количество) КАК КоличествоУпаковок,
			|	СУММА(ВТ.Количество) КАК Количество,
			|	ВТ.Цена КАК Цена,
			|	ВТ.ЦенаСНДС КАК ЦенаСНДС,
			|	ВТ.СтавкаНДС КАК СтавкаНДС,
			|	&amp;Склад КАК Склад,
			|	ВТ.ЕдиницаИзмерения КАК Упаковка
			|ИЗ
			|	ВТ КАК ВТ
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ.Номенклатура,
			|	ВТ.Цена,
			|	ВТ.ЦенаСНДС,
			|	ВТ.СтавкаНДС,
			|	ВТ.ЕдиницаИзмерения";
			
			Запрос.УстановитьПараметр("POSITION", ТаблицаPOSITION);
			Запрос.УстановитьПараметр("Склад", Выборка.ЗаказСклад);
			
			POSITION = Запрос.Выполнить().Выгрузить();
			
			Приемник = Документы[ТипПриемника].СоздатьДокумент();
			
			ПараметрыДокумента = Новый Структура;
			ПараметрыДокумента.Вставить("ДокументОснование", Выборка.Заказ);
			
			Приемник.Заполнить(ПараметрыДокумента);
			
			Приемник.Дата = ТекущаяДата();
			Приемник.НомерВходящегоДокумента = Выборка.НомерНакладной; 
			Приемник.ДатаВходящегоДокумента  = Выборка.ДатаНакладной;
			Приемник.Комментарий = "Документ создан на основании DESADV (Уведомление об отгрузке) № " + СокрЛП(Выборка.НомерЭлектронногоДокумента) 
									+ " от " + Формат(Выборка.ДатаЭлектронногоДокумента, "ДЛФ=D");
			
			Приемник.Товары.Очистить();
			
			Если ЗначениеЗаполнено(Выборка.Поступление) Тогда
				
				Приемник = Выборка.Поступление.ПолучитьОбъект();
				Приемник.Товары.Очистить();
				Приемник.Комментарий = "Табличная часть документа перезаполнена на основании " 
										+ "DESADV (Уведомление об отгрузке) № " + СокрЛП(Выборка.НомерЭлектронногоДокумента) 
										+ " от " + Формат(Выборка.ДатаЭлектронногоДокумента, "ДЛФ=D");
				
				ДокументЗаписан = Истина;
				
			КонецЕсли;
			
			// Обновляем табличную часть
			Для каждого Стр Из POSITION Цикл        
				
				НовСтр = Приемник.Товары.Добавить();
				
				ЗаполнитьЗначенияСвойств(НовСтр, Стр, "Номенклатура, КоличествоУпаковок, Количество, Упаковка, Склад");
				
				Если Приемник.ЦенаВключаетНДС = Истина Тогда
					Цена = Стр.ЦенаСНДС;
				Иначе	
					Цена = Стр.Цена;
				КонецЕсли;
				
				НовСтр.Цена = Цена;
				
			КонецЦикла;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Приемник);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");        
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));        
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Приемник.НалогообложениеНДС, Приемник.Дата));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Приемник.ВернутьМногооборотнуюТару);
			//СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок", ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());    
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Приемник.Товары, СтруктураДействий, Неопределено); 
			
			//Если сумма Заказа отличается от суммы поступившего DESADV.
			Если Приемник.ЭтапыГрафикаОплаты[0].СуммаПлатежа &lt;&gt; Приемник.Товары.Итог("СуммаСНДС") Тогда
				Приемник.ЭтапыГрафикаОплаты[0].СуммаПлатежа = Приемник.Товары.Итог("СуммаСНДС");
				Приемник.СуммаДокумента = Приемник.Товары.Итог("СуммаСНДС");
			КонецЕсли;
			
			// Проверка и запись документов.
			ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
			
			Если ОшибокНеОбнаружено Тогда
				
				НачатьТранзакцию();
				
				Попытка
					
					Если НЕ ДокументЗаписан Тогда
						ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
						Идентификатор = ДокументСсылка.УникальныйИдентификатор();	
						Приемник.УстановитьСсылкуНового(ДокументСсылка);
					Иначе
						ДокументСсылка = Приемник.Ссылка;
						Идентификатор = Приемник.Ссылка.УникальныйИдентификатор();		
					КонецЕсли;
					
					ВидДокументаПриемник = "Накладная_Входящая";	
					
					СтруктураРегистраDR_События = Новый Структура;
					СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
					СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);
					СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
					СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
					СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
					СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
					
					НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
					НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
					НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
					НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
					НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
					НЗ_DRСобытия.Прочитать();
					
					Если НЗ_DRСобытия.Количество() = 0 Тогда
						НоваяЗапись = НЗ_DRСобытия.Добавить();
					Иначе
						НоваяЗапись = НЗ_DRСобытия[0];
					КонецЕсли;
					
					Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
						НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
					КонецЦикла;
					
					НЗ_DRСобытия.Записать();
					
					Приемник.Записать(?(ПроводитьПоступление, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					       
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					
					ТекстЛогаСобытий = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа %ДокументПриемник% на основе входящего DR_Документа № %НомерDR_Документа% от %ДатаDR_Документа%. '", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%", ?(ПроводитьПоступление, "проведения", "записи"));    
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ДокументПриемник%", ИмяДокументаПриемника);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%НомерDR_Документа%", Выборка.Источник.Номер);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ДатаDR_Документа%", Формат(Выборка.Источник.Дата, "ДФ=dd.MM.yyyy"));
					ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + ОписаниеОшибки();
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецПопытки;
				
				// служебные операции ++  
				Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
					КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЛогСобытий) Тогда
					ТекстЛогаСобытий = ЛогСобытий;
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
				КонецЕсли;  
				// служебные операции --
				
			КонецЕсли;
			
		Иначе			
			ТекстЛогаСобытий = "По " + Строка(Выборка.Источник) + " не найден Заказ поставщику."; 
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);			
		КонецЕсли;
		
	КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<presentation>СписокDesadvВходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать поступление</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>