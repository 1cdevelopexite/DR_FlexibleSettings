<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать реализацию товаров</Value>
		<Value xsi:type="xs:string">Заказ клиента</Value>
		<Value xsi:type="xs:string">Накладная_Исходящая</Value>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать реализацию товаров &gt;&gt;&gt;";
	
	// служебные переменные гибких настроек ++
	ТипПриемника   = "РеализацияТоваровУслуг";
	ОперацияЗапись = Ложь;
	ЛогСобытий	   = ""; 
	// служебные переменные гибких настроек --
	
	ИмяДокументаПрименика = "Реализация 1С";
	ЭКОМ_СоздаватьДокументРеализация1СПроведенным = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
	ЗагружатьДатойПоставки = Настройка_Параметр_Прочитать("ЭКОМ_РеализацииСоздаватьДатойПоставки");
	РазделятьРеализации = Настройка_Параметр_Прочитать("ЭКОМ_РазделятьРеализации", Ложь);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВыбранныеЗаписи.Документ КАК Документ,
	|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВыбранныеЗаписи
	|ИЗ
	|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеЗаписи.Документ КАК Источник,
	|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор,
	|	МАКСИМУМ(ЕСТЬNULL(Реализация_События.Документ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))) КАК ДокументРеализации
	|ИЗ
	|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Реализация_События
	|		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Реализация_События.ИдентификаторЦепочки
	|			И (Реализация_События.ВидДокумента = ЗНАЧЕНИЕ(перечисление.эком_видыдокументов.накладная_исходящая))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыбранныеЗаписи.Документ,
	|	ВыбранныеЗаписи.Идентификатор,
	|	ВыбранныеЗаписи.ИдентификаторЦепочки";
	Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);
	Выборка = Запрос.Выполнить().Выбрать();
	//Сообщить(Выборка.Количетво());
	Пока Выборка.Следующий() Цикл
		
		Приемник = Документы[ТипПриемника].СоздатьДокумент();
		
		ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Приемник.Организация);
		ЕстьОшибка = Ложь;
		ТипТовары = Истина;
		
		
		ЗапросЭКОМ = Новый Запрос;
		ЗапросЭКОМ.Текст = 
		"ВЫБРАТЬ
		|	СвязанныеДокументы.Ссылка КАК ЭкомДокумент,
		|	СвязанныеДокументы.ДокументСвязанный КАК ЗаказКлиента,
		|	СвязанныеДокументы.Ссылка.ДатаПоставки КАК ДатаПоставки,
		|	СвязанныеДокументы.Ссылка.ЗаказДата КАК ЗаказДата,
		|	СвязанныеДокументы.Ссылка.ЗаказНомер КАК ЗаказНомер
		|ИЗ
		|	Документ.ЭКОМ_Документы.ДокументыСвязанные КАК СвязанныеДокументы
		|ГДЕ
		|	СвязанныеДокументы.ДокументСвязанный = &amp;Источник";
		ЗапросЭКОМ.УстановитьПараметр("Источник", Выборка.Источник);
		ВыборкаЭком = ЗапросЭКОМ.Выполнить().Выбрать();
		ВыборкаЭком.Следующий();
		
		
		Запрос.Текст = "ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Накладная,
		|	РеализацияТоваровУслуг.Проведен КАК Проведен,
		|	РеализацияТоваровУслуг.Представление КАК РеализацияПредставление
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &amp;Ссылка";
		Запрос.УстановитьПараметр("Ссылка", Выборка.ДокументРеализации);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаНакладная = РезультатЗапроса.Выбрать();
		ВыборкаНакладная.Следующий();
		НакладнаяПроведена		= ВыборкаНакладная.Проведен;  		
		Накладная			    = ВыборкаНакладная.Накладная;
		РеализацияПредставление = ВыборкаНакладная.РеализацияПредставление;
		
		Если ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И Не НакладнаяПроведена Тогда   
			Приемник = Накладная.ПолучитьОбъект();
			Приемник.Товары.Очистить();
			
			ОперацияЗапись = Истина;
		ИначеЕсли ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И НакладнаяПроведена Тогда
			НачатьТранзакцию();
			НайденнаяСтрока = ВыборкаЭком.ЭкомДокумент.ДокументыСвязанные.Найти(Накладная, "ДокументСвязанный");
			Если НайденнаяСтрока &lt;&gt; Неопределено И ЕстьОшибка = Ложь Тогда   	
				Попытка
					ЭкомДокументОбъект = ВыборкаЭком.ЭкомДокумент.ПолучитьОбъект();
					ЭкомДокументОбъект.НеВыполнятьКодПриЗаписи = Истина;
					ЭкомДокументОбъект.ДокументыСвязанные.Удалить(НайденнаяСтрока.НомерСтроки - 1);						
					ЭкомДокументОбъект.Записать();
				Исключение
					ОтменитьТранзакцию();
					ТекстОшибки = "Ошибка удаления связанного документа реализации: " + РеализацияПредставление + ", помеченного на удаление из " + Строка(ВыборкаЭком.ЭкомДокумент) + "." + 
					+ ОписаниеОшибки() + Символы.ПС;
					ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
			
			Попытка
				НакладнаяОбъект = Накладная.ПолучитьОбъект();
				НакладнаяОбъект.ПометкаУдаления = Истина;
				НакладнаяОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ЗафиксироватьТранзакцию();
				
				ТекстЛогаСобытий = "Помечен на удаление существующий документ " + РеализацияПредставление + " по заказу № " + ВыборкаЭком.ЗаказНомер + " от " + ВыборкаЭком.ЗаказДата;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
			Исключение
				ОтменитьТранзакцию();
				ТекстЛогаСобытий = "Не удалось пометить на удаление документ " + РеализацияПредставление + " по заказу № " + ВыборкаЭком.ЗаказНомер + " от " + ВыборкаЭком.ЗаказДата 
				+ Символы.ПС + "Создание нового документа отменено";
				ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий); 
				ЕстьОшибка = Истина;
			КонецПопытки;
		КонецЕсли;
		
		
		Если ЕстьОшибка = Ложь Тогда
			
			Если ТипЗнч(Выборка.Источник) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда	
				// Основной запрос для заполнения шапки документа.
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СчетНаОплатуПокупателюДок.Ссылка КАК Заказ,
				|	ЭКОМ_ТочкиДоставки.Адрес КАК АдресТочкиДоставки,
				|	РеализацияТоваровУслуг.Ссылка КАК Накладная,
				|	ЭКОМ_Документы.ЗаказНомер КАК ORDERNUMBER,
				|	ЭКОМ_Документы.ЗаказДата КАК ORDERDATE,
				|	ЭКОМ_Документы.ДатаПоставки КАК ДатаПоставки
				|ИЗ
				|	РегистрСведений.DR_События КАК DR_События_Заказ
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателюДок
				|		ПО (СчетНаОплатуПокупателюДок.Ссылка = DR_События_Заказ.Документ)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
				|		ПО (СчетНаОплатуПокупателюДок.ДоговорКонтрагента = ЭКОМ_ТочкиДоставки.Объект)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
				|		ПО (СчетНаОплатуПокупателюДок.Ссылка = РеализацияТоваровУслуг.СчетНаОплатуПокупателю)
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События
				|		ПО DR_События_Заказ.ИдентификаторЦепочки = DR_События.ИдентификаторЦепочки
				|			И (DR_События.ВидДокумента = ЗНАЧЕНИЕ(перечисление.эком_видыдокументов.Order_входящий))
				|			И (ВЫРАЗИТЬ(DR_События.Документ КАК Документ.ЭКОМ_Документы).АктуальныйДокумент = ИСТИНА)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
				|		ПО (DR_События.Документ = ЭКОМ_Документы.Ссылка)
				|ГДЕ
				|	DR_События_Заказ.ИдентификаторЦепочки = &amp;ИдентификаторЦепочки
				|	И DR_События_Заказ.Документ = &amp;ИсточникДокумент";
				Запрос.УстановитьПараметр("ИсточникДокумент", Выборка.Источник);
				Запрос.УстановитьПараметр("ИдентификаторЦепочки", Выборка.ИдентификаторЦепочки);
				РезультатЗапроса = Запрос.Выполнить();
				Выборка_DR = РезультатЗапроса.Выбрать();
				Выборка_DR.Следующий();
				
				ORDERNUMBER           = Выборка_DR.ORDERNUMBER;
				ORDERDATE             = Выборка_DR.ORDERDATE;
				Накладная 			  = Выборка_DR.Накладная;
				
				ЗаполнитьЗначенияСвойств(Приемник, Выборка.Источник);
				МассивСчетов = Новый Массив;
				МассивСчетов.Добавить(Выборка.Источник);
				
				Приемник.ЗаполнитьПоСчету("Товары, Услуги", МассивСчетов);
				Если Приемник.Товары.Количество() = 0 Тогда
					ТипТовары = Ложь;
				КонецЕсли;
					
				Приемник.Склад = Справочники.Склады.ПолучитьСкладПоУмолчанию(); 
				Приемник.БанковскийСчетОрганизации = ОсновнойБанковскийСчетОрганизацииЗаполнен;
				Если НЕ ЗначениеЗаполнено(Приемник.БанковскийСчетОрганизации) Тогда
					Приемник.БанковскийСчетОрганизации  = Приемник.Организация.ОсновнойБанковскийСчет;	
				КонецЕсли;
				
			Иначе		
				// По документу ORDER		
				// Основной запрос для заполнения шапки документа.
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	ЭКОМ_Документы.Ссылка КАК ORDER,
				|	ЕСТЬNULL(ЭКОМ_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ИспользоватьЦеныИз1С,
				|	ЭКОМ_ИнфоПоля.СхемаПодсчета КАК СхемаПодсчета,
				|	ЭКОМ_ТочкиДоставки.Адрес КАК АдресТочкиДоставки,
				|	ЭКОМ_Документы.ТочкаДоставки КАК ТочкаДоставки,
				|	ЭКОМ_Документы.ФайлНомер КАК ORDERDATE,
				|	ЭКОМ_Документы.ФайлДата КАК ORDERNUMBER,
				|	ЭКОМ_Документы.ДатаПоставки КАК ДатаПоставки,
				|	ЭКОМ_Документы.Контрагент КАК Контрагент,
				|	ОсновныеДоговорыКонтрагента.Договор.Ссылка КАК ДоговорСсылка
				|ИЗ
				|	Документ.ЭКОМ_Документы КАК ЭКОМ_Документы
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
				|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭКОМ_ИнфоПоля КАК ЭКОМ_ИнфоПоля
				|			ПО ЭКОМ_GLN.Контрагент_ФорматЭСФ = ЭКОМ_ИнфоПоля.ФорматУПД
				|		ПО ЭКОМ_Документы.Контрагент = ЭКОМ_GLN.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
				|		ПО ЭКОМ_Документы.ТочкаДоставки = ЭКОМ_ТочкиДоставки.Объект
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
				|		ПО (ЭКОМ_Документы.Контрагент = ОсновныеДоговорыКонтрагента.Контрагент.Ссылка)
				|ГДЕ
				|	ЭКОМ_Документы.Ссылка = &amp;ИсточникДокумент";
				Запрос.УстановитьПараметр("ИсточникДокумент", Выборка.Источник);
				РезультатЗапроса = Запрос.Выполнить();
				Выборка_DR = РезультатЗапроса.Выбрать();
				Выборка_DR.Следующий();
				ИспользоватьЦеныИз1С  	= Выборка_DR.ИспользоватьЦеныИз1С;
				СхемаПодсчетаОбратная	= Выборка_DR.СхемаПодсчета;
				ТочкаДоставки        	= Выборка_DR.ТочкаДоставки;
				Договор        			= Выборка_DR.ДоговорСсылка;
				ORDERNUMBER          	= Выборка_DR.ORDERNUMBER;
				ORDERDATE             	= Выборка_DR.ORDERDATE;
				
				ЗаполнитьЗначенияСвойств(Приемник, Выборка.Источник,,"Дата, Номер");
				
				Приемник.ДоговорКонтрагента      = Договор;
				Приемник.ТипЦен                  = Приемник.ДоговорКонтрагента.ТипЦен;
				Приемник.СуммаВключаетНДС        = Приемник.ТипЦен.ЦенаВключаетНДС;
				Приемник.БанковскийСчетОрганизации = ОсновнойБанковскийСчетОрганизацииЗаполнен;
				Если НЕ ЗначениеЗаполнено(Приемник.БанковскийСчетОрганизации) Тогда
					Приемник.БанковскийСчетОрганизации  = Приемник.Организация.ОсновнойБанковскийСчет;	
				КонецЕсли;
				Если Не (Приемник.ДоговорКонтрагента.Владелец = Приемник.Контрагент И Приемник.ДоговорКонтрагента.Организация = Приемник.Организация) Тогда
					Приемник.ДоговорКонтрагента = Неопределено;
					ТекстОшибки = "По заказу №" + ORDERNUMBER + " от " + Формат(ORDERDATE, "ДЛФ=Д") + " владелец договора отличается от контрагента или не относится к организации в документе. Договор обнулён!"; 
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстОшибки, Перечисления.ЭКОМ_УровниЛогирования.Ошибка, "Создание документов");
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				КонецЕсли;
				
				Приемник.Склад = Справочники.Склады.ПолучитьСкладПоУмолчанию();
				
				// Табличная часть
				ЗапросТЧ = Новый Запрос;
				ЗапросТЧ.Текст = "ВЫБРАТЬ
				|	ЭКОМ_ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
				|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК ЦенаИз1С,
				|	ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое КАК КоличествоПоставляемое,
				|	ЭКОМ_ДокументыТЧ_Товары.ЦенаСНДС КАК ЦенаСНДС,
				|	ЭКОМ_ДокументыТЧ_Товары.СтавкаНДС КАК СтавкаНДС,
				|	ЭКОМ_ДокументыТЧ_Товары.Сумма_с_НДС КАК Сумма_с_НДС,
				|	ЭКОМ_ДокументыТЧ_Товары.Цена КАК Цена,
				|	ЭКОМ_ДокументыТЧ_Товары.Сумма КАК Сумма,
				|	ВЫБОР
				|		КОГДА ЭКОМ_ДокументыТЧ_Товары.КоличествоВУпаковке &gt; 0
				|			ТОГДА ЭКОМ_ДокументыТЧ_Товары.КоличествоВУпаковке
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК КоличествоВУпаковке
				|ИЗ
				|	Документ.ЭКОМ_Документы.ТЧ_Товары КАК ЭКОМ_ДокументыТЧ_Товары
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&amp;ДатаЗаказа, ТипЦен = &amp;ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
				|		ПО (ЭКОМ_ДокументыТЧ_Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
				|ГДЕ
				|	ЭКОМ_ДокументыТЧ_Товары.Ссылка = &amp;Ссылка
				|	И НЕ ЭКОМ_ДокументыТЧ_Товары.КоличествоПоставляемое = 0";
				
				ЗапросТЧ.УстановитьПараметр("ТипЦен"    , Приемник.ДоговорКонтрагента.ТипЦен);
				ЗапросТЧ.УстановитьПараметр("ДатаЗаказа", Выборка.Источник.ЗаказДата);
				ЗапросТЧ.УстановитьПараметр("Ссылка"    , Выборка.Источник);
				РезультатЗапросаТЧ = ЗапросТЧ.Выполнить();
				ВыборкаТЧ = РезультатЗапросаТЧ.Выбрать();
				Пока ВыборкаТЧ.Следующий() Цикл
					НовСтр = Приемник.Товары.Добавить();        	    	   
					НовСтр.Количество   = ВыборкаТЧ.КоличествоПоставляемое*ВыборкаТЧ.КоличествоВУпаковке;
					НовСтр.СтавкаНДС    = СтавкаНДССсылка(ВыборкаТЧ.СтавкаНДС);
					НовСтр.Номенклатура = ВыборкаТЧ.Номенклатура;
					
					// Цена из документа или из базы 1С
					Цена = 0;
					Если ИспользоватьЦеныИз1С = Истина 
						И НЕ ВыборкаТЧ.ЦенаИз1С = 0 Тогда
						Цена = ВыборкаТЧ.ЦенаИз1С;
					Иначе
						Если Приемник.СуммаВключаетНДС Тогда
							Цена = ВыборкаТЧ.ЦенаСНДС/ВыборкаТЧ.КоличествоВУпаковке;
						Иначе
							Цена = ВыборкаТЧ.Цена/ВыборкаТЧ.КоличествоВУпаковке;		
						КонецЕсли;		
					КонецЕсли;
					
					// Цена без НДС или с НДС
					Если Приемник.СуммаВключаетНДС Тогда
						ЦенаСНДС   = Цена;
						ЦенаБезНДС = Цена/((100 + ВыборкаТЧ.СтавкаНДС)/100);
					Иначе
						ЦенаСНДС   = Цена * ((100 + ВыборкаТЧ.СтавкаНДС)/100);
						ЦенаБезНДС = Цена;
					КонецЕсли;
					
					// Обратная (от цены с НДС)
					Если СхемаПодсчетаОбратная = Истина Тогда 
						СуммаСНДС   = ЦенаСНДС * НовСтр.Количество; 
						СуммаНДС    = Окр(СуммаСНДС / (100 + ВыборкаТЧ.СтавкаНДС) * ВыборкаТЧ.СтавкаНДС, 4);
						СуммаБезНДС = СуммаСНДС - СуммаНДС;
						
						// Прямая (от цены без НДС)
					Иначе	
						СуммаБезНДС = ЦенаБезНДС * НовСтр.Количество;
						СуммаСНДС   = СуммаБезНДС * (100 + ВыборкаТЧ.СтавкаНДС)/100;
						СуммаНДС    = Окр(СуммаСНДС - СуммаБезНДС, 4);
						
					КонецЕсли;
					
					НовСтр.СуммаНДС     = СуммаНДС;
					НовСтр.Цена         = Цена;
					НовСтр.Сумма        = Цена * НовСтр.Количество;			
				КонецЦикла;
			КонецЕсли;
			
			ДатаПоставки          = Выборка_DR.ДатаПоставки;
			АдресТочкиДоставки    = Выборка_DR.АдресТочкиДоставки;
			
			ДатаРеализации = ТекущаяДата();
			Если ЗагружатьДатойПоставки Тогда
				Если ЗначениеЗаполнено(ДатаПоставки) Тогда
					ДатаРеализации = ДатаПоставки;
				КонецЕсли;
			КонецЕсли;
			
			Приемник.Номер                   = Неопределено; // Заполняется системно
			Приемник.Дата                    = ДатаРеализации;
			Приемник.АдресДоставки           = АдресТочкиДоставки;
			Приемник.Комментарий             = "Заказ №" + ORDERNUMBER + " от " + Формат(ORDERDATE, "ДЛФ=Д");
			Приемник.Ответственный           = ПользователиКлиентСервер.ТекущийПользователь();
			Приемник.КурсВзаиморасчетов      = 1;
			Приемник.КратностьВзаиморасчетов = 1;
			Приемник.ВидОперации             = ?(ТипТовары,Перечисления.ВидыОперацийРеализацияТоваров.Товары, Перечисления.ВидыОперацийРеализацияТоваров.Услуги);
			Приемник.ВалютаДокумента         = Приемник.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			Приемник.СпособЗачетаАвансов     = Перечисления.СпособыЗачетаАвансов.Автоматически;
			
			// Для заполнения счетов
			СтруктураДанныеФормы = "";
			Для Каждого ТекущийРеквизит Из Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты Цикл
				СтруктураДанныеФормы = СтруктураДанныеФормы + ?(ЗначениеЗаполнено(СтруктураДанныеФормы),",","") + ТекущийРеквизит.Имя ;
			КонецЦикла;
			
			СтруктураПриемник = Новый Структура(СтруктураДанныеФормы);
			ЗаполнитьЗначенияСвойств(СтруктураПриемник, Приемник); 
			СтруктураПриемник.Вставить("Дата", Приемник.Дата);
			
			ДанныеФормы = Новый Структура;
			ДанныеФормы.Вставить("Объект", СтруктураПриемник);
			
			КЗаполнению = Новый Соответствие;
			КЗаполнению.Вставить("СчетУчетаРасчетовПоАвансам"    , Истина);
			КЗаполнению.Вставить("СчетУчетаРасчетовСКонтрагентом", Истина);
			КЗаполнению.Вставить("СчетУчетаРасчетовПоТаре"       , Истина);
			
			ПричиныИзменения = Новый Массив;
			ПричиныИзменения.Добавить("Контрагент");
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ДанныеФормы", ДанныеФормы);
			ПараметрыЗаполнения.Вставить("Заполнять", Истина);
			ПараметрыЗаполнения.Вставить("ИмяДокумента", "РеализацияТоваровУслуг");
			ПараметрыЗаполнения.Вставить("КЗаполнению", КЗаполнению);
			ПараметрыЗаполнения.Вставить("НакапливатьИзмененияВФорме", Ложь);
			ПараметрыЗаполнения.Вставить("ПричиныИзменения", ПричиныИзменения); 
			
			// Шапка документа
			СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(ПараметрыЗаполнения);
			ЗаполнитьЗначенияСвойств(Приемник, СтруктураПриемник);
			
			// Табличная часть
			СчетаУчетаВДокументах.ЗаполнитьСтроки(Приемник.Товары, "Товары", СтруктураПриемник, Документы.РеализацияТоваровУслуг, Истина);
			
			Если Приемник.Товары.Количество() = 0 И Приемник.Услуги.Количество() = 0 Тогда
				
				ТекстЛогаСобытий = "Документ Реализация по документу " + Строка(Выборка.Источник) +
				" не создан, т.к. не заполнены товары/услуги, возможно документ был сформирован вручную или весь товар по заказу уже реализован.";
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Предупреждение, ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				
				Продолжить;
				
			КонецЕсли;
			
			ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
			
			Если ОшибокНеОбнаружено Тогда
				НачатьТранзакцию(); 
				
				Если ЗначениеЗаполнено(Накладная) И Не НакладнаяПроведена И Не РазделятьРеализации Тогда
					НоваяСсылка = Накладная; 
				Иначе   				
					НоваяСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку();
					Приемник.УстановитьСсылкуНового(НоваяСсылка);
				КонецЕсли;
				
				// Запись ссылки в ЭКОМ документ.
				Попытка
					
					Отбор = Новый Структура();
					Отбор.Вставить("ДокументСвязанный", Приемник.Ссылка);
					НайденныеСтроки = ВыборкаЭком.ЭкомДокумент.ДокументыСвязанные.НайтиСтроки(Отбор);
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						ЭкомДокументОбъект = ВыборкаЭком.ЭкомДокумент.ПолучитьОбъект();
						НовДок = ЭкомДокументОбъект.ДокументыСвязанные.Добавить();
						НовДок.ДокументСвязанный = Приемник.Ссылка;
						ЭкомДокументОбъект.НеВыполнятьКодПриЗаписи = Истина;
						ЭкомДокументОбъект.Записать();
					КонецЕсли;
					
					
					Если (Не РазделятьРеализации) И ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
						 
						ТекстЛогаСобытий = "Перезаписан уже существующий документ " + Строка(Выборка.ДокументРеализации) + " по заказу № " + Выборка.Источник + ".";
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
						
					ИначеЕсли РазделятьРеализации И ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
						
						ТекстЛогаСобытий = "Разделена цепочка по заказу " + Строка(Выборка.Источник) + ". Создан документ " + Строка(Приемник.Ссылка) + ".";
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
						
					КонецЕсли;
					
				Исключение
					
					ТекстЛогаСобытий = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%", ?(ЭКОМ_СоздаватьДокументРеализация1СПроведенным, "проведения", "записи"));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлНомер%", ВыборкаЭком.ЭкомДокумент.ФайлНомер);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлДата%", Формат(ВыборкаЭком.ЭкомДокумент.ФайлДата, "ДФ=dd.MM.yyyy"));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					ОтменитьТранзакцию();
					Продолжить;
					
				КонецПопытки;
				
				Попытка
					
					Приемник.Записать(?(ЭКОМ_СоздаватьДокументРеализация1СПроведенным, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));		            
					
					ВидДокументаПриемник = Перечисления.ЭКОМ_ВидыДокументов.Накладная_Исходящая;	
					
					СтруктураРегистраDR_События = Новый Структура;
					СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
					СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);
					СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
					СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
					СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
					СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
					ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);	
					
				Исключение
					ТекстЛогаСобытий = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%", ?(ЭКОМ_СоздаватьДокументРеализация1СПроведенным, "проведения", "записи"));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлНомер%", ВыборкаЭком.ЭкомДокумент.ФайлНомер);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлДата%", Формат(ВыборкаЭком.ЭкомДокумент.ФайлДата, "ДФ=dd.MM.yyyy"));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					ОтменитьТранзакцию();
					Продолжить;
					
				КонецПопытки;
				
				ЗафиксироватьТранзакцию();
				
				Если ЗначениеЗаполнено(Выборка.ДокументРеализации) И Не РазделятьРеализации И Не НакладнаяПроведена Тогда   
					ТекстЛогаСобытий = "Перезаписан уже существующий документ " + РеализацияПредставление + " по заказу № " + ВыборкаЭком.ЗаказНомер + " от " + ВыборкаЭком.ЗаказДата;
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				ИначеЕсли РазделятьРеализации И ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
					ТекстЛогаСобытий = "Разделена цепочка по документу " + Строка(Выборка.Источник) + ". Создан документ " + Строка(Приемник.Ссылка) + ".";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Успешно, ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				КонецЕсли;   		
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Заказ_Входящий</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать реализацию товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ЭТРН</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>