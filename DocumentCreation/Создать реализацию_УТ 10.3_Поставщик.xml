<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать реализацию товаров</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать реализацию товаров &gt;&gt;&gt;";
РазделятьРеализации = Настройка_Параметр_Прочитать("ЭКОМ_РазделятьРеализации", Ложь);    

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки", Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	Элемент.Вставить("Идентификатор", Элемент.Документ.УникальныйИдентификатор());
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
КонецЦикла;


// служебные переменные гибких настроек ++
ТипПриемника   = "РеализацияТоваровУслуг";
ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 
// служебные переменные гибких настроек --

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ВыбранныеЗаписи.Документ КАК Документ,
               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
               |ПОМЕСТИТЬ ВыбранныеЗаписи
               |ИЗ
               |	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВыбранныеЗаписи.Документ КАК Документ,
               |	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ВыбранныеЗаписи.Идентификатор КАК Идентификатор,
               |	Заказ_События.ИдентификаторОснования КАК ИдентификаторОснования
               |ПОМЕСТИТЬ ВТ_СобытияЗаказ
               |ИЗ
               |	ВыбранныеЗаписи КАК ВыбранныеЗаписи
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
               |		ПО ВыбранныеЗаписи.Идентификатор = Заказ_События.Идентификатор
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТ_СобытияЗаказ.Документ КАК Источник,
               |	ВТ_СобытияЗаказ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ORDER_События.Документ КАК DR_Документ,
               |	МАКСИМУМ(ЕСТЬNULL(Реализация_События.Документ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))) КАК ДокументРеализации
               |ПОМЕСТИТЬ Итог
               |ИЗ
               |	ВТ_СобытияЗаказ КАК ВТ_СобытияЗаказ
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК ORDER_События
               |		ПО ВТ_СобытияЗаказ.ИдентификаторЦепочки = ORDER_События.ИдентификаторЦепочки
               |			И (ORDER_События.ВидДокумента = ""ORDER_Входящий"")
               |			И ВТ_СобытияЗаказ.ИдентификаторОснования = ORDER_События.Идентификатор
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Реализация_События
               |		ПО ВТ_СобытияЗаказ.ИдентификаторЦепочки = Реализация_События.ИдентификаторЦепочки
               |			И (Реализация_События.ВидДокумента = ""Накладная_исходящая"")
               |
               |СГРУППИРОВАТЬ ПО
               |	ВТ_СобытияЗаказ.Документ,
               |	ВТ_СобытияЗаказ.ИдентификаторЦепочки,
               |	ORDER_События.Документ
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	Итог.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	Итог.Источник КАК Источник,
               |	Итог.DR_Документ КАК DR_Документ,
               |	ВЫРАЗИТЬ(ДР_ДатаПоставки.Значение КАК ДАТА) КАК ДатаПоставки,
               |	ВЫРАЗИТЬ(ДР_NUMBER.Значение КАК СТРОКА(35)) КАК ЗаказНомер,
               |	ВЫРАЗИТЬ(ДР_ДатаЭлектронногоДокумента.Значение КАК ДАТА) КАК ЗаказДата,
               |	ЕСТЬNULL(ЗаказПокупателя.СкладГруппа, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ИсточникСклад,
               |	ЕСТЬNULL(ЗаказПокупателя.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ИсточникДатаОтгрузки,
               |	ЕСТЬNULL(ЗаказПокупателя.Комментарий, """") КАК ИсточникКомментарий,
               |	ЕСТЬNULL(ЗаказПокупателя.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ИсточникДата,
               |	ЕСТЬNULL(ЗаказПокупателя.Номер, """") КАК ИсточникНомер,
               |	Итог.ДокументРеализации КАК ДокументРеализации,
               |	ЕСТЬNULL(ЗаказПокупателя.НомерВходящегоДокументаЭлектронногоОбмена, """") КАК НомерПоДаннымКлиента,
               |	ЕСТЬNULL(ЗаказПокупателя.ДатаВходящегоДокументаЭлектронногоОбмена, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоДаннымКлиента
               |ИЗ
               |	Итог КАК Итог
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
               |		ПО Итог.Источник = ЗаказПокупателя.Ссылка
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаПоставки
               |		ПО Итог.DR_Документ = ДР_ДатаПоставки.Ссылка
               |			И (ДР_ДатаПоставки.Реквизит = ""ДатаПоставки"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_NUMBER
               |		ПО Итог.DR_Документ = ДР_NUMBER.Ссылка
               |			И (ДР_NUMBER.Реквизит = ""NUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаЭлектронногоДокумента
               |		ПО Итог.DR_Документ = ДР_ДатаЭлектронногоДокумента.Ссылка
               |			И (ДР_ДатаЭлектронногоДокумента.Реквизит = ""ДатаЭлектронногоДокумента"")";
Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);
Выборка = Запрос.Выполнить().Выбрать();

Пока Выборка.Следующий() Цикл
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = новый Структура;
	КонецЕсли;
	// Получение общих для всех документов значений.
	ПроводитьРеализацию			= Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ПроводитьРеализацию", ПроводитьРеализацию) Тогда
		ПроводитьРеализацию		= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
		КэшированныеЗначения.Вставить("ПроводитьРеализацию", ПроводитьРеализацию);
	КонецЕсли;
	ЗагружатьДатойПоставки		= Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки) Тогда
		ЗагружатьДатойПоставки	= Настройка_Параметр_Прочитать("ЭКОМ_РеализацииСоздаватьДатойПоставки");
		КэшированныеЗначения.Вставить("ЗагружатьДатойПоставки", ЗагружатьДатойПоставки);
	КонецЕсли;
	
	глТекущийПользователь = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("глТекущийПользователь", глТекущийПользователь) Тогда
		глТекущийПользователь	= глЗначениеПеременной("глТекущийПользователь");
		КэшированныеЗначения.Вставить("глТекущийПользователь", глТекущийПользователь);
	КонецЕсли;
	
	ОсновнойСклад = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("ОсновнойСклад", ОсновнойСклад) Тогда
		ОсновнойСклад	= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глТекущийПользователь, "ОсновнойСклад");
		КэшированныеЗначения.Вставить("ОсновнойСклад", ОсновнойСклад);
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета) Тогда
		мВалютаРегламентированногоУчета 	= глЗначениеПеременной("ВалютаРегламентированногоУчета");
		КэшированныеЗначения.Вставить("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	КонецЕсли;
	
	docrobotНомерЗаказа = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("docrobotНомерЗаказа", docrobotНомерЗаказа) Тогда
		КэшированныеЗначения.Вставить("docrobotНомерЗаказа", Неопределено);
	КонецЕсли;
	
	docrobotДатаЗаказа = Неопределено;
	Если НЕ КэшированныеЗначения.Свойство("docrobotДатаЗаказа", docrobotДатаЗаказа) Тогда
		КэшированныеЗначения.Вставить("docrobotДатаЗаказа", Неопределено);
	КонецЕсли;
	
	Приемник = Документы[ТипПриемника].СоздатьДокумент();
	
	ДатаДокумента = Выборка.ДатаПоставки;
	НомерПоДаннымКлиента = Выборка.НомерПоДаннымКлиента;
	ДатаПоДаннымКлиента = Выборка.ДатаПоДаннымКлиента;
	Комментарий = Выборка.ИсточникКомментарий;
	
	Если ДатаДокумента &lt; Выборка.ИсточникДата Тогда
		ДатаДокумента =  Выборка.ИсточникДата + 1; // дата РТУ должна быть больше даты заказа: такое возможно, если в настройках дата заказа = текущая дата и дата РТУ = дата поставки
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Накладная,
	|	РеализацияТоваровУслуг.Проведен КАК Проведен,
	|	РеализацияТоваровУслуг.Представление КАК РеализацияПредставление
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &amp;Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Выборка.ДокументРеализации);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаРТУ = РезультатЗапроса.Выбрать();
	ВыборкаРТУ.Следующий();
	НакладнаяПроведена		= ВыборкаРТУ.Проведен;  		
	Накладная			    = ВыборкаРТУ.Накладная;
	РеализацияПредставление = ВыборкаРТУ.РеализацияПредставление;
	
	Если ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И Не НакладнаяПроведена Тогда  
		ОперацияЗапись = Истина;
		
		Приемник = Накладная.ПолучитьОбъект();
		Приемник.Товары.Очистить();
	ИначеЕсли ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И НакладнаяПроведена Тогда  
		НачатьТранзакцию();
		
		Попытка
			НакладнаяОбъект = Накладная.ПолучитьОбъект();
			НакладнаяОбъект.ПометкаУдаления = Истина;
			НакладнаяОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			ЗафиксироватьТранзакцию();
			
			ТекстЛогаСобытий = "Помечен на удаление существующий документ " + РеализацияПредставление + " по заказу № " + НомерПоДаннымКлиента + " от " + ДатаПоДаннымКлиента;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		Исключение
			ОтменитьТранзакцию();
			ТекстЛогаСобытий = "Не удалось пометить на удаление документ " + РеализацияПредставление + " по заказу № " + НомерПоДаннымКлиента + " от " + ДатаПоДаннымКлиента 
			+ Символы.ПС + "Создание нового документа отменено";
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий); 
			Продолжить;
		КонецПопытки;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Накладная) ИЛИ НакладнаяПроведена ИЛИ Разделятьреализации Тогда
		ЗаполнитьЗначенияСвойств(Приемник, Документы.РеализацияТоваровУслуг.СоздатьДокумент());
	КонецЕсли;
	
	Приемник.Заполнить(Выборка.Источник);
	Приемник.Дата = ?(ЗагружатьДатойПоставки, ДатаДокумента, ТекущаяДатаСеанса());
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Приемник.Комментарий = Комментарий;
	Иначе
		Приемник.Комментарий = ?(ЗначениеЗаполнено(НомерПоДаннымКлиента), "Заказ № " + НомерПоДаннымКлиента, "");
		Приемник.Комментарий = Приемник.Комментарий
		+ ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(ДатаПоДаннымКлиента), 
		" от " + Формат(ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
	КонецЕсли;
	
	Если НЕ Приемник.Товары.Количество() = 0 Тогда	
		Запрос = Новый Запрос;
		ЗаполнятьОстаткиПоРегистру = Ложь;
		Если ЗаполнятьОстаткиПоРегистру Тогда
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗаказыПокупателейОстатки.Номенклатура,
			|	ЗаказыПокупателейОстатки.ХарактеристикаНоменклатуры,
			|	ЗаказыПокупателейОстатки.Цена,
			|	ЗаказыПокупателейОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ЗаказыПокупателей.Остатки(&amp;ТекущаяДата, ЗаказПокупателя = &amp;Источник) КАК ЗаказыПокупателейОстатки";
		Иначе
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры,
			|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			|	РеализацияТоваровУслугТовары.Цена
			|ПОМЕСТИТЬ ТоварыРеализаций
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|ГДЕ
			|	РеализацияТоваровУслугТовары.ЗаказПокупателя = &amp;Источник
			|	И РеализацияТоваровУслугТовары.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.Цена,
			|	РеализацияТоваровУслугТовары.ХарактеристикаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЗаказПокупателяТовары.Номенклатура,
			|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры,
			|	СУММА(ЗаказПокупателяТовары.Количество) КАК Количество,
			|	ЗаказПокупателяТовары.Цена
			|ПОМЕСТИТЬ ТоварыЗаказа
			|ИЗ
			|	Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
			|ГДЕ
			|	ЗаказПокупателяТовары.Ссылка = &amp;Источник
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказПокупателяТовары.Номенклатура,
			|	ЗаказПокупателяТовары.Цена,
			|	ЗаказПокупателяТовары.ХарактеристикаНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыЗаказа.Номенклатура,
			|	ТоварыЗаказа.ХарактеристикаНоменклатуры,
			|	ТоварыЗаказа.Количество - ЕСТЬNULL(ТоварыРеализаций.Количество, 0) КАК КоличествоОстаток,
			|	ТоварыЗаказа.Цена
			|ИЗ
			|	ТоварыЗаказа КАК ТоварыЗаказа
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыРеализаций КАК ТоварыРеализаций
			|		ПО ТоварыЗаказа.Номенклатура = ТоварыРеализаций.Номенклатура
			|			И ТоварыЗаказа.ХарактеристикаНоменклатуры = ТоварыРеализаций.ХарактеристикаНоменклатуры
			|			И ТоварыЗаказа.Цена = ТоварыРеализаций.Цена";	
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Источник", Выборка.Источник);
		ВыборкаОстатки = Запрос.Выполнить().Выбрать();
		Пока ВыборкаОстатки.Следующий() Цикл
			КоличествоОстаток = ВыборкаОстатки.КоличествоОстаток;
			ПараметрыОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Цена");
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ВыборкаОстатки);
			НайденныеСтроки = Приемник.Товары.НайтиСтроки(ПараметрыОтбора);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если КоличествоОстаток &lt;= 0 Тогда
					Приемник.Товары.Удалить(Строка);
				Иначе
					Строка.Количество = Мин(КоличествоОстаток, Строка.Количество);
					КоличествоОстаток = КоличествоОстаток - Строка.Количество;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если Приемник.Товары.Количество() = 0 И Приемник.Услуги.Количество() = 0 Тогда
		ТекстЛогаСобытий = "Документ Реализация товаров и услуг по документу " + Строка(Выборка.Источник) +
		" не создан, т.к. не заполнены товары, возможно документ был сформирован вручную или весь товар по заказу уже реализован.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		Продолжить;
	КонецЕсли;
	ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
	Если ОшибокНеОбнаружено Тогда
		НачатьТранзакцию();
		Если ЗначениеЗаполнено(Накладная) И Не НакладнаяПроведена И Не РазделятьРеализации Тогда
			НоваяСсылка = Накладная; 
		Иначе   				
			НоваяСсылка = Документы.РеализацияТоваровУслуг.ПолучитьСсылку(Новый УникальныйИдентификатор);
			Приемник.УстановитьСсылкуНового(НоваяСсылка);
		КонецЕсли;
		
		Попытка
			Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
			ВидДокументаПриемник = "Накладная_Исходящая";	
			           	  					
			СтруктураРегистраDR_События = Новый Структура;
			СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
			СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);
			СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
			СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
			СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Источник.УникальныйИдентификатор());
			СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
			ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);
		Исключение
			Ошибка = ОписаниеОшибки();
			ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" + ОписаниеОшибки());
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%", ?(ПроводитьРеализацию, "проведения", "записи"));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%", Выборка.ИсточникНомер);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%", Формат(Выборка.ИсточникДата, "ДФ=dd.MM.yyyy"));
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
		Если ЗначениеЗаполнено(Накладная) И Не РазделятьРеализации И Не НакладнаяПроведена Тогда  
			ТекстЛогаСобытий = "Перезаписан уже существующий документ " + РеализацияПредставление + " по заказу № " + НомерПоДаннымКлиента + " от " + ДатаПоДаннымКлиента;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		ИначеЕсли РазделятьРеализации И ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
			ТекстЛогаСобытий = "Разделена цепочка по документу " + Строка(Выборка.Источник) + ". Создан документ " + Строка(Приемник.Ссылка) + ".";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
		КонецЕсли;
		
	КонецЕсли;
			
	// служебные операции ++  
	Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЛогСобытий) Тогда
		ТекстЛогаСобытий = ЛогСобытий;
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		
	КонецЕсли;  
	// служебные операции --

КонецЦикла;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокЗаказПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Создать реализацию товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>