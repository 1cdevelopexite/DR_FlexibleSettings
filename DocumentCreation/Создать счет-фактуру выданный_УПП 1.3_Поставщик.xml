<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КолонкаИсточника</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать счет-фактуру выданный</Value>
		<Value xsi:type="xs:string">Накладная_Исходящая</Value>
		<Value xsi:type="xs:string">Накладная_Исходящая</Value>
		<Value xsi:type="xs:string">СчетФактура_Исходящий</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:nil="true"/>
		<Value xsi:nil="true"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">ИмяСобытия = "Создание документов по кнопке &lt;&lt;&lt; Создать счет-фактуру выданный &gt;&gt;&gt;";

// служебные переменные гибких настроек ++
ТипПриемника   = "СчетФактураВыданный";
ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 
// служебные переменные гибких настроек --

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Источник,
|	ВЫБОР
|		КОГДА РеализацияТоваровУслуг.Ссылка ЕСТЬ NULL
|			ТОГДА ЛОЖЬ
|		ИНАЧЕ РеализацияТоваровУслуг.ОтражатьВБухгалтерскомУчете
|	КОНЕЦ КАК ОтражатьВБухгалтерскомУчете
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
|		ПО ВыбранныеЗаписи.Документ = РеализацияТоваровУслуг.Ссылка";
Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);

РезультатЗапроса = Запрос.Выполнить();   
Выборка = РезультатЗапроса.Выбрать();

Пока Выборка.Следующий() Цикл
	Приемник = Документы[ТипПриемника].СоздатьДокумент();
	
	Если Не Выборка.ОтражатьВБухгалтерскомУчете Тогда
		ТекстЛогаСобытий = "Счет-фактуру нельзя вводить на основании документа, не отражаемого в бухгалтерском учете";
		ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
	Иначе
		//Попытаемся найти счет-фактуру
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Выборка.Источник, "СчетФактураВыданный");
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			Приемник = СчетФактура.ПолучитьОбъект();
			Приемник.ДокументыОснования.Очистить();
		Иначе
			Приемник = Документы.СчетФактураВыданный.СоздатьДокумент();
		КонецЕсли;
		Приемник.Заполнить(Выборка.Источник);
		Приемник.Дата = ТекущаяДата();
		Приемник.КодСпособаВыставления = 2;
		Если Приемник.ДокументыОснования.Количество() = 0 Тогда
			НовСтрока = Приемник.ДокументыОснования.Добавить();
			НовСтрока.ДокументОснование = Выборка.Источник;
		КонецЕсли;
		Если Приемник.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			Приемник.ДатаНомерДокументовОплаты.Добавить();
		КонецЕсли;
		ИмяДокументаПрименика = "Счет-фактура выданный 1С";
		ДокументЗаписан = Ложь;
		Попытка
			Приемник.Записать(РежимЗаписиДокумента.Проведение);      
			ДокументЗаписан = Истина;
		Исключение
			Приемник.Записать(РежимЗаписиДокумента.Запись);
			ТекстЛогаСобытий = ИмяДокументаПрименика + " по документу " + Строка(Выборка.Источник) + " не создана!!! " + СокрЛП(ОписаниеОшибки()); 
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстЛогаСобытий);
			ДокументЗаписан = Истина;
		КонецПопытки;
		
		Если ДокументЗаписан Тогда
			ВидДокументаПриемник = Перечисления.ЭКОМ_ВидыДокументов.СчетФактура_Исходящий;	
			           	  					
			СтруктураРегистраDR_События = Новый Структура;
			СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
			СтруктураРегистраDR_События.Вставить("Документ"					, Приемник.Ссылка);
			СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
			СтруктураРегистраDR_События.Вставить("Идентификатор"			, Приемник.Ссылка.УникальныйИдентификатор());
			СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Источник.УникальныйИдентификатор());
			СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
			ЭКОМ_ОбщегоНазначения.Записать_DR_События(СтруктураРегистраDR_События);
		КонецЕсли;
	КонецЕсли;
	
	// служебные операции ++  
	Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЛогСобытий) Тогда
		ТекстЛогаСобытий = ЛогСобытий;
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Информация, ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
	КонецЕсли;  
	// служебные операции --
	
КонецЦикла;</Value>
		<Value xsi:nil="true"/>
	</row>
</ValueTree>