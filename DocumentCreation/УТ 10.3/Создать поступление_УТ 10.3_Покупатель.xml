<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать поступление товаров</Value>
		<Value xsi:type="xs:string">СоздатьПоступление</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">//&lt;служебные переменные&gt;
ИмяДокументаПриемника = "Поступление 1С";
ИмяСобытия 		= "Создание документов по кнопке &lt;&lt;&lt; Создать поступление &gt;&gt;&gt;";
ТипПриемника	= "ПоступлениеТоваровУслуг";

ОперацияЗапись = Ложь;
ЛогСобытий	   = "";

ПроводитьПоступление = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументПоступления1СПроведенным", Ложь);

ВыбранныеСтроки 			= ?(ВыбранныеСтроки = Неопределено, Новый Массив, ВыбранныеСтроки);
ВызовВходящимDESADV 		= ?(ВызовВходящимDESADV = Неопределено, Ложь, ВызовВходящимDESADV);
АвтоПоступление 			= ?(АвтоПоступление = Неопределено, Ложь, АвтоПоступление);
ПерезаписыватьПоступление 	= ?(ПерезаписыватьПоступление = Неопределено, Ложь, ПерезаписыватьПоступление);
//&lt;/служебные переменные&gt;

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"					, Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"			, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	
	Элемент.Вставить("Идентификатор", Элемент.Документ.ИдентификаторДокумента);
	
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	
КонецЦикла;	

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Источник,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор,
|	ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.ЗаказПоставщику) КАК Заказ,
|	ВЫРАЗИТЬ(Поступление_События.Документ КАК Документ.ПоступлениеТоваровУслуг) КАК Поступление
|ПОМЕСТИТЬ ВТ_События
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
|		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
|			И (Заказ_События.ВидДокумента = ""Заказ_Исходящий"")
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Поступление_События
|		ПО ВыбранныеЗаписи.ИдентификаторЦепочки = Поступление_События.ИдентификаторЦепочки
|			И (Поступление_События.ИдентификаторОснования = ВыбранныеЗаписи.Идентификатор)
|			И (Поступление_События.ВидДокумента = ""Накладная_Входящая"")
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВТ_События.Источник КАК Источник,
|	ВТ_События.Идентификатор КАК Идентификатор,
|	ВТ_События.Заказ.Склад КАК ЗаказСклад,
|	ВТ_События.Заказ КАК Заказ,
|	ВТ_События.Поступление КАК Поступление,
|	ВТ_События.Поступление.Проведен КАК ПоступлениеПроведено,
|	ВЫРАЗИТЬ(ДР_NUMBER.Значение КАК СТРОКА(35)) КАК НомерЭлектронногоДокумента,
|	ВЫРАЗИТЬ(ДР_ДатаЭлектронногоДокумента.Значение КАК ДАТА) КАК ДатаЭлектронногоДокумента,
|	ВЫРАЗИТЬ(ДР_НомерНакладной.Значение КАК СТРОКА(35)) КАК НомерНакладной,
|	ВЫРАЗИТЬ(ДР_ДатаНакладной.Значение КАК ДАТА) КАК ДатаНакладной,
|	ЕСТЬNULL(ДР_POSITION.ХранилищеЗначения, НЕОПРЕДЕЛЕНО) КАК POSITION
|ИЗ
|	ВТ_События КАК ВТ_События
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_НомерНакладной
|		ПО ВТ_События.Источник = ДР_НомерНакладной.Ссылка
|			И (ДР_НомерНакладной.Реквизит = ""DELIVERYNOTENUMBER"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаНакладной
|		ПО ВТ_События.Источник = ДР_ДатаНакладной.Ссылка
|			И (ДР_ДатаНакладной.Реквизит = ""ДатаНакладной"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_NUMBER
|		ПО ВТ_События.Источник = ДР_NUMBER.Ссылка
|			И (ДР_NUMBER.Реквизит = ""NUMBER"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаЭлектронногоДокумента
|		ПО ВТ_События.Источник = ДР_ДатаЭлектронногоДокумента.Ссылка
|			И (ДР_ДатаЭлектронногоДокумента.Реквизит = ""ДатаЭлектронногоДокумента"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_POSITION
|		ПО ВТ_События.Источник = ДР_POSITION.Ссылка
|			И (ДР_POSITION.Реквизит = ""POSITION"")";

Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);

РезультатЗапроса = Запрос.Выполнить();	
Выборка = РезультатЗапроса.Выбрать();

Пока Выборка.Следующий() Цикл
	
	ДокументЗаписан = Ложь;
	
	Если ЗначениеЗаполнено(Выборка.Заказ) Тогда
		
		Если НЕ ЗначениеЗаполнено(Выборка.Поступление) И (НЕ АвтоПоступление И ВызовВходящимDESADV) Тогда
			
			Продолжить;	
		ИначеЕсли ЗначениеЗаполнено(Выборка.Поступление) И (НЕ ПерезаписыватьПоступление И ВызовВходящимDESADV) Тогда
			
			ТекстЛогаСобытий = "Автоматическая перезапись " + Строка(Выборка.Поступление) 
							 + " не выполнена. По причине отключенной настройки ""Перезаписывать поступление"".";			
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);				
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(Выборка.Поступление) И Выборка.ПоступлениеПроведено И (ПерезаписыватьПоступление И ВызовВходящимDESADV) Тогда
			
			ТекстЛогаСобытий = "Автоматическая перезапись " + Строка(Выборка.Поступление) 
							 + " не выполнена. По причине: Документ проведен!";			
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);				
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;		
		
		//&lt;Получение данных элемента POSITION&gt;
		POSITION = Выборка.POSITION;
		
		МассивСтруктурPOSITION = ?(POSITION &lt;&gt; Неопределено, POSITION.Получить(), POSITION);
		
		Если МассивСтруктурPOSITION = Неопределено Тогда
			
			ТекстЛогаСобытий = "Поступление товаров и услуг по документу " + Строка(Выборка.Источник) 
							 + " не создан. Отсутсвует либо элемент POSITION либо его значения.";
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
		КвалификаторЧисло = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		
		ТаблицаPOSITION = Новый ТаблицаЗначений;
		ТаблицаPOSITION.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаPOSITION.Колонки.Добавить("DELIVEREDQUANTITY"	, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));  
		ТаблицаPOSITION.Колонки.Добавить("PRICE"				, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
		ТаблицаPOSITION.Колонки.Добавить("PRICEWITHVAT"			, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));			
		ТаблицаPOSITION.Колонки.Добавить("ЕдиницаИзмерения"		, Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
		
		Для каждого ЭлСтруктура Из МассивСтруктурPOSITION Цикл
			НоваяСтрока = ТаблицаPOSITION.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлСтруктура);
		КонецЦикла;
		
		// Получение данных из табличной части DESADV.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(POSITION.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,			
		|	POSITION.DELIVEREDQUANTITY КАК Количество,
		|	POSITION.PRICE КАК Цена,
		|	POSITION.PRICEWITHVAT КАК ЦенаСНДС,			
		|	POSITION.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&amp;POSITION КАК POSITION
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Номенклатура КАК Номенклатура,			
		|	СУММА(ВТ.Количество) КАК Количество,
		|	ВТ.Цена КАК Цена,
		|	ВТ.ЦенаСНДС КАК ЦенаСНДС,
		|	ВТ.Номенклатура.СтавкаНДС КАК СтавкаНДС,			
		|	ВТ.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО			
		|	ВТ.Номенклатура,
		|	ВТ.Цена,
		|	ВТ.ЦенаСНДС,
		|	ВТ.Номенклатура.СтавкаНДС,
		|	ВТ.ЕдиницаИзмерения";
		
		Запрос.УстановитьПараметр("POSITION", ТаблицаPOSITION);
		
		POSITION = Запрос.Выполнить().Выгрузить();
		
		//Создание документа Поступление товаров и услуг
		Приемник = Документы[ТипПриемника].СоздатьДокумент();
		
		//Заполнение документа Поступление товаров и услуг по Заказу покупателя
		Приемник.Заполнить(Выборка.Заказ);
		
		Приемник.Дата = ТекущаяДата();
		Приемник.НомерВходящегоДокумента = Выборка.НомерНакладной; 
		Приемник.ДатаВходящегоДокумента  = Выборка.ДатаНакладной;
		
		Приемник.Комментарий = "Документ создан на основании DESADV (Уведомление об отгрузке) № " + СокрЛП(Выборка.НомерЭлектронногоДокумента) 
							 + " от " + Формат(Выборка.ДатаЭлектронногоДокумента, "ДЛФ=D");
		
		//Получение созданного документа Поступление товаров и услуг
		Если ЗначениеЗаполнено(Выборка.Поступление) Тогда
			
			Приемник = Выборка.Поступление.ПолучитьОбъект();
			
			Приемник.Комментарий = "Табличная часть документа перезаполнена на основании " 
								 + "DESADV (Уведомление об отгрузке) № " + СокрЛП(Выборка.НомерЭлектронногоДокумента) 
								 + " от " + Формат(Выборка.ДатаЭлектронногоДокумента, "ДЛФ=D");
			
			ДокументЗаписан = Истина;
			
		КонецЕсли;
		
		//Очистка табличной части Поступления перед заполнением
		Приемник.Товары.Очистить();
		
		// Заполнение табличной части
		Для каждого Стр Из POSITION Цикл        
			
			НовСтр = Приемник.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			
			Если Приемник.СуммаВключаетНДС = Истина Тогда
				Цена = Стр.ЦенаСНДС;
			Иначе	
				Цена = Стр.Цена;
			КонецЕсли;
			
			НовСтр.Цена = Цена;
			
			СуммаСНДС   = Стр.Количество * Стр.ЦенаСНДС;
			СуммаБезНДС = Стр.Количество * Стр.Цена;
			
			НовСтр.Сумма = НовСтр.Цена * НовСтр.Количество;
			НовСтр.СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
		КонецЦикла;
		
		// Проверка и запись документа.
		ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
		
		Если ОшибокНеОбнаружено Тогда
			
			//Нужно получить ссылку для записи в DR_События до выполнения подписок.
			Если НЕ ДокументЗаписан Тогда
				ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
				Идентификатор = ДокументСсылка.УникальныйИдентификатор();	
				Приемник.УстановитьСсылкуНового(ДокументСсылка);
			Иначе
				ДокументСсылка = Приемник.Ссылка;
				Идентификатор = Приемник.Ссылка.УникальныйИдентификатор();		
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка
				
				ВидДокументаПриемник = "Накладная_Входящая";	
				
				СтруктураРегистраDR_События = Новый Структура;
				СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
				СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);
				СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
				СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
				СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
				СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
				Приемник.Записать(?(ПроводитьПоступление, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));       
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				
				ТекстЛогаСобытий = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа %ДокументПриемник% на основе входящего DR_Документа № %НомерDR_Документа% от %ДатаDR_Документа%. '", 
									ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%"	, ?(ПроводитьПоступление, "проведения", "записи"));    
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ДокументПриемник%"		, ИмяДокументаПриемника);
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%НомерDR_Документа%"		, Выборка.Источник.Номер);
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ДатаDR_Документа%"		, Формат(Выборка.Источник.Дата, "ДФ=dd.MM.yyyy"));
				
				ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + ОписаниеОшибки();
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецПопытки;
			
			// служебные операции  
			Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
				КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЛогСобытий) Тогда
				ТекстЛогаСобытий = ЛогСобытий;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);  			
			КонецЕсли;  
			
		КонецЕсли;
		
	Иначе			
		
		ТекстЛогаСобытий = "По " + Строка(Выборка.Источник) + " не найден Заказ поставщику."; 
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		
	КонецЕсли;
	
КонецЦикла;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<presentation>СписокDesadvВходящиеПокупатель</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Создать поступление товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>СоздатьПоступление</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string">ТекстЗапроса = "ВЫБРАТЬ
               |	DESADVВходящий.Ссылка КАК Документ,
               |	DESADVВходящий.ИдентификаторЦепочки КАК ИдентификаторЦепочки
               |ПОМЕСТИТЬ втDESADVВходящий
               |ИЗ
               |	Документ.DR_Документ КАК DESADVВходящий
               |ГДЕ
               |	DESADVВходящий.Дата МЕЖДУ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&amp;ТекущаяДата, ДЕНЬ, -14), ДЕНЬ) И КОНЕЦПЕРИОДА(&amp;ТекущаяДата, ДЕНЬ)
               |	И DESADVВходящий.ВидДокумента = ""DESADV_Входящий""
               |	И DESADVВходящий.Статус = ""Обработан""
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	втDESADVВходящий.Документ КАК Документ,
               |	втDESADVВходящий.ИдентификаторЦепочки КАК ИдентификаторЦепочки
               |ПОМЕСТИТЬ втДанныеИсточник
               |ИЗ
               |	втDESADVВходящий КАК втDESADVВходящий
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События
               |		ПО (DR_События.ИдентификаторЦепочки = втDESADVВходящий.ИдентификаторЦепочки)
               |			И (DR_События.ВидДокумента = ""Накладная_Входящая"")
               |ГДЕ
               |	DR_События.ИдентификаторЦепочки ЕСТЬ NULL
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ ПЕРВЫЕ 2
               |	втДанныеИсточник.Документ КАК Документ,
               |	втДанныеИсточник.ИдентификаторЦепочки КАК ИдентификаторЦепочки
               |ИЗ
               |	втДанныеИсточник КАК втДанныеИсточник
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
               |		ПО втДанныеИсточник.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки
               |
               |УПОРЯДОЧИТЬ ПО
               |	DR_ЦепочкиДокументов.ДатаЗаказа УБЫВ";
</value>
				<presentation>ТекстЗапроса</presentation>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
	</row>
</ValueTree>