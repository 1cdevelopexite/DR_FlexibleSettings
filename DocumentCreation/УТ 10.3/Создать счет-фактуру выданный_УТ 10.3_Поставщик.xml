<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать счет-фактуру выданный</Value>
		<Value xsi:type="xs:string">СоздатьСчетФактуруВыданный</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">//&lt;Служебные переменные&gt;
ТипПриемника = "СчетФактураВыданный";
ИмяСобытия   = "Создание документов по кнопке &lt;&lt;&lt; Создать счет-фактуру выданный &gt;&gt;&gt;";

ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 

ВыбранныеСтроки 	= ?(ВыбранныеСтроки = Неопределено, Новый Массив, ВыбранныеСтроки);
//&lt;/Служебные переменные&gt;

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

МассивТипов = Новый Массив;
МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
МассивТипов.Добавить(Тип("ДокументСсылка.КорректировкаРеализации"));

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"				, Новый ОписаниеТипов(МассивТипов));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"	, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	
	Элемент.Вставить("Идентификатор", Элемент.Документ.УникальныйИдентификатор());
	
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	
КонецЦикла;

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Документ КАК Источник,
|	ВЫБОР
|		КОГДА ВыбранныеЗаписи.Документ Ссылка Документ.РеализацияТоваровУслуг
|			ТОГДА ВЫРАЗИТЬ(ВыбранныеЗаписи.Документ КАК Документ.РеализацияТоваровУслуг).ОтражатьВБухгалтерскомУчете
|		КОГДА ВыбранныеЗаписи.Документ Ссылка Документ.КорректировкаРеализации
|			ТОГДА ВЫРАЗИТЬ(ВыбранныеЗаписи.Документ КАК Документ.КорректировкаРеализации).ОтражатьВБухгалтерскомУчете		
|	КОНЕЦ КАК ОтражатьВБухгалтерскомУчете
|ИЗ
|	ВыбранныеЗаписи КАК ВыбранныеЗаписи";

Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);

РезультатЗапроса = Запрос.Выполнить();   
Выборка = РезультатЗапроса.Выбрать();

Пока Выборка.Следующий() Цикл
	
	Приемник = Документы[ТипПриемника].СоздатьДокумент();
	
	Если НЕ Выборка.ОтражатьВБухгалтерскомУчете Тогда
		
		ТекстЛогаСобытий = "Счет-фактуру нельзя вводить на основании документа, не отражаемого в бухгалтерском учете";
		
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);			
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		
		Продолжить;
	Иначе
		//Поиск существующей счет-фактуры
		СчетФактура = УчетНДС.НайтиПодчиненныйДокумент(Выборка.Источник, "СчетФактураВыданный", Истина);
		
		Если ЗначениеЗаполнено(СчетФактура) Тогда
			Приемник = СчетФактура.ПолучитьОбъект();
			Приемник.ДокументыОснования.Очистить();
		Иначе
			Приемник = Документы.СчетФактураВыданный.СоздатьДокумент();
		КонецЕсли;
		
		Приемник.Заполнить(Выборка.Источник);
		Приемник.Дата = ТекущаяДата();
		Приемник.КодСпособаВыставления = 2;
		
		Если Приемник.ДокументыОснования.Количество() = 0 Тогда
			НовСтрока = Приемник.ДокументыОснования.Добавить();
			НовСтрока.ДокументОснование = Выборка.Источник;
		КонецЕсли;
		
		Если Приемник.ДатаНомерДокументовОплаты.Количество() = 0 Тогда
			Приемник.ДатаНомерДокументовОплаты.Добавить();
		КонецЕсли;
		
		ИмяДокументаПриемника = "Счет-фактура выданный 1С";
		
		ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
		
		Если ОшибокНеОбнаружено Тогда
			
			НачатьТранзакцию();
			
			Попытка
				
				ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);							
				Идентификатор = ДокументСсылка.УникальныйИдентификатор();
				Приемник.УстановитьСсылкуНового(ДокументСсылка);
				
				ВидДокументаПриемник = "СчетФактура_Исходящий";
				
				СтруктураРегистраDR_События = Новый Структура;
				СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
				СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);
				СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
				СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
				СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Источник.УникальныйИдентификатор());
				СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();			
				
				Приемник.Записать(РежимЗаписиДокумента.Проведение);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Попытка
					
					Приемник.Записать(РежимЗаписиДокумента.Запись);
					
					ТекстЛогаСобытий = "Ошибка при проведении. Документ " + ИмяДокументаПриемника + " по " + Строка(Выборка.Источник) + " не проведен.";
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				Исключение
					
					ТекстЛогаСобытий = "Ошибка при записи. " + ИмяДокументаПриемника + " по документу " + Строка(Выборка.Источник) + " не создан.";
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				КонецПопытки;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// служебные операции
	Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;
	
КонецЦикла;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокНакладныеИсходящиеПоставщик; СписокКорректировочныеНакладныеИсходящиеПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Создать счет-фактуру выданный</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>СоздатьСчетФактуруВыданный</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string">ТекстЗапроса = "ВЫБРАТЬ
|	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	DR_События.Документ КАК Документ,
|	DR_События.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВТ_Накладные
|ИЗ
|	РегистрСведений.DR_События КАК DR_События
|ГДЕ
|	DR_События.ВидДокумента = ""Накладная_Исходящая""
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	DR_События.ИдентификаторОснования КАК ИдентификаторОснования,
|	DR_События.Документ КАК Документ,
|	МАКСИМУМ(DR_События.ДатаЗаписи) КАК ДатаЗаписи
|ПОМЕСТИТЬ ВТ_СчетФактура
|ИЗ
|	РегистрСведений.DR_События КАК DR_События
|ГДЕ
|	DR_События.ВидДокумента = ""СчетФактура_Исходящий""
|
|СГРУППИРОВАТЬ ПО
|	DR_События.ИдентификаторЦепочки,
|	DR_События.ИдентификаторОснования,
|	DR_События.Документ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ ПЕРВЫЕ 5
|	ВТ_Накладные.Документ КАК Документ,
|	ВТ_Накладные.ИдентификаторЦепочки КАК ИдентификаторЦепочки
|ИЗ
|	ВТ_Накладные КАК ВТ_Накладные
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактура КАК ВТ_СчетФактура
|		ПО ВТ_Накладные.ИдентификаторЦепочки = ВТ_СчетФактура.ИдентификаторЦепочки
|		И ВТ_Накладные.Идентификатор = ВТ_СчетФактура.ИдентификаторОснования
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
|		ПО ВТ_Накладные.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки
|ГДЕ
|	ВТ_Накладные.Документ.Проведен
|	И ВТ_СчетФактура.ИдентификаторЦепочки ЕСТЬ NULL
|
|УПОРЯДОЧИТЬ ПО
|	DR_ЦепочкиДокументов.ДатаЗаказа УБЫВ";</value>
				<presentation>ТекстЗапроса</presentation>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
	</row>
</ValueTree>