<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ клиента</Value>
		<Value xsi:type="xs:string">//&lt;Служебные переменные&gt;
ТипПриемника = "ЗаказКлиента";
ИмяСобытия   = "Создание документов по кнопке &lt;&lt;&lt; Создать заказ клиента &gt;&gt;&gt;";

ОперацияЗапись = Ложь;
ЛогСобытий = ""; 

ВыбранныеСтроки 	= ?(ВыбранныеСтроки = Неопределено, Новый Массив, ВыбранныеСтроки);
ВызовВходящимORDER 	= ?(ВызовВходящимORDER = Неопределено, Ложь, ВызовВходящимORDER);
АвтоЗаказ 			= ?(АвтоЗаказ = Неопределено, Ложь, АвтоЗаказ);
ПерезаписыватьЗаказ	= ?(ВызовВходящимORDER = Истина, ПерезаписыватьЗаказ, Настройка_Параметр_Прочитать("ПерезаписыватьЗаказПриЗагрузкеORDER", Ложь));	
РазделятьЗаказы 	= ?(ВызовВходящимORDER = Истина, Ложь, Настройка_Параметр_Прочитать("ЭКОМ_РазделятьЗаказы", Ложь));  
//&lt;/Служебные переменные&gt;

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"					, Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"			, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	
	Элемент.Вставить("Идентификатор", Элемент.Документ.ИдентификаторДокумента);
	
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	
КонецЦикла;			

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ТЗ_ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТЗ_ВыбранныеЗаписи.Документ КАК Документ,
|	ТЗ_ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ТЗ_ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВТ_Отбор
|ИЗ
|	ТЗ_ВыбранныеЗаписи КАК ТЗ_ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
|		ПО ТЗ_ВыбранныеЗаписи.Документ = DR_Документ.Ссылка
|ГДЕ
|	DR_Документ.Статус = ""Обработан""
|	И НЕ DR_Документ.ПометкаУдаления
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_Отбор.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВТ_Отбор.Документ КАК Источник,
|	ВТ_Отбор.Идентификатор КАК Идентификатор,
|	МАКСИМУМ(ЕСТЬNULL(Заказ_События.Документ, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))) КАК ДокументЗаказа1С,
|	МАКСИМУМ(ВЫБОР
|			КОГДА Заказ_События.Документ ЕСТЬ NULL
|				ТОГДА ЛОЖЬ
|			ИНАЧЕ ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.ЗаказКлиента).Проведен
|		КОНЕЦ) КАК ЗаказПроведен,
|	МАКСИМУМ(ЕСТЬNULL(Реализация_События.Документ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))) КАК ДокументРеализации
|ИЗ
|	ВТ_Отбор КАК ВТ_Отбор
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
|		ПО ВТ_Отбор.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Реализация_События
|		ПО ВТ_Отбор.ИдентификаторЦепочки = Реализация_События.ИдентификаторЦепочки
|			И (Реализация_События.ВидДокумента = ""Накладная_Исходящая"")
|
|СГРУППИРОВАТЬ ПО
|	ВТ_Отбор.Документ,
|	ВТ_Отбор.ИдентификаторЦепочки,
|	ВТ_Отбор.Идентификатор";

Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);

Выборка = Запрос.Выполнить().Выбрать(); 

Пока Выборка.Следующий() Цикл
	
	ЗапрещеноИзменениеЗаказа = Ложь;
	
	//&lt;Проверка необходимоти создания или перезаписи созданного Заказа 1С&gt;
	Если РазделятьЗаказы И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И Выборка.ЗаказПроведен И ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда		
		ЗапрещеноИзменениеЗаказа = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И (НЕ АвтоЗаказ И ВызовВходящимORDER) Тогда
		
		Продолжить;
	ИначеЕсли ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И (НЕ ПерезаписыватьЗаказ И ВызовВходящимORDER) Тогда
		
		ТекстЛогаСобытий = НСтр("ru = 'Автоматическая перезапись созданного %ЗаказКлиента% не выполнена. По причине отключенной настройки ""Перезаписывать заказ"".'", 
							ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказКлиента%", Строка(Выборка.ДокументЗаказа1С));
		
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		
		Продолжить;
	КонецЕсли;
	
	Если Не ЗапрещеноИзменениеЗаказа Тогда
		
		ДокументЗаписан = Ложь;
		Приемник = Документы[ТипПриемника].СоздатьДокумент();
		
		// Получение общих для всех документов значений.
		Если КэшированныеЗначения 	= Неопределено Тогда
			КэшированныеЗначения 	= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КонецЕсли;
		
		ПроводитьЗаказ 				= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ПроводитьЗаказ", ПроводитьЗаказ) Тогда
			ПроводитьЗаказ 			= Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументЗаказ1СПроведенным");
			КэшированныеЗначения.Вставить("ПроводитьЗаказ", ПроводитьЗаказ);
		КонецЕсли;
		
		ЗагружатьТекущейДатой 		= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой) Тогда
			ЗагружатьТекущейДатой 	= Настройка_Параметр_Прочитать("ЭКОМ_ЗаказыЗагружатьТекущейДатой");
			КэшированныеЗначения.Вставить("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой);
		КонецЕсли;
		
		КолонкиДокумента 			= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("КолонкиДокумента", КолонкиДокумента) Тогда
			
			КолонкиДокумента 		= Новый Соответствие;
			
			Для Каждого Колонка Из  Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки().Колонки Цикл
				КолонкиДокумента.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
			КонецЦикла;
			
			КэшированныеЗначения.Вставить("КолонкиДокумента", КолонкиДокумента);
			
		КонецЕсли;
		
		// Получение функциональных опций.
		ИспользоватьРасширенныеВозможностиЗаказаКлиента 	= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
			ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
			КэшированныеЗначения.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ИспользоватьРасширенныеВозможностиЗаказаКлиента);
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидкиВПродажах 			= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьАвтоматическиеСкидкиВПродажах", ИспользоватьАвтоматическиеСкидкиВПродажах) Тогда
			ИспользоватьАвтоматическиеСкидкиВПродажах 		= ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
			КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", ИспользоватьАвтоматическиеСкидкиВПродажах);
		КонецЕсли;
		
		ИспользоватьСоглашенияСКлиентами 					= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами) Тогда
			ИспользоватьСоглашенияСКлиентами 				= ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
			КэшированныеЗначения.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
		КонецЕсли;
		
		ИспользоватьУправлениеДоставкой 					= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьУправлениеДоставкой", ИспользоватьУправлениеДоставкой) Тогда
			ИспользоватьУправлениеДоставкой 				= ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
			КэшированныеЗначения.Вставить("ИспользоватьУправлениеДоставкой", ИспользоватьУправлениеДоставкой);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Основной запрос для заполнения шапки документа.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&amp;Источник КАК Ссылка
		|ПОМЕСТИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ДР_Грузополучатель.Значение КАК Справочник.Партнеры) КАК ТочкаДоставки,
		|	ВЫРАЗИТЬ(ДР_Контрагент.Значение КАК Справочник.Контрагенты) КАК Контрагент,
		|	ВЫРАЗИТЬ(ДР_Организация.Значение КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ДР_ЗаказНомер.Значение КАК СТРОКА(35)) КАК ЗаказНомер,
		|	ВЫРАЗИТЬ(ДР_ЗаказДата.Значение КАК ДАТА) КАК ЗаказДата,
		|	ВЫРАЗИТЬ(ДР_ДатаПоставки.Значение КАК ДАТА) КАК ДатаПоставки,
		|	ЕСТЬNULL(ДР_POSITION.ХранилищеЗначения, Неопределено) КАК POSITION
		|ПОМЕСТИТЬ ВТ_DRДокумент
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Контрагент
		|		ПО ВТ.Ссылка = ДР_Контрагент.Ссылка
		|			И (ДР_Контрагент.Реквизит = ""Контрагент"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Грузополучатель
		|		ПО ВТ.Ссылка = ДР_Грузополучатель.Ссылка
		|			И (ДР_Грузополучатель.Реквизит = ""ТочкаДоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Организация
		|		ПО ВТ.Ссылка = ДР_Организация.Ссылка
		|			И (ДР_Организация.Реквизит = ""Организация"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказНомер
		|		ПО ВТ.Ссылка = ДР_ЗаказНомер.Ссылка
		|			И (ДР_ЗаказНомер.Реквизит = ""NUMBER"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказДата
		|		ПО ВТ.Ссылка = ДР_ЗаказДата.Ссылка
		|			И (ДР_ЗаказДата.Реквизит = ""ДатаЭлектронногоДокумента"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаПоставки
		|		ПО ВТ.Ссылка = ДР_ДатаПоставки.Ссылка
		|			И (ДР_ДатаПоставки.Реквизит = ""ДатаПоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_POSITION
		|		ПО ВТ.Ссылка = ДР_POSITION.Ссылка
		|			И (ДР_POSITION.Реквизит = ""POSITION"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_DRДокумент.Ссылка КАК Ссылка,			
		|	ПРЕДСТАВЛЕНИЕ(ВТ_DRДокумент.ТочкаДоставки) КАК ПартнерПредставление,
		|	ВТ_DRДокумент.ТочкаДоставки КАК Партнер,
		|	ВТ_DRДокумент.Контрагент КАК Контрагент,
		|	ВТ_DRДокумент.Организация КАК Организация,
		|	Приоритеты.Ссылка КАК Приоритет,
		|	ИСТИНА КАК НеОтгружатьЧастями,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) КАК СпособДоставки,
		|	ИСТИНА КАК СкидкиРассчитаны,
		|	ЕСТЬNULL(DR_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ЦеныИз1С,
		|	ВТ_DRДокумент.ЗаказНомер КАК НомерПоДаннымКлиента,
		|	ВТ_DRДокумент.ЗаказДата КАК ДатаПоДаннымКлиента,
		|	ВТ_DRДокумент.ДатаПоставки КАК ЖелаемаяДатаОтгрузки,
		|	ВТ_DRДокумент.ДатаПоставки КАК ДатаОтгрузки,
		|	ВТ_DRДокумент.POSITION КАК POSITION
		|ИЗ
		|	Справочник.Приоритеты КАК Приоритеты,
		|	ВТ_DRДокумент КАК ВТ_DRДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN
		|		ПО ВТ_DRДокумент.Контрагент = DR_GLN.Объект
		|ГДЕ
		|	Приоритеты.Наименование = ""Средний""";
		
		Запрос.УстановитьПараметр("Источник", Выборка.Источник);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		//&lt;Получение данных элемента POSITION&gt;
		POSITION = РезультатЗапроса[0].POSITION;
		
		МассивСтруктурPOSITION = ?(POSITION &lt;&gt; Неопределено, POSITION.Получить(), POSITION);
		
		Если МассивСтруктурPOSITION = Неопределено Тогда
			
			ТекстЛогаСобытий = НСтр("ru = 'Заказ клиента по документу %ORDER% не создан, т.к. отсутствует либо элемент POSITION либо его значения.'", 
								ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
								
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Строка(РезультатЗапроса[0].Ссылка));
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
		КвалификаторЧисло = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		
		ТаблицаPOSITION = Новый ТаблицаЗначений;
		ТаблицаPOSITION.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаPOSITION.Колонки.Добавить("ORDEREDQUANTITY"	, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));  
		ТаблицаPOSITION.Колонки.Добавить("ORDERPRICE"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
		ТаблицаPOSITION.Колонки.Добавить("PRICEWITHVAT"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
		ТаблицаPOSITION.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		Для каждого ЭлСтруктура Из МассивСтруктурPOSITION Цикл
			НоваяСтрока = ТаблицаPOSITION.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлСтруктура);
		КонецЦикла;
		
		// Получение данных из табличной части ORDER.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&amp;Источник КАК Ссылка,
		|	POSITION.Номенклатура КАК Номенклатура,
		|	POSITION.ORDEREDQUANTITY КАК Количество,
		|	POSITION.ORDERPRICE КАК Цена,
		|	POSITION.PRICEWITHVAT КАК ЦенаСНДС,
		|	ВЫРАЗИТЬ(POSITION.ЕдиницаИзмерения КАК Справочник.УпаковкиЕдиницыИзмерения) КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&amp;POSITION КАК POSITION
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.Номенклатура КАК Номенклатура,
		|	СУММА(ВТ.Количество) КАК КоличествоУпаковок,
		|	ВТ.Цена КАК Цена,
		|	ВТ.ЦенаСНДС КАК ЦенаСНДС,
		|	ВЫБОР
		|		КОГДА ВТ.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ВТ.ЕдиницаИзмерения
		|		КОГДА ВТ.ЕдиницаИзмерения.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|		ИНАЧЕ ВТ.ЕдиницаИзмерения
		|	КОНЕЦ КАК Упаковка,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
		|	ЛОЖЬ КАК Отменено
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Ссылка,
		|	ВТ.Номенклатура,
		|	ВТ.Цена,
		|	ВТ.ЦенаСНДС,
		|	ВЫБОР
		|		КОГДА ВТ.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ВТ.ЕдиницаИзмерения
		|		КОГДА ВТ.ЕдиницаИзмерения.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|		ИНАЧЕ ВТ.ЕдиницаИзмерения
		|	КОНЕЦ";
		
		Запрос.УстановитьПараметр("POSITION", ТаблицаPOSITION);
		Запрос.УстановитьПараметр("Источник", Выборка.Источник);
		
		РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();
		
		Если ИспользоватьУправлениеДоставкой Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|    КонтактнаяИнформация.Ссылка КАК Ссылка,
			|    КонтактнаяИнформация.Вид.Представление КАК Вид,
			|    КонтактнаяИнформация.Представление КАК АдресДоставки,
			|    КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
			|ИЗ
			|    Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|    КонтактнаяИнформация.Ссылка В(&amp;Партнер)
			|    И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
			
			Запрос.УстановитьПараметр("Партнер", РезультатЗапроса.ВыгрузитьКолонку("Партнер"));
			АдресаПолучателяИзКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		ТаблицаОстатки = Новый ТаблицаЗначений;
		
		Если РазделятьЗаказы Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&amp;Источник КАК Ссылка,
			|	&amp;ИдентификаторЦепочки КАК ИдентификаторЦепочки,
			|	&amp;Идентификатор КАК Идентификатор
			|ПОМЕСТИТЬ ВТ_ДРСсылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДРСсылка.Ссылка КАК Ссылка,
			|	Заказ_События.Документ КАК ДокументСвязанный
			|ПОМЕСТИТЬ ДокументыСвязанные
			|ИЗ
			|	ВТ_ДРСсылка КАК ВТ_ДРСсылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
			|		ПО ВТ_ДРСсылка.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
			|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	DR_Документы_Товары.Ссылка КАК ДокументИсточник,
			|	DR_Документы_Товары.КоличествоУпаковок КАК Количество,
			|	DR_Документы_Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТоварыOrder
			|ИЗ
			|	&amp;РезультатЗапросаТЧТовары КАК DR_Документы_Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыСвязанные.Ссылка КАК ДокументИсточник,
			|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
			|	СУММА(ЗаказКлиентаТовары.КоличествоУпаковок) КАК Количество
			|ПОМЕСТИТЬ ТоварыЗаказы
			|ИЗ
			|	ДокументыСвязанные КАК ДокументыСвязанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ПО ДокументыСвязанные.ДокументСвязанный = ЗаказКлиентаТовары.Ссылка
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказКлиентаТовары.Номенклатура,
			|	ДокументыСвязанные.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыOrder.ДокументИсточник КАК ДокументИсточник,
			|	ТоварыOrder.Номенклатура КАК Номенклатура,
			|	ТоварыOrder.Количество - ЕСТЬNULL(ТоварыЗаказы.Количество, 0) КАК КоличествоОстаток
			|ИЗ
			|	ТоварыOrder КАК ТоварыOrder
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказы КАК ТоварыЗаказы
			|		ПО ТоварыOrder.Номенклатура = ТоварыЗаказы.Номенклатура
			|			И ТоварыOrder.ДокументИсточник = ТоварыЗаказы.ДокументИсточник";
			
			Запрос.УстановитьПараметр("Источник"					, Выборка.Источник);
			Запрос.УстановитьПараметр("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
			Запрос.УстановитьПараметр("Идентификатор"				, Выборка.Идентификатор);
			Запрос.УстановитьПараметр("РезультатЗапросаТЧТовары"	, РезультатЗапросаТЧТовары.Скопировать(,"Ссылка, КоличествоУпаковок, Номенклатура"));
			
			ТаблицаОстатки = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого Запись Из РезультатЗапроса Цикл
			
			Если ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И (НЕ РазделятьЗаказы И ПерезаписыватьЗаказ) Тогда
				
				// Проверка заполненности Заказа в текущей цепочке, если заполнена - выполняется перезапись объекта
				Приемник = Выборка.ДокументЗаказа1С.ПолучитьОбъект();
				Приемник.Товары.Очистить();
				
				ОперацияЗапись = Истина;
				ДокументЗаписан = Истина;
				
			КонецЕсли;
			
			// Автозаполнение документа.
			ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьСвойстваОбъекта(Приемник, Неопределено);
			
			// Заполнение реквизитов из запроса.
			ЗаполнитьЗначенияСвойств(Приемник, Запись);
			
			// Заполнение соглашения и этапов графика оплаты.
			Если ИспользоватьСоглашенияСКлиентами Тогда
				
				// Исключаем из процедуры заполнение цен.
				Если ЗначениеЗаполнено (Приемник.Партнер) Тогда
					
					ПараметрыОтбораУсловияПродаж = Новый Структура;
					ПараметрыОтбораУсловияПродаж.Вставить("УчитыватьГруппыСкладов"	, Истина);
					ПараметрыОтбораУсловияПродаж.Вставить("ВыбранноеСоглашение"		, Приемник.Соглашение);
					ПараметрыОтбораУсловияПродаж.Вставить("ПустаяСсылкаДокумента"	, Документы.ЗаказКлиента.ПустаяСсылка());
					ПараметрыОтбораУсловияПродаж.Вставить("ХозяйственныеОперации"	, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
					
					УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Приемник.Партнер, ПараметрыОтбораУсловияПродаж);
					
					Приемник.ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
					
					ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(Приемник);
					
					УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Приемник.НалогообложениеНДС, ПараметрыЗаполнения);
					
					Если УсловияПродажПоУмолчанию &lt;&gt; Неопределено Тогда
						Приемник.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
					Иначе
						
						ТекстЛогаСобытий = "По электронному заказу № " + Запись.НомерПоДаннымКлиента + " не был создан Заказ клиента."
										 + " по причине - ""Не найдено соглашение по Головному партнеру""";
										 
						Сообщение = Новый СообщениеПользователю();
						Сообщение.Текст = ТекстЛогаСобытий;										
						Сообщение.Сообщить();
						
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
						
						Продолжить;
					КонецЕсли;
					
					Если НЕ (ЗначениеЗаполнено(Приемник.Партнер) ИЛИ ЗначениеЗаполнено(Приемник.Контрагент)) Тогда
						ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Приемник.Партнер, Приемник.Контрагент);
					КонецЕсли;
					
					Приемник.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Приемник.Контрагент, , Приемник.БанковскийСчетКонтрагента);
					
					ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Приемник.Партнер,Приемник.КонтактноеЛицо);
					
					Если НЕ ИспользоватьУправлениеДоставкой Тогда
						Приемник.АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Приемник.Партнер);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Приемник.Соглашение) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'Не найдено соглашение для Партнера %Партнер%. Документ не создан'", 
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
										
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Партнер%", Запись.ПартнерПредставление);
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
					
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполнение адреса доставки.
			Если ИспользоватьУправлениеДоставкой Тогда
				
				АдресПолучателя = АдресаПолучателяИзКонтактнойИнформации.НайтиСтроки(Новый Структура("Ссылка, Вид", Приемник.Партнер, "Адрес доставки"));
				ЗаполнитьЗначенияСвойств(Приемник, ?(АдресПолучателя.Количество() &gt; 0, АдресПолучателя.Получить(0), Новый Структура));
				
			КонецЕсли;
			
			// Установка статуса.
			Если ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
				Приемник.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			Иначе
				Приемник.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Приемник.Склад) Тогда
				Приемник.Склад = Настройка_Параметр_Прочитать("СкладПоУмолчанию", Справочники.Склады.ПустаяСсылка());
			КонецЕсли;
			
			// Корректировка реквизитов.
			ДатаЗаказа = ТекущаяДата();
			
			Если НЕ ЗагружатьТекущейДатой Тогда
				ДатаЗаказа = Запись.ДатаПоДаннымКлиента;
			КонецЕсли;
			
			Приемник.Дата = ДатаЗаказа;
			Приемник.ДатаОтгрузки = ?(ЗначениеЗаполнено(Приемник.ДатаОтгрузки) И Приемник.ДатаОтгрузки &lt; НачалоДня(Приемник.Дата), 
									НачалоДня(Приемник.Дата), Приемник.ДатаОтгрузки);
			
			Приемник.ЖелаемаяДатаОтгрузки = ?(ЗначениеЗаполнено(Приемник.ЖелаемаяДатаОтгрузки) И Приемник.ЖелаемаяДатаОтгрузки &lt; НачалоДня(Приемник.Дата),
			НачалоДня(Приемник.Дата), Приемник.ЖелаемаяДатаОтгрузки);
			
			Приемник.Менеджер = Пользователи.ТекущийПользователь();
			Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерПоДаннымКлиента), "Заказ № " + Запись.НомерПоДаннымКлиента, "");
			Приемник.Комментарий = Приемник.Комментарий + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаПоДаннымКлиента), 
									" от " + Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
			
			// Заполнение ответственных лиц.
			ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Приемник.Организация, КонецДня(Приемник.Дата));
			
			Приемник.Руководитель     = ОтветственныеЛица.РуководительСсылка;
			Приемник.ГлавныйБухгалтер = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
			
			// Заполнение Товаров.
			Приемник.Товары.Очистить();
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приемник);
			ПараметрыУказанияСерий 	= Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Приемник, Документы.ЗаказКлиента));
			ВариантыОбеспечения 	= ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(Приемник.Соглашение, 
																			   	   Приемник.Статус, 
																			   	   ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
			
			СтруктураДанныеФормы = "";
			
			Для Каждого ТекущийРеквизит Из Метаданные.Документы.ЗаказКлиента.Реквизиты Цикл
				СтруктураДанныеФормы = СтруктураДанныеФормы + ?(ЗначениеЗаполнено(СтруктураДанныеФормы), ",", "") + ТекущийРеквизит.Имя;
			КонецЦикла;
			
			СтруктураПриемник = Новый Структура(СтруктураДанныеФормы);
			ЗаполнитьЗначенияСвойств(СтруктураПриемник, Приемник); 
			СтруктураПриемник.Вставить("Дата", Приемник.Дата);
			
			Если РазделятьЗаказы Тогда
				
				// актуализация количества с учетом ранее созданных заказов клиента по данному ордеру
				ОстаткиПоОрдеру = ТаблицаОстатки.НайтиСтроки(Новый Структура("ДокументИсточник", Запись.Ссылка));
				
				Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
					
					КоличествоОстаток = СтрокаОстатки.КоличествоОстаток;
					
					ПараметрыОтбора = Новый Структура("Ссылка, Номенклатура", СтрокаОстатки.ДокументИсточник, СтрокаОстатки.Номенклатура);
					НайденныеСтроки = РезультатЗапросаТЧТовары.НайтиСтроки(ПараметрыОтбора);
					
					Для Каждого Строка Из НайденныеСтроки Цикл
						Строка.КоличествоУпаковок = Мин(КоличествоОстаток, Строка.КоличествоУпаковок);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл
				
				ДанныеДляЗаполнения = Новый Структура;
				
				Для Каждого Колонка Из КолонкиДокумента Цикл
					ДанныеДляЗаполнения.Вставить(Колонка.Ключ, Колонка.Значение);
				КонецЦикла;
				
				// Заполнение данных строки.
				ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, Строка, "Номенклатура, КоличествоУпаковок, Упаковка");
				ДанныеДляЗаполнения.Склад = Приемник.Склад;
				
				// Заполнение реквизитов строки методами конфигурации (пока без цен и сумм).
				СтруктураДействий = Новый Структура;
				
				//СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ДанныеДляЗаполнения.Упаковка); // Контроль правильности заполнения единицы измерения
				Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Приемник.Соглашение) Тогда // Цена продажи и срок поставки
					СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Приемник));
				Иначе
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Приемник));
				КонецЕсли;
				
				//СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Приемник.Партнер);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС"					, Новый Структура("НалогообложениеНДС, Дата, ПоДатеОтгрузки", Приемник.НалогообложениеНДС, Приемник.Дата, Истина));
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары"	, Приемник.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ЗаполнитьСодержание"				, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(СтруктураПриемник, Ложь));
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус"		, Новый Структура("Склад, ПараметрыУказанияСерий", ДанныеДляЗаполнения.Склад, ПараметрыУказанияСерий));
				
				ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения, Приемник.ЖелаемаяДатаОтгрузки);
				СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
				
				// Заполнение данных строки.
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
				
				// Заполнение цены.
				Цена = 0;
				
				Если Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
					Цена = Строка.ЦенаСНДС;
				ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
					Цена = Строка.Цена;
				ИначеЕсли Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.Цена) Тогда
					Цена  = Окр((Строка.Цена * (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС))) / 100 , 4);
				ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
					Цена = Окр((Строка.ЦенаСНДС * 100) / (100 + СтавкаНДСЧислом(ДанныеДляЗаполнения.СтавкаНДС)) , 4);
				КонецЕсли;
				
				ДанныеДляЗаполнения.Цена = Цена;
				
				// Заполнение сумм методами конфигурации.
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
				
				// Перенос данных в строку ТЧ Товары.
				ЗаполнитьЗначенияСвойств(Приемник.Товары.Добавить(), ДанныеДляЗаполнения);
				
			КонецЦикла;
			
			// Получение цен из 1С для контрагентов, у котороых стоит такая настройка.
			Если Запись.ЦеныИз1С Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|    Основание.НомерСтроки КАК НомерСтроки,
				|    Основание.Номенклатура КАК Номенклатура,
				|    Основание.Характеристика КАК Характеристика,
				|    Основание.Упаковка КАК Упаковка,
				|    Основание.ВидЦены КАК ВидЦены
				|ПОМЕСТИТЬ вт
				|ИЗ
				|    &amp;Основание КАК Основание
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|    вт.НомерСтроки КАК НомерСтроки,
				|    вт.Номенклатура КАК Номенклатура,
				|    вт.Характеристика КАК Характеристика,
				|    вт.Упаковка КАК Упаковка,
				|    ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
				|    ЦеныНоменклатурыСрезПоследних.ВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС
				|ПОМЕСТИТЬ втЦеныНоменклатуры
				|ИЗ
				|    вт КАК вт
				|        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&amp;ДатаЗаказа, ) КАК ЦеныНоменклатурыСрезПоследних
				|        ПО вт.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
				|            И вт.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
				|            И вт.Упаковка = ЦеныНоменклатурыСрезПоследних.Упаковка
				|            И вт.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|    вт.Номенклатура КАК Номенклатура,
				|    вт.Характеристика КАК Характеристика,
				|    вт.Упаковка КАК Упаковка,
				|    СоглашенияСКлиентамиТовары.Цена КАК Цена,
				|    СоглашенияСКлиентамиТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС
				|ПОМЕСТИТЬ втСоглашения
				|ИЗ
				|    вт КАК вт
				|        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
				|        ПО вт.Номенклатура = СоглашенияСКлиентамиТовары.Номенклатура
				|            И вт.Характеристика = СоглашенияСКлиентамиТовары.Характеристика
				|            И вт.Упаковка = СоглашенияСКлиентамиТовары.Упаковка
				|ГДЕ
				|    СоглашенияСКлиентамиТовары.Ссылка = &amp;СоглашенияСКлиентами
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|    втЦеныНоменклатуры.НомерСтроки КАК НомерСтроки,
				|    втЦеныНоменклатуры.Номенклатура КАК Номенклатура,
				|    втЦеныНоменклатуры.Характеристика КАК Характеристика,
				|    втЦеныНоменклатуры.Упаковка КАК Упаковка,
				|    ЕСТЬNULL(втСоглашения.Цена, втЦеныНоменклатуры.Цена) КАК Цена,
				|    ЕСТЬNULL(втСоглашения.ЦенаВключаетНДС, втЦеныНоменклатуры.ЦенаВключаетНДС) КАК ЦенаВключаетНДС
				|ИЗ
				|    втЦеныНоменклатуры КАК втЦеныНоменклатуры
				|        ЛЕВОЕ СОЕДИНЕНИЕ втСоглашения КАК втСоглашения
				|        ПО втЦеныНоменклатуры.Номенклатура = втСоглашения.Номенклатура
				|            И втЦеныНоменклатуры.Характеристика = втСоглашения.Характеристика
				|            И втЦеныНоменклатуры.Упаковка = втСоглашения.Упаковка";
				
				Запрос.УстановитьПараметр("Основание"				, Приемник.Товары);
				Запрос.УстановитьПараметр("ДатаЗаказа"				, Приемник.Дата);
				Запрос.УстановитьПараметр("СоглашенияСКлиентами"	, Приемник.Соглашение);
				
				РезультатЗапросаЦены = Запрос.Выполнить();					
				ВыборкаДетальныеЗаписи = РезультатЗапросаЦены.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Цена)
						И ТипЗнч(ВыборкаДетальныеЗаписи.ЦенаВключаетНДС) = Тип("Булево") Тогда
						
						Строка = Приемник.Товары.Найти(ВыборкаДетальныеЗаписи.НомерСтроки, "НомерСтроки");
						
						Если Строка = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Цена = 0;
						
						Если Приемник.ЦенаВключаетНДС И ВыборкаДетальныеЗаписи.ЦенаВключаетНДС Тогда
							Цена = ВыборкаДетальныеЗаписи.Цена;
						ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И НЕ ВыборкаДетальныеЗаписи.ЦенаВключаетНДС Тогда
							Цена = ВыборкаДетальныеЗаписи.Цена;
						ИначеЕсли Приемник.ЦенаВключаетНДС И НЕ ВыборкаДетальныеЗаписи.ЦенаВключаетНДС Тогда
							Цена  = Окр((ВыборкаДетальныеЗаписи.Цена * (100 + СтавкаНДСЧислом(Строка.СтавкаНДС))) / 100 , 4);
						ИначеЕсли НЕ Приемник.ЦенаВключаетНДС И ВыборкаДетальныеЗаписи.ЦенаВключаетНДС Тогда
							Цена = Окр((ВыборкаДетальныеЗаписи.Цена * 100) / (100 + СтавкаНДСЧислом(Строка.СтавкаНДС)) , 4);
						КонецЕсли;
						
						Если НЕ Цена = 0 Тогда
							
							Строка.Цена = Цена;
							
							// Заполнение сумм методами конфигурации.
							СтруктураДействий = Новый Структура;
							СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
							СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
							СтруктураДействий.Вставить("ПересчитатьСумму");
							СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
							СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
							
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследнийИндекс = Приемник.Товары.Количество() - 1;
			
			Для Счетчик = 0 По ПоследнийИндекс Цикл
				
				Индекс = ПоследнийИндекс - Счетчик;
				
				Если Приемник.Товары[Индекс].Количество = 0 Тогда
					Приемник.Товары.Удалить(Индекс);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Приемник.Товары.Количество() = 0 Тогда
				
				ТекстЛогаСобытий = "Документ Заказ покупателя по документу " + Строка(Запись.Ссылка) 
								 + " не создан, т.к. не заполнены товары. Возможно по ORDER уже созданы другие заказы на все заказанное количество.";
								 
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
			// Заполнение порядка оплаты.
			Если Не ЗначениеЗаполнено(Приемник.ПорядокОплаты) Тогда
				
				ВалютаОплаты = ДенежныеСредстваСервер.ПолучитьВалютуОплаты(Приемник.ФормаОплаты, 
																		   Приемник.БанковскийСчет, 
																		   Приемник.Касса);
																					  
				Приемник.ПорядокОплаты  = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Приемник.Валюта, 
																												   Приемник.НалогообложениеНДС, 
																												   ВалютаОплаты);
				
			КонецЕсли;
			
			// Заполнение этапов графика оплаты.
			Приемник.ЗаполнитьЭтапыГрафикаОплаты();
			
			// Проверка и запись документов.
			ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
			
			Если ОшибокНеОбнаружено Тогда
				
				НачатьТранзакцию();
				
				Попытка
					
					Если НЕ ДокументЗаписан Тогда
						ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
						Идентификатор = ДокументСсылка.УникальныйИдентификатор();	
						Приемник.УстановитьСсылкуНового(ДокументСсылка);
					Иначе
						ДокументСсылка = Приемник.Ссылка;
						Идентификатор = Приемник.Ссылка.УникальныйИдентификатор();		
					КонецЕсли;
					
					ВидДокументаПриемник = "Заказ_Входящий";
					
					СтруктураРегистраDR_События = Новый Структура;
					СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
					СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);
					СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
					СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
					СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
					СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
					
					НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
					НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
					НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
					НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
					НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
					НЗ_DRСобытия.Прочитать();
					
					Если НЗ_DRСобытия.Количество() = 0 Тогда
						НоваяЗапись = НЗ_DRСобытия.Добавить();
					Иначе
						НоваяЗапись = НЗ_DRСобытия[0];
					КонецЕсли;
					
					Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
						НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
					КонецЦикла;
					
					НЗ_DRСобытия.Записать();
					
					Приемник.Записать(?(ПроводитьЗаказ, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					
					ОтменитьТранзакцию();
					
					ТекстЛогаСобытий = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" 
									 + ОписаниеОшибки(), ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
									 
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%"	, ?(ПроводитьЗаказ, "проведения", "записи"));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлНомер%"				, Запись.НомерПоДаннымКлиента);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлДата%"				, Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецПопытки;
				
				Если РазделятьЗаказы И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% разделена цепочка. Создан новый документ %ЗаказКлиента%. '", 
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
										
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%"			, Строка(Выборка.Источник));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказКлиента%"	, Строка(Приемник.Ссылка));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				ИначеЕсли ПерезаписыватьЗаказ И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% перезаписан уже существующий документ %ЗаказКлиента%. '", 
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
										
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%"			, Строка(Выборка.Источник));
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказКлиента%"	, Строка(Выборка.ДокументЗаказа1С));
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
				КонецЕсли;
				
			Иначе
	
				МассивСообщенийПользователю = ПолучитьСообщенияПользователю();
						
				Для каждого Элемент Из МассивСообщенийПользователю Цикл
						
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(Элемент.Текст, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);	
						
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЦикла;
			
	Иначе
		
		Если ЗапрещеноИзменениеЗаказа Тогда
			
			ТекстЛогаСобытий = "По заказу " + Строка(Выборка.ДокументЗаказа1С) + " создана реализация " 
							 + Строка(Выборка.ДокументРеализации) + ". Изменение документа запрещено.";
							 
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// служебные операции  
	Если Не Приемник = Неопределено И ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;    
		
КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокOrderВходящиеПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Создать заказ клиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>СоздатьЗаказКлиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:string">СоздатьЗаказКлиента</Value>
	</row>
</ValueTree>