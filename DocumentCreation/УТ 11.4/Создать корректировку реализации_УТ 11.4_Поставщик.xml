<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать корректировку реализации товаров</Value>
		<Value xsi:type="xs:string">//&lt;Служебные переменные&gt;
ТипПриемника = "КорректировкаРеализации";
ИмяСобытия   = "Создание документов по кнопке &lt;&lt;&lt; Создать корректировку реализации товаров &gt;&gt;&gt;";

ОперацияЗапись = Ложь;
ЛогСобытий	   = ""; 

ИспользоватьКорректировкиРеализаций = ПолучитьФункциональнуюОпцию("ИспользоватьКорректировкиРеализаций");

ВыбранныеСтроки = ?(ВыбранныеСтроки = Неопределено, Новый Массив, ВыбранныеСтроки);
//&lt;/Служебные переменные&gt;

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;                                  
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"					, Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"			, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	
	Элемент.Вставить("Идентификатор", Элемент.Документ.УникальныйИдентификатор());
	
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	
КонецЦикла;

Если ИспользоватьКорректировкиРеализаций = Истина Тогда
	
	ПроводитьРеализацию = Настройка_Параметр_Прочитать("ЭКОМ_СоздаватьДокументРеализация1СПроведенным");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВыбранныеЗаписи.Документ КАК Документ,
	|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВыбранныеЗаписи
	|ИЗ
	|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВыбранныеЗаписи.Документ КАК РеализацияСсылка,
	|	RECADV_События.Документ КАК RECADV,
	|	DR_ЦепочкиДокументов.НомерЗаказа КАК ORDERNUMBER,
	|	DR_ЦепочкиДокументов.ДатаЗаказа КАК ORDERDATE,
	|	RECADV_NUMBER.Значение КАК RECADVФайлНомер,
	|	RECADV_DATE.Значение КАК RECADVФайлДата,
	|	РеализацияТоваровУслуг.Основание КАК НакладнаяОснование,
	|	РеализацияТоваровУслуг.ОснованиеНомер КАК НакладнаяОснованиеНомер,
	|	РеализацияТоваровУслуг.ОснованиеДата КАК НакладнаяОснованиеДата
	|ИЗ
	|	ВыбранныеЗаписи КАК ВыбранныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО (ВыбранныеЗаписи.Документ = РеализацияТоваровУслуг.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
	|		ПО (ВыбранныеЗаписи.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК RECADV_События
	|		ПО (ВыбранныеЗаписи.ИдентификаторЦепочки = RECADV_События.ИдентификаторЦепочки)
	|			И (RECADV_События.ВидДокумента = ""RECADV_Входящий"")
	|			И (ВыбранныеЗаписи.Идентификатор = RECADV_События.ИдентификаторОснования)
	|        ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_NUMBER
	|        ПО RECADV_События.Документ = RECADV_NUMBER.Ссылка
	|        	И (RECADV_NUMBER.Реквизит = ""NUMBER"")
	|        ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_DATE
	|        ПО RECADV_События.Документ = RECADV_DATE.Ссылка
	|        	И (RECADV_DATE.Реквизит = ""ДатаЭлектронногоДокумента"")"; 
	
	Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);
	
	РезультатЗапроса = Запрос.Выполнить();		
	Запись = РезультатЗапроса.Выбрать();
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Пока Запись.Следующий() Цикл  
		
		Если Не ЗначениеЗаполнено(Запись.RECADV) Тогда
			
			ТекстОшибки = "Не найден документ RECADV для накладной: " + Строка(Запись.РеализацияСсылка);                          
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстОшибки, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
		Приемник = Документы[ТипПриемника].СоздатьДокумент();
		
		Приемник.Заполнить(Запись.РеализацияСсылка);
		
		Приемник.Дата = ТекущаяДатаСеанса();
		
		Приемник.Комментарий = "Заказ № %ORDERNUMBER% от %ORDERDATE%";
		Приемник.Комментарий = СтрЗаменить(Приемник.Комментарий, "%ORDERNUMBER%", Запись.ORDERNUMBER);
		Приемник.Комментарий = СтрЗаменить(Приемник.Комментарий, "%ORDERDATE%", Формат(Запись.ORDERDATE, "ДФ=dd.MM.yyyy"));
		
		Приемник.Основание = Запись.НакладнаяОснование;
		Приемник.ВидКорректировки = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон");
		Приемник.ОснованиеНомер = Запись.НакладнаяОснованиеНомер;
		Приемник.ОснованиеДата = Запись.НакладнаяОснованиеДата;  
		
		Если Не ЗначениеЗаполнено(Приемник.ДокументОснование) Тогда
			
			ТекстОшибки = НСтр("ru = 'В создаваемом документе поле ""Документ основание"" не заполнено';
						|en = '""Base document"" is required'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
			
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = Запись.RECADV.ДополнительныеРеквизиты.Найти("POSITION", "Реквизит");
		
		Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
			POSITION = НайденнаяСтрока.ХранилищеЗначения.Получить();
		Иначе
			
			ТекстЛогаСобытий = "Корректировка реализации не создана, т.к. в RECADV отсутсвует элемент POSITION.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
		// Перезаполняем ТЧ Товары.		
		Для Каждого СтрокаRECADV Из POSITION Цикл
			
			СтрокаКорректировки = Приемник.Товары.Найти(СтрокаRECADV.Номенклатура, "Номенклатура");
			
			Если СтрокаКорректировки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКорректировки.КоличествоУпаковок = СтрокаRECADV.ACCEPTEDQUANTITY;
			
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(СтрокаКорректировки, 
																					 Новый Структура("ПересчитатьКоличествоЕдиниц", СтрокаКорректировки.Упаковка), 
																					 КэшированныеЗначения);
																					 
			СтрокаКорректировки.Содержание = "Строка скорректирована RECADV"; // Временно для удаления удаленных в RECADV строк
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приемник);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКорректировки, СтруктураДействий, КэшированныеЗначения);
			
		КонецЦикла;
		
		// Удаление отсутствующих в RECADV строк.
		СтрокиДляУдаления = Новый Массив;
		
		Для Каждого СтрокаКорректировки Из Приемник.Товары Цикл
			
			Если НЕ СтрокаКорректировки.Содержание = "Строка скорректирована RECADV"
				ИЛИ СтрокаКорректировки.Количество = 0 Тогда
				СтрокиДляУдаления.Добавить(СтрокаКорректировки);
			КонецЕсли;
			
			СтрокаКорректировки.Содержание = "";
			
		КонецЦикла;
		
		Для Каждого СтрокаКорректировки Из СтрокиДляУдаления Цикл
			
			ИндексСтрокаКорректировки = Приемник.Товары.Индекс(СтрокаКорректировки);
			
			Если ИндексСтрокаКорректировки &gt;= 0 Тогда
				Приемник.Товары.Удалить(ИндексСтрокаКорректировки);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияУТ.ОкруглитьКоличествоШтучныхТоваров(Приемник);
		
		// Заполняем ТЧ расхождений.
		Документы.КорректировкаРеализации.ЗаполнитьРасхождения(Приемник);
		
		Если Приемник.Расхождения.Количество() = 0 Тогда
			
			ТекстЛогаСобытий = "Документ не был создан. Причина: Между расходной накладной и RECADV расхождений нет";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;	
		КонецЕсли;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Приемник, Документы.КорректировкаРеализации);
		ПараметрыУказанияСерий.ИмяТЧТовары = "Расхождения";
		ПараметрыУказанияСерий.ИмяТЧСерии  = "Расхождения";
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Приемник, ПараметрыУказанияСерий);
		ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
		ПараметрыУказанияСерий.ИмяТЧСерии  = "Товары";
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Приемник.Расхождения, СтруктураДействий, КэшированныеЗначения);
		
		// Установка варианта отражения расхождений.
		Для Каждого СтрокаРасхождения Из Приемник.Расхождения Цикл
			
			ВариантОтраженияКорректировкиТЧ = ?(СтрокаРасхождения.КоличествоУпаковок &gt; 0, "УвеличитьРеализациюУчестьПриИнвентаризации",  "УменьшитьРеализациюУчестьПриИнвентаризации");
			ВариантОтраженияКорректировкиТЧ = "Перечисление.ВариантыОтраженияКорректировокРеализаций." + ВариантОтраженияКорректировкиТЧ;
			СтрокаРасхождения.ВариантОтражения = ПредопределенноеЗначение(ВариантОтраженияКорректировкиТЧ);
			
		КонецЦикла;
		
		Если Приемник.Товары.Итог("Количество") = 0 Тогда
			
			ТекстЛогаСобытий = "Документ на основании входящего документа № " + Запись.RECADVФайлНомер + " от " 
							 + Формат(Запись.RECADVФайлДата, "ДФ=dd.MM.yyyy")+ " не был создан. Отсутсвуют позиции по номенклатуре.";
							 
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
		ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
		
		Если ОшибокНеОбнаружено Тогда
			
			НачатьТранзакцию();
			
			Попытка 
				
				ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
				Идентификатор = ДокументСсылка.УникальныйИдентификатор();	
				Приемник.УстановитьСсылкуНового(ДокументСсылка);
				
				ВидДокументаПриемник = "КорректировочнаяНакладная_Исходящая";					           	  					
				
				СтруктураРегистраDR_События = Новый Структура;
				СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Запись.ИдентификаторЦепочки);    
				СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);  
				СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);   
				СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
				СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Запись.РеализацияСсылка.УникальныйИдентификатор());
				СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());  
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
				Приемник.Записать(?(ПроводитьРеализацию, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Ошибка = ОписаниеОшибки();
				
				ТекстОшибки = НСтр("ru = 'Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%. '" 
							+ Ошибка, ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
							
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РежимЗаписиДокумента%"	, ?(ПроводитьРеализацию, "проведения", "записи"));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлНомер%"			, Запись.RECADVФайлНомер);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФайлДата%"				, Формат(Запись.RECADVФайлДата, "ДФ=dd.MM.yyyy"));
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстОшибки, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);	
				
				Продолжить;				
			КонецПопытки;
			
		КонецЕсли;
		
		// служебные операции
		Если ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
			КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЛогСобытий) Тогда
			ТекстЛогаСобытий = ЛогСобытий;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);			
		КонецЕсли;  
		
		
	КонецЦикла;
	
Иначе
	
	ТекстОшибки = НСтр("ru = 'В настройках программы отключена возможность создания корректировок реализации'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					
	ЗаписатьЛогСобытий(ЛогСобытий, ТекстОшибки);
	
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокНакладныеИсходящиеПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Создать корректировку реализации товаров</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>СоздатьКорректировкуРеализации</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:string">СоздатьКорректировкуРеализации</Value>
	</row>
</ValueTree>