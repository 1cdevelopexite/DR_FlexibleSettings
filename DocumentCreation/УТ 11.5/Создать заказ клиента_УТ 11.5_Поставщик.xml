<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Формула</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Создать заказ клиента</Value>
		<Value xsi:type="xs:string">//&lt;Служебные переменные&gt;
ТипПриемника = "ЗаказКлиента";
ИмяСобытия   = "Создание документов по кнопке &lt;&lt;&lt; Создать заказ клиента &gt;&gt;&gt;";

ОперацияЗапись = Ложь;
ЛогСобытий = ""; 

ВыбранныеСтроки 	= ?(ВыбранныеСтроки = Неопределено, Новый Массив, ВыбранныеСтроки);
ВызовВходящимORDER 	= ?(ВызовВходящимORDER = Неопределено, Ложь, ВызовВходящимORDER);
АвтоЗаказ 			= ?(АвтоЗаказ = Неопределено, Ложь, АвтоЗаказ);
ПерезаписыватьЗаказ	= ?(ВызовВходящимORDER = Истина, ПерезаписыватьЗаказ, Настройка_Параметр_Прочитать("EDI_ПерезаписыватьЗаказПриЗагрузкеORDER", Ложь));	
РазделятьЗаказы 	= ?(ВызовВходящимORDER = Истина, Ложь, Настройка_Параметр_Прочитать("EDI_РазделятьЗаказы", Ложь));
//&lt;/Служебные переменные&gt;

КвалификаторСтрок = Новый КвалификаторыСтроки(36);

ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"				, Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"	, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));
ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка",,,,КвалификаторСтрок));

Для Каждого Элемент Из ВыбранныеСтроки Цикл
	
	Элемент.Вставить("Идентификатор", Элемент.Документ.ИдентификаторДокумента);
	
	НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
	
КонецЦикла;

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ВыбранныеЗаписи.Документ КАК Документ,
|	ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ТЗ_ВыбранныеЗаписи
|ИЗ
|	&amp;ТаблицаВыбранныхЗаписей КАК ВыбранныеЗаписи
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТЗ_ВыбранныеЗаписи.Документ КАК Документ,
|	ТЗ_ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ТЗ_ВыбранныеЗаписи.Идентификатор КАК Идентификатор
|ПОМЕСТИТЬ ВТ_Отбор
|ИЗ
|	ТЗ_ВыбранныеЗаписи КАК ТЗ_ВыбранныеЗаписи
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
|		ПО ТЗ_ВыбранныеЗаписи.Документ = DR_Документ.Ссылка
|ГДЕ
|	DR_Документ.Статус = ""Обработан""
|	И НЕ DR_Документ.ПометкаУдаления
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВТ_Отбор.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	ВТ_Отбор.Документ КАК Источник,
|	ВТ_Отбор.Идентификатор КАК Идентификатор,
|	МАКСИМУМ(ЕСТЬNULL(Заказ_События.Документ, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))) КАК ДокументЗаказа1С,
|	МАКСИМУМ(ВЫБОР
|			КОГДА Заказ_События.Документ ЕСТЬ NULL
|				ТОГДА ЛОЖЬ
|			ИНАЧЕ ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.ЗаказКлиента).Проведен
|		КОНЕЦ) КАК ЗаказПроведен,
|	МАКСИМУМ(ЕСТЬNULL(Реализация_События.Документ, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка))) КАК ДокументРеализации
|ИЗ
|	ВТ_Отбор КАК ВТ_Отбор
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
|		ПО ВТ_Отбор.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
|			И ВТ_Отбор.Идентификатор = Заказ_События.ИдентификаторОснования
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Реализация_События
|		ПО ВТ_Отбор.ИдентификаторЦепочки = Реализация_События.ИдентификаторЦепочки
|			И (Реализация_События.ВидДокумента = ""Накладная_Исходящая"")
|			И (Заказ_События.Идентификатор = Реализация_События.ИдентификаторОснования)
|
|СГРУППИРОВАТЬ ПО
|	ВТ_Отбор.Документ,
|	ВТ_Отбор.ИдентификаторЦепочки,
|	ВТ_Отбор.Идентификатор";

Запрос.УстановитьПараметр("ТаблицаВыбранныхЗаписей", ТаблицаВыбранныхЗаписей);  
Выборка = Запрос.Выполнить().Выбрать(); 

Пока Выборка.Следующий() Цикл
	
		ТребуетсяСозданиеНовогоЗаказа     = Ложь;
		ТребуетсяПерезаписьТекущегоЗаказа = Ложь;
	
		Если НЕ РазделятьЗаказы Тогда
			
			Если НЕ ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) Тогда
				 			 			 
				 ТребуетсяСозданиеНовогоЗаказа = Истина;
				 
			ИначеЕсли ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И НЕ Выборка.ЗаказПроведен Тогда	 
				 		
				 ТребуетсяПерезаписьТекущегоЗаказа = Истина;
				 		 
			ИначеЕсли ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) И Выборка.ЗаказПроведен Тогда 
				 
				 //сообщаем о проблеме и продолжаем цикл принудительно 
				 ТекстЛогаСобытий = НСтр("ru = 'Создание нового заказа не выполнено. Перезапись заказа не выполнена.  
										 		|Отключена настройка ""Разделять заказы"", %ЗаказПокупателя% проведен.'",
											ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				 ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказПокупателя%", Строка(Выборка.ДокументЗаказа1С));
				
				 ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				 МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				 
				 Продолжить;
				 
			КонецЕсли;
					
		КонецЕсли;	
        
		Если НЕ РазделятьЗаказы
			 И
			 (НЕ ТребуетсяСозданиеНовогоЗаказа 
			 	И НЕ ТребуетсяПерезаписьТекущегоЗаказа) Тогда
			
			ТекстЛогаСобытий = НСтр("ru = 'Ни одно из действий (создание, перезапись заказа) не было выполнено.
											|Причины:
											|Заказ существует и проведен/не проведен;
											|Разделение заказов - выкл.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
						
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
            		
			Продолжить;
			
		КонецЕсли;
		
		// Получение общих для всех документов значений.
		Если КэшированныеЗначения 	= Неопределено Тогда
			КэшированныеЗначения 	= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КонецЕсли;
		
		ПроводитьЗаказ 				= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ПроводитьЗаказ", ПроводитьЗаказ) Тогда
			ПроводитьЗаказ 			= Настройка_Параметр_Прочитать("EDI_СоздаватьДокументЗаказ1СПроведенным");
			КэшированныеЗначения.Вставить("ПроводитьЗаказ", ПроводитьЗаказ);
		КонецЕсли;
		
		ЗагружатьТекущейДатой 		= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой) Тогда
			ЗагружатьТекущейДатой 	= Настройка_Параметр_Прочитать("EDI_ЗаказыЗагружатьТекущейДатой");
			КэшированныеЗначения.Вставить("ЗагружатьТекущейДатой", ЗагружатьТекущейДатой);
		КонецЕсли;
		
		мВалютаРегламентированногоУчета = Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета) Тогда
			мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			КэшированныеЗначения.Вставить("мВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
		КонецЕсли;
		
		КолонкиДокумента 			= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("КолонкиДокумента", КолонкиДокумента) Тогда
			
			КолонкиДокумента 		= Новый Соответствие;
			
			Для Каждого Колонка Из  Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки().Колонки Цикл
				КолонкиДокумента.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
			КонецЦикла;
			
			КэшированныеЗначения.Вставить("КолонкиДокумента", КолонкиДокумента);
			
		КонецЕсли;
		
		// Получение функциональных опций.
		ИспользоватьРасширенныеВозможностиЗаказаКлиента 	= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
			ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
			КэшированныеЗначения.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ИспользоватьРасширенныеВозможностиЗаказаКлиента);
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидкиВПродажах 			= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьАвтоматическиеСкидкиВПродажах", ИспользоватьАвтоматическиеСкидкиВПродажах) Тогда
			ИспользоватьАвтоматическиеСкидкиВПродажах 		= ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
			КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", ИспользоватьАвтоматическиеСкидкиВПродажах);
		КонецЕсли;
		
		ИспользоватьСоглашенияСКлиентами 					= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами) Тогда
			ИспользоватьСоглашенияСКлиентами 				= ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
			КэшированныеЗначения.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
		КонецЕсли;
		
		ИспользоватьДоговорыСКлиентами                      = Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьДоговорыСКлиентами", ИспользоватьДоговорыСКлиентами) Тогда
			ИспользоватьДоговорыСКлиентами 				= ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
			КэшированныеЗначения.Вставить("ИспользоватьДоговорыСКлиентами", ИспользоватьДоговорыСКлиентами);
		КонецЕсли;
		
		ИспользоватьУправлениеДоставкой 					= Неопределено;
		Если НЕ КэшированныеЗначения.Свойство("ИспользоватьУправлениеДоставкой", ИспользоватьУправлениеДоставкой) Тогда
			ИспользоватьУправлениеДоставкой 				= ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
			КэшированныеЗначения.Вставить("ИспользоватьУправлениеДоставкой", ИспользоватьУправлениеДоставкой);
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Основной запрос для заполнения шапки документа.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&amp;Источник КАК Ссылка
		|ПОМЕСТИТЬ ВТ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ДР_Грузополучатель.Значение КАК Справочник.Партнеры) КАК ТочкаДоставки,
		|	ВЫРАЗИТЬ(ДР_Контрагент.Значение КАК Справочник.Контрагенты) КАК Контрагент,
		|	ВЫРАЗИТЬ(ДР_Организация.Значение КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ДР_ЗаказНомер.Значение КАК СТРОКА(35)) КАК ЗаказНомер,
		|	ВЫРАЗИТЬ(ДР_ЗаказДата.Значение КАК ДАТА) КАК ЗаказДата,
		|	ВЫРАЗИТЬ(ДР_ДатаПоставки.Значение КАК ДАТА) КАК ДатаПоставки,
		|	ЕСТЬNULL(ДР_POSITION.ХранилищеЗначения, НЕОПРЕДЕЛЕНО) КАК POSITION
		|ПОМЕСТИТЬ ВТ_DRДокумент
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Контрагент
		|		ПО ВТ.Ссылка = ДР_Контрагент.Ссылка
		|			И (ДР_Контрагент.Реквизит = ""Контрагент"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Грузополучатель
		|		ПО ВТ.Ссылка = ДР_Грузополучатель.Ссылка
		|			И (ДР_Грузополучатель.Реквизит = ""ТочкаДоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Организация
		|		ПО ВТ.Ссылка = ДР_Организация.Ссылка
		|			И (ДР_Организация.Реквизит = ""Организация"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказНомер
		|		ПО ВТ.Ссылка = ДР_ЗаказНомер.Ссылка
		|			И (ДР_ЗаказНомер.Реквизит = ""NUMBER"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ЗаказДата
		|		ПО ВТ.Ссылка = ДР_ЗаказДата.Ссылка
		|			И (ДР_ЗаказДата.Реквизит = ""ДатаЭлектронногоДокумента"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаПоставки
		|		ПО ВТ.Ссылка = ДР_ДатаПоставки.Ссылка
		|			И (ДР_ДатаПоставки.Реквизит = ""ДатаПоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_POSITION
		|		ПО ВТ.Ссылка = ДР_POSITION.Ссылка
		|			И (ДР_POSITION.Реквизит = ""POSITION"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_DRДокумент.Ссылка КАК DRДокумент,
		|	СоглашенияСКлиентами.Ссылка КАК Соглашение
		|ПОМЕСТИТЬ ВТ_СоглашенияСКлиентами
		|ИЗ
		|	ВТ_DRДокумент КАК ВТ_DRДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|		ПО ВТ_DRДокумент.Организация = СоглашенияСКлиентами.Организация
		|			И ВТ_DRДокумент.Контрагент = СоглашенияСКлиентами.Контрагент
		|			И ВТ_DRДокумент.ТочкаДоставки = СоглашенияСКлиентами.Партнер
		|			И (СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует))
		|			И (СоглашенияСКлиентами.ПометкаУдаления = Ложь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_DRДокумент.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_DRДокумент.ТочкаДоставки) КАК ПартнерПредставление,
		|	ВТ_DRДокумент.ТочкаДоставки КАК Партнер,
		|	ВТ_DRДокумент.Контрагент КАК Контрагент,
		|	ВТ_DRДокумент.Организация КАК Организация,
		|	Приоритеты.Ссылка КАК Приоритет,
		|	ИСТИНА КАК НеОтгружатьЧастями,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз) КАК СпособДоставки,
		|	ИСТИНА КАК СкидкиРассчитаны,
		|	ЕСТЬNULL(DR_GLN.Контрагент_ЦеныИз1С, ЛОЖЬ) КАК ЦеныИз1С,
		|	ЕСТЬNULL(DR_GLN.Контрагент_ЦенаЗаказа_с_НДС, ЛОЖЬ) КАК ЦенаЗаказа_с_НДС,
		|	ВТ_DRДокумент.ЗаказНомер КАК НомерПоДаннымКлиента,
		|	ВТ_DRДокумент.ЗаказДата КАК ДатаПоДаннымКлиента,
		|	ВТ_DRДокумент.ДатаПоставки КАК ДатаОтгрузки,
		|	ВТ_DRДокумент.POSITION КАК POSITION,
		|	СоглашенияСКлиентами.Соглашение КАК Соглашение
		|ИЗ
		|	Справочник.Приоритеты КАК Приоритеты,
		|	ВТ_DRДокумент КАК ВТ_DRДокумент
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN
		|		ПО ВТ_DRДокумент.Контрагент = DR_GLN.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|		ПО ВТ_DRДокумент.Ссылка = СоглашенияСКлиентами.DRДокумент
		|ГДЕ
		|	Приоритеты.Наименование = ""Средний""";
		
		Запрос.УстановитьПараметр("Источник", Выборка.Источник);
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		//&lt;Получение данных элемента POSITION&gt;
		POSITION = РезультатЗапроса[0].POSITION;
		
		МассивСтруктурPOSITION = ?(POSITION &lt;&gt; Неопределено, POSITION.Получить(), POSITION);
		
		Если МассивСтруктурPOSITION = Неопределено Тогда
			
			ТекстЛогаСобытий = НСтр("ru = 'Заказ клиента по документу %ORDER% не создан, т.к. отсутствует либо элемент POSITION либо его значения.'", 
								ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
								
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Строка(РезультатЗапроса[0].Ссылка));
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
		КвалификаторЧисло = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		
		ТаблицаPOSITION = Новый ТаблицаЗначений;
		ТаблицаPOSITION.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаPOSITION.Колонки.Добавить("ORDEREDQUANTITY"	, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));  
		ТаблицаPOSITION.Колонки.Добавить("ORDERPRICE"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
		ТаблицаPOSITION.Колонки.Добавить("PRICEWITHVAT"		, Новый ОписаниеТипов("Число",,,,КвалификаторЧисло));
		ТаблицаPOSITION.Колонки.Добавить("ЕдиницаИзмерения"	, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
		
		Для каждого ЭлСтруктура Из МассивСтруктурPOSITION Цикл
			НоваяСтрока = ТаблицаPOSITION.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлСтруктура);
		КонецЦикла;
		
		// Получение данных табличной части Товары.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&amp;Источник КАК Ссылка,
		|	POSITION.Номенклатура КАК Номенклатура,
		|	POSITION.ORDEREDQUANTITY КАК Количество,
		|	POSITION.ORDERPRICE КАК Цена,
		|	POSITION.PRICEWITHVAT КАК ЦенаСНДС,
		|	ВЫРАЗИТЬ(POSITION.ЕдиницаИзмерения КАК Справочник.УпаковкиЕдиницыИзмерения) КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&amp;POSITION КАК POSITION
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.Ссылка КАК Ссылка,
		|	ВТ.Номенклатура КАК Номенклатура,
		|	СУММА(ВТ.Количество) КАК КоличествоУпаковок,
		|	ВТ.Цена КАК Цена,
		|	ВТ.ЦенаСНДС КАК ЦенаСНДС,
		|	ВЫБОР
		|		КОГДА ВТ.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ВТ.ЕдиницаИзмерения
		|		КОГДА ВТ.ЕдиницаИзмерения.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|		ИНАЧЕ ВТ.ЕдиницаИзмерения
		|	КОНЕЦ КАК Упаковка,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
		|	ЛОЖЬ КАК Отменено
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ.Ссылка,
		|	ВТ.Номенклатура,
		|	ВТ.Цена,
		|	ВТ.ЦенаСНДС,
		|	ВЫБОР
		|		КОГДА ВТ.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ВТ.ЕдиницаИзмерения
		|		КОГДА ВТ.ЕдиницаИзмерения.ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПУстаяСсылка)
		|		ИНАЧЕ ВТ.ЕдиницаИзмерения
		|	КОНЕЦ";
		
		Запрос.УстановитьПараметр("POSITION", ТаблицаPOSITION);
		Запрос.УстановитьПараметр("Источник", Выборка.Источник);
		
		РезультатЗапросаТЧТовары = Запрос.Выполнить().Выгрузить();
		
		Если ИспользоватьУправлениеДоставкой Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|    КонтактнаяИнформация.Ссылка КАК Ссылка,
			|    КонтактнаяИнформация.Вид.Представление КАК Вид,
			|    КонтактнаяИнформация.Представление КАК АдресДоставки,
			|    КонтактнаяИнформация.ЗначенияПолей КАК АдресДоставкиЗначенияПолей
			|ИЗ
			|    Справочник.Партнеры.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|    КонтактнаяИнформация.Ссылка В(&amp;Партнер)
			|    И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)");
			
			Запрос.УстановитьПараметр("Партнер", РезультатЗапроса.ВыгрузитьКолонку("Партнер"));
			АдресаПолучателяИзКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		ТаблицаОстатки = Новый ТаблицаЗначений;
		
		ЕстьРасхождения = Ложь;
		
		Если РазделятьЗаказы Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	&amp;Источник КАК Ссылка,
			|	&amp;ИдентификаторЦепочки КАК ИдентификаторЦепочки,
			|	&amp;Идентификатор КАК Идентификатор
			|ПОМЕСТИТЬ ВТ_ДРСсылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ДРСсылка.Ссылка КАК Ссылка,
			|	Заказ_События.Документ КАК ДокументСвязанный
			|ПОМЕСТИТЬ ДокументыСвязанные
			|ИЗ
			|	ВТ_ДРСсылка КАК ВТ_ДРСсылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
			|		ПО ВТ_ДРСсылка.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки
			|			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
			|			И (ВТ_ДРСсылка.Идентификатор = Заказ_События.ИдентификаторОснования)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	DR_Документы_Товары.Ссылка КАК ДокументИсточник,
			|	DR_Документы_Товары.КоличествоУпаковок КАК Количество,
			|	DR_Документы_Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТоварыOrder
			|ИЗ
			|	&amp;РезультатЗапросаТЧТовары КАК DR_Документы_Товары
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыСвязанные.Ссылка КАК ДокументИсточник,
			|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
			|	СУММА(ЗаказКлиентаТовары.КоличествоУпаковок) КАК Количество
			|ПОМЕСТИТЬ ТоварыЗаказы
			|ИЗ
			|	ДокументыСвязанные КАК ДокументыСвязанные
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|		ПО ДокументыСвязанные.ДокументСвязанный = ЗаказКлиентаТовары.Ссылка
			|ГДЕ
			|	ЗаказКлиентаТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗаказКлиентаТовары.Номенклатура,
			|	ДокументыСвязанные.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыOrder.ДокументИсточник КАК ДокументИсточник,
			|	ТоварыOrder.Номенклатура КАК Номенклатура,
			|	ТоварыOrder.Количество - ЕСТЬNULL(ТоварыЗаказы.Количество, 0) КАК КоличествоОстаток,
			|	ВЫБОР
			|		КОГДА ТоварыOrder.Количество - ЕСТЬNULL(ТоварыЗаказы.Количество, 0) = 0
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК РезультатРасхождениеВКоличестве
			|ИЗ
			|	ТоварыOrder КАК ТоварыOrder
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказы КАК ТоварыЗаказы
			|		ПО ТоварыOrder.Номенклатура = ТоварыЗаказы.Номенклатура
			|			И ТоварыOrder.ДокументИсточник = ТоварыЗаказы.ДокументИсточник";
			
			Запрос.УстановитьПараметр("Источник"					, Выборка.Источник);
			Запрос.УстановитьПараметр("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
			Запрос.УстановитьПараметр("Идентификатор"				, Выборка.Идентификатор);
			Запрос.УстановитьПараметр("РезультатЗапросаТЧТовары"	, РезультатЗапросаТЧТовары.Скопировать(,"Ссылка, КоличествоУпаковок, Номенклатура"));
			
			ТаблицаОстатки = Запрос.Выполнить().Выгрузить(); 
			
			ЕстьРасхождения = НЕ (ТаблицаОстатки.Итог("РезультатРасхождениеВКоличестве") = 0);
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Для Каждого Запись Из РезультатЗапроса Цикл
			
			Если РазделятьЗаказы 
				 И 
				 (НЕ ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) 
				 	ИЛИ ЕстьРасхождения) Тогда
					
				 	//создаем новый = истина 
					ТребуетсяСозданиеНовогоЗаказа = Истина;
					
			КонецЕсли;
						
			Если РазделятьЗаказы
				И НЕ ТребуетсяСозданиеНовогоЗаказа Тогда
			
				ТекстЛогаСобытий = НСтр("ru = 'Ни одно из действий (создание, перезапись заказа) не было выполнено.
											|Причины:
											|Отсутствуют расхождения между %ORDER% и %Заказ%;
											|Разделение заказов - вкл.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Выборка.Источник);
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Заказ%", Выборка.ДокументЗаказа1С);
							
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	            		
				Продолжить;
			
			ИначеЕсли ТребуетсяСозданиеНовогоЗаказа Тогда 
			
				Приемник = Документы[ТипПриемника].СоздатьДокумент();
			
			ИначеЕсли ТребуетсяПерезаписьТекущегоЗаказа Тогда
			
				Приемник = Выборка.ДокументЗаказа1С.ПолучитьОбъект();
				Приемник.Товары.Очистить();		
	
			КонецЕсли;
			
			// Автозаполнение документа.
			ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(Приемник, Неопределено);
			
			// Заполнение реквизитов из запроса.
			ЗаполнитьЗначенияСвойств(Приемник, Запись);
			
			// Заполнение соглашения и этапов графика оплаты.
			Если ИспользоватьСоглашенияСКлиентами Тогда
				
				// Исключаем из процедуры заполнение цен.
				Если ЗначениеЗаполнено (Приемник.Партнер) Тогда
					
					ПараметрыОтбораУсловияПродаж = Новый Структура;
					ПараметрыОтбораУсловияПродаж.Вставить("УчитыватьГруппыСкладов"	, Истина);
					ПараметрыОтбораУсловияПродаж.Вставить("ВыбранноеСоглашение"		, Приемник.Соглашение);
					ПараметрыОтбораУсловияПродаж.Вставить("ПустаяСсылкаДокумента"	, Документы.ЗаказКлиента.ПустаяСсылка());
					ПараметрыОтбораУсловияПродаж.Вставить("ХозяйственныеОперации"	, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
					
					УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Приемник.Партнер, ПараметрыОтбораУсловияПродаж);
					
					Приемник.ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
					
					ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(Приемник);
					
					УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Приемник.НалогообложениеНДС, ПараметрыЗаполнения);
					
					Если УсловияПродажПоУмолчанию &lt;&gt; Неопределено Тогда
						Приемник.Соглашение = УсловияПродажПоУмолчанию.Соглашение; 
					КонецЕсли;
					
					Если НЕ (ЗначениеЗаполнено(Приемник.Партнер) ИЛИ ЗначениеЗаполнено(Приемник.Контрагент)) Тогда
						ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Приемник.Партнер, Приемник.Контрагент);
					КонецЕсли;
					
					Приемник.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Приемник.Контрагент, , Приемник.БанковскийСчетКонтрагента);
					
					ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Приемник.Партнер,Приемник.КонтактноеЛицо);
					
					Если НЕ ИспользоватьУправлениеДоставкой Тогда
						Приемник.АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Приемник.Партнер);
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Приемник.Соглашение) Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'Не найдено соглашение для Партнера %Партнер%. Документ не создан'", 
										ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
										
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Партнер%", Запись.ПартнерПредставление);
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполнение Договора
			Если ИспользоватьДоговорыСКлиентами И Приемник.Соглашение.ИспользуютсяДоговорыКонтрагентов Тогда
				
				Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(Приемник, 
				Приемник.ХозяйственнаяОперация, 
				Приемник.Валюта, 
				Неопределено,
				Ложь);
				
				Если ЗначениеЗаполнено(Договор) Тогда
					Приемник.Договор = Договор;
				Иначе
					ТекстЛогаСобытий = НСтр("ru = 'Не найден договор. Документ не создан'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);	
				КонецЕсли;
				
			КонецЕсли;															
			
			// Заполнение адреса доставки.
			Если ИспользоватьУправлениеДоставкой Тогда
				
				АдресПолучателя = АдресаПолучателяИзКонтактнойИнформации.НайтиСтроки(Новый Структура("Ссылка, Вид", Приемник.Партнер, "Адрес доставки"));
				ЗаполнитьЗначенияСвойств(Приемник, ?(АдресПолучателя.Количество() &gt; 0, АдресПолучателя.Получить(0), Новый Структура));
				
			КонецЕсли;
			
			// Установка статуса.
			Если ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
				Приемник.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
			Иначе
				Приемник.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Приемник.Склад) Тогда
				Приемник.Склад = Настройка_Параметр_Прочитать("EDI_СкладПоУмолчанию", Справочники.Склады.ПустаяСсылка());
			КонецЕсли;
			
			// Корректировка реквизитов.
			ДатаЗаказа = ТекущаяДата();
			
			Если НЕ ЗагружатьТекущейДатой Тогда
				ДатаЗаказа = Запись.ДатаПоДаннымКлиента;
			КонецЕсли;
			
			Приемник.Дата = ДатаЗаказа;
			Приемник.ДатаОтгрузки = ?(ЗначениеЗаполнено(Приемник.ДатаОтгрузки) И Приемник.ДатаОтгрузки &lt; НачалоДня(Приемник.Дата), 
									НачалоДня(Приемник.Дата), Приемник.ДатаОтгрузки);
			
			Приемник.Менеджер = Пользователи.ТекущийПользователь();
			Приемник.Комментарий = ?(ЗначениеЗаполнено(Запись.НомерПоДаннымКлиента), "Заказ № " + Запись.НомерПоДаннымКлиента, "");
			Приемник.Комментарий = Приемник.Комментарий + ?(ЗначениеЗаполнено(Приемник.Комментарий) И ЗначениеЗаполнено(Запись.ДатаПоДаннымКлиента), 
								 	" от " + Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"), "");
			
			// Заполнение ответственных лиц.
			ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Приемник.Организация, КонецДня(Приемник.Дата));
			Приемник.Руководитель     = ОтветственныеЛица.РуководительСсылка;
			Приемник.ГлавныйБухгалтер = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Приемник);
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Приемник, Документы.ЗаказКлиента));
			
			СтруктураДанныеФормы = "";
			
			Для Каждого ТекущийРеквизит Из Метаданные.Документы.ЗаказКлиента.Реквизиты Цикл
				СтруктураДанныеФормы = СтруктураДанныеФормы + ?(ЗначениеЗаполнено(СтруктураДанныеФормы), ",", "") + ТекущийРеквизит.Имя;
			КонецЦикла;
			
			СтруктураПриемник = Новый Структура(СтруктураДанныеФормы);
			ЗаполнитьЗначенияСвойств(СтруктураПриемник, Приемник); 
			СтруктураПриемник.Вставить("Дата", Приемник.Дата); 
														
			ЗапросВидЦены = Новый Запрос;
			ЗапросВидЦены.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			                      |	СправочникВидыЦен.Ссылка КАК Ссылка
			                      |ИЗ
			                      |	Справочник.ВидыЦен КАК СправочникВидыЦен
			                      |ГДЕ
			                      |	СправочникВидыЦен.ИспользоватьПриПродаже
			                      |	И СправочникВидыЦен.ЦенаВключаетНДС = &amp;ЦенаВключаетНДС
			                      |	И СправочникВидыЦен.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДействияВидовЦен.Действует)
			                      |	И СправочникВидыЦен.Назначение = ЗНАЧЕНИЕ(Перечисление.НазначенияВидовЦен.Общий)
			                      |	И НЕ СправочникВидыЦен.ПометкаУдаления";
			
			ЗапросВидЦены.УстановитьПараметр("ЦенаВключаетНДС", Приемник.ЦенаВключаетНДС);
			ВыборкаЗапросВидЦены = ЗапросВидЦены.Выполнить().Выбрать();
			
			Если ВыборкаЗапросВидЦены.Следующий() Тогда
				ВидЦеныПоУмолчанию = ВыборкаЗапросВидЦены.Ссылка;
			КонецЕсли;
			
			//НО
			Если ИспользоватьСоглашенияСКлиентами 
				И ЗначениеЗаполнено(Приемник.Соглашение.ВидЦен) Тогда
				ВидЦеныПоУмолчанию = Приемник.Соглашение.ВидЦен;	
            КонецЕсли;
						
			// Заполнение Товаров.
			Приемник.Товары.Очистить();
			ВТабличнойЧастиПрисутствуютОшибкиЗаполнения = Ложь;
			
			Если РазделятьЗаказы Тогда
				
				// актуализация количества с учетом ранее созданных заказов клиента по данному ордеру
				ОстаткиПоОрдеру = ТаблицаОстатки.НайтиСтроки(Новый Структура("ДокументИсточник", Запись.Ссылка));
				
				Для Каждого СтрокаОстатки Из ТаблицаОстатки Цикл
					
					КоличествоОстаток = СтрокаОстатки.КоличествоОстаток;
					
					ПараметрыОтбора = Новый Структура("Ссылка, Номенклатура", СтрокаОстатки.ДокументИсточник, СтрокаОстатки.Номенклатура);
					НайденныеСтроки = РезультатЗапросаТЧТовары.НайтиСтроки(ПараметрыОтбора);
					
					Для Каждого Строка Из НайденныеСтроки Цикл
						Строка.КоличествоУпаковок = Мин(КоличествоОстаток, Строка.КоличествоУпаковок);
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
			
			Для Каждого Строка Из РезультатЗапросаТЧТовары.НайтиСтроки(Новый Структура("Ссылка", Запись.Ссылка)) Цикл
				
				ДанныеДляЗаполнения = Новый Структура;
				
				Для Каждого Колонка Из КолонкиДокумента Цикл
					ДанныеДляЗаполнения.Вставить(Колонка.Ключ, Колонка.Значение);
				КонецЦикла;
				
				// Заполнение данных строки.
				ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, Строка, "Номенклатура, КоличествоУпаковок, Упаковка");
				ДанныеДляЗаполнения.Склад = Приемник.Склад;
							
				// Заполнение реквизитов строки методами конфигурации (пока без цен и сумм).
				СтруктураДействий = Новый Структура;
							
				СтрукЗаполнитьСтавку = Новый Структура;
				СтрукЗаполнитьСтавку.Вставить("НалогообложениеНДС"	, Приемник.НалогообложениеНДС);
				СтрукЗаполнитьСтавку.Вставить("Дата"				, Приемник.Дата);
				СтрукЗаполнитьСтавку.Вставить("ПоДатеОтгрузки"		, Истина);
				СтрукЗаполнитьСтавку.Вставить("Организация"			, Приемник.Организация);
				
				//СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Приемник.Партнер);
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС"					, СтрукЗаполнитьСтавку);
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары"	, Приемник.ВернутьМногооборотнуюТару);
				СтруктураДействий.Вставить("ЗаполнитьСодержание"				, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(СтруктураПриемник, Ложь));
				СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус"		, Новый Структура("Склад, ПараметрыУказанияСерий", ДанныеДляЗаполнения.Склад, ПараметрыУказанияСерий));
				
				ДанныеДляЗаполнения.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
				
				Если Запись.ЦеныИз1С Тогда
					
					Если ИспользоватьСоглашенияСКлиентами Тогда // Цена продажи и срок поставки
						СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Приемник));
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина)); 
					КонецЕсли;	
					               	
                	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
                	ЗаполнитьЗначенияСвойств(Приемник.Товары.Добавить(), ДанныеДляЗаполнения);
                	
                	Продолжить;
                    
                КонецЕсли;
				
				Если Запись.ЦенаЗаказа_с_НДС Тогда
						
					Если ЗначениеЗаполнено(Строка.ЦенаСНДС) Тогда
					
						ДанныеДляЗаполнения.Цена = Строка.ЦенаСНДС;    
					  
					Иначе 
					
						ТекстЛогаСобытий = НСтр("ru = 'При заполнении данных в %Заказ% возникли ошибки. Для товара %Номенклатура% в табличной части %ORDER% не заполнена Цена с НДС.  
												 		|В настройках контрагента установлен признак ""ЦенаЗаказа с НДС"".'",
														ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
						ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Заказ%", Приемник);
						ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Выборка.Источник);
						ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Номенклатура%", Строка.Номенклатура);
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
										
					КонецЕсли;
                        						  
				Иначе
								    					
					Если ЗначениеЗаполнено(Строка.Цена) Тогда
						
						ДанныеДляЗаполнения.Цена = Строка.Цена;
								                        						
					Иначе
						
						ТекстЛогаСобытий = НСтр("ru = 'При заполнении данных в %Заказ% возникли ошибки. Для товара %Номенклатура% в табличной части %ORDER% не заполнена Цена.  
												 		|В настройках контрагента НЕ установлен признак ""ЦенаЗаказа с НДС"".'",
														ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
						ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Заказ%", Приемник);
						ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%", Выборка.Источник);
						ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Номенклатура%", Строка.Номенклатура);
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
																					
					КонецЕсли;
											
				КонецЕсли;
					
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Приемник));
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина)); 
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеДляЗаполнения, СтруктураДействий, КэшированныеЗначения);
				
				// Перенос данных в строку ТЧ Товары.
				ЗаполнитьЗначенияСвойств(Приемник.Товары.Добавить(), ДанныеДляЗаполнения); 
											
			КонецЦикла;
			
			//Получение цен из 1С для контрагентов, у котороых стоит такая настройка.		
			Если Запись.ЦеныИз1С Тогда
				
				ВидЦены = Приемник.Товары.Выгрузить(, "ВидЦены")[0].ВидЦены; 
				
				Если НЕ ЗначениеЗаполнено(ВидЦены) 
					И ЗначениеЗаполнено(ВидЦеныПоУмолчанию) Тогда 
				
					ВидЦены = ВидЦеныПоУмолчанию; 
				
				КонецЕсли;
				
				ЗапросЦеныНоменклатуры = Новый Запрос;
				ЗапросЦеныНоменклатуры.Текст = "ВЫБРАТЬ
				                               |	ЦеныНоменклатуры25СрезПоследних.Номенклатура КАК Номенклатура,
				                               |	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена
				                               |ИЗ
				                               |	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&amp;Период, Номенклатура В (&amp;СписокТоваров) И  ВидЦены = &amp;ВидЦены) КАК ЦеныНоменклатуры25СрезПоследних
				                               |ГДЕ
				                               |	&amp;УсловиеВалюта";
				
				ЗапросЦеныНоменклатуры.УстановитьПараметр("Период", 		Новый Граница(Приемник.Дата, ВидГраницы.Включая)); 
				ЗапросЦеныНоменклатуры.УстановитьПараметр("СписокТоваров",	Приемник.Товары.Выгрузить(, "Номенклатура"));
				ЗапросЦеныНоменклатуры.УстановитьПараметр("ВидЦены", 		ВидЦены);
								
				Если ЗначениеЗаполнено(мВалютаРегламентированногоУчета) Тогда
					ЗапросЦеныНоменклатуры.Текст = СтрЗаменить(ЗапросЦеныНоменклатуры.Текст,
																"&amp;УсловиеВалюта",
																"ЦеныНоменклатуры25СрезПоследних.Валюта = &amp;Валюта");
					ЗапросЦеныНоменклатуры.УстановитьПараметр("Валюта",	мВалютаРегламентированногоУчета);											 
				Иначе
				    ЗапросЦеныНоменклатуры.Текст = СтрЗаменить(ЗапросЦеныНоменклатуры.Текст,
																"&amp;УсловиеВалюта", "ИСТИНА");
				КонецЕсли;	
					
				ВыборкаЦеныНоменклатуры = ЗапросЦеныНоменклатуры.Выполнить().Выбрать();
				
				Если ВыборкаЦеныНоменклатуры.Количество() = 0 Тогда
				
				    ТекстЛогаСобытий = НСтр("ru = 'Для товаров в %Заказ% не найдены цены в 1С для вида цены %ВидЦены%. Документ не будет создан.  
											 		|В настройках контрагента установлен признак ""Цены из 1С"".'",
													ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Заказ%",   Приемник);
					ТекущийВидЦены = Приемник.Товары.Выгрузить(, "ВидЦены")[0].ВидЦены;
					ТекущийВидЦены = ?(ЗначениеЗаполнено(ТекущийВидЦены), ТекущийВидЦены, """Вид цены не указан"""); 
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ВидЦены%", ТекущийВидЦены);
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					ОперацияЗапись = Истина;
					
					Продолжить;
								
				ИначеЕсли ВыборкаЦеныНоменклатуры.Количество() &lt;&gt; РезультатЗапросаТЧТовары.Количество() Тогда
					
					ТекстЛогаСобытий = НСтр("ru = 'При получении цен для товаров в %Заказ%. Не для всех позиций товаров найдена цена в 1С для вида цены %ВидЦены%.  
											 		|В настройках контрагента установлен признак ""Цены из 1С"".'",
													ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%Заказ%",   Приемник);
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ВидЦены%", Приемник.Товары.Выгрузить(, "ВидЦены")[0].ВидЦены);
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
									
				КонецЕсли;
				
				Пока ВыборкаЦеныНоменклатуры.Следующий() Цикл
					
					НайденныеСтроки = Приемник.Товары.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаЦеныНоменклатуры.Номенклатура));
				    
				    Для Каждого ТекущаяСтрока из НайденныеСтроки Цикл
				        
				        Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Цена) Тогда
				            
				            ТекущаяСтрока.Цена = ВыборкаЦеныНоменклатуры.Цена;
							
							// Заполнение сумм методами конфигурации.
							СтруктураДействий = Новый Структура;                                                                     
							
							СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Приемник));
							СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
							СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
							СтруктураДействий.Вставить("ПересчитатьСумму");
							СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
							СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
							
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
				       			         				           			             
				        КонецЕсли;
				    
				    КонецЦикла;			    
							
				КонецЦикла;
					
			КонецЕсли;
			
			ПоследнийИндекс = Приемник.Товары.Количество() - 1;
			
			Для Счетчик = 0 По ПоследнийИндекс Цикл
				
				Индекс = ПоследнийИндекс - Счетчик;
				
				Если Приемник.Товары[Индекс].Количество = 0 Тогда
					Приемник.Товары.Удалить(Индекс);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Приемник.Товары.Количество() = 0 Тогда
				
				ТекстЛогаСобытий = "Документ Заказ покупателя по документу " + Строка(Запись.Ссылка) +
									" не создан, т.к. не заполнены товары. Возможно по ORDER уже созданы другие заказы на все заказанное количество.";
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
				
				Продолжить;
			КонецЕсли;
			
			// Заполнение этапов графика оплаты.
			ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(Приемник);
			
			// Проверка и запись документов.
			ОшибокНеОбнаружено = Приемник.ПроверитьЗаполнение();
						
			Если НЕ ОшибокНеОбнаружено Тогда
				
				МассивСообщенийПользователю = ПолучитьСообщенияПользователю(ИСТИНА);
				
				Для каждого Элемент Из МассивСообщенийПользователю Цикл
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(Элемент.Текст, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);	
					
				КонецЦикла;
				
			КонецЕсли;					
				
			НачатьТранзакцию();
			
			Попытка
				
				//Если НЕ ДокументЗаписан Тогда
				Если НЕ ТребуетсяПерезаписьТекущегоЗаказа Тогда
					ДокументСсылка = Документы[ТипПриемника].ПолучитьСсылку(Новый УникальныйИдентификатор);
					Идентификатор = ДокументСсылка.УникальныйИдентификатор();	
					Приемник.УстановитьСсылкуНового(ДокументСсылка);
				Иначе
					ДокументСсылка = Приемник.Ссылка;
					Идентификатор = Приемник.Ссылка.УникальныйИдентификатор();		
				КонецЕсли;
				
				ВидДокументаПриемник = "Заказ_Входящий";
				
				СтруктураРегистраDR_События = Новый Структура;
				СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, Выборка.ИдентификаторЦепочки);
				СтруктураРегистраDR_События.Вставить("Документ"					, ДокументСсылка);
				СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокументаПриемник);
				СтруктураРегистраDR_События.Вставить("Идентификатор"			, Идентификатор);
				СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Выборка.Идентификатор);
				СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
				Приемник.Записать(?(ПроводитьЗаказ, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТекстОшибкиДляЛога = СтрЗаменить("Ошибка %РежимЗаписиДокумента% документа на основе входящего документа № %ФайлНомер% от %ФайлДата%: " + ОписаниеОшибки(),"'", """");
		
				ТекстЛогаСобытий = НСтр( "ru = '" + ТекстОшибкиДляЛога +"'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());			
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%РежимЗаписиДокумента%"	, ?(ПроводитьЗаказ, "проведения", "записи"));
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлНомер%"				, Запись.НомерПоДаннымКлиента);
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ФайлДата%"				, Формат(Запись.ДатаПоДаннымКлиента, "ДФ=dd.MM.yyyy"));
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
				
			КонецПопытки;
			
			Если РазделятьЗаказы И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) Тогда
				
				ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% разделена цепочка. Создан новый документ %ЗаказКлиента%. '", 
				               		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
									
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%"			, Строка(Выборка.Источник));
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказКлиента%"	, Строка(Приемник.Ссылка));
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
			ИначеЕсли ПерезаписыватьЗаказ И ЗначениеЗаполнено(Выборка.ДокументЗаказа1С) Тогда
				
				ТекстЛогаСобытий = НСтр("ru = 'По %ORDER% перезаписан уже существующий документ %ЗаказКлиента%. '", 
									ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
									
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ORDER%"			, Строка(Выборка.Источник));
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ЗаказКлиента%"	, Строка(Выборка.ДокументЗаказа1С));
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Успешно", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
			КонецЕсли;
			
			
		КонецЦикла;	 
	
	// служебные операции
	Если Не Приемник = Неопределено И ЗначениеЗаполнено(Приемник.Ссылка) И Не ОперацияЗапись Тогда
		КоличествоСозданныхДокументов = КоличествоСозданныхДокументов + 1;
	КонецЕсли;    
	
КонецЦикла;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокOrderВходящиеПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Создать заказ клиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>СоздатьЗаказКлиента</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string">ТекстЗапроса = "ВЫБРАТЬ
               |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	DR_События.Документ КАК Документ,
               |	DR_События.Идентификатор КАК Идентификатор
               |ПОМЕСТИТЬ ВТ_ORDER
               |ИЗ
               |	РегистрСведений.DR_События КАК DR_События
               |ГДЕ
               |	DR_События.ВидДокумента = ""ORDER_Входящий""
               |	И DR_События.Статус &lt;&gt; ""Архивный""
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	DR_События.ИдентификаторОснования КАК ИдентификаторОснования,
               |	DR_События.Документ КАК Документ,
               |	МАКСИМУМ(DR_События.ДатаЗаписи) КАК ДатаЗаписи
               |ПОМЕСТИТЬ ВТ_ЗАКАЗ
               |ИЗ
               |	РегистрСведений.DR_События КАК DR_События
               |ГДЕ
               |	DR_События.ВидДокумента = ""Заказ_Входящий""
               |
               |СГРУППИРОВАТЬ ПО
               |	DR_События.ИдентификаторЦепочки,
               |	DR_События.ИдентификаторОснования,
               |	DR_События.Документ
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ ПЕРВЫЕ 2
               |	ВТ_ORDER.Документ КАК Документ,
               |	ВТ_ORDER.ИдентификаторЦепочки КАК ИдентификаторЦепочки
               |ИЗ
               |	ВТ_ORDER КАК ВТ_ORDER
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗАКАЗ КАК ВТ_ЗАКАЗ
               |		ПО (ВТ_ORDER.ИдентификаторЦепочки = ВТ_ЗАКАЗ.ИдентификаторЦепочки)
               |			И (ВТ_ORDER.Идентификатор = ВТ_ЗАКАЗ.ИдентификаторОснования)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
               |		ПО (ВТ_ORDER.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
               |ГДЕ
               |	ВТ_ЗАКАЗ.ИдентификаторЦепочки ЕСТЬ NULL
               |
               |УПОРЯДОЧИТЬ ПО
               |	DR_ЦепочкиДокументов.ДатаЗаказа УБЫВ";</value>
				<presentation>ТекстЗапроса</presentation>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
		<Value xsi:type="xs:string">СоздатьЗаказКлиента</Value>
	</row>
</ValueTree>