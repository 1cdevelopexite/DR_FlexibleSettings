<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий DESADV</Value>
		<Value xsi:type="xs:string">	ТипДокумента = "DESADV";	
	ТипДокументооборота      = "EDI";
	ИдентификаторыУчастников = Новый Массив;
	ЕстьОшибкаПолученияИдентификаторов = Ложь;
	
	#Область ПолучениеИдентификаторовЦепочекПоВсемПрофилям	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	DR_GLN.ПрофильОбмена КАК ПрофильОбмена,
	|	DR_GLN.Объект КАК Организация,
	|	DR_GLN.GLN КАК GLN,
	|	DR_GLN.Ид_ОЭД КАК ИдУчастника
	|ИЗ
	|	РегистрСведений.DR_GLN КАК DR_GLN
	|ГДЕ
	|	НЕ DR_GLN.ПрофильОбмена = НЕОПРЕДЕЛЕНО
	|	И НЕ DR_GLN.ПрофильОбмена.ПометкаУдаления
	|ИТОГИ ПО
	|	ПрофильОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаДокументовAPI = Новый ТаблицаЗначений;
		ТаблицаДокументовAPI.Колонки.Добавить("chainID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Колонки.Добавить("ftpFileName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТаблицаДокументовAPI.Колонки.Добавить("docUUID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Колонки.Добавить("date"       , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Индексы.Добавить("docUUID");
		
		ВыборкаПрофильОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПрофильОбмена.Следующий() Цикл
			
			ПрофильОбмена = ВыборкаПрофильОбмена.ПрофильОбмена;	
			
			#Область ПолучениеСпискаИдентификаторовПоПрофилюОбмена
			
			ВыборкаДетальныеЗаписи = ВыборкаПрофильОбмена.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыУчастников.Добавить(ВыборкаДетальныеЗаписи.GLN);	 
			КонецЦикла; 
			
			#КонецОбласти
			
			#Область ПодготовкаВспомогательныхДанныхДляRestApi
			
			ИмяСобытия = "Заполнение идентификаторов цепочки для входящих файлов " + ТипДокумента + ".";  		
			ЛимитСообщений = DR_EDI_ОбщегоНазначения.Настройка_Параметр_Прочитать("ЭКОМ_ЛимитСообщенийRESTv2", "1000");
			ДанныеДляREST = Новый Структура("ЕстьОшибка, ВидДокумента, ДанныеПодключения, doc_type", Ложь, Неопределено, Неопределено, Неопределено); 
			
			ДанныеДляREST.ВидДокумента 	= "DESADV_Входящий";
			ДанныеДляREST.doc_type 		= "desadv";
            		
			ДанныеАвторизации = DR_EDI_ВзаимодействиеREST_API.ВыполнитьАвторизациюАтолл(ПрофильОбмена);
			
			Если Не ДанныеАвторизации.Получены Тогда
				ТекстЛогаСобытий = "Не удалось выполнить авторизацию. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;	
			
			ДанныеПодключения = DR_EDI_ВзаимодействиеREST_API.ПолучитьДанныеПодключенияEvolution(ПрофильОбмена);
			
			Если Не ДанныеПодключения.ПолученПрофиль ИЛИ Не ДанныеПодключения.ПолученТокен Тогда
				ТекстЛогаСобытий = "Не удалось получить данные для подключения к REST API. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;
			
			ДанныеДляREST.ДанныеПодключения = ДанныеПодключения;	
			
			#КонецОбласти
			
			#Область ПолучитьИдентификаторыЦепочекВходящихФайлов
			
			Если Не ДанныеДляREST.ЕстьОшибка Тогда	
				НачалоПериода = Дата(1,1,1);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	МАКСИМУМ(DR_События.ДатаСообщения) КАК ДатаПоследнегоСообщения
				|ИЗ
				|	РегистрСведений.DR_События КАК DR_События
				|ГДЕ
				|	DR_События.ВидДокумента = &amp;ВидДокумента
				|	И DR_События.АктуализироватьИдентификатор = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("ВидДокумента", ДанныеДляREST.ВидДокумента);
				ВыборкаДата = Запрос.Выполнить().Выбрать();
				Если ВыборкаДата.Следующий() Тогда
					НачалоПериода = ВыборкаДата.ДатаПоследнегоСообщения;
				КонецЕсли;   
				
				МинимальнаяДата =  НачалоПериода;
				Сутки         = 60*60*24;
				ТекущаяДата   = ТекущаяДата(); 
				
				Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
					МинимальнаяДата = МинимальнаяДата - Сутки;
				Иначе
					МинимальнаяДата = ТекущаяДата - Сутки * 30;					
				КонецЕсли;         
				
				МаксимальнаяДата =  ТекущаяДата + Сутки; 
				
				НачалоПериода = Формат(МинимальнаяДата , "ДФ=yyyy-MM-dd");
				КонецПериода  = Формат(МаксимальнаяДата, "ДФ=yyyy-MM-dd");  	
				
				ВсеСообщенияAPI  = Новый Массив;
				
				Для Каждого ИдУчастника Из ИдентификаторыУчастников Цикл
					ПараметрыМетода = Новый Структура("gln, doc_type, time_from, time_to, limit, direction", ИдУчастника, ДанныеДляREST.doc_type, НачалоПериода, КонецПериода, ЛимитСообщений, "0");
					МассивСообщенийAPI = DR_EDI_ВзаимодействиеREST_API.ПолучитьСписокВходящихДокументовEDI(ПараметрыМетода, ДанныеПодключения);
					
					Для Каждого Сообщение Из МассивСообщенийAPI Цикл
						ВсеСообщенияAPI.Добавить(Сообщение);
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого Соответствие Из ВсеСообщенияAPI Цикл
					НовСтр = ТаблицаДокументовAPI.Добавить();
					НовСтр.chainID     = Соответствие.Получить("chainID");
					НовСтр.ftpFileName = Соответствие.Получить("ftpFileName");
					НовСтр.docUUID     = Соответствие.Получить("docUUID");
					НовСтр.date        = Соответствие.Получить("date");
				КонецЦикла;
			Иначе
				ЕстьОшибкаПолученияИдентификаторов = Истина;
			КонецЕсли
			
			#КонецОбласти
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не ЕстьОшибкаПолученияИдентификаторов Тогда
		
		/////////////////////////////////////////////////////////////////////////////////
		//          					DESADV ВХОДЯЩИЙ                                //
		/////////////////////////////////////////////////////////////////////////////////
		
		//Описание пакетного запроса.
		//Запрос 0 				 	 - Получение ранее загруженных (обработанных/не обработанных) DR_Документов 
		//								по ИдентификаторЦепочки и ИдентификаторДокумента (полученных по rest), для поиска дублей в процессе обработки новых DR_Документов.	
		//Запрос 1 (DR_Загружен) 	 - Получение DR_Документов со статусом "Загружен", видом документа "ORDER_входящий" и не помеченных на удаление.
		//Запрос 2 				 	 - Получение данных из табличной части DR_Документов (полученных в DR_Загружен) и упорядочивание записей по "ДатаФайла", "ИдентификаторДокумента"
		//Запрос 3 (DR_НеОбработан)	 - Получение DR_Документов со статусом "НеОбработан", видом документа "ORDER_входящий" и не помеченных на удаление.
			
		//Результат  - Получение данных из табличной части DR_Документов (полученных в DR_НеОбработан).
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК DR_Документ,
		|	ПРЕДСТАВЛЕНИЕ(DR_Документ.Ссылка) КАК Представление,
		|	DR_Документ.Статус КАК СтатусДокумента,
		|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.ИдентификаторЦепочки В(&amp;ИдентификаторЦепочки)
		|	И DR_Документ.ИдентификаторДокумента В(&amp;ИдентификаторДокумента)
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК Ссылка,
		|	DR_Документ.ДанныеФайла КАК ДанныеФайла,
		|	DR_Документ.Статус КАК Статус,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ПОМЕСТИТЬ DR_Загружен
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.Статус = &amp;Загружен
		|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_Загружен.Ссылка КАК DR_Документ,
		|	ПРЕДСТАВЛЕНИЕ(DR_Загружен.Ссылка) КАК Представление,
		|	DR_Загружен.ДанныеФайла КАК ДанныеФайла,
		|	DR_Загружен.Статус КАК СтатусДокумента,
		|	DR_Загружен.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ВЫРАЗИТЬ(ТЧ_ДатаФайла.Значение КАК ДАТА) КАК ДатаФайла,
		|	ТЧ_ФайлЗагруженЛокально.Значение КАК ФайлЗагруженЛокально
		|ИЗ
		|	DR_Загружен КАК DR_Загружен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаФайла
		|		ПО DR_Загружен.Ссылка = ТЧ_ДатаФайла.Ссылка
		|			И (ТЧ_ДатаФайла.Реквизит = ""ДатаФайла"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ФайлЗагруженЛокально
		|		ПО DR_Загружен.Ссылка = ТЧ_ФайлЗагруженЛокально.Ссылка
		|			И (ТЧ_ФайлЗагруженЛокально.Реквизит = ""ФайлЗагруженЛокально"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаФайла,
		|	ИдентификаторДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК Ссылка,
		|	DR_Документ.Комментарий КАК Комментарий,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки
		|ПОМЕСТИТЬ DR_НеОбработан
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.Статус = &amp;НеОбработан
		|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_НеОбработан.Ссылка КАК DR_Документ,
		|	DR_НеОбработан.Комментарий КАК Комментарий,
		|	DR_НеОбработан.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
		|	DR_НеОбработан.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ТЧ_NUMBER.Значение КАК NUMBER,
		|	ТЧ_ДатаЭлектронногоДокумента.Значение КАК ДатаЭлектронногоДокумента,
		|	ТЧ_HEAD.ХранилищеЗначения КАК ХЗ_HEAD,
		|	ТЧ_POSITION.ХранилищеЗначения КАК ХЗ_POSITION,
		|	ТЧ_Организация.Значение КАК Организация,
		|	ТЧ_Контрагент.Значение КАК Контрагент,
		|	ТЧ_ТочкаДоставки.Значение КАК ТочкаДоставки,
		|	ТЧ_ЗаполнитьУчастниковЭДО.Значение КАК ЗаполнитьУчастниковЭДО,
		|	ТЧ_ДатаПоставки.Значение КАК ДатаПоставки,
		|	ТЧ_ДатаЗаказа.Значение КАК ДатаЗаказа
		|ИЗ
		|	DR_НеОбработан КАК DR_НеОбработан
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_NUMBER
		|		ПО DR_НеОбработан.Ссылка = ТЧ_NUMBER.Ссылка
		|			И (ТЧ_NUMBER.Реквизит = ""NUMBER"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_HEAD
		|		ПО DR_НеОбработан.Ссылка = ТЧ_HEAD.Ссылка
		|			И (ТЧ_HEAD.Реквизит = ""HEAD"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_POSITION
    	|		ПО DR_НеОбработан.Ссылка = ТЧ_POSITION.Ссылка
    	|			И (ТЧ_POSITION.Реквизит = ""POSITION"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Организация
		|		ПО DR_НеОбработан.Ссылка = ТЧ_Организация.Ссылка
		|			И (ТЧ_Организация.Реквизит = ""Организация"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Контрагент
		|		ПО DR_НеОбработан.Ссылка = ТЧ_Контрагент.Ссылка
		|			И (ТЧ_Контрагент.Реквизит = ""Контрагент"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ТочкаДоставки
		|		ПО DR_НеОбработан.Ссылка = ТЧ_ТочкаДоставки.Ссылка
		|			И (ТЧ_ТочкаДоставки.Реквизит = ""ТочкаДоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ЗаполнитьУчастниковЭДО
		|		ПО DR_НеОбработан.Ссылка = ТЧ_ЗаполнитьУчастниковЭДО.Ссылка
		|			И (ТЧ_ЗаполнитьУчастниковЭДО.Реквизит = ""ЗаполнитьУчастниковЭДО"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаЭлектронногоДокумента
		|		ПО DR_НеОбработан.Ссылка = ТЧ_ДатаЭлектронногоДокумента.Ссылка
		|			И (ТЧ_ДатаЭлектронногоДокумента.Реквизит = ""ДатаЭлектронногоДокумента"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаПоставки
		|		ПО DR_НеОбработан.Ссылка = ТЧ_ДатаПоставки.Ссылка
		|			И (ТЧ_ДатаПоставки.Реквизит = ""ДатаПоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаЗаказа
		|		ПО DR_НеОбработан.Ссылка = ТЧ_ДатаЗаказа.Ссылка
		|			И (ТЧ_ДатаЗаказа.Реквизит = ""ДатаЗаказа"")";
		
		//&lt;Полученный список ID раскладываем по массивам для передачи их ввиде параметров в запрос&gt;
		DocUUID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("docUUID");
		ChainID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("chainID");
		
		Запрос.УстановитьПараметр("ВидДокумента"			, ТипДокумента + "_входящий");
		Запрос.УстановитьПараметр("Загружен"				, "Загружен");
		Запрос.УстановитьПараметр("НеОбработан"				, "НеОбработан");
		Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, ChainID_API);
		Запрос.УстановитьПараметр("ИдентификаторДокумента"	, DocUUID_API);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		//&lt;Таблица используется для поиска Дублей и созданного Заказа Поставщику&gt;
		ТаблицаDR_ДокументовПоID  = МассивРезультатов[0].Выгрузить();
		ТаблицаDR_ДокументовПоID.Индексы.Добавить("ИдентификаторЦепочки, ИдентификаторДокумента");
		
		//&lt;Таблица DR_Документов со статусом "Загружен"&gt;
		ТаблицаЗагруженных	= МассивРезультатов[2].Выгрузить();
		
		//&lt;Инициализация массива примитивных типов&gt;
		ПримитивныеТипы = Новый Массив;
		ПримитивныеТипы.Добавить(Тип("Строка"));
		ПримитивныеТипы.Добавить(Тип("Число"));		
		
		//&lt;Инициализация квалификаторов&gt;
		КвалификаторСтрока	= Новый КвалификаторыСтроки(200);
		КвалификаторЧисло 	= Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		
		//&lt;Определение типа Ед. измерения&gt;
    	МассивТиповЕдИзм = Новый Массив;
    	ИмяОбъектов 	 = Новый Массив;
    	ИмяОбъектов.Добавить("УпаковкиЕдиницыИзмерения");
    	ИмяОбъектов.Добавить("КлассификаторЕдиницИзмерения");
    	ИмяОбъектов.Добавить("ЕдиницыИзмерения");
    	
    	Для каждого ИмяСпр Из ИмяОбъектов Цикл
    		Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
    			МассивТиповЕдИзм.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
    		КонецЕсли;
		КонецЦикла;
		
		//&lt;Определение типа УчастникиЭДО&gt;
    	МассивТиповУчЭДО = Новый Массив;
    	ИмяОбъектов 	 = Новый Массив;
    	ИмяОбъектов.Добавить("Организации");
    	ИмяОбъектов.Добавить("Контрагенты");
    	ИмяОбъектов.Добавить("Партнеры");
    	ИмяОбъектов.Добавить("ДоговорыКонтрагентов");
    	
    	Для каждого ИмяСпр Из ИмяОбъектов Цикл
    		Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
    			МассивТиповУчЭДО.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
    		КонецЕсли;
		КонецЦикла;
		
		//&lt;Инициализация описателей типов&gt;
    	ОписаниеПримитивныхТипов 	= Новый ОписаниеТипов(ПримитивныеТипы,,,КвалификаторЧисло,КвалификаторСтрока);
    	ОписаниеТиповDR_Документ 	= Новый ОписаниеТипов("ДокументСсылка.DR_Документ");
    	ОписаниеТиповЧисло			= Новый ОписаниеТипов("Число",,,,КвалификаторЧисло);
    	ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока);
    	ОписаниеТиповНоменклатура 	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
    	ОписаниеТиповХарактеристи 	= Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
    	ОписаниеТиповЕдИзм 			= Новый ОписаниеТипов(МассивТиповЕдИзм);
    	ОписаниеТиповУчЭДо 			= Новый ОписаниеТипов(МассивТиповУчЭДО);
		
		//&lt;Элементы по спецификации множественные, т.е. могут в DESADV переданы несколько раз. 
    	//В созданной структуре будут иметь тип - Массив, элементы массива тип - Структура&gt;
		СтруктураЭлементов = Новый Структура;
    	СтруктураЭлементов.Вставить("POSITION");
		СтруктураЭлементов.Вставить("EGAIS");
		СтруктураЭлементов.Вставить("TRANSPORTUNIT");
		СтруктураЭлементов.Вставить("BOTTLING");
		СтруктураЭлементов.Вставить("VETDOCUMENT");
		СтруктураЭлементов.Вставить("PACKING");
		СтруктураЭлементов.Вставить("MARKCODE");
		
		//&lt;В таблицу добавляются данные по распарсенным XML&gt;
		ТаблицаНовДокументов = Новый ТаблицаЗначений;
		ТаблицаНовДокументов.Колонки.Добавить("ChainID");         //Тип - Строка
		ТаблицаНовДокументов.Колонки.Добавить("DocUUID");         //Тип - Строка
		ТаблицаНовДокументов.Колонки.Добавить("ДатаФайла");       //Тип - Дата
		ТаблицаНовДокументов.Колонки.Добавить("ДанныеДокумента"); //Тип - Структура
		
		//&lt;Создание индекса для поиска по таблице&gt;
		ТаблицаНовДокументов.Индексы.Добавить("DocUUID");
		
		//&lt;В таблицу добавляются идентификационные данные для поиска Участников ЭДО и Номенклатуры&gt;
    	ТЗ_ДанныеИдентификация = Новый ТаблицаЗначений;
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("DR_Документ"	 , ОписаниеТиповDR_Документ);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("SUPPLIER"		 , ОписаниеТиповСтрока);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("RECIPIENT"	 	 , ОписаниеТиповСтрока);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("DELIVERYPLACE"  , ОписаниеТиповСтрока);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("Организация" 	 , ОписаниеТиповУчЭДо);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("Контрагент"  	 , ОписаниеТиповУчЭДо);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("ТочкаДоставки"  , ОписаниеТиповУчЭДо);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("POSITIONNUMBER" , ОписаниеТиповЧисло);
    	ТЗ_ДанныеИдентификация.Колонки.Добавить("PRODUCT"		 , ОписаниеТиповСтрока);
		
		//&lt;Получение значения доп. константы&gt;
		СрокПовторнойОбработки     = Настройка_Параметр_Прочитать("СрокПовторнойОбработкиДокументовDESADV", 7);
		ПерезаписыватьПоступление  = Настройка_Параметр_Прочитать("ПерезаписыватьПоступлениеПриЗагрузкеDESADV", Ложь);
		АвтоПоступление    	  	   = Настройка_Параметр_Прочитать("АвтоматическоеСозданиеПоступленияПриЗагрузкеDESADV", Ложь);
		
		//Для автоматического создания или перезаписи Поступления 1С
		ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
		ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ"				, Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
		ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки"	, Новый ОписаниеТипов("Строка"));
		ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор"		, Новый ОписаниеТипов("Строка"));
		
		#Область ПолучениеДанныхПоНовымДокументам
		
		Для каждого СтрокаТаблицы ИЗ ТаблицаЗагруженных Цикл
			
			//&lt;Тип - Структура&gt;
			ДанныеДокумента = Новый Структура;	
			ДанныеФайла 	= Новый Структура;
			ПараметрыОтбора = Новый Структура;
			
			//&lt;Получение данных XML&gt;
			Попытка
				
				ДвоичныеДанныеФайла = СтрокаТаблицы.ДанныеФайла.Получить();	
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
				
				Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда					
					ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);					
				Иначе					
					ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: отсутствуют Двоичные данные XML";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецЕсли;
				
			Исключение				
				ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан." + "Описание ошибки: " + ОписаниеОшибки();
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Продолжить;	
			КонецПопытки;
			
			ТекущийФайл = Новый Файл(ИмяВременногоФайла);
			
			КодировкаXML = "UTF-8";
			ЧтениеXMLДляТекущегоФайла = ПолучитьЧтениеXMLДляФайла(ТекущийФайл.Имя, ТекущийФайл, КодировкаXML, МассивЛогаСобытий); 							
			Если ЧтениеXMLДляТекущегоФайла = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектXDTO = Неопределено;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLДляТекущегоФайла);
			
			//&lt;Преобразование данных из XDTO в Структуру - "ДанныеФайла"&gt;
			Если ОбъектXDTO &lt;&gt; Неопределено Тогда
				РекурсивноПостроитьСтруктуруEDI(ОбъектXDTO, СтруктураЭлементов, ДанныеФайла);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЧтениеXMLДляТекущегоФайла.Закрыть();
			
			//&lt;Удаление временного файла&gt;
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
			КонецПопытки;
			
			//&lt;Поиск ID цепочки по ID эл.документа&gt;
			НайденнаяСтрока = ТаблицаДокументовAPI.Найти(СтрокаТаблицы.ИдентификаторДокумента, "docUUID");
			
			//&lt;Найденный ID цепочки присваиваем эл. документу&gt;
			Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
				
				ДатаAPI = СтрЗаменить(НайденнаяСтрока.date, "-", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, ":", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, " ", "");
				
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", НайденнаяСтрока.chainID);
				ДанныеДокумента.Вставить("ДатаСообщения", Дата(ДатаAPI));
				
			ИначеЕсли СтрокаТаблицы.ФайлЗагруженЛокально = Истина Тогда
				
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", "TMP_" + СтрокаТаблицы.ИдентификаторДокумента);
				ДанныеДокумента.Вставить("ДатаСообщения", ТекущаяДата());
				
			Иначе
				Комментарий = "По DESADV (Уведомление об отгрузке) № " + ДанныеФайла.NUMBER + " не найден идентификатор цепочки в списке полученных идентификаторов с сервера.";
				
				DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
				DR_ДокументОбъект.Комментарий = Комментарий;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Комментарий;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;				
			КонецЕсли;
			
			//&lt;Параметры отбора для поиска дублей&gt;
			ПараметрыОтбора.Вставить("ИдентификаторЦепочки", ДанныеДокумента.ИдентификаторЦепочки);
			ПараметрыОтбора.Вставить("ИдентификаторДокумента", СтрокаТаблицы.ИдентификаторДокумента);
			
			//&lt;Поиск дублей. РезультатПоиска - тип Массив&gt;
			РезультатПоиска = ТаблицаDR_ДокументовПоID.НайтиСтроки(ПараметрыОтбора);
			
			//&lt;Проверка на дубли по DR_Документам со статусом "Обработан" или "Не обработан" найденных по установленному отбору&gt;
			Если НЕ РезультатПоиска.Количество() = 0 Тогда
				
				ЭлементМассива = РезультатПоиска[0];
				
				Если ВРег(ЭлементМассива.СтатусДокумента) = "НЕОБРАБОТАН" 
					ИЛИ ВРег(ЭлементМассива.СтатусДокумента) = "ОБРАБОТАН" Тогда 
					
					//&lt;Для Нового DR_Документа устанавливаем статус "Обработан"&gt;
					DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
					DR_ДокументОбъект.Статус = "Архивный";
					DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
					DR_ДокументОбъект.Комментарий = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление;
					
					ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
					
					НовСтр = ТабличнаяЧасть.Добавить();
					НовСтр.Реквизит = "НеОбрабатывать";
					НовСтр.Значение = Истина;
					DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Причина = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление; 
					ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Причина;
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
					Продолжить;					
				КонецЕсли;
				
			КонецЕсли;
			
			//&lt;Проверка на дубли по DR_Документам со статусом "Загружен"&gt; 
			НайденнаяСтрока = ТаблицаНовДокументов.Найти(СтрокаТаблицы.ИдентификаторДокумента, "DocUUID");
			
			Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
				
				//&lt;Изменям статус DR_Документа определенного как дубль&gt;
				DR_ДокументСсылка = НайденнаяСтрока.ДанныеДокумента.DR_Документ; 
				DR_ДокументОбъект = DR_ДокументСсылка.ПолучитьОбъект();
				DR_ДокументОбъект.Статус = "Архивный";
				DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
				DR_ДокументОбъект.Комментарий = "Документ определен как дубль";
				
				ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				НовСтр = ТабличнаяЧасть.Добавить();
				НовСтр.Реквизит = "НеОбрабатывать";
				НовСтр.Значение = Истина;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстЛогаСобытий =  "В процессе обработки " + СтрокаТаблицы.Представление + ". " + Строка(DR_ДокументСсылка) + " определен как дубль и обработан не будет.";
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				//&lt;Удаляем найденную запись из таблицы&gt;
				ТаблицаНовДокументов.Удалить(НайденнаяСтрока);
				
			КонецЕсли;
			
			ДанныеДокумента.Вставить("ИдентификаторДокумента"	, СтрокаТаблицы.ИдентификаторДокумента);
			ДанныеДокумента.Вставить("DR_Документ"				, СтрокаТаблицы.DR_Документ);
			ДанныеДокумента.Вставить("Статус"					, СтрокаТаблицы.СтатусДокумента);
			ДанныеДокумента.Вставить("ДанныеФайла"				, ДанныеФайла);
			ДанныеДокумента.Вставить("ДатаФайла"				, СтрокаТаблицы.ДатаФайла);
			
			//&lt;Классификатор валют&gt;
			КлассификаторВалюты = Новый Соответствие;
			КлассификаторВалюты.Вставить("RUB"	,643);
			КлассификаторВалюты.Вставить("KZT"	,398);
			КлассификаторВалюты.Вставить("UAH"	,980);
			КлассификаторВалюты.Вставить("USD"	,840);
			КлассификаторВалюты.Вставить("EUR"	,978);
			КлассификаторВалюты.Вставить("MDL"	,498);
			КлассификаторВалюты.Вставить("BYR"	,974);
			КлассификаторВалюты.Вставить("TMT"	,934);
			КлассификаторВалюты.Вставить("UZS"  ,860);
			КлассификаторВалюты.Вставить("kz"	,398);
			КлассификаторВалюты.Вставить("ru"	,643);
			
			//&lt;Получение валюты из классификатора валют по буквенному коду&gt;
    		Если ДанныеФайла.Свойство("CURRENCY") Тогда
    			
    			//&lt;ЦКВ - цифровой код валюты&gt;
    			ЦКВ = КлассификаторВалюты[ДанныеФайла.CURRENCY];
    			ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
				
			Иначе //&lt;иначе получаем по коду страны из профиля обмена&gt;
				
				ЗапросКодаСтраны = Новый Запрос;
				ЗапросКодаСтраны.Текст = 
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(DR_НастройкиДополнительныеРеквизиты.Значение КАК СТРОКА(3)) КАК Страна
				|ИЗ
				|	Справочник.DR_Настройки КАК DR_Настройки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_НастройкиДополнительныеРеквизиты
				|		ПО DR_Настройки.Ссылка = DR_НастройкиДополнительныеРеквизиты.Ссылка
				|			И (DR_Настройки.ВидНастройки = ""ПрофилиОбмена"")
				|ГДЕ
				|	DR_Настройки.ПометкаУдаления = ЛОЖЬ
				|	И DR_Настройки.Статус = ""Активный""
				|	И DR_НастройкиДополнительныеРеквизиты.Реквизит = ""Страна""";
				
				РезультатЗапроса = ЗапросКодаСтраны.Выполнить();
				ВыборкаЗапрос = РезультатЗапроса.Выбрать();
				
				ВыборкаЗапрос.Следующий();
				ЦКВ = КлассификаторВалюты.Получить(ВыборкаЗапрос.Страна);
				ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
				
			КонецЕсли;
			
			//&lt;Добавление валюты&gt;
			ДанныеФайла.Вставить("Валюта", ВалютаСсылка);
			
			//&lt;Создаем временную структуру "HEAD" и добавляем в табл. часть "Дополнительные реквизиты" 
			//DR_Документ, как отдельный реквизит. Для получения в запросах данных по всем GLN УчастниковЭДО&gt;
			HEAD = Новый Структура;
			
			HEAD.Вставить("SUPPLIER"		, ДанныеФайла.SUPPLIER);	  //Продавец			
			HEAD.Вставить("RECIPIENT"		, ДанныеФайла.RECIPIENT);     //Получатель
			HEAD.Вставить("DELIVERYPLACE"	, ДанныеФайла.DELIVERYPLACE); //Грузополучатель
			
			ДанныеФайла.Вставить("HEAD", HEAD);
			
			//&lt;Добавление реквизитов по Участникам ЭДО для последующего их заполнения&gt;
			ДанныеФайла.Вставить("Организация"		, ""); //RECIPIENT
			ДанныеФайла.Вставить("Контрагент"		, ""); //SUPPLIER
			ДанныеФайла.Вставить("ТочкаДоставки"	, ""); //DELIVERYPLACE
			
			//&lt;..Для проверки необходимости получения данных из базы по участникам ЭДО&gt;
			ДанныеФайла.Вставить("ЗаполнитьУчастниковЭДО", Истина);
			//&lt;..Для проверки необходимости обработки DR_Документа по кастомному условию&gt;
			ДанныеФайла.Вставить("НеОбрабатывать", Ложь);
			
			//&lt;Преобразование даты формата 2023-02-12 в формат 12.02.2022 00:00:00&gt;
			ЭлементыТипаДата = Новый Структура("DATE, ORDERDATE, DELIVERYDATE, DELIVERYNOTEDATE, WAYBILLDATE, UPDDATE, SHIPMENTDATE", 
			"ДатаЭлектронногоДокумента", "ДатаЗаказа", "ДатаПоставки", "ДатаНакладной", "ДатаТранспортнойНакладной", "ДатаУПД", "ДатаОтгрузки");
			
			Для каждого Элемент Из ЭлементыТипаДата Цикл 
				Если ДанныеФайла.Свойство(Элемент.Ключ) Тогда
					ДанныеФайла.Вставить(Элемент.Значение, Дата(СтрЗаменить(ДанныеФайла[Элемент.Ключ], "-", "")));	 	
				Иначе
					ДанныеФайла.Вставить(Элемент.Значение, Дата(0001,01,01));
				КонецЕсли;				
			КонецЦикла;
			
			Если ДанныеФайла.Свойство("DELIVERYTIME") Тогда
				DELIVERYTIME = СтрЗаменить(ДанныеФайла.DELIVERYTIME, ":", "");
				DELIVERYTIME = ?(СтрДлина(DELIVERYTIME) = 3, "0" + DELIVERYTIME, DELIVERYTIME);
				ДанныеФайла.Вставить("ВремяПоставки", ДАТА("00010101" + DELIVERYTIME));
			КонецЕсли;
			
			//&lt;Свойства структуры элемента POSITION. Значение свойства Истина - выполнить преобразование в Число, Ложь - нет&gt;
			Поля = Новый Структура;
			Поля.Вставить("Номенклатура"		, Ложь);
			Поля.Вставить("ЕдиницаИзмерения"	, Ложь);
			Поля.Вставить("PRODUCTIDBUYER"		, Ложь);
			Поля.Вставить("PRODUCTIDSUPPLIER"	, Ложь);
			Поля.Вставить("DELIVEREDUNIT"		, Ложь);
			Поля.Вставить("POSITIONNUMBER"		, Истина);
			Поля.Вставить("ORDEREDQUANTITY"		, Истина);
			Поля.Вставить("DELIVEREDQUANTITY"	, Истина);			
			Поля.Вставить("QUANTITYOFCUINTU"	, Истина);			
			Поля.Вставить("PRICE"				, Истина);
			Поля.Вставить("PRICEWITHVAT"		, Истина);
			Поля.Вставить("TAXRATE"				, Истина);
			Поля.Вставить("AMOUNTWITHVAT"		, Истина);
			Поля.Вставить("AMOUNT"				, Истина);
			Поля.Вставить("TAXAMOUNT"			, Истина);
			
			POSITION = ДанныеФайла.POSITION;
			
			//&lt;Обработка элемента POSITION&gt;
    		Для Каждого ЭлементСтруктура Из POSITION Цикл
    			
    			Для каждого Поле Из Поля Цикл
    				
    				Если ЭлементСтруктура.Свойство(Поле.Ключ) Тогда
    					
    					Если Поле.Значение Тогда
    						//&lt;Преобразование строковых значений в число&gt;	
    						Попытка
    							ЭлементСтруктура[Поле.Ключ] = Число(ЭлементСтруктура[Поле.Ключ]);
    						Исключение
    							ЭлементСтруктура[Поле.Ключ] = ЭКОМ_ПреобразоватьВЧисло(ЭлементСтруктура[Поле.Ключ]);
    						КонецПопытки;
    						
    					КонецЕсли;
    				Иначе
    					//&lt;Добавление свойств в массив структур элемента POSITION&gt;
    					ЭлементСтруктура.Вставить(Поле.Ключ, "");
    					
    					Если Поле.Значение Тогда
    						ЭлементСтруктура[Поле.Ключ] = 0;	
    					КонецЕсли;
    					
    				КонецЕсли;					
    			КонецЦикла;
    			
    			СтрокаИдентификация = ТЗ_ДанныеИдентификация.Добавить();
    			СтрокаИдентификация.DR_Документ = ДанныеДокумента.DR_Документ;
    			ЗаполнитьЗначенияСвойств(СтрокаИдентификация, HEAD);
    			ЗаполнитьЗначенияСвойств(СтрокаИдентификация, ЭлементСтруктура);
    			
    		КонецЦикла;
			
			//&lt;Преобразование строковых значений в число&gt;			
			СтруктураOfTotals = Новый Структура("TOTALVAT, TOTALWITHVAT, TOTALWITHOUTVAT", 0, 0, 0);
			
			Для каждого Элемент Из СтруктураOfTotals Цикл 
				Если ДанныеФайла.Свойство(Элемент.Ключ) Тогда
					ДанныеФайла[Элемент.Ключ] = ЭКОМ_ПреобразоватьВЧисло(ДанныеФайла[Элемент.Ключ]);	 	
				Иначе
					ДанныеФайла.Вставить(Элемент.Ключ, Элемент.Значение);
				КонецЕсли;				
			КонецЦикла;
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			//Для того, что бы не обрабатывать Новый DR_Документы необходимо, значение реквизита "НеОбрабатывать"	//
			//по условию установить в Истина. Условие может быть любым.												//
			//////////////////////////////////////////////////////////////////////////////////////////////////////////			
			
			//&lt;Пример&gt;			
			//МассивТочкеДоставок = новый Массив;
			//МассивТочкеДоставок.Добавить("9864398478404");
			//
			//Если НЕ МассивТочкеДоставок.Найти(ДанныеФайла.DELIVERYPLACE) = Неопределено Тогда
			//	ДанныеФайла.Вставить("НеОбрабатывать", Истина);
			//КонецЕсли;
			
			Если ДанныеФайла.НеОбрабатывать Тогда
				
				//&lt;Для Нового DR_Документа устанавливаем статус "Обработан"&gt;
				DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
				DR_ДокументОбъект.Статус = "Архивный";
				DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
				DR_ДокументОбъект.Комментарий = "Документ не был обработан по условию описанному в шаблоне ""DESADV входящий""";
				
				ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				НовСтр = ТабличнаяЧасть.Добавить();
				НовСтр.Реквизит = "НеОбрабатывать";
				НовСтр.Значение = Истина;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Продолжить;
			КонецЕсли;
			
			НовЭлКоллекции 				   = ТаблицаНовДокументов.Добавить();	
			НовЭлКоллекции.ChainID		   = ДанныеДокумента.ИдентификаторЦепочки;		
			НовЭлКоллекции.DocUUID         = ДанныеДокумента.ИдентификаторДокумента;
			НовЭлКоллекции.ДатаФайла       = ДанныеДокумента.ДатаФайла;
			НовЭлКоллекции.ДанныеДокумента = ДанныеДокумента;
			
		КонецЦикла;
		
		//&lt;Очищаем коллекцию&gt;
		ТаблицаЗагруженных = Неопределено;
		
		#КонецОбласти
		
		#Область ПолучениеДанныхПоНеОбработаннымДокументам
    	
    	Индекс = МассивРезультатов.ВГраница();
    	ТаблицаНеОбработанные = МассивРезультатов[Индекс].Выгрузить();
		
		//&lt;Получение данных для поиска сопоставленных УчастниковЭДО и Номенклатуры&gt;
    	Если ТаблицаНеОбработанные.Количество() Тогда 
    		
    		ТаблицаНеОбработанные.Колонки.Добавить("HEAD");
    		ТаблицаНеОбработанные.Колонки.Добавить("POSITION");	
			
			МассивУдаленияСтрок = Новый Массив;
    		
    		Для каждого СтрокаТаблицы Из ТаблицаНеОбработанные Цикл
    			
    			СтрокаНеОбработан = ТЗ_ДанныеИдентификация.Добавить();	
    			ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтрокаТаблицы);  
    			
    			//&lt;Получение идентификационных данных по УчастникамЭДО&gt;
    			СтрокаТаблицы.HEAD = СтрокаТаблицы.ХЗ_HEAD.Получить();
    			ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтрокаТаблицы.HEAD);
    			
    			ЗначениеИзХранилища = СтрокаТаблицы.ХЗ_POSITION.Получить();
    			
    			Если ЗначениеИзХранилища &lt;&gt; Неопределено Тогда
    				СтрокаТаблицы.POSITION = ЗначениеИзХранилища;	
    			Иначе //&lt;Удаление записи из таблицы по DR_Документу в котром отсутсвуют данные POSITION&gt; 
    				
    				ТЗ_ДанныеИдентификация.Удалить(СтрокаНеОбработан);
    				МассивУдаленияСтрок.Добавить(СтрокаТаблицы);
    				
    				ТекстЛогаСобытий = НСтр("ru = 'По %ПредставлениеДокументаXML% отсутсвуют данные реквизита POSITION. Документ обработан не будет!!!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
    				ПредставлениеДокументаXML = СтрокаТаблицы.Представление;
    				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
    			
    				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
    				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
    				
    				Продолжить;
    			КонецЕсли;
				
				//&lt;Получение идентификационных данных по Номенклатуре&gt;
    			Для Счетчик = 0 По ЗначениеИзХранилища.ВГраница() Цикл
    				
    				СтруктураPOSITION = ЗначениеИзХранилища[Счетчик];
    				
    				Если ЗначениеЗаполнено(СтруктураPOSITION.Номенклатура) Тогда
    					Продолжить;
    				Иначе
						
						//&lt;Если по DR_Документу в POSITION больше одной позиции,
						//тогда в таблицу "ТЗ_ДанныеИдентификация" добавляем новую строку для каждой последующей позиции текущего DR_Документа&gt;
    					Если Счетчик &lt;&gt; 0 Тогда
    						НоваяСтрокаНеОбработан = ТЗ_ДанныеИдентификация.Добавить();
    						ЗаполнитьЗначенияСвойств(НоваяСтрокаНеОбработан, СтрокаНеОбработан);
    						ЗаполнитьЗначенияСвойств(НоваяСтрокаНеОбработан, СтруктураPOSITION, "POSITIONNUMBER, PRODUCT");
    					Иначе //&lt;Иначе заполняем данные по позиции в первую добавленную строку таблицы "ТЗ_ДанныеИдентификация" текущего DR_Документа&gt;
    						ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтруктураPOSITION, "POSITIONNUMBER, PRODUCT");	
    					КонецЕсли;
    					
    				КонецЕсли;
    				
    			КонецЦикла;
    			
    		КонецЦикла;
    		
    		Для Каждого Стр Из МассивУдаленияСтрок Цикл
    			ТаблицаНеОбработанные.Удалить(Стр);
    		КонецЦикла;
    		
    		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_HEAD");
    		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_POSITION");		
    		
    	КонецЕсли;
    	
    	#КонецОбласти
		
#Область ЗапросДанныхСопоставления	
	
	//&lt;Получение данных по сопоставленным УчастникамЭДО и Номенклатуре&gt;
    ТекстЗапроса =	"ВЫБРАТЬ
    	|	Таблица.DR_Документ КАК DR_Документ,
    	|	Таблица.SUPPLIER КАК xmlКонтрагент,
    	|	Таблица.RECIPIENT КАК xmlОрганизация,
    	|	Таблица.DELIVERYPLACE КАК xmlТочкаДоставки,
    	|	Таблица.Контрагент КАК Контрагент,
    	|	Таблица.Организация КАК Организация,
    	|	Таблица.ТочкаДоставки КАК ТочкаДоставки,
    	|	Таблица.POSITIONNUMBER КАК POSITIONNUMBER,
    	|	Таблица.PRODUCT КАК PRODUCT
    	|ПОМЕСТИТЬ DR_Данные
    	|ИЗ
    	|	&amp;Таблица КАК Таблица
    	|;
    	|
    	|////////////////////////////////////////////////////////////////////////////////
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|	DR_ДАННЫЕ.DR_Документ КАК DR_Документ,
    	|	DR_ДАННЫЕ.xmlКонтрагент КАК xmlКонтрагент,
    	|	DR_ДАННЫЕ.xmlОрганизация КАК xmlОрганизация,
    	|	DR_ДАННЫЕ.xmlТочкаДоставки КАК xmlТочкаДоставки,
    	|	ЕСТЬNULL(DR_GLN_Организация.Объект, DR_ДАННЫЕ.Организация) КАК Организация,
    	|	ЕСТЬNULL(DR_GLN_Контрагент.Объект, DR_ДАННЫЕ.Контрагент) КАК Контрагент,
    	|	ЕСТЬNULL(DR_ТочкиДоставки.Объект, DR_ДАННЫЕ.ТочкаДоставки) КАК ТочкаДоставки,
    	|	ЕСТЬNULL(DR_GLN_Контрагент.РасчетСумм, ЛОЖЬ) КАК РасчетСумм
    	|ПОМЕСТИТЬ DR_УчастиникЭДО
    	|ИЗ
    	|	DR_Данные КАК DR_ДАННЫЕ
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Организация
    	|		ПО DR_ДАННЫЕ.xmlОрганизация = DR_GLN_Организация.GLN
    	|			И (НЕ DR_GLN_Организация.Объект ССЫЛКА Справочник.Контрагенты)
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Контрагент
    	|		ПО DR_ДАННЫЕ.xmlКонтрагент = DR_GLN_Контрагент.GLN
    	|			И (DR_GLN_Контрагент.Объект ССЫЛКА Справочник.Контрагенты)
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК DR_ТочкиДоставки
    	|		ПО DR_ДАННЫЕ.xmlТочкаДоставки = DR_ТочкиДоставки.GLN
    	|
    	|ИНДЕКСИРОВАТЬ ПО
    	|	DR_Документ
    	|;
    	|
    	|////////////////////////////////////////////////////////////////////////////////
    	|ВЫБРАТЬ
    	|	DR_ДАННЫЕ.DR_Документ КАК DR_Документ,
    	|	DR_ДАННЫЕ.xmlКонтрагент КАК xmlКонтрагент,
    	|	DR_ДАННЫЕ.xmlОрганизация КАК xmlОрганизация,
    	|	DR_ДАННЫЕ.xmlТочкаДоставки КАК xmlТочкаДоставки,
    	|	DR_УчастиникЭДО.Организация КАК Организация,
    	|	DR_УчастиникЭДО.Контрагент КАК Контрагент,
    	|	DR_УчастиникЭДО.ТочкаДоставки КАК ТочкаДоставки,
    	|	DR_УчастиникЭДО.РасчетСумм КАК РасчетСумм,
    	|	DR_ДАННЫЕ.POSITIONNUMBER КАК POSITIONNUMBER,
    	|	DR_ДАННЫЕ.PRODUCT КАК PRODUCT,
    	|	ШтрихкодыНоменклатуры.*
    	|ИЗ
    	|	DR_Данные КАК DR_ДАННЫЕ
    	|		ЛЕВОЕ СОЕДИНЕНИЕ DR_УчастиникЭДО КАК DR_УчастиникЭДО
    	|		ПО DR_ДАННЫЕ.DR_Документ = DR_УчастиникЭДО.DR_Документ
    	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
    	|		ПО DR_ДАННЫЕ.PRODUCT = ШтрихкодыНоменклатуры.Штрихкод";
	
	//&lt;Определяем источник&gt;
	Если Метаданные.РегистрыСведений.Найти("ШтрихкодыНоменклатуры") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ШтрихкодыНоменклатуры", "РегистрСведений.Штрихкоды");
	КонецЕсли;
				
	Запрос = Новый Запрос;
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("Таблица", ТЗ_ДанныеИдентификация);
    РезультатЗапроса = Запрос.Выполнить();
    
    РезультатСопоставления = РезультатЗапроса.Выгрузить();
    РезультатСопоставления.Индексы.Добавить("DR_Документ");
	
	//&lt;Очищаем коллекции, данные которых не нужны&gt;
	ТЗ_ДанныеИдентификация = Неопределено;
	
    #КонецОбласти	
		
		#Область ОбработкаДанныхНовыхДокументов
		
		//&lt;Выполняем сортировку документов в порядке их появления на FTP, т.е. в рамках цепочки по дате файла&gt;
		ТаблицаНовДокументов.Сортировать("ChainID, ДатаФайла");
		
		//&lt;ТаблицаНовДокументов - Тип ТаблицаЗначений&gt;
		//&lt;Поля&gt;
		//    &lt;ChainID 	- Тип Строка (Идентификатор цепочки)&gt;
		//    &lt;DocUUID 	- Тип Строка (Идентификатор документа)&gt;
		//    &lt;ДатаФайла - Тип Дата&gt;
		//    &lt;ДанныеДокумента 	- Тип Структура&gt;:
		//      	&lt;Ключ&gt;:
		//			- ДанныеФайла - Тип Структура
		//			- ИдентификаторДокумента - Тип Строка
		//			- ИдентификаторЦепочки - Тип Строка
		//			- DR_Документ - Тип ДокументСсылка.DR_Документ
		//			- Статус - Тип Строка
		//			- ДатаФайла - Тип Дата
		
		Для каждого Элемент ИЗ ТаблицаНовДокументов Цикл
			
			//&lt;Тип - Структура&gt;
			ДанныеДокумента 			= Элемент.ДанныеДокумента;
			ДанныеФайла					= ДанныеДокумента.ДанныеФайла;  
			СтруктураРегистра_DRСобытия	= Новый Структура;
			
			DR_ДокументСсылка	= ДанныеДокумента.DR_Документ; 
			
			//&lt;Тип - Строка&gt;
			ИдентификаторДокумента	= ДанныеДокумента.ИдентификаторДокумента;
			ИдентификаторЦепочки	= ДанныеДокумента.ИдентификаторЦепочки;
			СтатусДокумента			= "НеОбработан";
			ТекстОшибки 			= "";
			Комментарий				= "";
			ЗаписьСообщение 		= "";
			
			СоответствиеУчастникиЭДО   = Новый Соответствие;
			
			//&lt;Поиск и удаление предыдущих экземпляров по текущему DESADV&gt;
			Если ТаблицаВыбранныхЗаписей.Количество() Тогда
				
				НайденнаяСтрока = ТаблицаВыбранныхЗаписей.Найти(ИдентификаторЦепочки, "ИдентификаторЦепочки");
				
				Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
					//&lt;Удаляем найденную запись из таблицы&gt;
					ТаблицаВыбранныхЗаписей.Удалить(НайденнаяСтрока);
				КонецЕсли;	
				
			КонецЕсли;
			
			МассивСопоставленныхДанных = РезультатСопоставления.НайтиСтроки(Новый Структура("DR_Документ", DR_ДокументСсылка));
    		УчастникиЭДО = МассивСопоставленныхДанных[0];
    		
    		СтруктураУчастникиЭДО = Новый Структура("Контрагент, Организация, ТочкаДоставки");
    		
    		//&lt;Заполнение УчастниковЭДО&gt;
    		Для каждого ЭлСтруктуры Из СтруктураУчастникиЭДО Цикл
    			
    			ИмяУчастника = ЭлСтруктуры.Ключ; 
    			
    			Если ЗначениеЗаполнено(УчастникиЭДО[ИмяУчастника]) Тогда
    				ДанныеФайла[ИмяУчастника] = УчастникиЭДО[ИмяУчастника];	
    			Иначе
    				
    				GLN = УчастникиЭДО["xml" + ИмяУчастника];
    				
    				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
    								+ "Не заполнен(а) " + ИмяУчастника + " (" + GLN + ")";
    				
    				СоотвествиеУчастник = Новый Соответствие;
    				СоотвествиеУчастник.Вставить(ИмяУчастника + "_" + GLN, GLN);					
    				СоответствиеУчастникиЭДО.Вставить(ИмяУчастника + "_", СоотвествиеУчастник);
    				
    			КонецЕсли;
    			
    		КонецЦикла;                                                     
			
			Если ПустаяСтрока(ТекстОшибки) Тогда 
				ДанныеФайла.ЗаполнитьУчастниковЭДО = Ложь;
			КонецЕсли;
			
			ТабНоменклатура = Новый ТаблицаЗначений;			
    		ТабНоменклатура.Колонки.Добавить("PRODUCT");
    		ТабНоменклатура.Колонки.Добавить("Номенклатура");
    		ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения");
    		
    		Для Каждого СтрокаТабЗнч Из МассивСопоставленныхДанных Цикл 
    			НоваяСтрока = ТабНоменклатура.Добавить();
    			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЗнч);
			КонецЦикла;
			
			//&lt;Определение имени колонки&gt;
			ИмяКолонкиНоменклатура 	= ?(ТабНоменклатура.Колонки.Найти("Номенклатура") &lt;&gt; Неопределено, "Номенклатура", "Владелец");
			ИмяКолонкиЕдИзм 		= ?(ТабНоменклатура.Колонки.Найти("Упаковка") &lt;&gt; Неопределено, "Упаковка", "ЕдиницаИзмерения");
			
			ИтогСуммаНДС = 0; 		//&lt;Общая сумма НДС&gt;
			ИтогСуммаСНДС = 0; 		//&lt;Общая сумма с НДС&gt;
			ИтогСуммаБезНДС	= 0; 	//&lt;Общая сумма без НДС&gt;
			
			//&lt;Заполнение номенклатуры&gt;						
    			Для каждого СтрСтруктура Из ДанныеФайла.POSITION Цикл
				
				НайденнаяСтрока = ТабНоменклатура.Найти(СтрСтруктура.PRODUCT, "PRODUCT");
			
					Если ЗначениеЗаполнено(НайденнаяСтрока[ИмяКолонкиНоменклатура]) Тогда
						
						Номенклатура     = НайденнаяСтрока[ИмяКолонкиНоменклатура];
						ЕдиницаИзмерения = НайденнаяСтрока[ИмяКолонкиЕдИзм];
						
						Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
							
							Если Номенклатура.Метаданные().Реквизиты.Найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
								ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
							Иначе 
								ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
							КонецЕсли;
							
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(СтрСтруктура.PRODUCTIDBUYER) Тогда  
						
						//&lt;Если элемент не найден метод вернет пустую ссылку&gt;
						Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(СтрСтруктура.PRODUCTIDBUYER));
						
						Если Номенклатура.Метаданные().Реквизиты.найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
						Иначе 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
						КонецЕсли;
						
					КонецЕсли;
				
				Если ЗначениеЗаполнено(Номенклатура) Тогда
					
					СтрСтруктура.Номенклатура = Номенклатура;
					СтрСтруктура.ЕдиницаИзмерения = ЕдиницаИзмерения;
					
				Иначе
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") 
								+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". По " + """" + СтрСтруктура.DESCRIPTION + """"
								+ " не заполнен товар, проверьте корректность штрихкода или код товара.";
				КонецЕсли;
				
				Если УчастникиЭДО.РасчетСумм Тогда
					
					ЦенаБезНДС		= СтрСтруктура.PRICE;
					ЦенаСНДС      	= СтрСтруктура.PRICEWITHVAT;
					ПоставляемоеКол	= СтрСтруктура.DELIVEREDQUANTITY;
					СтавкаНДС		= СтрСтруктура.TAXRATE;
					
					СуммаСНДС 		= СтрСтруктура.AMOUNTWITHVAT;
					СуммаНДС		= СтрСтруктура.TAXAMOUNT;
					СуммаБезНДС 	= СтрСтруктура.AMOUNT;
					
					Если ЦенаСНДС &lt;&gt; 0 Тогда
						СуммаСНДС = Окр(ЦенаСНДС * ПоставляемоеКол, 2);	
					КонецЕсли;
					
					Если ЦенаБезНДС &lt;&gt; 0 Тогда
						СуммаБезНДС = Окр(ЦенаБезНДС * ПоставляемоеКол, 2);
					КонецЕсли;
					
					Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
						СуммаНДС = Окр(СуммаСНДС - СуммаБезНДС, 2);
					КонецЕсли;
					
					СтрСтруктура.AMOUNTWITHVAT 	= СуммаСНДС;
					СтрСтруктура.TAXAMOUNT		= СуммаНДС;
					СтрСтруктура.AMOUNT 			= СуммаБезНДС;
					
					Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 И СуммаНДС &lt;&gt; 0 Тогда
						
						ИтогСуммаНДС    = ИтогСуммаНДС + СуммаНДС;
						ИтогСуммаБезНДС = ИтогСуммаБезНДС + СуммаБезНДС;
						ИтогСуммаСНДС 	= ИтогСуммаСНДС + СуммаСНДС;
						
					ИначеЕсли СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
						
						СуммаНДС = СуммаСНДС - СуммаБезНДС;
						
						ИтогСуммаНДС   = ИтогСуммаНДС + СуммаНДС;
						ИтогСуммаБезНДС = ИтогСуммаБезНДС + СуммаБезНДС;
						ИтогСуммаСНДС = ИтогСуммаСНДС + СуммаСНДС;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если УчастникиЭДО.РасчетСумм Тогда
				Если ИтогСуммаНДС &lt;&gt; 0 Тогда
					ДанныеФайла.TOTALVAT = ИтогСуммаНДС;	
				КонецЕсли;		
				
				Если ИтогСуммаБезНДС &lt;&gt; 0 Тогда 
					ДанныеФайла.TOTALWITHOUTVAT = ИтогСуммаБезНДС;	
				КонецЕсли;
				
				Если ИтогСуммаСНДС &lt;&gt; 0 Тогда
					ДанныеФайла.TOTALWITHVAT = ИтогСуммаСНДС;	
				КонецЕсли;
			КонецЕсли;
			
			//&lt;Изменение статуса DR_Документа&gt;
			Если ПустаяСтрока(ТекстОшибки) Тогда
				
				СтатусДокумента = "Обработан";
				
				Если (ПерезаписыватьПоступление ИЛИ АвтоПоступление) Тогда					
					НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
					НоваяСтрока.Документ = DR_ДокументСсылка;
					НоваяСтрока.ИдентификаторЦепочки = ИдентификаторЦепочки;
					НоваяСтрока.Идентификатор = ИдентификаторДокумента;					
				КонецЕсли;
				
			КонецЕсли;
			
			//&lt;Добавление записей в РС ЭКОМ_ЗначениеДополнительныхКонстант по не сопоставленным данным&gt;
			Если СоответствиеУчастникиЭДО.Количество() Тогда				    
				Для Каждого Участник Из СоответствиеУчастникиЭДО Цикл
					НастройкиПараметровЗаписатьНабором(Участник.Значение, Участник.Ключ);
				КонецЦикла;			
			КонецЕсли;
			
			//&lt;Заполнение реквизитов и табл. части DR_Документа данными&gt;
			DR_ДокументОбъект 						= DR_ДокументСсылка.ПолучитьОбъект();
			DR_ДокументОбъект.ИдентификаторЦепочки	= ИдентификаторЦепочки;
			DR_ДокументОбъект.ДанныеФайла 			= Новый ХранилищеЗначения(Неопределено);
			DR_ДокументОбъект.Статус 				= СтатусДокумента;
			DR_ДокументОбъект.Сообщение 			= ТекстОшибки;
			DR_ДокументОбъект.Комментарий			= Комментарий;
			DR_ДокументОбъект.Пользователь 			= НайтиТекущегоПользователя();
			
			ТЧ_Документа = DR_ДокументОбъект.ДополнительныеРеквизиты;
			
			Для каждого ЭлСтруктуры Из ДанныеФайла Цикл
				
				Если ЭлСтруктуры.Ключ = "Комментарий" Тогда
					Продолжить;
				КонецЕсли;
				
    			НоваяСтрока = ТЧ_Документа.Добавить();
    			НоваяСтрока.Реквизит = ЭлСтруктуры.Ключ;
    			
    			Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Массив") ИЛИ ТипЗнч(ЭлСтруктуры.Значение) = Тип("Структура") Тогда					
    				Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
    				НоваяСтрока.ХранилищеЗначения = Хранилище;
    			Иначе
    				НоваяСтрока.Значение = ЭлСтруктуры.Значение;				
    			КонецЕсли;
    			
    		КонецЦикла;
			
			//&lt;Определение текста сообщения DR_События по DR_Документу&gt;
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				ЗаписьСообщение = "В документе есть ошибка";
			КонецЕсли;
			
			Если Не ПустаяСтрока(Комментарий) Тогда
				Если ПустаяСтрока(ЗаписьСообщение) Тогда
					ЗаписьСообщение = "Документ содержит комментарий";
				Иначе
					ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
				КонецЕсли;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка				
				
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				////////////////////////////&lt;Создание записи в РС DR_События&gt;/////////////////////////////////////
				
				//&lt;Заполнение структуры для DR_События&gt;
				СтруктураРегистра_DRСобытия.Вставить("ДатаСообщения"			, ДанныеДокумента.ДатаСообщения);
				СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, ИдентификаторЦепочки);
				СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
				СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
				СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "DESADV_Входящий");
				СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, ИдентификаторДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение				
				ОтменитьТранзакцию();
				
				ТекстЛогаСобытий = НСтр("ru = 'Формирование записей в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ПредставлениеДокументаXML = "DESADV (Уведомление об отгрузке)" + " № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D");
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
				ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
				
			КонецПопытки; 
			
		КонецЦикла;
		
		//&lt;Очищаем коллекцию&gt;
		ТаблицаНовДокументов = Неопределено;
		
		#КонецОбласти
		
		#Область ОбработкаДокументовСоСтатустомНеОбработан
		
		
		Для Каждого СтрокаТаблицы Из ТаблицаНеОбработанные Цикл 
				
				DRДокументМодифицирован   = Ложь;
				
				СтатусДокумента	= "НеОбработан";
				ТекстОшибки 	= "";			
				ЗаписьСообщение	= "";
				
				DR_ДокументСсылка = ВыборкаДетальныеЗаписи.DR_Документ;
				
				СтруктураРегистра_DRСобытия = Новый Структура;
				
				Комментарий	= СтрокаТаблицы.Комментарий;
				
				//&lt;Получение возраста DESADV в днях&gt;
				ТекДата = КонецДня(ТекущаяДата()) + 1;	//Текущая дата включительно.
				ВозрастВДнях = (ТекДата - СтрокаТаблицы.ДатаЭлектронногоДокумента) / 86400;
				
				//&lt;Если возраст DESADV больше срока обработки DR_Документов со статусом "НеОбработан"&gt;
				//&lt;Тогда таким документам изменяем статус и переходим к обработке следующего DR_Документа&gt;
				Если ВозрастВДнях &gt; СрокПовторнойОбработки Тогда
					
					DR_ДокументОбъект 			  = DR_ДокументСсылка.ПолучитьОбъект();
					DR_ДокументОбъект.Статус 	  = "Архивный";
					DR_ДокументОбъект.Комментарий = Комментарий + ?(ЗначениеЗаполнено(Комментарий), Символы.ПС, "")
													+ "Документу изменен статус на ""Архивный"" по причине: Срок повторной обработки документа истек.";
					
					НачатьТранзакцию();
					
					Попытка						
						
						DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						МЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьМенеджерЗаписи();
						МЗ_DRСобытия.ИдентификаторЦепочки 	= СтрокаТаблицы.ИдентификаторЦепочки;
						МЗ_DRСобытия.Документ 				= DR_ДокументСсылка;
						МЗ_DRСобытия.ВидДокумента 			= "DESADV_Входящий";
						МЗ_DRСобытия.Идентификатор 			= СтрокаТаблицы.ИдентификаторДокумента;
						МЗ_DRСобытия.Прочитать();
						
						Если МЗ_DRСобытия.Выбран() Тогда							
							МЗ_DRСобытия.ДатаЗаписи = ТекущаяДата();
							МЗ_DRСобытия.Статус = "Архивный";
							МЗ_DRСобытия.Записать();							
						КонецЕсли;
						
						ЗафиксироватьТранзакцию();
						
					Исключение						
						ОтменитьТранзакцию();
						
						ПредставлениеДокументаXML = "DESADV (Уведомление об отгрузке)" + " № " + СтрокаТаблицы.NUMBER + " от " + Формат(СтрокаТаблицы.ДатаЭлектронногоДокумента, "ДЛФ=D");
						ТекстЛогаСобытий = "Изменение статуса " + ПредставлениеДокументаXML + ", срок обработки которого истек, не выполнено. По причине - " + ОписаниеОшибки();
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);						
						ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки - " + ОписаниеОшибки());
						
					КонецПопытки;
					
					Продолжить;					
				КонецЕсли;
				
				//&lt;Поиск и удаление предыдущих экземпляров по текущему DESADV&gt;
				Если ТаблицаВыбранныхЗаписей.Количество() Тогда
					
					НайденнаяСтрока = ТаблицаВыбранныхЗаписей.Найти(СтрокаТаблицы.ИдентификаторЦепочки, "ИдентификаторЦепочки");
					
					Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
						//&lt;Удаляем найденную запись из таблицы&gt;
						ТаблицаВыбранныхЗаписей.Удалить(НайденнаяСтрока);
					КонецЕсли;	
					
				КонецЕсли;
				
				МассивСопоставленныхДанных = РезультатСопоставления.НайтиСтроки(Новый Структура("DR_Документ", DR_ДокументСсылка));
    			УчастникиЭДО = МассивСопоставленныхДанных[0];
    		
    			СтруктураУчастникиЭДО = Новый Структура("Контрагент, Организация, ТочкаДоставки");
    		
    			//&lt;Заполнение УчастниковЭДО&gt;
    			Для каждого ЭлСтруктуры Из СтруктураУчастникиЭДО Цикл
    				
    				ИмяУчастника = ЭлСтруктуры.Ключ; 
    				
    				Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяУчастника]) Тогда
    					Продолжить;
    				КонецЕсли;
    				
    				Если ЗначениеЗаполнено(УчастникиЭДО[ИмяУчастника]) Тогда
    					СтрокаТаблицы[ИмяУчастника] = УчастникиЭДО[ИмяУчастника];
    					
    					МодификацияЦепочки	 	= Истина;
    					DRДокументМодифицирован = Истина;
    					
    				Иначе
    					
    					GLN = УчастникиЭДО["xml" + ИмяУчастника];
    					
    					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
    									+ "Не заполнен(а) " + ИмяУчастника + " (" + GLN + ")";
    					
    				КонецЕсли;
    				
    			КонецЦикла;
    			
    			Если ПустаяСтрока(ТекстОшибки) Тогда 
    				СтрокаТаблицы.ЗаполнитьУчастниковЭДО = Ложь;	
    			КонецЕсли;
				
				ТабНоменклатура = Новый ТаблицаЗначений;			
    			ТабНоменклатура.Колонки.Добавить("PRODUCT");
    			ТабНоменклатура.Колонки.Добавить("Номенклатура");
    			ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения");
    			
    			Для Каждого СтрокаТабЗнч Из МассивСопоставленныхДанных Цикл 
    				НоваяСтрока = ТабНоменклатура.Добавить();
    				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЗнч);
    			КонецЦикла;
				
				//&lt;Определение имени колонки&gt;
				ИмяКолонкиНоменклатура 	= ?(ТабНоменклатура.Колонки.Найти("Номенклатура") &lt;&gt; Неопределено, "Номенклатура", "Владелец");
				ИмяКолонкиЕдИзм 		= ?(ТабНоменклатура.Колонки.Найти("Упаковка") &lt;&gt; Неопределено, "Упаковка", "ЕдиницаИзмерения");
				
				Для каждого СтрСтруктура Из СтрокаТаблицы.POSITION Цикл
					
					НайденнаяСтрока = ТабНоменклатура.Найти(СтрСтруктура.PRODUCT, "PRODUCT");
					
					Если ЗначениеЗаполнено(СтрСтруктура.Номенклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НайденнаяСтрока[ИмяКолонкиНоменклатура]) Тогда
						
						Номенклатура     = НайденнаяСтрока[ИмяКолонкиНоменклатура];
						ЕдиницаИзмерения = НайденнаяСтрока[ИмяКолонкиЕдИзм];
						
						Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
							Если Номенклатура.Метаданные().Реквизиты.Найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
								ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
							Иначе 
								ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
							КонецЕсли;
							
						КонецЕсли;
						
					ИначеЕсли ЗначениеЗаполнено(СтрСтруктура.PRODUCTIDBUYER) Тогда  
						//&lt;Если элемент не найден метод вернет пустую ссылку&gt;
						Номенклатура = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(СтрСтруктура.PRODUCTIDBUYER));
						
						Если Номенклатура.Метаданные().Реквизиты.Найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
						Иначе 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Номенклатура) Тогда						
						
						СтрСтруктура.Номенклатура 	  = Номенклатура;
						СтрСтруктура.ЕдиницаИзмерения = ЕдиницаИзмерения;						
						DRДокументМодифицирован 	  = Истина;
						
					Иначе
						ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") 
										+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". По " + """" + СтрСтруктура.DESCRIPTION + """"
										+ " не заполнен товар, проверьте корректность штрихкода или код товара";
					КонецЕсли; 
					
				КонецЦикла;
				
				//&lt;Проверка на запись повторно обрабатываемого DR_Документа&gt;
				Если НЕ DRДокументМодифицирован Тогда
					Продолжить; 	
				КонецЕсли;
				
				//&lt;Изменение статуса DR_Документа&gt;
				Если ПустаяСтрока(ТекстОшибки) Тогда
					
					СтатусДокумента = "Обработан";
					
					//&lt;Коллекция данных для создания или перезаписи Поступления 1С&gt;
					Если (ПерезаписыватьПоступление ИЛИ АвтоПоступление) Тогда						
						НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
						НоваяСтрока.Документ = DR_ДокументСсылка;
						НоваяСтрока.ИдентификаторЦепочки = СтрокаТаблицы.ИдентификаторЦепочки;
						НоваяСтрока.Идентификатор = СтрокаТаблицы.ИдентификаторДокумента;						
					КонецЕсли;
					
				КонецЕсли;
				
				//&lt;Обновление данных в DR_Документе&gt;
				DR_ДокументОбъект 				= DR_ДокументСсылка.ПолучитьОбъект();
				DR_ДокументОбъект.Статус 		= СтатусДокумента;
				DR_ДокументОбъект.Сообщение 	= ТекстОшибки;
				DR_ДокументОбъект.Комментарий   = Комментарий;
				
				ТЧ_Документа = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				Для каждого Колонка Из ТаблицаНеОбработанные.Колонки Цикл
    				
    				ЗнчЯчейки = СтрокаТаблицы[Колонка.Имя];
    				
    				НайденнаяСтрока	= ТЧ_Документа.Найти(Колонка.Имя, "Реквизит");
    				
    				Если ТипЗнч(ЗнчЯчейки) = Тип("Массив") ИЛИ ТипЗнч(ЗнчЯчейки) = Тип("Структура") Тогда				
    					Хранилище = Новый ХранилищеЗначения(ЗнчЯчейки);
    					НайденнаяСтрока.ХранилищеЗначения = Хранилище;
    				Иначе
    					
    					Если НайденнаяСтрока = Неопределено Тогда
    						Продолжить;
    					Иначе
    						НайденнаяСтрока.Значение = ЗнчЯчейки;
    					КонецЕсли;
    					
    				КонецЕсли;
    				
    			КонецЦикла;
				
				//&lt;Определение текста сообщения DR_События по DR_Документу&gt;
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ЗаписьСообщение = "В документе есть ошибка";
				КонецЕсли;
				
				Если Не ПустаяСтрока(Комментарий) Тогда
					Если ПустаяСтрока(ЗаписьСообщение) Тогда
						ЗаписьСообщение = "Документ содержит комментарий";
					Иначе
						ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
					КонецЕсли;
				КонецЕсли;
				
				НачатьТранзакцию();
				
				Попытка					
					
					DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					//&lt;Обновление данных DR_События&gt;
					Если ВРег(СтатусДокумента) = "ОБРАБОТАН" Тогда
						
						СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, СтрокаТаблицы.ИдентификаторЦепочки);
						СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
						СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
						СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "DESADV_Входящий");
						СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, СтрокаТаблицы.ИдентификаторДокумента);
						СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
						СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
						
						НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
						НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
						НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
						НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
						НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
						НЗ_DRСобытия.Прочитать();
						
						Если НЗ_DRСобытия.Количество() = 0 Тогда
							НоваяЗапись = НЗ_DRСобытия.Добавить();
						Иначе
							НоваяЗапись = НЗ_DRСобытия[0];
						КонецЕсли;
						
						Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
							НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
						КонецЦикла;
						
						НЗ_DRСобытия.Записать();
						
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение					
					ОтменитьТранзакцию();
					
					ТекстЛогаСобытий = НСтр("ru = 'Изменение данных в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ПредставлениеДокументаXML = "DESADV (Уведомление об отгрузке)" + " № " + СтрокаТаблицы.NUMBER + " от " + Формат(СтрокаТаблицы.ДатаЭлектронногоДокумента, "ДЛФ=D");
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
					ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
					ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
				
				КонецПопытки;
				
			КонецЦикла;
			
			//&lt;Очищаем коллекцию&gt;
		ТаблицаНеОбработанные = Неопределено;
		
		#КонецОбласти
		
		#Область АвтоматическоеСозданиеПерезаписьДокументаПоступления
		
		Если ТаблицаВыбранныхЗаписей.Количество() Тогда
			
			СтруктураФайлаДанных = Неопределено;
			
			//&lt;Поиск сценария Поступления&gt;
			СценарииСозданияДокументов = Настройка_Параметр_Прочитать("СтруктураФайлаXMLДокументы");
			СтрокиНастроекПоОтбору	  = СценарииСозданияДокументов.Строки.НайтиСтроки(Новый Структура("Использовать, Кнопка", Истина, "Создать поступление"));
			
			Если СтрокиНастроекПоОтбору.Количество() Тогда
				
				//&lt;Используется первый найденный сценарий с признаком "Использовать"&gt;
				СтруктураФайлаДанных = СтрокиНастроекПоОтбору[0];
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураФайлаДанных) Тогда
				
				ВыбранныеСтроки = Новый Массив;
			
				//&lt;Заполнения массива выбранных документов для создания/перезаписи поступления&gt;
				Для каждого Стр Из ТаблицаВыбранныхЗаписей Цикл
					Структура = Новый Структура("ИдентификаторЦепочки, Документ");
					ЗаполнитьЗначенияСвойств(Структура,Стр);
					ВыбранныеСтроки.Добавить(Структура);
				КонецЦикла;
				
				КэшированныеЗначенияПоступления = Неопределено;
				КоличествоСозданныхДокументов = 0;
				
				//&lt;Изменение имени переменной Приемник для исключения пересечений наименований текущего сценария и вложенного&gt;
				ГибкиеНастройки = СтрЗаменить(СтруктураФайлаДанных.Служебные, "КэшированныеЗначения", "КэшированныеЗначенияПоступления"); 
				
				//&lt;Переменная для вызываемого сценария, в котором выполняется проверка вызова из входящего DESADV&gt;
				ГибкиеНастройки = "ВызовВходящимDESADV = Истина;" + Символы.ПС + ГибкиеНастройки;
				
				//&lt;Выполнение сценарий Создать поступление&gt;
				Выполнить(ГибкиеНастройки); 
				
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецОбласти	
		
	Иначе
		ТекстЛогаСобытий = "Ошибка получения Идентификаторов. Проверьте доступность сети и корректность заполнения профилей обмена.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		
	КонецЕсли;


	</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Входящий DESADV</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<presentation>СписокDesadvВходящиеПокупатель</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Входящий DESADV</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>