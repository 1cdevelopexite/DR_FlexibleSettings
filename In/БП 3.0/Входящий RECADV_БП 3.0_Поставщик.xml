<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий RECADV</Value>
		<Value xsi:type="xs:string">Входящий RECADV</Value>
		<Value xsi:type="xs:string">ВходящийRECADV</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">ТипДокумента = "RECADV";	
ТипДокументооборота      = "EDI";
ИдентификаторыУчастников = Новый Массив;
ЕстьОшибкаПолученияИдентификаторов = Ложь;

#Область ПолучениеИдентификаторовЦепочекПоВсемПрофилям	

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	DR_GLN.ПрофильОбмена КАК ПрофильОбмена,
|	DR_GLN.Объект КАК Организация,
|	DR_GLN.GLN КАК GLN,
|	DR_GLN.Ид_ОЭД КАК ИдУчастника
|ИЗ
|	РегистрСведений.DR_GLN КАК DR_GLN
|ГДЕ
|	НЕ DR_GLN.ПрофильОбмена = НЕОПРЕДЕЛЕНО
|	И НЕ DR_GLN.ПрофильОбмена.ПометкаУдаления
|ИТОГИ ПО
|	ПрофильОбмена";

РезультатЗапроса = Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	
	ТаблицаДокументовAPI = Новый ТаблицаЗначений;
	ТаблицаДокументовAPI.Колонки.Добавить("chainID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("ftpFileName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаДокументовAPI.Колонки.Добавить("docUUID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("date"       , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Индексы.Добавить("docUUID");
	
	ВыборкаПрофильОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПрофильОбмена.Следующий() Цикл
		
		ПрофильОбмена = ВыборкаПрофильОбмена.ПрофильОбмена;
		
		#Область ПолучениеСпискаИдентификаторовПоПрофилюОбмена
		
		ВыборкаДетальныеЗаписи = ВыборкаПрофильОбмена.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИдентификаторыУчастников.Добавить(ВыборкаДетальныеЗаписи.GLN);	 
		КонецЦикла; 
		
		#КонецОбласти
		
		#Область ПодготовкаВспомогательныхДанныхДляRestApi
		
		ИмяСобытия = "Заполнение идентификаторов цепочки для входящих файлов " + ТипДокумента + ".";  		
		ЛимитСообщений = DR_EDI_ОбщегоНазначения.Настройка_Параметр_Прочитать("EDI_ЛимитСообщенийRESTv2", "1000");
		ДанныеДляREST = Новый Структура("ЕстьОшибка, ВидДокумента, ДанныеПодключения, doc_type", Ложь, Неопределено, Неопределено, Неопределено); 
		
		ДанныеДляREST.ВидДокумента 	= "RECADV_Входящий";
		ДанныеДляREST.doc_type 		= "recadv";
		
		ДанныеАвторизации = DR_EDI_ВзаимодействиеREST_API.ВыполнитьАвторизациюАтолл(ПрофильОбмена);
		
		Если Не ДанныеАвторизации.Получены Тогда
			ТекстЛогаСобытий = "Не удалось выполнить авторизацию. ";
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			ДанныеДляREST.ЕстьОшибка = Истина;
		КонецЕсли;	
		
		ДанныеПодключения = DR_EDI_ВзаимодействиеREST_API.ПолучитьДанныеПодключенияEvolution(ПрофильОбмена);
		
		Если Не ДанныеПодключения.ПолученПрофиль ИЛИ Не ДанныеПодключения.ПолученТокен Тогда
			ТекстЛогаСобытий = "Не удалось получить данные для подключения к REST API. ";
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			ДанныеДляREST.ЕстьОшибка = Истина;
		КонецЕсли;
		
		ДанныеДляREST.ДанныеПодключения = ДанныеПодключения;	
		
		#КонецОбласти
		
		#Область ПолучитьИдентификаторыЦепочекВходящихФайлов
		
		Если Не ДанныеДляREST.ЕстьОшибка Тогда	
			НачалоПериода = Дата(1,1,1);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	МАКСИМУМ(DR_События.ДатаСообщения) КАК ДатаПоследнегоСообщения
			|ИЗ
			|	РегистрСведений.DR_События КАК DR_События
			|ГДЕ
			|	DR_События.ВидДокумента = &amp;ВидДокумента
			|	И DR_События.АктуализироватьИдентификатор = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ВидДокумента", ДанныеДляREST.ВидДокумента);
			ВыборкаДата = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаДата.Следующий() Тогда
				НачалоПериода = ВыборкаДата.ДатаПоследнегоСообщения;
			КонецЕсли;   
			
			МинимальнаяДата =  НачалоПериода;
			Сутки         = 60*60*24;
			ТекущаяДата   = ТекущаяДата(); 
			
			Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
				МинимальнаяДата = МинимальнаяДата - Сутки;
			Иначе
				МинимальнаяДата = ТекущаяДата - Сутки * 30;					
			КонецЕсли;         
			
			МаксимальнаяДата =  ТекущаяДата + Сутки; 
			
			НачалоПериода = Формат(МинимальнаяДата , "ДФ=yyyy-MM-dd");
			КонецПериода  = Формат(МаксимальнаяДата, "ДФ=yyyy-MM-dd");  	
			
			ВсеСообщенияAPI  = Новый Массив;
			
			Для Каждого ИдУчастника Из ИдентификаторыУчастников Цикл
				ПараметрыМетода = Новый Структура("gln, doc_type, time_from, time_to, limit, direction", ИдУчастника, ДанныеДляREST.doc_type, НачалоПериода, КонецПериода, ЛимитСообщений, "0");
				МассивСообщенийAPI = DR_EDI_ВзаимодействиеREST_API.ПолучитьСписокВходящихДокументовEDI(ПараметрыМетода, ДанныеПодключения);
				
				Для Каждого Сообщение Из МассивСообщенийAPI Цикл
					ВсеСообщенияAPI.Добавить(Сообщение);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Соответствие Из ВсеСообщенияAPI Цикл
				НовСтр = ТаблицаДокументовAPI.Добавить();
				НовСтр.chainID     = Соответствие.Получить("chainID");
				НовСтр.ftpFileName = Соответствие.Получить("ftpFileName");
				НовСтр.docUUID     = Соответствие.Получить("docUUID");
				НовСтр.date        = Соответствие.Получить("date");
			КонецЦикла;
		Иначе
			ЕстьОшибкаПолученияИдентификаторов = Истина;
		КонецЕсли
		
		#КонецОбласти
		
	КонецЦикла;
	
КонецЕсли;

#КонецОбласти

Если Не ЕстьОшибкаПолученияИдентификаторов Тогда
	
	/////////////////////////////////////////////////////////////////////////////////
	//          					ВХОДЯЩИЙ RECADV                                //
	/////////////////////////////////////////////////////////////////////////////////
	
	//Описание пакетного запроса.
	//Запрос 0 				 	 - Получение записей из РС DR_События по ИдентификаторЦепочки входящего RECADV и виду документа "Накладная_Исходящая",
	//								для определения принадлежности RECADV к одной цепочки с ORDER.	
	//Запрос 1 (DR_Загружен) 	 - Получение DR_Документов со статусом "Загружен", видом документа "ORDER_входящий" и не помеченных на удаление.
	//Запрос 2 				 	 - Получение данных из табличной части DR_Документов (полученных в DR_Загружен) и упорядочивание записей по "ДатаФайла", "ИдентификаторДокумента"
	//Запрос 3 (DR_НеОбработан)	 - Получение DR_Документов со статусом "НеОбработан", видом документа "ORDER_входящий" и не помеченных на удаление.
	//Запрос 4 (DR_ВозрастДокумента) - Получение возраста в днях по DR_Документам (полученным в DR_НеОбработан).
	//Запрос 5 (DR_Данные) 			 - Получение данных из табличной части DR_Документов (полученных в DR_ВозрастДокумента). 
	//  								Отбор DR_Документов у которых срок повторной обработки не истек.
	//Запрос 6 (DR_ТоварСопоставлен) - Отбор DR_Документов (полученных в DR_Данные) у которых по товару выполнено сопоставление. 
	//Запрос 7 (DR_УчастникиЭДО) 	 - Отбор DR_Документов (полученных в DR_Данные) у которых значения реквизитов "ЗаполнитьУчастниковЭДО" и "ПервичныйПоискНоменклатуры" равно Истина.
	//Запрос 8 (DR_Обработать)		 - Объединение данных DR_УчастникиЭДО и DR_ТоварСопоставлен.
	//Запрос 9 (DR_ВАрхив)           - Отбор DR_Документов (полученных в DR_ВозрастДокумента) у которых срок повторной обработки истек. 
	//Запрос 10 (DR_Итог)          	 - Объединение данных DR_Обработать и DR_ВАрхив.
	
	//Результат  - Объединение данных DR_Итог, DR_Данные и получение данных из табличной части DR_Документов.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	DR_События.Документ КАК Накладная,
	|	DR_События.Идентификатор КАК ИдентификаторНакладной
	|ИЗ
	|	РегистрСведений.DR_События КАК DR_События
	|ГДЕ
	|	DR_События.ИдентификаторЦепочки В(&amp;ИдентификаторЦепочки)
	|	И DR_События.ВидДокумента = ""Накладная_Исходящая""
	|	И DR_Документ.Статус &lt;&gt; ""Архивный""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК Ссылка,
	|	DR_Документ.ДанныеФайла КАК ДанныеФайла,
	|	DR_Документ.Статус КАК Статус,
	|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ DR_Загружен
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.Статус = &amp;Загружен
	|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Загружен.Ссылка КАК DR_Документ,
	|	ПРЕДСТАВЛЕНИЕ(DR_Загружен.Ссылка) КАК Представление,
	|	DR_Загружен.ДанныеФайла КАК ДанныеФайла,
	|	DR_Загружен.Статус КАК СтатусДокумента,
	|	DR_Загружен.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ВЫРАЗИТЬ(ТЧ_ДатаФайла.Значение КАК ДАТА) КАК ДатаФайла,
	|	ТЧ_ФайлЗагруженЛокально.Значение КАК ФайлЗагруженЛокально
	|ИЗ
	|	DR_Загружен КАК DR_Загружен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаФайла
	|		ПО DR_Загружен.Ссылка = ТЧ_ДатаФайла.Ссылка
	|			И (ТЧ_ДатаФайла.Реквизит = ""ДатаФайла"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ФайлЗагруженЛокально
	|		ПО DR_Загружен.Ссылка = ТЧ_ФайлЗагруженЛокально.Ссылка
	|			И (ТЧ_ФайлЗагруженЛокально.Реквизит = ""ФайлЗагруженЛокально"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаФайла,
	|	ИдентификаторДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ DR_НеОбработан
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.Статус = &amp;НеОбработан
	|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_НеОбработан.Ссылка КАК Ссылка,
	|	РАЗНОСТЬДАТ(ВЫРАЗИТЬ(ТЧ_ДатаЭлектронногоДокумента.Значение КАК ДАТА), &amp;ТекущаяДата, ДЕНЬ) КАК ВозрастДокДней,
	|	ТЧ_ДатаЭлектронногоДокумента.Значение КАК ДатаЭлектронногоДокумента
	|ПОМЕСТИТЬ DR_ВозрастДокумента
	|ИЗ
	|	DR_НеОбработан КАК DR_НеОбработан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаЭлектронногоДокумента
	|		ПО DR_НеОбработан.Ссылка = ТЧ_ДатаЭлектронногоДокумента.Ссылка
	|			И (ТЧ_ДатаЭлектронногоДокумента.Реквизит = ""ДатаЭлектронногоДокумента"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_ВозрастДокумента.Ссылка КАК Ссылка,
	|	DR_ВозрастДокумента.ДатаЭлектронногоДокумента КАК ДатаЭлектронногоДокумента,
	|	ТЧ_Контрагент.Значение КАК Контрагент,
	|	ТЧ_ЗаполнитьУчастниковЭДО.Значение КАК ЗаполнитьУчастниковЭДО,
	|	ТЧ_ПервичныйПоискНоменклатуры.Значение КАК ПервичныйПоискНоменклатуры
	|ПОМЕСТИТЬ DR_Данные
	|ИЗ
	|	DR_ВозрастДокумента КАК DR_ВозрастДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Контрагент
	|		ПО DR_ВозрастДокумента.Ссылка = ТЧ_Контрагент.Ссылка
	|			И (ТЧ_Контрагент.Реквизит = ""Контрагент"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ЗаполнитьУчастниковЭДО
	|		ПО DR_ВозрастДокумента.Ссылка = ТЧ_ЗаполнитьУчастниковЭДО.Ссылка
	|			И (ТЧ_ЗаполнитьУчастниковЭДО.Реквизит = ""ЗаполнитьУчастниковЭДО"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ПервичныйПоискНоменклатуры
	|		ПО DR_ВозрастДокумента.Ссылка = ТЧ_ПервичныйПоискНоменклатуры.Ссылка
	|			И (ТЧ_ПервичныйПоискНоменклатуры.Реквизит = ""ПервичныйПоискНоменклатуры"")
	|ГДЕ
	|	DR_ВозрастДокумента.ВозрастДокДней &lt;= &amp;СрокОбработкиДокументаДней
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DR_Данные.Ссылка КАК Ссылка,
	|	ИСТИНА КАК Сопоставлен
	|ПОМЕСТИТЬ DR_ТоварСопоставлен
	|ИЗ
	|	DR_Данные КАК DR_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ШК_НеСопоставлен
	|		ПО DR_Данные.Ссылка = ТЧ_ШК_НеСопоставлен.Ссылка
	|			И (ТЧ_ШК_НеСопоставлен.Реквизит = ""ШК_НеСопоставлен"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК DR_НоменклатураКонтрагентов
	|		ПО DR_Данные.Контрагент = DR_НоменклатураКонтрагентов.Контрагент
	|			И (ТЧ_ШК_НеСопоставлен.Значение = DR_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Данные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ DR_УчастникиЭДО
	|ИЗ
	|	DR_Данные КАК DR_Данные
	|ГДЕ
	|	DR_Данные.ЗаполнитьУчастниковЭДО = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	DR_Данные.Ссылка
	|ИЗ
	|	DR_Данные КАК DR_Данные
	|ГДЕ
	|	DR_Данные.ПервичныйПоискНоменклатуры = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(DR_ТоварСопоставлен.Ссылка, DR_УчастникиЭДО.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(DR_ТоварСопоставлен.Сопоставлен, ЛОЖЬ) КАК ШК_Сопоставлен
	|ПОМЕСТИТЬ DR_Обработать
	|ИЗ
	|	DR_УчастникиЭДО КАК DR_УчастникиЭДО
	|		ПОЛНОЕ СОЕДИНЕНИЕ DR_ТоварСопоставлен КАК DR_ТоварСопоставлен
	|		ПО (DR_ТоварСопоставлен.Ссылка = DR_УчастникиЭДО.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_ВозрастДокумента.Ссылка КАК Ссылка,
	|	ИСТИНА КАК СрокОбработкиДокИстек
	|ПОМЕСТИТЬ DR_ВАрхив
	|ИЗ
	|	DR_ВозрастДокумента КАК DR_ВозрастДокумента
	|ГДЕ
	|	DR_ВозрастДокумента.ВозрастДокДней &gt; &amp;СрокОбработкиДокументаДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(DR_Обработать.Ссылка, DR_ВАрхив.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(DR_Обработать.ШК_Сопоставлен, ЛОЖЬ) КАК ШК_Сопоставлен,
	|	ЕСТЬNULL(DR_ВАрхив.СрокОбработкиДокИстек, ЛОЖЬ) КАК СрокОбработкиДокИстек
	|ПОМЕСТИТЬ DR_Итог
	|ИЗ
	|	DR_Обработать КАК DR_Обработать
	|		ПОЛНОЕ СОЕДИНЕНИЕ DR_ВАрхив КАК DR_ВАрхив
	|		ПО DR_Обработать.Ссылка = DR_ВАрхив.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Итог.Ссылка КАК DR_Документ,
	|	Docrobot_Документ.Комментарий КАК Комментарий,
	|	Docrobot_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	Docrobot_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ТЧ_NUMBER.Значение КАК NUMBER,
	|	ТЧ_POSITION.ХранилищеЗначения КАК ХЗ_POSITION,
	|	ТЧ_HEAD.ХранилищеЗначения КАК ХЗ_HEAD,
	|	ТЧ_Организация.Значение КАК Организация,
	|	DR_Данные.Контрагент КАК Контрагент,
	|	ТЧ_ТочкаДоставки.Значение КАК ТочкаДоставки,
	|	DR_Данные.ЗаполнитьУчастниковЭДО КАК ЗаполнитьУчастниковЭДО,
	|	DR_Данные.ДатаЭлектронногоДокумента КАК ДатаЭлектронногоДокумента,
	|	DR_Данные.ПервичныйПоискНоменклатуры КАК ПервичныйПоискНоменклатуры,
	|	ТЧ_ORDERNUMBER.Значение КАК ORDERNUMBER,
	|	ТЧ_ДатаЗаказа.Значение КАК ДатаЗаказа,
	|	ТЧ_ДатаУвОбОтгрузке.Значение КАК ДатаУвОбОтгрузке,
	|	ТЧ_СозданиеЦепочки.Значение КАК СозданиеЦепочки,
	|	ТЧ_Накладная1С.Значение КАК Накладная1С,
	|	DR_Итог.ШК_Сопоставлен КАК ШК_Сопоставлен,
	|	DR_Итог.СрокОбработкиДокИстек КАК СрокОбработкиДокИстек,
	|	0 КАК TOTALVAT,
	|	0 КАК TOTALAMOUNT,
	|	0 КАК TOTALAMOUNTWITHVAT
	|ИЗ
	|	DR_Итог КАК DR_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ DR_Данные КАК DR_Данные
	|		ПО DR_Итог.Ссылка = DR_Данные.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК Docrobot_Документ
	|		ПО DR_Итог.Ссылка = Docrobot_Документ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_NUMBER
	|		ПО DR_Итог.Ссылка = ТЧ_NUMBER.Ссылка
	|			И (ТЧ_NUMBER.Реквизит = ""NUMBER"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_POSITION
	|		ПО DR_Итог.Ссылка = ТЧ_POSITION.Ссылка
	|			И (ТЧ_POSITION.Реквизит = ""POSITION"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_HEAD
	|		ПО (DR_Данные.Ссылка = ТЧ_HEAD.Ссылка)
	|			И (ТЧ_HEAD.Реквизит = ""HEAD"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Организация
	|		ПО DR_Итог.Ссылка = ТЧ_Организация.Ссылка
	|			И (ТЧ_Организация.Реквизит = ""Организация"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ТочкаДоставки
	|		ПО DR_Итог.Ссылка = ТЧ_ТочкаДоставки.Ссылка
	|			И (ТЧ_ТочкаДоставки.Реквизит = ""ТочкаДоставки"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаУвОбОтгрузке
	|		ПО DR_Итог.Ссылка = ТЧ_ДатаУвОбОтгрузке.Ссылка
	|			И (ТЧ_ДатаУвОбОтгрузке.Реквизит = ""ДатаУвОбОтгрузке"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ORDERNUMBER
	|		ПО DR_Итог.Ссылка = ТЧ_ORDERNUMBER.Ссылка
	|			И (ТЧ_ORDERNUMBER.Реквизит = ""ORDERNUMBER"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаЗаказа
	|		ПО DR_Итог.Ссылка = ТЧ_ДатаЗаказа.Ссылка
	|			И (ТЧ_ДатаЗаказа.Реквизит = ""ДатаЗаказа"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_СозданиеЦепочки
	|		ПО DR_Итог.Ссылка = ТЧ_СозданиеЦепочки.Ссылка
	|			И (ТЧ_СозданиеЦепочки.Реквизит = ""СозданиеЦепочки"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Накладная1С
	|		ПО DR_Итог.Ссылка = ТЧ_Накладная1С.Ссылка
	|			И (ТЧ_Накладная1С.Реквизит = ""Накладная1С"")";
	
	//&lt;Выгрузка массива ID цепочек полученных по REST для передачи его параметром в запрос&gt;
	ChainID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("ChainID");
	
	Запрос.УстановитьПараметр("ВидДокумента"			, ТипДокумента + "_входящий");
	Запрос.УстановитьПараметр("Загружен"				, "Загружен");
	Запрос.УстановитьПараметр("НеОбработан"				, "НеОбработан");
	Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, ChainID_API);
	Запрос.УстановитьПараметр("ТекущаяДата"				, ТекущаяДата());
	Запрос.УстановитьПараметр("СрокОбработкиДокументаДней"	, Настройка_Параметр_Прочитать("EDI_СрокПовторнойОбработкиДокументовRECADV", 7));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//&lt;Таблица используется для поиска принадлежности RECADV к одной цепочки с ORDER&gt;
	//&lt;В запросе установден отбор по Накладной, потому что предпологается, что ID цепочки ORDER и найденной Накладной равны&gt;
	ТаблицаIDЦепочкиORDER	= МассивРезультатов[0].Выгрузить();
	ТаблицаIDЦепочкиORDER.Индексы.Добавить("ИдентификаторЦепочки");
	
	//&lt;Таблица DR_Документов со статусом "Загружен"&gt;
	ТаблицаЗагруженных	= МассивРезультатов[2].Выгрузить();
	
	//&lt;Инициализация массива примитивных типов&gt;
	ПримитивныеТипы = Новый Массив;
	ПримитивныеТипы.Добавить(Тип("Строка"));
	ПримитивныеТипы.Добавить(Тип("Число"));		
	
	//&lt;Инициализация квалификаторов&gt;
	КвалификаторСтрока	= Новый КвалификаторыСтроки(200);
	КвалификаторЧисло 	= Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
	КвалификаторДаты	= Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	//&lt;Определение типа Ед. измерения&gt;
	МассивТиповЕдИзм = Новый Массив;
	ИмяОбъектов 	 = Новый Массив;
	ИмяОбъектов.Добавить("УпаковкиЕдиницыИзмерения");
	ИмяОбъектов.Добавить("КлассификаторЕдиницИзмерения");
	ИмяОбъектов.Добавить("ЕдиницыИзмерения");
	
	Для каждого ИмяСпр Из ИмяОбъектов Цикл
		Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
			МассивТиповЕдИзм.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
		КонецЕсли;
	КонецЦикла;
	
	//&lt;Определение типа УчастникиЭДО&gt;
	МассивТиповУчЭДО = Новый Массив;
	ИмяОбъектов 	 = Новый Массив;
	ИмяОбъектов.Добавить("Организации");
	ИмяОбъектов.Добавить("Контрагенты");
	ИмяОбъектов.Добавить("Партнеры");
	ИмяОбъектов.Добавить("ДоговорыКонтрагентов");
	
	Для каждого ИмяСпр Из ИмяОбъектов Цикл
		Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
			МассивТиповУчЭДО.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
		КонецЕсли;
	КонецЦикла;
	
	//&lt;Инициализация описателей типов&gt;
	ОписаниеПримитивныхТипов 	= Новый ОписаниеТипов(ПримитивныеТипы,,,КвалификаторЧисло,КвалификаторСтрока);
	ОписаниеТиповDR_Документ 	= Новый ОписаниеТипов("ДокументСсылка.DR_Документ");
	ОписаниеТиповЧисло			= Новый ОписаниеТипов("Число",,,,КвалификаторЧисло);
	ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока);
	ОписаниеТиповДата   		= Новый ОписаниеТипов("Дата"	, КвалификаторДаты);
	ОписаниеТиповНоменклатура 	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");	
	ОписаниеТиповЕдИзм 			= Новый ОписаниеТипов(МассивТиповЕдИзм);
	ОписаниеТиповУчЭДо 			= Новый ОписаниеТипов(МассивТиповУчЭДО);
	
	//&lt;Элементы по спецификации множественные, т.е. могут в RECADV переданы несколько раз. 
	//В созданной структуре будут иметь тип - Массив, элементы массива тип - Структура&gt;
	СтруктураЭлементов = Новый Структура;
	СтруктураЭлементов.Вставить("POSITION");   
	СтруктураЭлементов.Вставить("MARKCODE");
	
	//&lt;В таблицу добавляются данные по распарсенным XML&gt;
	ТаблицаНовДокументов = Новый ТаблицаЗначений;
	ТаблицаНовДокументов.Колонки.Добавить("ChainID"		, ОписаниеТиповСтрока); //Тип - Строка
	ТаблицаНовДокументов.Колонки.Добавить("DocUUID"		, ОписаниеТиповСтрока); //Тип - Строка
	ТаблицаНовДокументов.Колонки.Добавить("ДатаФайла"	, ОписаниеТиповДата);   //Тип - Дата
	ТаблицаНовДокументов.Колонки.Добавить("ДанныеДокумента"); 					//Тип - Структура
	
	//&lt;Создание индекса для поиска по таблице&gt;
	ТаблицаНовДокументов.Индексы.Добавить("DocUUID");
	
	//&lt;В таблицу добавляются идентификационные данные для поиска Участников ЭДО и Номенклатуры&gt;
	ТЗ_ДанныеИдентификация = Новый ТаблицаЗначений;
	ТЗ_ДанныеИдентификация.Колонки.Добавить("DR_Документ"	 , ОписаниеТиповDR_Документ);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("BUYER"		 	 , ОписаниеТиповСтрока);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("RECIPIENT"	 	 , ОписаниеТиповСтрока);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("DELIVERYPLACE"  , ОписаниеТиповСтрока);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("Организация" 	 , ОписаниеТиповУчЭДо);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("Контрагент"  	 , ОписаниеТиповУчЭДо);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("ТочкаДоставки"  , ОписаниеТиповУчЭДо);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("POSITIONNUMBER" , ОписаниеТиповЧисло);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("PRODUCT"		 , ОписаниеТиповСтрока);
	
	//&lt;Получение значения доп. константы&gt;
	ПереводТрафика = Настройка_Параметр_Прочитать("EDI_ПереводТрафика", Ложь);
	КоличествоДнейОтДатыПоставки = Настройка_Параметр_Прочитать("EDI_КоличествоДнейОтДатыПоставки", 14);
	
	#Область ПолучениеДанныхПоНовымДокументам
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаЗагруженных Цикл
		
		//&lt;Тип - Структура&gt;
		ДанныеДокумента = Новый Структура;	
		ДанныеФайла 	= Новый Структура;
		ПараметрыОтбора = Новый Структура;
		
		//&lt;Тип - Строка&gt;
		ChainID_RECADV = "";
		ChainID_ORDER  = "";
		
		//&lt;Получение данных XML&gt;
		Попытка
			
			ДвоичныеДанныеФайла = СтрокаТаблицы.ДанныеФайла.Получить();	
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
			
			Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда					
				ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);					
			Иначе					
				ТекстЛогаСобытий = СтрокаТаблицы.Представление + "не обработан. Причина: отсутствуют Двоичные данные XML";
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
		Исключение
			ТекстЛогаСобытий = СтрокаТаблицы.Представление + "не обработан." + "Описание ошибки: " + ОписаниеОшибки();
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);					
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Продолжить;
		КонецПопытки;
		
		ТекущийФайл = Новый Файл(ИмяВременногоФайла);
		
		КодировкаXML = "UTF-8";
		ЧтениеXMLДляТекущегоФайла = ПолучитьЧтениеXMLДляФайла(ТекущийФайл.Имя, ТекущийФайл, КодировкаXML, МассивЛогаСобытий); 							
		Если ЧтениеXMLДляТекущегоФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектXDTO = Неопределено;
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLДляТекущегоФайла);
		
		//&lt;Преобразование данных из XDTO в Структуру - "ДанныеФайла"&gt;
		Если ОбъектXDTO &lt;&gt; Неопределено Тогда
			РекурсивноПостроитьСтруктуруEDI(ОбъектXDTO, СтруктураЭлементов, ДанныеФайла);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЧтениеXMLДляТекущегоФайла.Закрыть();
		
		//&lt;Удаление временного файла&gt;
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение				
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
		КонецПопытки;
		
		//&lt;Поиск ID цепочки по ID эл.документа&gt;
		НайденнаяСтрока = ТаблицаДокументовAPI.Найти(СтрокаТаблицы.ИдентификаторДокумента, "docUUID");
		
		//&lt;Найденный ID цепочки присваиваем эл. документу&gt;
		Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
			
			ДатаAPI = СтрЗаменить(НайденнаяСтрока.date, "-", "");
			ДатаAPI = СтрЗаменить(ДатаAPI, ":", "");
			ДатаAPI = СтрЗаменить(ДатаAPI, " ", "");
			
			ДанныеДокумента.Вставить("ИдентификаторЦепочки", НайденнаяСтрока.chainID);
			ДанныеДокумента.Вставить("ДатаСообщения", Дата(ДатаAPI));
			
		ИначеЕсли СтрокаТаблицы.ФайлЗагруженЛокально = Истина Тогда
		
			ДанныеДокумента.Вставить("ИдентификаторЦепочки", "TMP_" + СтрокаТаблицы.ИдентификаторДокумента);
			ДанныеДокумента.Вставить("ДатаСообщения", ТекущаяДата());
			
		Иначе
						
			Комментарий = "По RECADV (Уведомление о приемке) № " + ДанныеФайла.NUMBER + " не найден идентификатор цепочки в списке полученных идентификаторов с сервера.";
			
			DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
			DR_ДокументОбъект.Комментарий = Комментарий;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Комментарий;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;				
		КонецЕсли;
		
		//&lt;Проверка на дубли по DR_Документам со статусом "Загружен"&gt; 
		НайденнаяСтрока = ТаблицаНовДокументов.Найти(СтрокаТаблицы.ИдентификаторДокумента, "DocUUID");
		
		Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
			
			//&lt;Изменям статус DR_Документа определенного как дубль&gt;
			DR_ДокументСсылка = НайденнаяСтрока.ДанныеДокумента.DR_Документ; 
			DR_ДокументОбъект = DR_ДокументСсылка.ПолучитьОбъект();
			DR_ДокументОбъект.Статус = "Архивный";
			DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
			DR_ДокументОбъект.Комментарий = "Документ определен как дубль";
			
			ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
			
			НовСтр = ТабличнаяЧасть.Добавить();
			НовСтр.Реквизит = "НеОбрабатывать";
			НовСтр.Значение = Истина;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ТекстЛогаСобытий =  "В процессе обработки " + СтрокаТаблицы.Представление + ". " + Строка(DR_ДокументСсылка) + " определен как дубль и обработан не будет.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			//&lt;Удаляем найденную запись из таблицы&gt;
			ТаблицаНовДокументов.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
		ДанныеДокумента.Вставить("ИдентификаторДокумента"	, СтрокаТаблицы.ИдентификаторДокумента);
		ДанныеДокумента.Вставить("DR_Документ"				, СтрокаТаблицы.DR_Документ);
		ДанныеДокумента.Вставить("Статус"					, СтрокаТаблицы.СтатусДокумента);
		ДанныеДокумента.Вставить("ДанныеФайла"				, ДанныеФайла);
		ДанныеДокумента.Вставить("ДатаФайла"				, СтрокаТаблицы.ДатаФайла);
		
		//&lt;Классификатор валют&gt;
		КлассификаторВалюты = Новый Соответствие;
		КлассификаторВалюты.Вставить("RUB", 	643);
		КлассификаторВалюты.Вставить("KZT", 	398);
		КлассификаторВалюты.Вставить("UAH", 	980);
		КлассификаторВалюты.Вставить("USD",		840);
		КлассификаторВалюты.Вставить("EUR",		978);
		КлассификаторВалюты.Вставить("MDL",		498);
		КлассификаторВалюты.Вставить("BYR",		974);
		КлассификаторВалюты.Вставить("TMT",		934);
		КлассификаторВалюты.Вставить("UZS",		860);
		КлассификаторВалюты.Вставить("kz",		398);
		КлассификаторВалюты.Вставить("ru",		643);
		
		//&lt;Получение валюты из классификатора валют по буквенному коду&gt;
		Если ДанныеФайла.Свойство("CURRENCY") Тогда
			
			//&lt;ЦКВ - цифровой код валюты&gt;
			ЦКВ = КлассификаторВалюты[ДанныеФайла.CURRENCY];
			ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
			
		Иначе //&lt;иначе получаем по коду страны из профиля обмена&gt;
			
			ЗапросКодаСтраны = Новый Запрос;
			ЗапросКодаСтраны.Текст = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(DR_НастройкиДополнительныеРеквизиты.Значение КАК СТРОКА(3)) КАК Страна
			|ИЗ
			|	Справочник.DR_Настройки КАК DR_Настройки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_НастройкиДополнительныеРеквизиты
			|		ПО DR_Настройки.Ссылка = DR_НастройкиДополнительныеРеквизиты.Ссылка
			|			И (DR_Настройки.ВидНастройки = ""ПрофилиОбмена"")
			|ГДЕ
			|	DR_Настройки.ПометкаУдаления = ЛОЖЬ
			|	И DR_Настройки.Статус = ""Активный""
			|	И DR_НастройкиДополнительныеРеквизиты.Реквизит = ""Страна""";
			
			РезультатЗапроса = ЗапросКодаСтраны.Выполнить();
			ВыборкаЗапрос = РезультатЗапроса.Выбрать();
			
			ВыборкаЗапрос.Следующий();
			ЦКВ = КлассификаторВалюты.Получить(ВыборкаЗапрос.Страна);
			ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
			
		КонецЕсли;
		
		//&lt;Добавление валюты&gt;
		ДанныеФайла.Вставить("Валюта", ВалютаСсылка);
		
		# Область ПодменыGLNПоТорговымСетям
		
		//&lt;В созданной структуре документа подмену не делаем. Оставляем как передала сеть&gt; 
		//&lt;Для этого создаем отдельную структуру "HEAD" заполняем ее с учетом подмен&gt;
		HEAD = Новый Структура;
		
		INVOICEPARTNER = Неопределено;
		ДанныеФайла.Свойство("INVOICEPARTNER", INVOICEPARTNER);
		
		АТАК = Неопределено;
		ДанныеФайла.Свойство("SENDERNAME", АТАК);
		
		INVOICEPARTNER = Неопределено;
		ДанныеФайла.Свойство("INVOICEPARTNER", INVOICEPARTNER);
		
		HEAD.Вставить("BUYER"			, ДанныеФайла.BUYER);			//Покупатель
		HEAD.Вставить("RECIPIENT"		, ДанныеФайла.RECIPIENT);		//Продавец
		HEAD.Вставить("DELIVERYPLACE"	, ДанныеФайла.DELIVERYPLACE);	//Грузополучатель
		
		Если АТАК = "АТАК" Тогда//&lt;ТС АТАК&gt;				
			HEAD.Вставить("BUYER", "4660000949998"); 				
		ИначеЕсли INVOICEPARTNER &lt;&gt; Неопределено Тогда //&lt;ТС Красное и белое&gt;				
			Если ДанныеФайла.BUYER &lt;&gt; ДанныеФайла.INVOICEPARTNER Тогда
				HEAD.Вставить("BUYER", ДанныеФайла.INVOICEPARTNER);
			КонецЕсли;				
		ИначеЕсли ДанныеФайла.SENDER = "4607070199991" Тогда //&lt;ТС Метро&gt;
			HEAD.Вставить("BUYER", ДанныеФайла.SENDER);	
		КонецЕсли;
		
		ДанныеФайла.Вставить("HEAD", HEAD);
		
		#КонецОбласти
		
		//&lt;Добавление реквизитов по Участникам ЭДО для последующего их заполнения&gt;
		ДанныеФайла.Вставить("Организация"		, "");
		ДанныеФайла.Вставить("Контрагент"		, "");
		ДанныеФайла.Вставить("ТочкаДоставки"	, "");
		
		//&lt;..Для проверки необходимости получения данных из базы по участникам ЭДО&gt;
		ДанныеФайла.Вставить("ЗаполнитьУчастниковЭДО", Истина);
		//&lt;..Для проверки необходимости получения данных из базы по не сопостваленной Номенклатуры в первый раз&gt;
		ДанныеФайла.Вставить("ПервичныйПоискНоменклатуры", Истина);
		//&lt;..Для проверки необходимости обработки DR_Документа по кастомному условию&gt;
		ДанныеФайла.Вставить("НеОбрабатывать", Ложь);
		//&lt;..Для необходимости создания записи в РС DR_ЦепочкиДокументов на основании Уведомления о приемке&gt;
		ДанныеФайла.Вставить("СозданиеЦепочки", Истина);
		
		//&lt;Получение номера ORDER&gt;
		Если ДанныеФайла.Свойство("ORDERNUMBER") Тогда 
			ДанныеФайла.ORDERNUMBER = ?(ВРег(ДанныеФайла.ORDERNUMBER) = "Б/Н", "", ДанныеФайла.ORDERNUMBER);
		Иначе
			ДанныеФайла.Вставить("ORDERNUMBER", "");
		КонецЕсли;
		
		//&lt;Преобразование даты формата 2023-02-12 в формат 12.02.2022&gt;
		СтруктураДат = Новый Структура("DATE, ORDERDATE, DESADVDATE, DELIVERYNOTEDATE", "ДатаЭлектронногоДокумента", "ДатаЗаказа", "ДатаУвОбОтгрузке", "ДатаНакладной");
		
		Для каждого Элемент Из СтруктураДат Цикл 
			Если ДанныеФайла.Свойство(Элемент.Ключ) Тогда
				ДанныеФайла.Вставить(Элемент.Значение, Дата(СтрЗаменить(ДанныеФайла[Элемент.Ключ], "-", "")));	 	
			Иначе
				ДанныеФайла.Вставить(Элемент.Значение, Дата(0001,01,01));
			КонецЕсли;				
		КонецЦикла;
		
		//&lt;Если сеть не передала дату приемки, берем дату RECADV&gt;
		ДатаПриемки = ?(ДанныеФайла.Свойство("RECEPTIONDATE"), Дата(СтрЗаменить(ДанныеФайла.RECEPTIONDATE,"-","")), ДанныеФайла.ДатаЭлектронногоДокумента);
		ДанныеФайла.Вставить("ДатаПриемки", ДатаПриемки);
		
		//&lt;Получение номера Накладной&gt;
		НомерНакладной = "";
		
		//&lt;Первым проверяется DESADVNUMBER как часто передаваемый в RECADV&gt;
		Если ДанныеФайла.Свойство("DESADVNUMBER") Тогда
			НомерНакладной = ДанныеФайла.DESADVNUMBER;
		ИначеЕсли ДанныеФайла.Свойство("DELIVERYNOTENUMBER") Тогда
			НомерНакладной = ДанныеФайла.DELIVERYNOTENUMBER;	
		КонецЕсли;
		
		//&lt;Свойства структуры элемента POSITION. Значение свойства Истина - выполнить преобразование в Число, Ложь - нет&gt;
		Поля = Новый Структура;
		Поля.Вставить("Номенклатура"		, Ложь);
		Поля.Вставить("Характеристика"		, Ложь);
		Поля.Вставить("ЕдиницаИзмерения"	, Ложь);
		Поля.Вставить("КоличествоИзРТУ"		, Истина);
		Поля.Вставить("DESCRIPTION"			, Ложь);
		Поля.Вставить("PRODUCTIDSUPPLIER"	, Ложь);
		Поля.Вставить("ACCEPTEDUNIT"		, Ложь);
		Поля.Вставить("ORDERUNIT"			, Ложь);
		Поля.Вставить("POSITIONNUMBER"		, Истина);
		Поля.Вставить("ACCEPTEDQUANTITY"	, Истина);
		Поля.Вставить("PRICE"				, Истина);
		Поля.Вставить("PRICEWITHVAT"		, Истина);
		Поля.Вставить("VAT"					, Истина);
		Поля.Вставить("ORDERQUANTITY"		, Истина);
		Поля.Вставить("DELIVERQUANTITY"		, Истина);
		Поля.Вставить("QUANTITYOFCUINTU"	, Истина);
		Поля.Вставить("AMOUNTWITHVAT"		, Истина);
		Поля.Вставить("AMOUNT"				, Истина);
		Поля.Вставить("VATAMOUNT"			, Истина);
		
		POSITION = ДанныеФайла.POSITION;
		
		//&lt;Обработка элемента POSITION&gt;
		Для Каждого ЭлементСтруктура Из POSITION Цикл
			
			Для каждого Поле Из Поля Цикл
				
				Если ЭлементСтруктура.Свойство(Поле.Ключ) Тогда
					
					Если Поле.Значение Тогда
						//&lt;Преобразование строковых значений в число&gt;	
						Попытка
							ЭлементСтруктура[Поле.Ключ] = Число(ЭлементСтруктура[Поле.Ключ]);
						Исключение
							ЭлементСтруктура[Поле.Ключ] = ЭКОМ_ПреобразоватьВЧисло(ЭлементСтруктура[Поле.Ключ]);
						КонецПопытки;
						
					КонецЕсли;
				Иначе
					//&lt;Добавление свойств в массив структур элемента POSITION&gt;
					ЭлементСтруктура.Вставить(Поле.Ключ, "");
					
					Если Поле.Значение Тогда
						ЭлементСтруктура[Поле.Ключ] = 0;	
					КонецЕсли;
					
				КонецЕсли;					
			КонецЦикла;
			
			СтрокаИдентификация = ТЗ_ДанныеИдентификация.Добавить();
			СтрокаИдентификация.DR_Документ = ДанныеДокумента.DR_Документ;
			ЗаполнитьЗначенияСвойств(СтрокаИдентификация, HEAD);
			ЗаполнитьЗначенияСвойств(СтрокаИдентификация, ЭлементСтруктура);
			
		КонецЦикла;
		
		//&lt;Преобразование строковых значений в число&gt;
		СтруктураOfTotals = Новый Структура("TOTALVAT, TOTALAMOUNT, TOTALAMOUNTWITHVAT", 0, 0, 0);
		
		Для каждого Элемент Из СтруктураOfTotals Цикл 
			Если ДанныеФайла.Свойство(Элемент.Ключ) Тогда
				ДанныеФайла[Элемент.Ключ] = Число(ДанныеФайла[Элемент.Ключ]);	 	
			Иначе
				ДанныеФайла.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЕсли;				
		КонецЦикла;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Для того, что бы не обрабатывать Новый DR_Документы необходимо, значение реквизита "НеОбрабатывать"	//
		//по условию установить в Истина. Условие может быть любым.												//
		//////////////////////////////////////////////////////////////////////////////////////////////////////////			
		
		//&lt;Пример&gt;			
		//МассивТочкеДоставок = новый Массив;
		//МассивТочкеДоставок.Добавить("9864398478404");
		//
		//Если НЕ МассивТочкеДоставок.Найти(ДанныеФайла.DELIVERYPLACE) = Неопределено Тогда
		//	ДанныеФайла.Вставить("НеОбрабатывать", Истина);
		//КонецЕсли;
		
		Если ДанныеФайла.НеОбрабатывать Тогда
			
			//&lt;Для Нового DR_Документа устанавливаем статус "Обработан"&gt;
			DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
			DR_ДокументОбъект.Статус = "Архивный";
			DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
			DR_ДокументОбъект.Комментарий = "Документ не был обработан по условию описанному в шаблоне ""RECADV входящий""";
			
			ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
			
			НовСтр = ТабличнаяЧасть.Добавить();
			НовСтр.Реквизит = "НеОбрабатывать";
			НовСтр.Значение = Истина;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);				
			
			Продолжить;
		КонецЕсли;		
		
		ChainID_RECADV = ДанныеДокумента.ИдентификаторЦепочки;
		
		//&lt;Параметр отбора для поиска ID цепочки ORDER&gt;
		ПараметрыОтбора.Вставить("ИдентификаторЦепочки", ChainID_RECADV);
		
		//&lt;Поиск ID цепочки ORDER по ID цепочки RECADV&gt;
		РезультатПоиска = ТаблицаIDЦепочкиORDER.НайтиСтроки(ПараметрыОтбора);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			
			//&lt;Проверка переданого в RECADV номера заказа. Встречаются случаи, когда сети в RECADV номер заказа не передают&gt;
			Если ЗначениеЗаполнено(ДанныеФайла.ORDERNUMBER) Тогда
				
				//&lt;Поиск ID цепочки ORDER по номеру заказа и дате поставки&gt;
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	DR_ЦепочкиДокументов.ИдентификаторЦепочки КАК ИдентификаторЦепочки
				|ПОМЕСТИТЬ ВТ_ChainID
				|ИЗ
				|	РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
				|ГДЕ
				|	DR_ЦепочкиДокументов.ДатаПоставки МЕЖДУ &amp;ДатаНач И &amp;ДатаКон
				|	И DR_ЦепочкиДокументов.НомерЗаказа = &amp;НомерЗаказа
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ_ChainID.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
				|	DR_Документ.Ссылка КАК DR_Документ
				|ПОМЕСТИТЬ ВТ_DR_Документ
				|ИЗ
				|	ВТ_ChainID КАК ВТ_ChainID
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
				|		ПО ВТ_ChainID.ИдентификаторЦепочки = DR_Документ.ИдентификаторЦепочки
				|			И (DR_Документ.ВидДокумента = ""ORDER_входящий"")
				|			И (НЕ DR_Документ.ПометкаУдаления)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ВТ_DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
				|	ЕСТЬNULL(DR_События_Накладная.Документ, НЕОПРЕДЕЛЕНО) КАК Накладная,
				|	DR_События_Накладная.Идентификатор КАК ИдентификаторНакладной,
				|	DELIVERYPLACE.Значение КАК GLN_ТочкиДоставки
				|ИЗ
				|	ВТ_DR_Документ КАК ВТ_DR_Документ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_Накладная
				|		ПО ВТ_DR_Документ.ИдентификаторЦепочки = DR_События_Накладная.ИдентификаторЦепочки
				|			И (DR_События_Накладная.ВидДокумента = ""Накладная_Исходящая"")
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DELIVERYPLACE
				|		ПО ВТ_DR_Документ.DR_Документ = DELIVERYPLACE.Ссылка
				|			И (DELIVERYPLACE.Реквизит = ""DELIVERYPLACE"")";
				
				ДатаНач = ДатаПриемки - (КоличествоДнейОтДатыПоставки * 86400);
				
				Запрос.УстановитьПараметр("ДатаКон"		, КонецДня(ДатаПриемки));
				Запрос.УстановитьПараметр("ДатаНач"		, НачалоДня(ДатаНач));
				Запрос.УстановитьПараметр("НомерЗаказа" , ДанныеФайла.ORDERNUMBER);
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					ТЗ = РезультатЗапроса.Выгрузить();
					
					СписокНакладные = ТЗ.Скопировать(,"Накладная,ИдентификаторНакладной");
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Пока Выборка.Следующий() Цикл							
						//&lt;Если записей найдено несколько выполняем доп. проверку на равенство GLN Грузополучателей RECADV и ORDER&gt;
						Если Выборка.GLN_ТочкиДоставки = ДанныеФайла.DELIVERYPLACE Тогда
							ChainID_ORDER = Выборка.ИдентификаторЦепочки;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					/////////////////////////////////////////////////////////////////////////////////////////////////////////////
					//Алгоритм описанный ниже применяется на проектах по клиентам с активным трафиком.                         //
					//Т.е. когда заказы от сетей были получены через платформу другого провайдера, а уведомления о приемки     //
					//поступили через нашу платформу. В таком случае необходимо найти созданные 1С документы (Заказ, РТУ, СЧФ) //
					// и на основании полученных данных создать необходимые записи в РС DR_События.                            //
					//                                                                                                         //
					//Алгоритм может быть переписан на проекте в силу различия конфигураций по типам документов (и т.п.)       //
					//или же вовсе убран из шаблона.																		   //
					/////////////////////////////////////////////////////////////////////////////////////////////////////////////
					
					//&lt;Начало алгоритма&gt;
					Если ПереводТрафика И ЗначениеЗаполнено(НомерНакладной) Тогда
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
						|	РеализацияТоваровУслуг.Номер КАК Номер
						|ПОМЕСТИТЬ ВТ_РТУ
						|ИЗ
						|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
						|ГДЕ
						|	РеализацияТоваровУслуг.Дата МЕЖДУ &amp;ДатаНачал И &amp;ДатаКонец
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВТ_РТУ.Ссылка КАК РеализацияСсылка,
						|	ВЫРАЗИТЬ(ВТ_РТУ.Ссылка.ЗаказКлиента КАК Документ.ЗаказКлиента) КАК ЗаказКлиента
						|ПОМЕСТИТЬ ВТ_Заказ
						|ИЗ
						|	ВТ_РТУ КАК ВТ_РТУ
						|ГДЕ
						|	ВТ_РТУ.Номер ПОДОБНО &amp;DESADVNUMBER
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	СчетФактураВыданный.Ссылка КАК Ссылка,
						|	ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.РеализацияТоваровУслуг) КАК ДокументОснование
						|ПОМЕСТИТЬ ВТ_СЧФ
						|ИЗ
						|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
						|ГДЕ
						|	СчетФактураВыданный.ДокументОснование В
						|			(ВЫБРАТЬ
						|				ВТ_Заказ.РеализацияСсылка
						|			ИЗ
						|				ВТ_Заказ КАК ВТ_Заказ)
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ЕСТЬNULL(ВТ_Заказ.ЗаказКлиента, НЕОПРЕДЕЛЕНО) КАК Заказ,
						|	ВТ_Заказ.РеализацияСсылка КАК Накладная,
						|	ЕСТЬNULL(ВТ_СЧФ.Ссылка, НЕОПРЕДЕЛЕНО) КАК СЧФ
						|ИЗ
						|	ВТ_Заказ КАК ВТ_Заказ
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СЧФ КАК ВТ_СЧФ
						|		ПО (ВТ_СЧФ.ДокументОснование = ВТ_Заказ.Ссылка)";
						
						//&lt;Для поиска по номеру из переменной "НомерНакладной", убираем префикс и лидирующие нули&gt;
						НомерНакладной = ЭКОМ_ПолучитьНомерНаПечать(НомерНакладной, Истина, Истина);
						
						Запрос.УстановитьПараметр("DESADVNUMBER"	, "%" + НомерНакладной);
						Запрос.УстановитьПараметр("ДатаКонец"		, КонецДня(ДатаПриемки));
						Запрос.УстановитьПараметр("ДатаНачал"		, НачалоДня(ДатаНач));
						
						РезультатЗапроса = Запрос.Выполнить();
						
						Если НЕ РезультатЗапроса.Пустой() Тогда
							
							ТаблицаЗаписей = РезультатЗапроса.Выгрузить();
							
							Если ТаблицаЗаписей.Количество() Тогда
								
								НачатьТранзакцию();
								
								Попытка										
									СтруктураРСDR_События = Новый Структура;
									
									Для Каждого Запись Из ТаблицаЗаписей Цикл	
										
										//&lt;Если в результате выборки были найдены записи по нескольким накладным&gt;
										//&lt;Тогда необходимо добавить условие доп. проверки для получения нужной накладной по данным RECADV&gt;
										
										//....Код доп. проверки
										
										ИдентификаторОснования = "";
										ИдентификаторСсылки = "";
										
										Для Каждого Колонка Из ТаблицаЗаписей.Колонки Цикл
											
											ТекЯчейка = Запись[Колонка.Имя];
											
											Если ЗначениеЗаполнено(ТекЯчейка) Тогда
												
												Если Колонка.Имя = "Заказ" Тогда
													
													ВидДокумента = "Заказ_Входящий";
													ИдентификаторСсылки =  ТекЯчейка.УникальныйИдентификатор();
													
												ИначеЕсли Колонка.Имя = "Накладная" Тогда
													
													ИдентификаторОснования = ИдентификаторСсылки;
													ВидДокумента = "Накладная_Исходящая";
													ИдентификаторСсылки =  ТекЯчейка.УникальныйИдентификатор();
													//&lt;ID основания для события RECADV&gt;
													ДанныеФайла.Вставить("ИдентификаторОснования", ИдентификаторСсылки);
													ДанныеФайла.Вставить("Накладная1С", ТекЯчейка);
													
												ИначеЕсли Колонка.Имя = "СЧФ" Тогда
													
													ИдентификаторОснования = ИдентификаторСсылки;
													ВидДокумента = "СчетФактура_Исходящий";
													ИдентификаторСсылки =  ТекЯчейка.УникальныйИдентификатор();
													
												КонецЕсли;
												
												СтруктураРСDR_События.Вставить("ИдентификаторЦепочки"	, ChainID_RECADV);
												СтруктураРСDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
												СтруктураРСDR_События.Вставить("Документ"				, ТекЯчейка);
												СтруктураРСDR_События.Вставить("ВидДокумента"			, ВидДокумента);
												СтруктураРСDR_События.Вставить("Идентификатор"			, ИдентификаторСсылки);
												СтруктураРСDR_События.Вставить("ИдентификаторОснования"	, ИдентификаторОснования);
												
												НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
												НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРСDR_События.ИдентификаторЦепочки);
												НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРСDR_События.Документ);
												НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРСDR_События.ВидДокумента);
												НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРСDR_События.Идентификатор);
												НЗ_DRСобытия.Прочитать();
												
												Если НЗ_DRСобытия.Количество() = 0 Тогда
													НоваяЗапись = НЗ_DRСобытия.Добавить();
												Иначе
													НоваяЗапись = НЗ_DRСобытия[0];
												КонецЕсли;
												
												Для Каждого Элемент Из СтруктураРСDR_События Цикл			
													НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
												КонецЦикла;
												
												НЗ_DRСобытия.Записать();
												
											КонецЕсли;
										КонецЦикла;
										
									КонецЦикла;
									
									ЗафиксироватьТранзакцию();
									
								Исключение
									
									ОтменитьТранзакцию();
									
									ПредставлениеДокументаXML = "RECADV (Уведомление о приемке)" + " № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D");
									ТекстЛогаСобытий = "На основании " + ПредставлениеДокументаXML + " формирование записей по документам 1С в РС DR_события "
									+ " не выполнено. По причине - " + ОписаниеОшибки();
									ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
									МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);										
									ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки - " + ОписаниеОшибки());
									
									Продолжить;										
								КонецПопытки;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					//&lt;/Конец алгоритма&gt;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе				
			ChainID_ORDER = ChainID_RECADV;				
		КонецЕсли;
		
		//&lt;Получение ID основания и ссылки накладной по RECADV&gt;
		Если ЗначениеЗаполнено(НомерНакладной) И ЗначениеЗаполнено(ChainID_ORDER) Тогда				
			
			//&lt;Для сравнения по номеру полученному из RECADV, убираем префикс и лидирующие нули&gt;
			ЭлНомерНакладной = ЭКОМ_ПолучитьНомерНаПечать(НомерНакладной, Истина, Истина);
			
			Если РезультатПоиска.Количество() Тогда					
				//&lt;В результате может быть более одной записи, например разделение заказа на две поставки&gt;
				Для каждого ЭлементМассива Из РезультатПоиска Цикл						
					//&lt;Убираем префикс и лидирующие нули из полученного номера накладной 1С&gt;
					НомерНакладной1С = ЭКОМ_ПолучитьНомерНаПечать(ЭлементМассива.Накладная, Истина, Истина);
					
					Если ЭлНомерНакладной = НомерНакладной1С Тогда
						ДанныеФайла.Вставить("ИдентификаторОснования", ЭлементМассива.ИдентификаторНакладной);
						ДанныеФайла.Вставить("Накладная1С", ЭлементМассива.Накладная); 
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Для каждого Стр Из СписокНакладные Цикл 
					Если ЗначениеЗаполнено(Стр.Накладная) Тогда							
						//&lt;Убираем префикс и лидирующие нули из полученного номера накладной 1С&gt;
						НомерНакладной1С = ЭКОМ_ПолучитьНомерНаПечать(Стр.Накладная, Истина, Истина);
						
						Если ЭлНомерНакладной = НомерНакладной1С Тогда 
							ДанныеФайла.Вставить("ИдентификаторОснования", Стр.ИдентификаторНакладной);
							ДанныеФайла.Вставить("Накладная1С", Стр.Накладная);
						КонецЕсли;	
					КонецЕсли;						
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//&lt;Если ID цепочки ORDER получен, тогда присваиваем его RECADV,
		//в этом случае создание цепочки по RECADV не производится&gt; 
		Если ЗначениеЗаполнено(ChainID_ORDER) Тогда
			ДанныеДокумента.Вставить("ИдентификаторЦепочки", ChainID_ORDER);
			ДанныеФайла.Вставить("СозданиеЦепочки", Ложь);
		КонецЕсли;
		
		НовЭлКоллекции 				   = ТаблицаНовДокументов.Добавить();	
		НовЭлКоллекции.ChainID		   = ДанныеДокумента.ИдентификаторЦепочки;		
		НовЭлКоллекции.DocUUID         = ДанныеДокумента.ИдентификаторДокумента;
		НовЭлКоллекции.ДатаФайла       = ДанныеДокумента.ДатаФайла;
		НовЭлКоллекции.ДанныеДокумента = ДанныеДокумента;
		
	КонецЦикла;
	
	//&lt;Очищаем коллекцию&gt;
	ТаблицаЗагруженных = Неопределено;
	
	#КонецОбласти
	
	#Область ПолучениеДанныхПоНеОбработаннымДокументам
	
	Индекс = МассивРезультатов.ВГраница();
	ТаблицаНеОбработанные = МассивРезультатов[Индекс].Выгрузить();
	
	//&lt;Получение данных для поиска сопоставленных УчастниковЭДО и Номенклатуры&gt;
	Если ТаблицаНеОбработанные.Количество() Тогда 
		
		ТаблицаНеОбработанные.Колонки.Добавить("HEAD");
		ТаблицаНеОбработанные.Колонки.Добавить("POSITION");	
		
		МассивУдаленияСтрок = Новый Массив;
		
		Для каждого СтрокаТаблицы Из ТаблицаНеОбработанные Цикл
			
			СтрокаНеОбработан = ТЗ_ДанныеИдентификация.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтрокаТаблицы);  
			
			Если СтрокаТаблицы.СрокОбработкиДокИстек Тогда 
				Продолжить;
			КонецЕсли;
			
			//&lt;Получение идентификационных данных по УчастникамЭДО&gt;
			СтрокаТаблицы.HEAD = СтрокаТаблицы.ХЗ_HEAD.Получить();
			ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтрокаТаблицы.HEAD);
			
			ЗначениеИзХранилища = СтрокаТаблицы.ХЗ_POSITION.Получить();
			
			Если ЗначениеИзХранилища &lt;&gt; Неопределено Тогда
				СтрокаТаблицы.POSITION = ЗначениеИзХранилища;	
			Иначе //&lt;Удаление записи из таблиц по DR_Документу в котром отсутсвуют данные POSITION&gt; 
				
				ТЗ_ДанныеИдентификация.Удалить(СтрокаНеОбработан);
				МассивУдаленияСтрок.Добавить(СтрокаТаблицы);
				
				ТекстЛогаСобытий = НСтр("ru = 'По %ПредставлениеДокументаXML% отсутсвуют данные реквизита POSITION. Документ обработан не будет!!!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ПредставлениеДокументаXML = СтрокаТаблицы.Представление;
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				
				Продолжить;
			КонецЕсли;
			
			//&lt;Получение идентификационных данных по Номенклатуре&gt;
			Для Счетчик = 0 По ЗначениеИзХранилища.ВГраница() Цикл
				
				СтруктураPOSITION = ЗначениеИзХранилища[Счетчик];
				
				Если ЗначениеЗаполнено(СтруктураPOSITION.Номенклатура) Тогда
					Продолжить;
				Иначе
					//&lt;Если по DR_Документу в POSITION больше одной позиции,
					//тогда в таблицу "ТЗ_ДанныеИдентификация" добавляем новую строку для каждой последующей позиции текущего DR_Документа&gt;
					Если Счетчик &lt;&gt; 0 Тогда
						НоваяСтрокаНеОбработан = ТЗ_ДанныеИдентификация.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНеОбработан, СтрокаНеОбработан);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНеОбработан, СтруктураPOSITION);
					Иначе //&lt;Иначе заполняем данные по позиции в первую добавленную строку таблицы "ТЗ_ДанныеИдентификация" текущего DR_Документа&gt;
						ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтруктураPOSITION);	
					КонецЕсли;    					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Стр Из МассивУдаленияСтрок Цикл
			ТаблицаНеОбработанные.Удалить(Стр);
		КонецЦикла;
		
		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_HEAD");
		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_POSITION");		
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗапросДанныхСопоставления	
	
	//&lt;Получение данных по сопоставленным УчастникамЭДО и Номенклатуре&gt;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.DR_Документ КАК DR_Документ,
	|	Таблица.BUYER КАК xmlКонтрагент,
	|	Таблица.RECIPIENT КАК xmlОрганизация,
	|	Таблица.DELIVERYPLACE КАК xmlТочкаДоставки,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ТочкаДоставки КАК ТочкаДоставки,
	|	Таблица.POSITIONNUMBER КАК POSITIONNUMBER,
	|	Таблица.PRODUCT КАК PRODUCT
	|ПОМЕСТИТЬ DR_Данные
	|ИЗ
	|	&amp;Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DR_ДАННЫЕ.DR_Документ КАК DR_Документ,
	|	DR_ДАННЫЕ.xmlКонтрагент КАК xmlКонтрагент,
	|	DR_ДАННЫЕ.xmlОрганизация КАК xmlОрганизация,
	|	DR_ДАННЫЕ.xmlТочкаДоставки КАК xmlТочкаДоставки,
	|	ЕСТЬNULL(DR_GLN_Организация.Объект, DR_ДАННЫЕ.Организация) КАК Организация,
	|	ЕСТЬNULL(DR_GLN_Контрагент.Объект, DR_ДАННЫЕ.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(DR_ТочкиДоставки.Объект, DR_ДАННЫЕ.ТочкаДоставки) КАК ТочкаДоставки,
	|	ЕСТЬNULL(DR_GLN_Контрагент.РасчетСумм, Ложь) КАК РасчетСумм
	|ПОМЕСТИТЬ DR_УчастиникЭДО
	|ИЗ
	|	DR_Данные КАК DR_ДАННЫЕ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Организация
	|		ПО DR_ДАННЫЕ.xmlОрганизация = DR_GLN_Организация.GLN
	|			И (НЕ DR_GLN_Организация.Объект ССЫЛКА Справочник.Контрагенты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Контрагент
	|		ПО DR_ДАННЫЕ.xmlКонтрагент = DR_GLN_Контрагент.GLN
	|			И (DR_GLN_Контрагент.Объект ССЫЛКА Справочник.Контрагенты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК DR_ТочкиДоставки
	|		ПО DR_ДАННЫЕ.xmlТочкаДоставки = DR_ТочкиДоставки.GLN
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	DR_Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_ДАННЫЕ.DR_Документ КАК DR_Документ,
	|	DR_ДАННЫЕ.xmlКонтрагент КАК xmlКонтрагент,
	|	DR_ДАННЫЕ.xmlОрганизация КАК xmlОрганизация,
	|	DR_ДАННЫЕ.xmlТочкаДоставки КАК xmlТочкаДоставки,
	|	DR_УчастиникЭДО.Организация КАК Организация,
	|	DR_УчастиникЭДО.Контрагент КАК Контрагент,
	|	DR_УчастиникЭДО.ТочкаДоставки КАК ТочкаДоставки,
	|	DR_УчастиникЭДО.РасчетСумм КАК РасчетСумм,
	|	DR_ДАННЫЕ.POSITIONNUMBER КАК POSITIONNUMBER,
	|	DR_ДАННЫЕ.PRODUCT КАК PRODUCT,
	|	ЕСТЬNULL(DR_НоменклатураКонтрагентов.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
	|	ЕСТЬNULL(DR_НоменклатураКонтрагентов.ХарактеристикаНоменклатуры, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	ЕСТЬNULL(DR_НоменклатураКонтрагентов.ЕдиницаНоменклатурыКонтрагента, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения
	|ИЗ
	|	DR_Данные КАК DR_ДАННЫЕ
	|		ЛЕВОЕ СОЕДИНЕНИЕ DR_УчастиникЭДО КАК DR_УчастиникЭДО
	|		ПО DR_ДАННЫЕ.DR_Документ = DR_УчастиникЭДО.DR_Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК DR_НоменклатураКонтрагентов
	|		ПО (DR_УчастиникЭДО.Контрагент = DR_НоменклатураКонтрагентов.Контрагент)
	|			И DR_ДАННЫЕ.PRODUCT = DR_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента";
	
	Запрос.УстановитьПараметр("Таблица", ТЗ_ДанныеИдентификация);
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатСопоставления = РезультатЗапроса.Выгрузить();
	РезультатСопоставления.Индексы.Добавить("DR_Документ");
	
	//&lt;Очищаем коллекцию&gt;
	ТЗ_ДанныеИдентификация = Неопределено;
	
	#КонецОбласти
	
	#Область ОбработкаДанныхНовыхДокументов
	
	//&lt;Выборка ранее загруженных (со статусом Обработан/НеОбработан) DR_Документов для поиска дублей&gt; 
	ЗапросПоискДублей = Новый Запрос;
	ЗапросПоискДублей.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанныхID.ChainID КАК ИдентификаторЦепочки,
	|	ТаблицаДанныхID.DocUUID КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ ВТ_ID
	|ИЗ
	|	&amp;ТаблицаДанныхID КАК ТаблицаДанныхID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DR_Документ.Ссылка КАК DR_Документ,
	|	ПРЕДСТАВЛЕНИЕ(DR_Документ.Ссылка) КАК Представление,
	|	DR_Документ.Статус КАК СтатусДокумента,
	|	ВТ_ID.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВТ_ID.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	ВТ_ID КАК ВТ_ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
	|		ПО ВТ_ID.ИдентификаторЦепочки = DR_Документ.ИдентификаторЦепочки
	|			И ВТ_ID.ИдентификаторДокумента = DR_Документ.ИдентификаторДокумента
	|			И (НЕ DR_Документ.ПометкаУдаления)";                                              
	
	ЗапросПоискДублей.УстановитьПараметр("ТаблицаДанныхID", ТаблицаНовДокументов.Скопировать(,"ChainID, DocUUID"));
	
	РезультатЗапроса 		 = ЗапросПоискДублей.Выполнить(); 
	ТаблицаDR_ДокументовПоID = РезультатЗапроса.Выгрузить();
	
	ТаблицаDR_ДокументовПоID.Индексы.Добавить("ИдентификаторЦепочки, ИдентификаторДокумента");
	
	//&lt;Выполняем сортировку документов в порядке их появления на FTP, т.е. в рамках цепочки по дате файла&gt;
	ТаблицаНовДокументов.Сортировать("ChainID, ДатаФайла");
	
	//&lt;ТаблицаНовДокументов - Тип ТаблицаЗначений&gt;
	//&lt;Поля&gt;
	//    &lt;ChainID 	- Тип Строка (Идентификатор цепочки)&gt;
	//    &lt;DocUUID 	- Тип Строка (Идентификатор документа)&gt;
	//    &lt;ДатаФайла - Тип Дата&gt;
	//    &lt;ДанныеДокумента 	- Тип Структура&gt;:
	//      	&lt;Ключ&gt;:
	//			- ДанныеФайла - Тип Структура
	//			- ИдентификаторДокумента - Тип Строка
	//			- ИдентификаторЦепочки - Тип Строка
	//			- DR_Документ - Тип ДокументСсылка.DR_Документ
	//			- Статус - Тип Строка
	//			- ДатаФайла - Тип Дата
	
	Для каждого Элемент ИЗ ТаблицаНовДокументов Цикл
		
		МассивНеСопоставленныхШК = Новый Массив;
		
		//&lt;Тип - Структура&gt;
		ДанныеДокумента 			= Элемент.ДанныеДокумента;
		ДанныеФайла				    = ДанныеДокумента.ДанныеФайла;  
		СтруктураРегистра_DRСобытия	= Новый Структура;
		СтруктураРегистра_DRЦепочки	= Новый Структура;
		ПараметрыОтбора				= Новый Структура;
		
		DR_ДокументСсылка = ДанныеДокумента.DR_Документ; 
		
		//&lt;Тип - Строка&gt;
		ИдентификаторДокумента	= ДанныеДокумента.ИдентификаторДокумента;
		ИдентификаторЦепочки	= ДанныеДокумента.ИдентификаторЦепочки;
		СтатусДокумента			= "НеОбработан";
		ТекстОшибки 			= "";
		Комментарий				= "";
		ЗаписьСообщение			= "";
		
		СоответствиеУчастникиЭДО   = Новый Соответствие;
		СоответствиеПоНоменклатуре = Новый Соответствие;
		
		//&lt;Параметры отбора для поиска дублей&gt;
		ПараметрыОтбора.Вставить("ИдентификаторЦепочки"		, ИдентификаторЦепочки);
		ПараметрыОтбора.Вставить("ИдентификаторДокумента"	, ИдентификаторДокумента);
		
		//&lt;Поиск дублей. РезультатПоиска - Массив строк таблицы значений&gt;
		РезультатПоиска = ТаблицаDR_ДокументовПоID.НайтиСтроки(ПараметрыОтбора);
		
		//&lt;Проверка на дубли по DR_Документам со статусом "Обработан" или "НеОбработан" найденных по установленному отбору&gt;
		ЭлементМассива = РезультатПоиска[0];
		
		Если ВРег(ЭлементМассива.СтатусДокумента) = "НЕОБРАБОТАН" 
			ИЛИ ВРег(ЭлементМассива.СтатусДокумента) = "ОБРАБОТАН" Тогда 
			
			//&lt;Для Нового DR_Документа изменяем статус&gt;
			DR_ДокументОбъект = DR_ДокументСсылка.ПолучитьОбъект();
			DR_ДокументОбъект.Статус = "Архивный";
			DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
			DR_ДокументОбъект.Комментарий = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление;
			
			ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
			
			НовСтр = ТабличнаяЧасть.Добавить();
			НовСтр.Реквизит = "НеОбрабатывать";
			НовСтр.Значение = Истина;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Причина = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление; 
			ТекстЛогаСобытий = Строка(DR_ДокументСсылка) + " не обработан. Причина: " + Причина;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;					
		КонецЕсли;
		
		МассивСопоставленныхДанных = РезультатСопоставления.НайтиСтроки(Новый Структура("DR_Документ", DR_ДокументСсылка));
		УчастникиЭДО = МассивСопоставленныхДанных[0];
		
		СтруктураУчастникиЭДО = Новый Структура("Контрагент, Организация, ТочкаДоставки");
		
		//&lt;Заполнение УчастниковЭДО&gt;
		Для каждого ЭлСтруктуры Из СтруктураУчастникиЭДО Цикл
			
			ИмяУчастника = ЭлСтруктуры.Ключ; 
			
			Если ЗначениеЗаполнено(УчастникиЭДО[ИмяУчастника]) Тогда
				ДанныеФайла[ИмяУчастника] = УчастникиЭДО[ИмяУчастника];	
			Иначе
				
				GLN = УчастникиЭДО["xml" + ИмяУчастника];
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
				+ "Не заполнен(а) " + ИмяУчастника + " (" + GLN + ")";
				
				СоотвествиеУчастник = Новый Соответствие;
				СоотвествиеУчастник.Вставить(ИмяУчастника + "_" + GLN, GLN);					
				СоответствиеУчастникиЭДО.Вставить(ИмяУчастника + "_", СоотвествиеУчастник);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда 
			ДанныеФайла.ЗаполнитьУчастниковЭДО = Ложь;	
		КонецЕсли;
		
		ТабНоменклатура = Новый ТаблицаЗначений;			
		ТабНоменклатура.Колонки.Добавить("PRODUCT");
		ТабНоменклатура.Колонки.Добавить("Номенклатура");
		ТабНоменклатура.Колонки.Добавить("Характеристика");
		ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения");
		
		Для Каждого СтрокаТабЗнч Из МассивСопоставленныхДанных Цикл 
			ЗаполнитьЗначенияСвойств(ТабНоменклатура.Добавить(), СтрокаТабЗнч);
		КонецЦикла;
		
		//&lt;Поиск и заполнение номенклатуры&gt;
		Если ЗначениеЗаполнено(ДанныеФайла.Контрагент) Тогда
			
			ДанныеФайла.ПервичныйПоискНоменклатуры = Ложь;
			
			НакладнаяНайдена = Ложь;
			
			//&lt;Структура комментария&gt;
			СтрукКомментарий = Новый Структура;
			СтрукКомментарий.Вставить("НакладнаяНеНайдена"				, "");
			СтрукКомментарий.Вставить("ПозицииНетВНакладной"			, "");
			СтрукКомментарий.Вставить("ЗаголовокПоСтрочногоРасхождения"	, "");
			СтрукКомментарий.Вставить("ПоСтрочноеРасхождение"			, "");
			СтрукКомментарий.Вставить("РасхождениеПоКолПозиций"			, "");
			
			//&lt;Получение данных табличной части Накладной&gt;
			Если ДанныеФайла.Свойство("Накладная1С") Тогда
				
				НакладнаяСсылка = ДанныеФайла.Накладная1С;
				
				//&lt;Определение имени табличной части Накладной, взависимости от конфигурации&gt;	
				Если НакладнаяСсылка.Метаданные().ТабличныеЧасти.Найти("Запасы") = Неопределено Тогда 
					ИмяТабЧасти = "Товары";
				Иначе
					ИмяТабЧасти = "Запасы";
				КонецЕсли;
				
				ТЧНакладная = НакладнаяСсылка[ИмяТабЧасти].Выгрузить(, "Номенклатура, Количество");					
				
				//&lt;Группировка на случай партионного учета&gt;
				ТЧНакладная.Свернуть("Номенклатура", "Количество");
				
				НакладнаяНайдена = Истина;
				
			КонецЕсли;
			
			Если НакладнаяНайдена Тогда
				
				//&lt;Сравнение количества позиций Накладной и RECADV&gt;
				Если ТЧНакладная.Количество() &lt;&gt; ДанныеФайла.POSITION.Количество() Тогда
					СтрукКомментарий.РасхождениеПоКолПозиций = "Количество позиций RECADV и Накладной отличаются, необходимо выполнить сверку вручную.";
				КонецЕсли;
				
			Иначе					
				СтрукКомментарий.НакладнаяНеНайдена = "Накладная не найдена.";						
			КонецЕсли;
			
			ИтогСуммаНДС = 0;     //Общая Сумма НДС
			ИтогСуммаБезНДС = 0;  //Общая Сумма без НДС
			ИтогСуммаСНДС = 0; 	  //Общая Сумма с НДС
			
			Для каждого СтрСтруктура Из ДанныеФайла.POSITION Цикл
				
				НайденнаяСтрока = ТабНоменклатура.Найти(СтрСтруктура.PRODUCT, "PRODUCT");
				
				//&lt;Построчный расчет сумм&gt;
				Если УчастникиЭДО.РасчетСумм Тогда
					
					ЦенаБезНДС		= СтрСтруктура.PRICE;  			
					ЦенаСНДС   		= СтрСтруктура.PRICEWITHVAT;				
					ПринятоеКол 	= СтрСтруктура.ACCEPTEDQUANTITY;	
					
					СуммаСНДС 	= СтрСтруктура.AMOUNTWITHVAT;  	
					СуммаНДС	= СтрСтруктура.VATAMOUNT;  		
					СуммаБезНДС = СтрСтруктура.AMOUNT; 			
					
					Если ЦенаСНДС &lt;&gt; 0 Тогда
						СуммаСНДС = Окр(ЦенаСНДС * ПринятоеКол, 2);	
					КонецЕсли;
					
					Если ЦенаБезНДС &lt;&gt; 0 Тогда
						СуммаБезНДС = Окр(ЦенаБезНДС * ПринятоеКол, 2);
					КонецЕсли;
					
					Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
						СуммаНДС    = Окр(СуммаСНДС - СуммаБезНДС, 2);
					КонецЕсли;
					
					СтрСтруктура.AMOUNTWITHVAT 	= СуммаСНДС;  	
					СтрСтруктура.VATAMOUNT		= СуммаНДС;  		
					СтрСтруктура.AMOUNT 			= СуммаБезНДС; 			
					
					Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 И СуммаНДС &lt;&gt; 0 Тогда
						
						ИтогСуммаНДС    = ИтогСуммаНДС + СуммаНДС;
						ИтогСуммаБезНДС = ИтогСуммаБезНДС + СуммаБезНДС;
						ИтогСуммаСНДС	= ИтогСуммаСНДС + СуммаСНДС;
						
					ИначеЕсли СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
						
						СуммаНДС = СуммаСНДС - СуммаБезНДС;
						
						ИтогСуммаНДС    = ИтогСуммаНДС + СуммаНДС;
						ИтогСуммаБезНДС = ИтогСуммаБезНДС + СуммаБезНДС;
						ИтогСуммаСНДС 	= ИтогСуммаСНДС + СуммаСНДС;
						
					КонецЕсли;
					
				КонецЕсли;
				
				//&lt;Заполнение номенклатуры&gt;	
				Если ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда
					
					ЗаполнитьЗначенияСвойств(СтрСтруктура, НайденнаяСтрока, "Номенклатура, Характеристика, ЕдиницаИзмерения");
					
					Если НакладнаяНайдена Тогда 
						
						СтрокаТЧ = ТЧНакладная.Найти(НайденнаяСтрока.Номенклатура, "Номенклатура"); 
						
						Если СтрокаТЧ &lt;&gt; Неопределено Тогда    
							СтрСтруктура.КоличествоИзРТУ = СтрокаТЧ.Количество;
						Иначе								
							СтрукКомментарий.ПозицииНетВНакладной = "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Отсутсвует в накладной";	
						КонецЕсли;		
						
					КонецЕсли;
					
				Иначе
					
					//&lt;Заполнение массива штрихкодами по которым не найдено сопоставление&gt;
					МассивНеСопоставленныхШК.Добавить(СтрСтруктура.PRODUCT);
					
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
					+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
					+ "(" + СтрСтруктура.PRODUCT + ")";
					
					Код = ?(ЗначениеЗаполнено(СтрСтруктура.PRODUCT), СтрСтруктура.PRODUCT, СтрСтруктура.PRODUCTIDBUYER) + "_" + ДанныеФайла.HEAD.BUYER;
					
					СоответствиеПоНоменклатуре.Вставить("АртикулНоменклатурыКонтрагента_"      + Код, СтрСтруктура.PRODUCTIDSUPPLIER);
					СоответствиеПоНоменклатуре.Вставить("КодНоменклатурыКонтрагента_"          + Код, СтрСтруктура.PRODUCTIDBUYER);
					СоответствиеПоНоменклатуре.Вставить("ШтрихКодНоменклатурыКонтрагента_"     + Код, СтрСтруктура.PRODUCT);
					СоответствиеПоНоменклатуре.Вставить("НаименованиеНоменклатурыКонтрагента_" + Код, СтрСтруктура.DESCRIPTION);
					СоответствиеПоНоменклатуре.Вставить("ЕдиницаНоменклатурыКонтрагента_"      + Код, СтрСтруктура.ЕдиницаИзмерения);
					СоответствиеПоНоменклатуре.Вставить("Контрагент_"                          + Код, ДанныеФайла.Контрагент);
					СоответствиеПоНоменклатуре.Вставить("xmlЕдиницаИзмерения_"                 + Код, СтрСтруктура.ACCEPTEDUNIT);
					
				КонецЕсли;
				
				//&lt;Определение значения поставленного количества&gt;
				КолПоставленное = 0;
				
				//&lt;Если в RECADV передан элемент DELIVERQUANTITY, тогда значение берем из элемента&gt;
				Если СтрСтруктура.DELIVERQUANTITY &lt;&gt; 0 Тогда
					КолПоставленное = СтрСтруктура.DELIVERQUANTITY;
				ИначеЕсли ЗначениеЗаполнено(СтрСтруктура.КоличествоИзРТУ) Тогда //&lt;Иначе пробуем получить значение из Накладной&gt;
					КолПоставленное = СтрСтруктура.КоличествоИзРТУ;
				КонецЕсли;
				
				//&lt;Проверяются кейсы, когда поставляемое количество передано либо в RECADV, либо получено из накладной&gt;
				//&lt;Условие "ИначеЕсли" покрывает кейс: когда в RECADV не передано DELIVERQUANTITY (в нашем случае равно 0) и накладная найдена,
				//но не сопоставлена номенкатура. Тогда попытка повторной обработки сравнения принятого и поставленного количества,
				//будет выполнена в процессе повторной обработки текущего DR_Документа&gt;
				Если КолПоставленное &lt;&gt; 0 Тогда
					
					//&lt;Сравнение принятого количества с поставленным&gt;
					Если СтрСтруктура.ACCEPTEDQUANTITY &lt;&gt; КолПоставленное Тогда
						
						ТекстПоСтрочноеРасхождение = СтрукКомментарий.ПоСтрочноеРасхождение;
						
						Текст = "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Штрихкод " + СтрСтруктура.PRODUCT 
						+ ?(ЗначениеЗаполнено(СтрСтруктура.DESCRIPTION), " (" + СтрСтруктура.DESCRIPTION + ")", "") 
						+ " принято - " + Формат(СтрСтруктура.ACCEPTEDQUANTITY,"ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0") 
						+ ", поставлено - " + Формат(КолПоставленное,"ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0");
						
						ТекстПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение + ?(ЗначениеЗаполнено(ТекстПоСтрочноеРасхождение), Символы.ПС, "") + Текст;
						
						СтрукКомментарий.ПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение;
						
						Если ПустаяСтрока(СтрукКомментарий.ЗаголовокПоСтрочногоРасхождения) Тогда
							СтрукКомментарий.ЗаголовокПоСтрочногоРасхождения = "В следующих позициях есть расхождения:";
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НЕ НакладнаяНайдена Тогда
					
					ТекстПоСтрочноеРасхождение = СтрукКомментарий.ПоСтрочноеРасхождение;
					
					Текст = "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Штрихкод " + СтрСтруктура.PRODUCT 
					+ ?(ЗначениеЗаполнено(СтрСтруктура.DESCRIPTION), " (" + СтрСтруктура.DESCRIPTION + ")", "") 
					+ " принято - " + Формат(СтрСтруктура.ACCEPTEDQUANTITY,"ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0")
					+ ". Поставленное количество определить не удалось, выполните сверку вручную.";
					
					ТекстПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение + ?(ЗначениеЗаполнено(ТекстПоСтрочноеРасхождение), Символы.ПС, "") + Текст;
					
					СтрукКомментарий.ПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение;
					
				КонецЕсли;
			КонецЦикла;
			
			//&lt;Подготовка (сборка) текста комментария&gt;
			Для Каждого Текст Из СтрукКомментарий Цикл					
				Комментарий = Комментарий + ?(ЗначениеЗаполнено(Текст.Значение), Текст.Значение + Символы.ПС, "");					
			КонецЦикла;
			
			Если УчастникиЭДО.РасчетСумм Тогда
				
				Если ИтогСуммаНДС &lt;&gt; 0 Тогда
					ДанныеФайла.TOTALVAT = ИтогСуммаНДС;	
				КонецЕсли;
				
				Если ИтогСуммаБезНДС &lt;&gt; 0 Тогда
					ДанныеФайла.TOTALAMOUNT = ИтогСуммаБезНДС;
				КонецЕсли;
				
				Если ИтогСуммаСНДС &lt;&gt; 0 Тогда 
					ДанныеФайла.TOTALAMOUNTWITHVAT = ИтогСуммаСНДС;	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе				
			//&lt;Получение всех штрихкодов по документу, т.к. Контрагент не сопоставлен&gt;
			МассивНеСопоставленныхШК = ТабНоменклатура.ВыгрузитьКолонку("PRODUCT");				
		КонецЕсли;
		
		//&lt;Изменение статуса DR_Документа&gt;
		Если ПустаяСтрока(ТекстОшибки) Тогда
			СтатусДокумента = "Обработан";
		КонецЕсли;
		
		//&lt;Добавление записей в РС ЭКОМ_ЗначениеДополнительныхКонстант по не сопоставленным данным&gt;
		Если СоответствиеУчастникиЭДО.Количество() Тогда				    
			Для Каждого Участник Из СоответствиеУчастникиЭДО Цикл
				НастройкиПараметровЗаписатьНабором(Участник.Значение, Участник.Ключ);
			КонецЦикла;			
		КонецЕсли;
		
		Если СоответствиеПоНоменклатуре.Количество() Тогда
			НастройкиПараметровЗаписатьНабором(СоответствиеПоНоменклатуре    , "Номенклатура_");
		КонецЕсли;
		
		//&lt;Заполнение реквизитов и табл. части DR_Документа данными&gt;
		DR_ДокументОбъект 						= DR_ДокументСсылка.ПолучитьОбъект();
		DR_ДокументОбъект.ИдентификаторЦепочки	= ИдентификаторЦепочки;
		DR_ДокументОбъект.ДанныеФайла 			= Новый ХранилищеЗначения(Неопределено);
		DR_ДокументОбъект.Статус 				= СтатусДокумента;
		DR_ДокументОбъект.Сообщение 			= ТекстОшибки;
		DR_ДокументОбъект.Комментарий			= Комментарий;
		DR_ДокументОбъект.Пользователь 			= НайтиТекущегоПользователя();
		ТЧ_Документа 							= DR_ДокументОбъект.ДополнительныеРеквизиты;
		
		Для каждого ЭлСтруктуры Из ДанныеФайла Цикл
			
			НоваяСтрока = ТЧ_Документа.Добавить();
			НоваяСтрока.Реквизит = ЭлСтруктуры.Ключ;
			
			Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Массив") ИЛИ ТипЗнч(ЭлСтруктуры.Значение) = Тип("Структура") Тогда					
				Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
				НоваяСтрока.ХранилищеЗначения = Хранилище;
			Иначе
				НоваяСтрока.Значение = ЭлСтруктуры.Значение;				
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;Добавление в табл. часть "Дополнительные реквизиты" DR_Документа записей по не сопоставленным ШК&gt;
		Для каждого Штрихкод Из МассивНеСопоставленныхШК Цикл				
			
			НоваяСтрока = ТЧ_Документа.Добавить();
			НоваяСтрока.Реквизит = "ШК_НеСопоставлен";
			НоваяСтрока.Значение = Штрихкод;
			
		КонецЦикла;
		
		//&lt;Определение текста сообщения DR_События по DR_Документу&gt;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьСообщение = "В документе есть ошибка";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Комментарий) Тогда
			Если ПустаяСтрока(ЗаписьСообщение) Тогда
				ЗаписьСообщение = "Документ содержит комментарий";
			Иначе
				ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка				
			
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			////////////////////////////&lt;Создание записи в РС DR_События&gt;/////////////////////////////////////
			
			//&lt;Заполнение структуры для DR_События&gt;
			СтруктураРегистра_DRСобытия.Вставить("ДатаСообщения"			, ДанныеДокумента.ДатаСообщения);
			СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, ИдентификаторЦепочки);
			СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
			СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
			СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "RECADV_Входящий");
			СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, ИдентификаторДокумента);
			СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
			СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
			
			Если ДанныеФайла.Свойство("ИдентификаторОснования") Тогда 
				СтруктураРегистра_DRСобытия.Вставить("ИдентификаторОснования"	, ДанныеФайла.ИдентификаторОснования);	
			КонецЕсли;
			
			НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
			НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
			НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
			НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
			НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
			НЗ_DRСобытия.Прочитать();
			
			Если НЗ_DRСобытия.Количество() = 0 Тогда
				НоваяЗапись = НЗ_DRСобытия.Добавить();
			Иначе
				НоваяЗапись = НЗ_DRСобытия[0];
			КонецЕсли;
			
			Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
				НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
			КонецЦикла;
			
			НЗ_DRСобытия.Записать();
			
			////////////////////////////&lt;Создание записи в РС DR_ЦепочкиДокументов&gt;//////////////////////////////////
			Если ДанныеФайла.СозданиеЦепочки Тогда
				
				//&lt;Получение ORDERNUMBER, (не)переданного в RECADV&gt;
				НомерЗаказа = ?(ЗначениеЗаполнено(ДанныеФайла.ORDERNUMBER), ДанныеФайла.ORDERNUMBER, "");
				
				//&lt;Заполнение структуры для DR_ЦепочкиДокументов&gt;
				СтруктураРегистра_DRЦепочки.Вставить("ДатаЗаказа"			, ДанныеФайла.ДатаЗаказа);
				СтруктураРегистра_DRЦепочки.Вставить("ИдентификаторЦепочки"	, ИдентификаторЦепочки);
				СтруктураРегистра_DRЦепочки.Вставить("ДатаПоставки"			, ДанныеФайла.ДатаУвОбОтгрузке);
				СтруктураРегистра_DRЦепочки.Вставить("НомерЗаказа"			, НомерЗаказа);
				
				Если ЗначениеЗаполнено(ДанныеФайла["Организация"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("Организация"			, ДанныеФайла.Организация);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеФайла["Контрагент"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("Контрагент"			, ДанныеФайла.Контрагент);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеФайла["ТочкаДоставки"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("ТочкаДоставки"		, ДанныеФайла.ТочкаДоставки);
				КонецЕсли;
				
				НЗ_DRЦепочкиДокументов = РегистрыСведений.DR_ЦепочкиДокументов.СоздатьНаборЗаписей();
				НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(СтруктураРегистра_DRЦепочки.НомерЗаказа);
				НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(СтруктураРегистра_DRЦепочки.ДатаЗаказа);
				НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(СтруктураРегистра_DRЦепочки.ДатаПоставки);
				НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
				
				НЗ_DRЦепочкиДокументов.Прочитать();
				
				Если НЗ_DRЦепочкиДокументов.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRЦепочкиДокументов.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRЦепочкиДокументов[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистра_DRЦепочки Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRЦепочкиДокументов.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение				
			ОтменитьТранзакцию();
			
			ТекстЛогаСобытий = НСтр("ru = 'Формирование записей в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ПредставлениеДокументаXML = "RECADV (Уведомление о приемке)" + " № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D");
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
			ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
			
		КонецПопытки;		
		
	КонецЦикла;
	
	//&lt;Очищаем коллекцию&gt;
	ТаблицаНовДокументов = Неопределено;
	
	#КонецОбласти
	
	#Область ОбработкаДанныхПоНеОбработаннымДокументам
	
	Для Каждого СтрокаТаблицы Из ТаблицаНеОбработанные Цикл 
		
		МассивСопоставленныхШК 		= Новый Массив;
		СтруктураРегистра_DRСобытия = Новый Структура;
		СтруктураРегистра_DRЦепочки	= Новый Структура;
		СоответствиеПоНоменклатуре 	= Новый Соответствие;
		
		МодификацияЦепочки	 	= Ложь;
		DRДокументМодифицирован = Ложь;
		
		СтатусДокумента	= "НеОбработан";
		Комментарий		= "";
		ТекстОшибки 	= "";
		ЗаписьСообщение	= "";
		
		DR_ДокументСсылка 	= СтрокаТаблицы.DR_Документ;
		
		//&lt;Если возраст RECADV больше срока обработки DR_Документов со статусом "Не обработан"&gt;
		//&lt;Тогда таким документам изменяем статус и переходим к обработке следующего DR_Документа&gt;
		Если СтрокаТаблицы.СрокОбработкиДокИстек Тогда
			
			DR_ДокументОбъект 			  = DR_ДокументСсылка.ПолучитьОбъект();
			DR_ДокументОбъект.Статус 	  = "Архивный";
			DR_ДокументОбъект.Комментарий = Комментарий + ?(ЗначениеЗаполнено(Комментарий), Символы.ПС, "")
			+ "Документу изменен статус на ""Архивный"" по причине: Срок повторной обработки документа истек.";
			
			НачатьТранзакцию();
			
			Попытка						
				
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				МЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьМенеджерЗаписи();
				МЗ_DRСобытия.ИдентификаторЦепочки 	= СтрокаТаблицы.ИдентификаторЦепочки;
				МЗ_DRСобытия.Документ 				= DR_ДокументСсылка;
				МЗ_DRСобытия.ВидДокумента 			= "RECADV_Входящий";
				МЗ_DRСобытия.Идентификатор 			= СтрокаТаблицы.ИдентификаторДокумента;
				
				МЗ_DRСобытия.Прочитать();
				
				Если МЗ_DRСобытия.Выбран() Тогда							
					МЗ_DRСобытия.ДатаЗаписи = ТекущаяДата();
					МЗ_DRСобытия.Статус = "Архивный";
					МЗ_DRСобытия.Записать();							
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				
				ПредставлениеДокументаXML = "RECADV (Уведомление о приемке)" + " № " + СтрокаТаблицы.NUMBER + " от " + Формат(СтрокаТаблицы.ДатаЭлектронногоДокумента, "ДЛФ=D");
				ТекстЛогаСобытий = "Изменение статуса " + ПредставлениеДокументаXML + ", срок обработки которого истек, не выполнено. По причине - " + ОписаниеОшибки();
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);						
				ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки - " + ОписаниеОшибки());
				
			КонецПопытки;
			
			Продолжить;					
		КонецЕсли;
		
		МассивСопоставленныхДанных = РезультатСопоставления.НайтиСтроки(Новый Структура("DR_Документ", DR_ДокументСсылка));
		УчастникиЭДО = МассивСопоставленныхДанных[0];
		
		СтруктураУчастникиЭДО = Новый Структура("Контрагент, Организация, ТочкаДоставки");
		
		//&lt;Заполнение УчастниковЭДО&gt;
		Для каждого ЭлСтруктуры Из СтруктураУчастникиЭДО Цикл
			
			ИмяУчастника = ЭлСтруктуры.Ключ; 
			
			Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяУчастника]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(УчастникиЭДО[ИмяУчастника]) Тогда
				
				СтрокаТаблицы[ИмяУчастника] = УчастникиЭДО[ИмяУчастника];
				
				МодификацияЦепочки	 	= Истина;
				DRДокументМодифицирован = Истина;
				
			Иначе
				
				GLN = УчастникиЭДО["xml" + ИмяУчастника];
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
				+ "Не заполнен(а) " + ИмяУчастника + " (" + GLN + ")";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда 
			СтрокаТаблицы.ЗаполнитьУчастниковЭДО = Ложь;	
		КонецЕсли;
		
		ТабНоменклатура = Новый ТаблицаЗначений;			
		ТабНоменклатура.Колонки.Добавить("PRODUCT");
		ТабНоменклатура.Колонки.Добавить("Номенклатура");
		ТабНоменклатура.Колонки.Добавить("Характеристика");
		ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения");
		
		Для Каждого СтрокаТабЗнч Из МассивСопоставленныхДанных Цикл 
			НоваяСтрока = ТабНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЗнч);
		КонецЦикла;
		
		//&lt;Структура комментария&gt;
		СтрукКомментарий = Новый Структура;
		СтрукКомментарий.Вставить("НакладнаяНеНайдена"				, "");
		СтрукКомментарий.Вставить("ПозицииНетВНакладной"			, "");
		СтрукКомментарий.Вставить("ЗаголовокПоСтрочногоРасхождения"	, "");
		СтрукКомментарий.Вставить("ПоСтрочноеРасхождение"			, "");
		СтрукКомментарий.Вставить("РасхождениеПоКолПозиций"			, "");
		
		//&lt;Заполнение сопоставленной номенклатуры&gt;
		Если СтрокаТаблицы.ШК_Сопоставлен Тогда
			
			НакладнаяНайдена = Ложь;
			
			//&lt;Получение данных табличной части Накладной&gt;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Накладная1С) Тогда
				
				НакладнаяСсылка = СтрокаТаблицы.Накладная1С;
				
				//&lt;Определение имени табличной части Накладной, взависимости от конфигурации&gt;
				Если НакладнаяСсылка.Метаданные().ТабличныеЧасти.Найти("Запасы") = Неопределено Тогда 
					ИмяТабЧасти = "Товары";
				Иначе
					ИмяТабЧасти = "Запасы";
				КонецЕсли;
				
				ТЧНакладная = НакладнаяСсылка[ИмяТабЧасти].Выгрузить(, "Номенклатура, Количество");					
				
				//&lt;Группировка на случай партионного учета&gt;
				ТЧНакладная.Свернуть("Номенклатура", "Количество");
				
				НакладнаяНайдена = Истина;
				
			КонецЕсли;
			
			Если НакладнаяНайдена Тогда
				
				//&lt;Сравнение количества позиций Накладной и RECADV&gt;
				Если ТЧНакладная.Количество() &lt;&gt; СтрокаТаблицы.POSITION.Количество() Тогда
					СтрукКомментарий.РасхождениеПоКолПозиций = "Количество позиций RECADV и Накладной отличаются, необходимо выполнить сверку вручную.";
				КонецЕсли;
				
			Иначе					
				СтрукКомментарий.НакладнаяНеНайдена = "Накладная не найдена.";						
			КонецЕсли;
			
			ИтогСуммаНДС = 0;     //Общая Сумма НДС
			ИтогСуммаБезНДС = 0;  //Общая Сумма без НДС
			ИтогСуммаСНДС = 0; 	  //Общая Сумма с НДС
			
			Для каждого СтрСтруктура Из СтрокаТаблицы.POSITION Цикл
				
				НайденнаяСтрока = ТабНоменклатура.Найти(СтрСтруктура.PRODUCT, "PRODUCT");
				
				//&lt;Построчный расчет сумм&gt;
				Если УчастникиЭДО.РасчетСумм Тогда
					
					ЦенаБезНДС		= СтрСтруктура.PRICE;  			
					ЦенаСНДС   		= СтрСтруктура.PRICEWITHVAT;				
					ПринятоеКол 	= СтрСтруктура.ACCEPTEDQUANTITY;	
					
					СуммаСНДС 	= СтрСтруктура.AMOUNTWITHVAT;  	
					СуммаНДС	= СтрСтруктура.VATAMOUNT;  		
					СуммаБезНДС = СтрСтруктура.AMOUNT; 			
					
					Если ЦенаСНДС &lt;&gt; 0 Тогда
						СуммаСНДС = Окр(ЦенаСНДС * ПринятоеКол, 2);	
					КонецЕсли;
					
					Если ЦенаБезНДС &lt;&gt; 0 Тогда
						СуммаБезНДС = Окр(ЦенаБезНДС * ПринятоеКол, 2);
					КонецЕсли;
					
					Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
						СуммаНДС    = Окр(СуммаСНДС - СуммаБезНДС, 2);
					КонецЕсли;
					
					СтрСтруктура.AMOUNTWITHVAT 	= СуммаСНДС;  	
					СтрСтруктура.VATAMOUNT		= СуммаНДС;  		
					СтрСтруктура.AMOUNT 			= СуммаБезНДС; 			
					
					Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 И СуммаНДС &lt;&gt; 0 Тогда
						
						ИтогСуммаНДС    = ИтогСуммаНДС + СуммаНДС;
						ИтогСуммаБезНДС = ИтогСуммаБезНДС + СуммаБезНДС;
						ИтогСуммаСНДС	= ИтогСуммаСНДС + СуммаСНДС;
						
					ИначеЕсли СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
						
						СуммаНДС = СуммаСНДС - СуммаБезНДС;
						
						ИтогСуммаНДС    = ИтогСуммаНДС + СуммаНДС;
						ИтогСуммаБезНДС = ИтогСуммаБезНДС + СуммаБезНДС;
						ИтогСуммаСНДС 	= ИтогСуммаСНДС + СуммаСНДС;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрСтруктура.Номенклатура) Тогда
					
					Если НайденнаяСтрока &lt;&gt; Неопределено И ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда					
						
						ЗаполнитьЗначенияСвойств(СтрСтруктура, НайденнаяСтрока, "Номенклатура, Характеристика, ЕдиницаИзмерения");
						DRДокументМодифицирован = Истина;
						
						//&lt;Заполнение массива сопоставленными ШК. С целью их исключения из повторной обработки&gt;
						МассивСопоставленныхШК.Добавить(СтрСтруктура.PRODUCT);
						
						//&lt;Заполнение количества из Накладной по сопоставленной номенклатуре&gt; 
						Если НакладнаяНайдена Тогда 
							
							СтрокаТЧ = ТЧНакладная.Найти(НайденнаяСтрока.Номенклатура,"Номенклатура"); 
							
							Если СтрокаТЧ &lt;&gt; Неопределено Тогда    
								СтрСтруктура.КоличествоИзРТУ = СтрокаТЧ.Количество;
							Иначе
								СтрукКомментарий.ПозицииНетВНакладной = "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Отсутсвует в накладной";
							КонецЕсли;		
							
						КонецЕсли;
						
					Иначе							
						ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
						+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
						+ "(" + СтрСтруктура.PRODUCT + ")";							
					КонецЕсли;
					
				КонецЕсли;
				
				//&lt;Определение значения поставленного количества&gt;
				КолПоставленное = 0;
				
				//&lt;Если в RECADV передан элемент DELIVERQUANTITY, тогда значение берем из элемента&gt;
				Если СтрСтруктура.DELIVERQUANTITY &lt;&gt; 0 Тогда
					КолПоставленное = СтрСтруктура.DELIVERQUANTITY;
				ИначеЕсли ЗначениеЗаполнено(СтрСтруктура.КоличествоИзРТУ) Тогда //&lt;Иначе пробуем получить значение из Накладной&gt;
					КолПоставленное = СтрСтруктура.КоличествоИзРТУ;
				КонецЕсли;
				
				//&lt;Проверяются кейсы, когда поставляемое количество передано либо в RECADV, либо получено из накладной&gt;
				//&lt;Условие "ИначеЕсли" покрывает кейс: когда в RECADV не передано DELIVERQUANTITY (в нашем случае равно 0) и накладная найдена,
				//но не сопоставлена номенкатура. Тогда попытка повторной обработки сравнения принятого и поставленного количества,
				//будет выполнена в процессе повторной обработки текущего DR_Документа&gt;
				Если КолПоставленное &lt;&gt; 0 Тогда
					
					//&lt;Сравнение принятого количества с поставленным&gt;
					Если СтрСтруктура.ACCEPTEDQUANTITY &lt;&gt; КолПоставленное Тогда
						
						ТекстПоСтрочноеРасхождение = СтрукКомментарий.ПоСтрочноеРасхождение;
						
						Текст = "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Штрихкод " + СтрСтруктура.PRODUCT 
						+ ?(ЗначениеЗаполнено(СтрСтруктура.DESCRIPTION), " (" + СтрСтруктура.DESCRIPTION + ")", "") 
						+ " принято - " + Формат(СтрСтруктура.ACCEPTEDQUANTITY,"ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0") 
						+ ", поставлено - " + Формат(КолПоставленное,"ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0");
						
						ТекстПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение + ?(ЗначениеЗаполнено(ТекстПоСтрочноеРасхождение), Символы.ПС, "") + Текст;
						
						СтрукКомментарий.ПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение;
						
						Если ПустаяСтрока(СтрукКомментарий.ЗаголовокПоСтрочногоРасхождения) Тогда
							СтрукКомментарий.ЗаголовокПоСтрочногоРасхождения = "В следующих позициях есть расхождения:";
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НЕ НакладнаяНайдена Тогда
					
					ТекстПоСтрочноеРасхождение = СтрукКомментарий.ПоСтрочноеРасхождение;
					
					Текст = "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Штрихкод " + СтрСтруктура.PRODUCT 
					+ ?(ЗначениеЗаполнено(СтрСтруктура.DESCRIPTION), " (" + СтрСтруктура.DESCRIPTION + ")", "") 
					+ " принято - " + Формат(СтрСтруктура.ACCEPTEDQUANTITY,"ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0")
					+ ". Поставленное количество определить не удалось, выполните сверку вручную.";
					
					ТекстПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение + ?(ЗначениеЗаполнено(ТекстПоСтрочноеРасхождение), Символы.ПС, "") + Текст;
					
					СтрукКомментарий.ПоСтрочноеРасхождение = ТекстПоСтрочноеРасхождение;
					
				КонецЕсли;				
				
			КонецЦикла;
			
			//&lt;Подготовка (сборка) текста комментария&gt;
			Для Каждого Текст Из СтрукКомментарий Цикл					
				Комментарий = Комментарий + ?(ЗначениеЗаполнено(Текст.Значение), Текст.Значение + Символы.ПС, "");					
			КонецЦикла;
			
			Если УчастникиЭДО.РасчетСумм Тогда
				
				Если ИтогСуммаНДС &lt;&gt; 0 Тогда
					СтрокаТаблицы.TOTALVAT = ИтогСуммаНДС;	
				КонецЕсли;
				
				Если ИтогСуммаБезНДС &lt;&gt; 0 Тогда
					СтрокаТаблицы.TOTALAMOUNT = ИтогСуммаБезНДС;
				КонецЕсли;
				
				Если ИтогСуммаСНДС &lt;&gt; 0 Тогда 
					СтрокаТаблицы.TOTALAMOUNTWITHVAT = ИтогСуммаСНДС;	
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) И СтрокаТаблицы.ПервичныйПоискНоменклатуры Тогда
				
				Для каждого СтрСтруктура Из СтрокаТаблицы.POSITION Цикл
					
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
					+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
					+ "(" + СтрСтруктура.PRODUCT + ")";	
					
					Код = ?(ЗначениеЗаполнено(СтрСтруктура.PRODUCT), СтрСтруктура.PRODUCT, СтрСтруктура.PRODUCTIDBUYER) + "_" + СтрокаТаблицы.HEAD.BUYER;
					
					СоответствиеПоНоменклатуре.Вставить("АртикулНоменклатурыКонтрагента_"      + Код, СтрСтруктура.PRODUCTIDSUPPLIER);
					СоответствиеПоНоменклатуре.Вставить("КодНоменклатурыКонтрагента_"          + Код, СтрСтруктура.PRODUCTIDBUYER);
					СоответствиеПоНоменклатуре.Вставить("ШтрихКодНоменклатурыКонтрагента_"     + Код, СтрСтруктура.PRODUCT);
					СоответствиеПоНоменклатуре.Вставить("НаименованиеНоменклатурыКонтрагента_" + Код, СтрСтруктура.DESCRIPTION);
					СоответствиеПоНоменклатуре.Вставить("ЕдиницаНоменклатурыКонтрагента_"      + Код, СтрСтруктура.ЕдиницаИзмерения);
					СоответствиеПоНоменклатуре.Вставить("Контрагент_"                          + Код, СтрокаТаблицы.Контрагент);
					СоответствиеПоНоменклатуре.Вставить("xmlЕдиницаИзмерения_"                 + Код, СтрСтруктура.ACCEPTEDUNIT);
					
				КонецЦикла; 
				
				СтрокаТаблицы.ПервичныйПоискНоменклатуры = Ложь;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				
				Для каждого СтрСтруктура Из СтрокаТаблицы.POSITION Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрСтруктура.Номенклатура) Тогда
						ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
						+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
						+ "(" + СтрСтруктура.PRODUCT + ")";
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		//&lt;Проверка на запись повторно обрабатываемого DR_Документа&gt;
		Если НЕ DRДокументМодифицирован Тогда 
			Продолжить; 	
		КонецЕсли;
		
		//&lt;Изменение статуса DR_Документа&gt;
		Если ПустаяСтрока(ТекстОшибки) Тогда
			СтатусДокумента = "Обработан";
		КонецЕсли;
		
		//&lt;Добавление записей в ЭКОМ_ЗначениеДополнительныхКонстант по не сопоставленным данным&gt;
		Если СоответствиеПоНоменклатуре.Количество() Тогда
			НастройкиПараметровЗаписатьНабором(СоответствиеПоНоменклатуре    , "Номенклатура_");
		КонецЕсли;
		
		//&lt;Обновление данных DR_Документа&gt;
		DR_ДокументОбъект 				= DR_ДокументСсылка.ПолучитьОбъект();
		DR_ДокументОбъект.Статус 		= СтатусДокумента;
		DR_ДокументОбъект.Сообщение 	= ТекстОшибки;
		DR_ДокументОбъект.Комментарий   = Комментарий;
		
		ТЧ_Документа = DR_ДокументОбъект.ДополнительныеРеквизиты;
		
		Для каждого Колонка Из ТаблицаНеОбработанные.Колонки Цикл
			
			ЗнчЯчейки = СтрокаТаблицы[Колонка.Имя];
			
			НайденнаяСтрока	= ТЧ_Документа.Найти(Колонка.Имя, "Реквизит");
			
			Если ТипЗнч(ЗнчЯчейки) = Тип("Массив") ИЛИ ТипЗнч(ЗнчЯчейки) = Тип("Структура") Тогда				
				Хранилище = Новый ХранилищеЗначения(ЗнчЯчейки);
				НайденнаяСтрока.ХранилищеЗначения = Хранилище;
			Иначе
				
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				Иначе
					НайденнаяСтрока.Значение = ЗнчЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;Удаление из табл. части "Дополнительные реквизиты" DR_Документа записей ШК_НеСопоставлен по сопоставленному штрихкоду&gt;
		Для Каждого Штрихкод Из МассивСопоставленныхШК Цикл 
			ТЧ_Документа.Удалить(ТЧ_Документа.Найти(Штрихкод, "Значение"));	
		КонецЦикла;
		
		//&lt;Определение текста сообщения DR_События по DR_Документу&gt;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьСообщение = "В документе есть ошибка";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Комментарий) Тогда
			Если ПустаяСтрока(ЗаписьСообщение) Тогда
				ЗаписьСообщение = "Документ содержит комментарий";
			Иначе
				ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка					
			
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			//&lt;Обновление данных DR_События&gt;
			Если ВРег(СтатусДокумента) = "ОБРАБОТАН" Тогда
				
				СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, СтрокаТаблицы.ИдентификаторЦепочки);
				СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
				СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
				СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "RECADV_Входящий");
				СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, СтрокаТаблицы.ИдентификаторДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				НоваяЗапись = НЗ_DRСобытия[0];
				
				Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
			КонецЕсли;
			
			//&lt;Обновление данных DR_ЦепочкиДокументов&gt;
			Если МодификацияЦепочки И СтрокаТаблицы.СозданиеЦепочки Тогда
				
				НомерЗаказа = ?(ЗначениеЗаполнено(СтрокаТаблицы.ORDERNUMBER), СтрокаТаблицы.ORDERNUMBER, "");
				
				СтруктураРегистра_DRЦепочки.Вставить("ДатаЗаказа"				, СтрокаТаблицы.ДатаЗаказа);
				СтруктураРегистра_DRЦепочки.Вставить("ИдентификаторЦепочки"		, СтрокаТаблицы.ИдентификаторЦепочки);
				СтруктураРегистра_DRЦепочки.Вставить("ДатаПоставки"				, СтрокаТаблицы.ДатаУвОбОтгрузке);
				СтруктураРегистра_DRЦепочки.Вставить("НомерЗаказа"				, НомерЗаказа);
				
				Если ЗначениеЗаполнено(СтрокаТаблицы["Организация"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("Организация"			, СтрокаТаблицы.Организация);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы["Контрагент"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("Контрагент"			, СтрокаТаблицы.Контрагент);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы["ТочкаДоставки"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("ТочкаДоставки"		, СтрокаТаблицы.ТочкаДоставки);
				КонецЕсли;
				
				НЗ_DRЦепочкиДокументов = РегистрыСведений.DR_ЦепочкиДокументов.СоздатьНаборЗаписей();
				НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(СтруктураРегистра_DRЦепочки.НомерЗаказа);
				НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(СтруктураРегистра_DRЦепочки.ДатаЗаказа);
				НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(СтруктураРегистра_DRЦепочки.ДатаПоставки);
				НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
				
				НЗ_DRЦепочкиДокументов.Прочитать();
				
				Если НЗ_DRЦепочкиДокументов.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRЦепочкиДокументов.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRЦепочкиДокументов[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистра_DRЦепочки Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRЦепочкиДокументов.Записать();				
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение					
			ОтменитьТранзакцию();
			
			ТекстЛогаСобытий = НСтр("ru = 'Изменение данных в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ПредставлениеДокументаXML = "RECADV (Уведомление о приемке)" + " № " + СтрокаТаблицы.NUMBER + " от " + Формат(СтрокаТаблицы.ДатаЭлектронногоДокумента, "ДЛФ=D");
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
			ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
	//&lt;Очищаем коллекцию&gt;
	ТаблицаНеОбработанные = Неопределено;
	
	#КонецОбласти
	
Иначе
	ТекстЛогаСобытий = "Ошибка получения Идентификаторов. Проверьте доступность сети и корректность заполнения профилей обмена.";
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
	
КонецЕсли;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокRecadvВходящиеПоставщик</presentation>
				<checkState>1</checkState>				
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Входящий RECADV</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ВходящийRECADV</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
	</row>
</ValueTree>