<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий INSDES</Value>
		<Value xsi:type="xs:string">ТипДокумента 			 = "INSDES";	
ТипДокументооборота      = "EDI";
ИдентификаторыУчастников = Новый Массив;
ЕстьОшибкаПолученияИдентификаторов = Ложь;

#Область ПолучениеИдентификаторовЦепочекПоВсемПрофилям	

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	ЭКОМ_GLN.ПрофильОбмена КАК ПрофильОбмена,
|	ЭКОМ_GLN.Объект КАК Организация,
|	ЭКОМ_GLN.GLN КАК GLN,
|	ЭКОМ_GLN.Ид_ОЭД КАК ИдУчастника
|ИЗ
|	РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
|ГДЕ
|	НЕ ЭКОМ_GLN.ПрофильОбмена = НЕОПРЕДЕЛЕНО
|	И НЕ ЭКОМ_GLN.ПрофильОбмена.ПометкаУдаления
|ИТОГИ ПО
|	ПрофильОбмена";

РезультатЗапроса = Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	
	ТаблицаДокументовAPI = Новый ТаблицаЗначений;
	ТаблицаДокументовAPI.Колонки.Добавить("chainID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("ftpFileName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаДокументовAPI.Колонки.Добавить("docUUID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("date"       , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Индексы.Добавить("docUUID");
	
	ВыборкаПрофильОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПрофильОбмена.Следующий() Цикл
		
		ПрофильОбмена = ВыборкаПрофильОбмена.ПрофильОбмена;
		
		#Область ПолучениеСпискаИдентификаторовПоПрофилюОбмена
		
		ВыборкаДетальныеЗаписи = ВыборкаПрофильОбмена.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИдентификаторыУчастников.Добавить(ВыборкаДетальныеЗаписи.GLN);	 
		КонецЦикла; 
		
		#КонецОбласти
		
		#Область ПодготовкаВспомогательныхДанныхДляRestApi
		
		ИмяСобытия = "Заполнение идентификаторов цепочки для входящих файлов " + ТипДокумента + ".";  		
		ЛимитСообщений = ЭКОМ_ОбщегоНазначения.Настройка_Параметр_Прочитать("ЭКОМ_ЛимитСообщенийRESTv2", "1000");
		ДанныеДляREST = Новый Структура("ЕстьОшибка, ВидДокумента, ДанныеПодключения, doc_type", Ложь, Неопределено, Неопределено, Неопределено); 
		
		ДанныеДляREST.ВидДокумента 	=  "INSDES_Входящий";	
		ДанныеДляREST.doc_type 		= "insdes";
		
		ДанныеАвторизации = ЭКОМ_ВзаимодействиеREST_API.ВыполнитьАвторизациюАтолл(ПрофильОбмена);
		
		Если Не ДанныеАвторизации.Получены Тогда
			ТекстЛогаСобытий = "Не удалось выполнить авторизацию. ";
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			ДанныеДляREST.ЕстьОшибка = Истина;
		КонецЕсли;	
		
		ДанныеПодключения = ЭКОМ_ВзаимодействиеREST_API.ПолучитьДанныеПодключенияEvolution(ПрофильОбмена);
		
		Если Не ДанныеПодключения.ПолученПрофиль ИЛИ Не ДанныеПодключения.ПолученТокен Тогда
			ТекстЛогаСобытий = "Не удалось получить данные для подключения к REST API. ";
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			ДанныеДляREST.ЕстьОшибка = Истина;
		КонецЕсли;
		
		ДанныеДляREST.ДанныеПодключения = ДанныеПодключения;	
		
		#КонецОбласти
		
		#Область ПолучитьИдентификаторыЦепочекВходящихФайлов
		
		Если Не ДанныеДляREST.ЕстьОшибка Тогда	
			НачалоПериода = Дата(1,1,1);
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	МАКСИМУМ(DR_События.ДатаСообщения) КАК ДатаПоследнегоСообщения
			|ИЗ
			|	РегистрСведений.DR_События КАК DR_События
			|ГДЕ
			|	DR_События.ВидДокумента = &amp;ВидДокумента
			|	И DR_События.АктуализироватьИдентификатор = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ВидДокумента", ДанныеДляREST.ВидДокумента);
			ВыборкаДата = Запрос.Выполнить().Выбрать();
			Если ВыборкаДата.Следующий() Тогда
				НачалоПериода = ВыборкаДата.ДатаПоследнегоСообщения;
			КонецЕсли;   
			
			МинимальнаяДата =  НачалоПериода;
			Сутки         = 60*60*24;
			ТекущаяДата   = ТекущаяДата(); 
			
			Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
				МинимальнаяДата = МинимальнаяДата - Сутки;
			Иначе
				МинимальнаяДата = ТекущаяДата - Сутки * 30;					
			КонецЕсли;         
			
			МаксимальнаяДата =  ТекущаяДата + Сутки; 
			
			НачалоПериода = Формат(МинимальнаяДата , "ДФ=yyyy-MM-dd");
			КонецПериода  = Формат(МаксимальнаяДата, "ДФ=yyyy-MM-dd");  	
			
			ВсеСообщенияAPI  = Новый Массив;
			
			Для Каждого ИдУчастника Из ИдентификаторыУчастников Цикл
				ПараметрыМетода = Новый Структура("gln, doc_type, time_from, time_to, limit, direction", ИдУчастника, ДанныеДляREST.doc_type, НачалоПериода, КонецПериода, ЛимитСообщений, "0");
				МассивСообщенийAPI = ЭКОМ_ВзаимодействиеREST_API.ПолучитьСписокВходящихДокументовEDI(ПараметрыМетода, ДанныеПодключения);
				
				Для Каждого Сообщение Из МассивСообщенийAPI Цикл
					ВсеСообщенияAPI.Добавить(Сообщение);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Соответствие Из ВсеСообщенияAPI Цикл
				НовСтр = ТаблицаДокументовAPI.Добавить();
				НовСтр.chainID     = Соответствие.Получить("chainID");
				НовСтр.ftpFileName = Соответствие.Получить("ftpFileName");
				НовСтр.docUUID     = Соответствие.Получить("docUUID");
				НовСтр.date        = Соответствие.Получить("date");
			КонецЦикла;
		Иначе
			ЕстьОшибкаПолученияИдентификаторов = Истина;
		КонецЕсли
		
		#КонецОбласти
		
	КонецЦикла;
	
КонецЕсли;

#КонецОбласти

Если Не ЕстьОшибкаПолученияИдентификаторов Тогда
	
	/////////////////////////////////////////////////////////////////////////////////
	//          					INSDES ВХОДЯЩИЙ                                //
	/////////////////////////////////////////////////////////////////////////////////
	
	//Описание пакетного запроса.
	//Запрос 0 				 	 - Получение ранее загруженных (обработанных/не обработанных) DR_Документов 
	//								по ИдентификаторЦепочки и ИдентификаторДокумента (полученных по rest), для поиска дублей в процессе обработки новых DR_Документов.	
	//Запрос 1 (DR_Загружен) 	 - Получение DR_Документов со статусом "Загружен", видом документа "ORDER_входящий" и не помеченных на удаление.
	//Запрос 2 				 	 - Получение данных из табличной части DR_Документов (полученных в DR_Загружен) и упорядочивание записей по "ДатаФайла", "ИдентификаторДокумента"
	//Запрос 3 (DR_НеОбработан)	 - Получение DR_Документов со статусом "НеОбработан", видом документа "ORDER_входящий" и не помеченных на удаление.
	//Запрос 4 (DR_Данные) 			 - Получение данных из табличной части DR_Документов (полученных в DR_НеОбработан). 
	//Запрос 5 (DR_ТоварСопоставлен) - Отбор DR_Документов (полученных в DR_Данные) у которых по товару выполнено сопоставление. 
	//Запрос 6 (DR_УчастникиЭДО) 	 - Отбор DR_Документов (полученных в DR_Данные) у которых значения реквизитов "ЗаполнитьУчастниковЭДО" и "ПервичныйПоискНоменклатуры" равно Истина.
	//Запрос 7 (DR_Итог)          	 - Объединение данных DR_ТоварСопоставлен и DR_УчастникиЭДО.
		
	//Результат  - Объединение данных DR_Итог, DR_Данные и получение данных из табличной части DR_Документов.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК DR_Документ,
	|	ПРЕДСТАВЛЕНИЕ(DR_Документ.Ссылка) КАК Представление,
	|	DR_Документ.Статус КАК СтатусДокумента,
	|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.ИдентификаторЦепочки В(&amp;ИдентификаторЦепочки)
	|	И DR_Документ.ИдентификаторДокумента В(&amp;ИдентификаторДокумента)
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК Ссылка,
	|	DR_Документ.ДанныеФайла КАК ДанныеФайла,
	|	DR_Документ.Статус КАК Статус,
	|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ DR_Загружен
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.Статус = &amp;Загружен
	|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Загружен.Ссылка КАК DR_Документ,
	|	ПРЕДСТАВЛЕНИЕ(DR_Загружен.Ссылка) КАК Представление,
	|	DR_Загружен.ДанныеФайла КАК ДанныеФайла,
	|	DR_Загружен.Статус КАК СтатусДокумента,
	|	DR_Загружен.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ВЫРАЗИТЬ(ТЧ_ДатаФайла.Значение КАК ДАТА) КАК ДатаФайла,
	|	ТЧ_ФайлЗагруженЛокально.Значение КАК ФайлЗагруженЛокально
	|ИЗ
	|	DR_Загружен КАК DR_Загружен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаФайла
	|		ПО DR_Загружен.Ссылка = ТЧ_ДатаФайла.Ссылка
	|			И (ТЧ_ДатаФайла.Реквизит = ""ДатаФайла"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ФайлЗагруженЛокально
	|		ПО DR_Загружен.Ссылка = ТЧ_ФайлЗагруженЛокально.Ссылка
	|			И (ТЧ_ФайлЗагруженЛокально.Реквизит = ""ФайлЗагруженЛокально"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаФайла,
	|	ИдентификаторДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ DR_НеОбработан
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.Статус = &amp;НеОбработан
	|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_НеОбработан.Ссылка КАК Ссылка,
	|	ТЧ_Контрагент.Значение КАК Контрагент,
	|	ТЧ_ЗаполнитьУчастниковЭДО.Значение КАК ЗаполнитьУчастниковЭДО,
	|	ТЧ_ПервичныйПоискНоменклатуры.Значение КАК ПервичныйПоискНоменклатуры
	|ПОМЕСТИТЬ DR_Данные
	|ИЗ
	|	DR_НеОбработан КАК DR_НеОбработан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ЗаполнитьУчастниковЭДО
	|		ПО DR_НеОбработан.Ссылка = ТЧ_ЗаполнитьУчастниковЭДО.Ссылка
	|			И (ТЧ_ЗаполнитьУчастниковЭДО.Реквизит = ""ЗаполнитьУчастниковЭДО"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ПервичныйПоискНоменклатуры
	|		ПО DR_НеОбработан.Ссылка = ТЧ_ПервичныйПоискНоменклатуры.Ссылка
	|			И (ТЧ_ПервичныйПоискНоменклатуры.Реквизит = ""ПервичныйПоискНоменклатуры"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Контрагент
	|		ПО DR_НеОбработан.Ссылка = ТЧ_Контрагент.Ссылка
	|			И (ТЧ_Контрагент.Реквизит = ""Контрагент"")
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DR_Данные.Ссылка КАК Ссылка,
	|	ИСТИНА КАК Сопоставлен
	|ПОМЕСТИТЬ DR_ТоварСопоставлен
	|ИЗ
	|	DR_Данные КАК DR_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ШК_НеСопоставлен
	|		ПО DR_Данные.Ссылка = ТЧ_ШК_НеСопоставлен.Ссылка
	|			И (ТЧ_ШК_НеСопоставлен.Реквизит = ""ШК_НеСопоставлен"")
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
	|		ПО DR_Данные.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
	|			И (ТЧ_ШК_НеСопоставлен.Значение = ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Данные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ DR_УчастникиЭДО
	|ИЗ
	|	DR_Данные КАК DR_Данные
	|ГДЕ
	|	DR_Данные.ЗаполнитьУчастниковЭДО = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	DR_Данные.Ссылка
	|ИЗ
	|	DR_Данные КАК DR_Данные
	|ГДЕ
	|	DR_Данные.ПервичныйПоискНоменклатуры = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(DR_ТоварСопоставлен.Ссылка, DR_УчастникиЭДО.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(DR_ТоварСопоставлен.Сопоставлен, ЛОЖЬ) КАК Сопоставлен
	|ПОМЕСТИТЬ DR_Итог
	|ИЗ
	|	DR_УчастникиЭДО КАК DR_УчастникиЭДО
	|		ПОЛНОЕ СОЕДИНЕНИЕ DR_ТоварСопоставлен КАК DR_ТоварСопоставлен
	|		ПО (DR_ТоварСопоставлен.Ссылка = DR_УчастникиЭДО.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Итог.Ссылка КАК DR_Документ,
	|	Docrobot_Документ.Комментарий КАК Комментарий,
	|	Docrobot_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	Docrobot_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ТЧ_NUMBER.Значение КАК NUMBER,
	|	ТЧ_Организация.Значение КАК Организация,
	|	DR_Данные.Контрагент КАК Контрагент,
	|	ТЧ_ТочкаДоставки.Значение КАК ТочкаДоставки,
	|	DR_Данные.ЗаполнитьУчастниковЭДО КАК ЗаполнитьУчастниковЭДО,
	|	ТЧ_POSITION.ХранилищеЗначения КАК ХЗ_POSITION,
	|	ТЧ_HEAD.ХранилищеЗначения КАК ХЗ_HEAD,
	|	DR_Данные.ПервичныйПоискНоменклатуры КАК ПервичныйПоискНоменклатуры,
	|	ТЧ_ДатаЭлектронногоДокумента.Значение КАК ДатаЭлектронногоДокумента,
	|	DR_Итог.Сопоставлен КАК ШК_Сопоставлен
	|ИЗ
	|	DR_Итог КАК DR_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ DR_Данные КАК DR_Данные
	|		ПО DR_Итог.Ссылка = DR_Данные.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК Docrobot_Документ
	|		ПО DR_Итог.Ссылка = Docrobot_Документ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_NUMBER
	|		ПО DR_Итог.Ссылка = ТЧ_NUMBER.Ссылка
	|			И (ТЧ_NUMBER.Реквизит = ""NUMBER"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Организация
	|		ПО DR_Итог.Ссылка = ТЧ_Организация.Ссылка
	|			И (ТЧ_Организация.Реквизит = ""Организация"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ТочкаДоставки
	|		ПО DR_Итог.Ссылка = ТЧ_ТочкаДоставки.Ссылка
	|			И (ТЧ_ТочкаДоставки.Реквизит = ""ТочкаДоставки"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаЭлектронногоДокумента
	|		ПО DR_Итог.Ссылка = ТЧ_ДатаЭлектронногоДокумента.Ссылка
	|			И (ТЧ_ДатаЭлектронногоДокумента.Реквизит = ""ДатаЭлектронногоДокумента"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_HEAD
	|		ПО (DR_Данные.Ссылка = ТЧ_HEAD.Ссылка)
	|			И (ТЧ_HEAD.Реквизит = ""HEAD"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_POSITION
	|		ПО DR_Итог.Ссылка = ТЧ_POSITION.Ссылка
	|			И (ТЧ_POSITION.Реквизит = ""POSITION"")";
	
	//&lt;Полученный список ID раскладываем по массивам для передачи их ввиде параметров в запрос&gt;
	DocUUID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("docUUID");
	ChainID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("chainID");
	
	Запрос.УстановитьПараметр("ВидДокумента"			, ТипДокумента + "_входящий");
	Запрос.УстановитьПараметр("Загружен"				, "Загружен");
	Запрос.УстановитьПараметр("НеОбработан"				, "НеОбработан");
	Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, ChainID_API);
	Запрос.УстановитьПараметр("ИдентификаторДокумента"	, DocUUID_API);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//&lt;Таблица используется для поиска Дублей&gt;
	ТаблицаDR_ДокументовПоID  = МассивРезультатов[0].Выгрузить();
	
	//&lt;Таблица DR_Документов со статусом "Загружен"&gt;
	ТаблицаЗагруженных	= МассивРезультатов[2].Выгрузить();
	
	//&lt;Инициализация массива примитивных типов&gt;
	ПримитивныеТипы = Новый Массив;
	ПримитивныеТипы.Добавить(Тип("Строка"));
	ПримитивныеТипы.Добавить(Тип("Число"));		
	
	//&lt;Инициализация квалификаторов&gt;
	КвалификаторСтрока	= Новый КвалификаторыСтроки(200);
	КвалификаторЧисло 	= Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
	
	//&lt;Определение типа Ед. измерения&gt;
	МассивТиповЕдИзм = Новый Массив;
	ИмяОбъектов 	 = Новый Массив;
	ИмяОбъектов.Добавить("УпаковкиЕдиницыИзмерения");
	ИмяОбъектов.Добавить("КлассификаторЕдиницИзмерения");
	ИмяОбъектов.Добавить("ЕдиницыИзмерения");
	
	Для каждого ИмяСпр Из ИмяОбъектов Цикл
		Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
			МассивТиповЕдИзм.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
		КонецЕсли;
	КонецЦикла;
	
	//&lt;Определение типа УчастникиЭДО&gt;
	МассивТиповУчЭДО = Новый Массив;
	ИмяОбъектов 	 = Новый Массив;
	ИмяОбъектов.Добавить("Организации");
	ИмяОбъектов.Добавить("Контрагенты");
	ИмяОбъектов.Добавить("Партнеры");
	ИмяОбъектов.Добавить("ДоговорыКонтрагентов");
	
	Для каждого ИмяСпр Из ИмяОбъектов Цикл
		Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
			МассивТиповУчЭДО.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
		КонецЕсли;
	КонецЦикла;
	
	//&lt;Инициализация описателей типов&gt;
	ОписаниеПримитивныхТипов 	= Новый ОписаниеТипов(ПримитивныеТипы,,,КвалификаторЧисло,КвалификаторСтрока);
	ОписаниеТиповDR_Документ 	= Новый ОписаниеТипов("ДокументСсылка.DR_Документ");
	ОписаниеТиповЧисло			= Новый ОписаниеТипов("Число",,,,КвалификаторЧисло);
	ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока);
	ОписаниеТиповНоменклатура 	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеТиповХарактеристи 	= Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ОписаниеТиповЕдИзм 			= Новый ОписаниеТипов(МассивТиповЕдИзм);
	ОписаниеТиповУчЭДо 			= Новый ОписаниеТипов(МассивТиповУчЭДО);
	
	//&lt;Элементы по спецификации множественные, т.е. могут в INSDES переданы несколько раз. 
	//В созданной структуре будут иметь тип - Массив, элементы массива тип - Структура&gt;
	СтруктураЭлементов = Новый Структура;
	СтруктураЭлементов.Вставить("POSITION");   
	СтруктураЭлементов.Вставить("CAMPAIGNINFO");
	СтруктураЭлементов.Вставить("CONTACT");
	
	//&lt;В таблицу добавляются данные по распарсенным XML&gt;
	ТаблицаНовДокументов = Новый ТаблицаЗначений;
	ТаблицаНовДокументов.Колонки.Добавить("ChainID");         //Тип - Строка
	ТаблицаНовДокументов.Колонки.Добавить("DocUUID");         //Тип - Строка
	ТаблицаНовДокументов.Колонки.Добавить("ДатаФайла");       //Тип - Дата
	ТаблицаНовДокументов.Колонки.Добавить("ДанныеДокумента"); //Тип - Структура
	
	ТаблицаНовДокументов.Индексы.Добавить("DocUUID");
	
	//&lt;В таблицу добавляются идентификационные данные для поиска Участников ЭДО и Номенклатуры&gt;
	ТЗ_ДанныеИдентификация = Новый ТаблицаЗначений;
	ТЗ_ДанныеИдентификация.Колонки.Добавить("DR_Документ"	 , ОписаниеТиповDR_Документ);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("BUYER"		 	 , ОписаниеТиповСтрока);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("RECIPIENT"	 	 , ОписаниеТиповСтрока);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("DELIVERYPLACE"  , ОписаниеТиповСтрока);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("Организация" 	 , ОписаниеТиповУчЭДо);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("Контрагент"  	 , ОписаниеТиповУчЭДо);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("ТочкаДоставки"  , ОписаниеТиповУчЭДо);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("POSITIONNUMBER" , ОписаниеТиповЧисло);
	ТЗ_ДанныеИдентификация.Колонки.Добавить("PRODUCT"		 , ОписаниеТиповСтрока);
	
	#Область ПолучениеДанныхПоНовымДокументам
	
	Для каждого СтрокаТаблицы ИЗ ТаблицаЗагруженных Цикл
		
		//&lt;Тип - Структура&gt;
		ДанныеДокумента = Новый Структура;	
		ДанныеФайла 	= Новый Структура;
		ПараметрыОтбора = Новый Структура;
		
		//&lt;Получение данных XML&gt;
		Попытка
			
			ДвоичныеДанныеФайла = СтрокаТаблицы.ДанныеФайла.Получить();	
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
			
			Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда					
				ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);					
			Иначе					
				ТекстЛогаСобытий = СтрокаТаблицы.Представление + "не обработан. Причина: отсутствуют Двоичные данные XML";
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;
			
		Исключение				
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Продолжить;	
		КонецПопытки;
		
		ТекущийФайл = Новый Файл(ИмяВременногоФайла);
		
		КодировкаXML = "UTF-8";
		ЧтениеXMLДляТекущегоФайла = ПолучитьЧтениеXMLДляФайла(ТекущийФайл.Имя, ТекущийФайл, КодировкаXML, МассивЛогаСобытий); 							
		Если ЧтениеXMLДляТекущегоФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектXDTO = Неопределено;
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLДляТекущегоФайла);
		
		//&lt;Преобразование данных из XDTO в Структуру - "ДанныеФайла"&gt;
		Если ОбъектXDTO &lt;&gt; Неопределено Тогда
			РекурсивноПостроитьСтруктуруEDI(ОбъектXDTO, СтруктураЭлементов, ДанныеФайла);
		Иначе
			Продолжить;
		КонецЕсли;
		
		ЧтениеXMLДляТекущегоФайла.Закрыть();
		
		//&lt;Удаление временного файла&gt;
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение				
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
		КонецПопытки;
		
		//&lt;Поиск ID цепочки по ID эл.документа&gt;
		НайденнаяСтрока = ТаблицаДокументовAPI.Найти(СтрокаТаблицы.ИдентификаторДокумента, "docUUID");
		
		//&lt;Найденный ID цепочки присваиваем эл. документу&gt;
		Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
			
			ДатаAPI = СтрЗаменить(НайденнаяСтрока.date, "-", "");
			ДатаAPI = СтрЗаменить(ДатаAPI, ":", "");
			ДатаAPI = СтрЗаменить(ДатаAPI, " ", "");
			
			ДанныеДокумента.Вставить("ИдентификаторЦепочки", НайденнаяСтрока.chainID);
			ДанныеДокумента.Вставить("ДатаСообщения", Дата(ДатаAPI));
			
		ИначеЕсли СтрокаТаблицы.ФайлЗагруженЛокально = Истина Тогда
			
			ДанныеДокумента.Вставить("ИдентификаторЦепочки", "TMP_" + СтрокаТаблицы.ИдентификаторДокумента);
			ДанныеДокумента.Вставить("ДатаСообщения", ТекущаяДата());
			
		Иначе
			
			Комментарий = "По INSDES (Инструкция по доставке) № " + ДанныеФайла.NUMBER + " не найден идентификатор цепочки в списке полученных идентификаторов с сервера."; 
			
			DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
			DR_ДокументОбъект.Комментарий = Комментарий;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Комментарий;
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;				
		КонецЕсли;
		
		//&lt;Параметры отбора для поиска дублей&gt;
		ПараметрыОтбора.Вставить("ИдентификаторЦепочки", ДанныеДокумента.ИдентификаторЦепочки);
		ПараметрыОтбора.Вставить("ИдентификаторДокумента", СтрокаТаблицы.ИдентификаторДокумента);
		
		//&lt;Поиск дублей. РезультатПоиска - Массив строк таблицы значений&gt;
		РезультатПоиска = ТаблицаDR_ДокументовПоID.НайтиСтроки(ПараметрыОтбора);
		
		//&lt;Проверка на дубли по DR_Документам со статусом "Обработан" или "Не обработан" найденных по установленному отбору&gt;
		Если РезультатПоиска.Количество() Тогда
			
			ЭлементМассива = РезультатПоиска[0];
			
			Если ВРег(ЭлементМассива.СтатусДокумента) = "НЕОБРАБОТАН" 
				ИЛИ ВРег(ЭлементМассива.СтатусДокумента) = "ОБРАБОТАН" Тогда 
				
				//&lt;Для Нового DR_Документа изменяем статус&gt;
				DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
				DR_ДокументОбъект.Статус = "Архивный";
				DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
				DR_ДокументОбъект.Комментарий = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление;
				
				ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				НовСтр = ТабличнаяЧасть.Добавить();
				НовСтр.Реквизит = "НеОбрабатывать";
				НовСтр.Значение = Истина;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Причина = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление; 
				ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Причина;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;					
			КонецЕсли;
			
		КонецЕсли;
		
		//&lt;Проверка на дубли по DR_Документам со статусом "Загружен"&gt; 
		НайденнаяСтрока = ТаблицаНовДокументов.Найти(СтрокаТаблицы.ИдентификаторДокумента, "DocUUID");
		
		Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
			
			//&lt;Изменям статус DR_Документа определенного как дубль&gt;
			DR_ДокументСсылка = НайденнаяСтрока.ДанныеДокумента.DR_Документ; 
			DR_ДокументОбъект = DR_ДокументСсылка.ПолучитьОбъект();
			DR_ДокументОбъект.Статус = "Архивный";
			DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
			DR_ДокументОбъект.Комментарий = "Документ определен как дубль";
			
			ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
			
			НовСтр = ТабличнаяЧасть.Добавить();
			НовСтр.Реквизит = "НеОбрабатывать";
			НовСтр.Значение = Истина;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ТекстЛогаСобытий =  "В процессе обработки " + СтрокаТаблицы.Представление + ". " + Строка(DR_ДокументСсылка) + " определен как дубль и обработан не будет.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			//&lt;Удаляем найденную запись из таблицы&gt;
			ТаблицаНовДокументов.Удалить(НайденнаяСтрока);
			
		КонецЕсли;
		
		ДанныеДокумента.Вставить("ИдентификаторДокумента"	, СтрокаТаблицы.ИдентификаторДокумента);
		ДанныеДокумента.Вставить("DR_Документ"				, СтрокаТаблицы.DR_Документ);
		ДанныеДокумента.Вставить("Статус"					, СтрокаТаблицы.СтатусДокумента);
		ДанныеДокумента.Вставить("ДанныеФайла"				, ДанныеФайла);
		ДанныеДокумента.Вставить("ДатаФайла"				, СтрокаТаблицы.ДатаФайла);
		
		//&lt;Классификатор валют&gt;
		КлассификаторВалюты = Новый Соответствие;
		КлассификаторВалюты.Вставить("RUB"	,643);
		КлассификаторВалюты.Вставить("KZT"	,398);
		КлассификаторВалюты.Вставить("UAH"	,980);
		КлассификаторВалюты.Вставить("USD"	,840);
		КлассификаторВалюты.Вставить("EUR"	,978);
		КлассификаторВалюты.Вставить("MDL"	,498);
		КлассификаторВалюты.Вставить("BYR"	,974);
		КлассификаторВалюты.Вставить("TMT"	,934);
		КлассификаторВалюты.Вставить("UZS"	,860);
		КлассификаторВалюты.Вставить("kz"	,398);
		КлассификаторВалюты.Вставить("ru"	,643);
		
		//&lt;Получение валюты из классификатора валют по буквенному коду&gt;
		Если ДанныеФайла.Свойство("CURRENCY") Тогда
			
			//&lt;ЦКВ - цифровой код валюты&gt;
			ЦКВ = КлассификаторВалюты[ДанныеФайла.CURRENCY];
			ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
			
		Иначе //&lt;иначе получаем по коду страны из профиля обмена&gt;
			
			ЗапросКодаСтраны = Новый Запрос;
			ЗапросКодаСтраны.Текст = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ(DR_НастройкиДополнительныеРеквизиты.Значение КАК СТРОКА(3)) КАК Страна
			|ИЗ
			|	Справочник.DR_Настройки КАК DR_Настройки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_НастройкиДополнительныеРеквизиты
			|		ПО DR_Настройки.Ссылка = DR_НастройкиДополнительныеРеквизиты.Ссылка
			|			И (DR_Настройки.ВидНастройки = ""ПрофилиОбмена"")
			|ГДЕ
			|	DR_Настройки.ПометкаУдаления = ЛОЖЬ
			|	И DR_Настройки.Статус = ""Активный""
			|	И DR_НастройкиДополнительныеРеквизиты.Реквизит = ""Страна""";
			
			ВыборкаЗапрос = ЗапросКодаСтраны.Выполнить().Выбрать();
			
			ВыборкаЗапрос.Следующий();
			ЦКВ = КлассификаторВалюты.Получить(ВыборкаЗапрос.Страна);
			ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
			
		КонецЕсли;
		
		//&lt;Добавление валюты&gt;
		ДанныеФайла.Вставить("Валюта", ВалютаСсылка);
		
		//&lt;Создаем временную структуру "HEAD" и добавляем в табл. часть "Дополнительные реквизиты" 
		//DR_Документ, как отдельный реквизит. Для получения в запросах данных по всем GLN УчастниковЭДО&gt;
		HEAD = Новый Структура;
		
		HEAD.Вставить("BUYER"		 , ДанныеФайла.BUYER);				
		HEAD.Вставить("RECIPIENT"	 , ДанныеФайла.RECIPIENT);
		HEAD.Вставить("DELIVERYPLACE" , ДанныеФайла.DELIVERYPLACE);
		
		ДанныеФайла.Вставить("HEAD", HEAD);
		
		//&lt;Добавление реквизитов по Участникам ЭДО для последующего их заполнения&gt;
		ДанныеФайла.Вставить("Организация"	 , "");
		ДанныеФайла.Вставить("Контрагент"	 , "");
		ДанныеФайла.Вставить("ТочкаДоставки" , "");
		
		//&lt;..Для проверки необходимости получения данных из базы по участникам ЭДО&gt;
		ДанныеФайла.Вставить("ЗаполнитьУчастниковЭДО", Истина);
		//&lt;..Для проверки необходимости получения данных из базы по не сопостваленной Номенклатуры в первый раз&gt;
		ДанныеФайла.Вставить("ПервичныйПоискНоменклатуры", Истина);
		
		//&lt;Преобразование даты формата 2023-02-12 в формат 12.02.2022 00:00:00&gt;
		ЭлементыТипаДата = Новый Структура("DATE, DELIVERYDATE, ORDERDATE", "ДатаЭлектронногоДокумента", "ДатаПоставки", "ДатаЗаказа");
		
		Для каждого Элемент Из ЭлементыТипаДата Цикл 
			Если ДанныеФайла.Свойство(Элемент.Ключ) Тогда
				ДанныеФайла.Вставить(Элемент.Значение, Дата(СтрЗаменить(ДанныеФайла[Элемент.Ключ], "-", "")));	 	
			Иначе
				ДанныеФайла.Вставить(Элемент.Значение, Дата(0001,01,01));
			КонецЕсли;				
		КонецЦикла;
		
		Если ДанныеФайла.Свойство("DELIVERYTIME") Тогда
			DELIVERYTIME = СтрЗаменить(ДанныеФайла.DELIVERYTIME, ":", "");
			DELIVERYTIME = ?(СтрДлина(DELIVERYTIME) = 3, "0" + DELIVERYTIME, DELIVERYTIME);
			ДанныеФайла.Вставить("ВремяПоставки", ДАТА("00010101" + DELIVERYTIME));
		КонецЕсли;
		
		//&lt;Свойства структуры элемента POSITION. Значение свойства Истина - выполнить преобразование в Число, Ложь - нет&gt;
		Поля = Новый Структура;
		Поля.Вставить("Номенклатура"		, Ложь);
		Поля.Вставить("Характеристика"		, Ложь);
		Поля.Вставить("ЕдиницаИзмерения"	, Ложь);
		Поля.Вставить("DESCRIPTION"			, Ложь);
		Поля.Вставить("PRODUCTIDSUPPLIER"	, Ложь);
		Поля.Вставить("QUANTITYUNIT"		, Ложь);
		Поля.Вставить("POSITIONNUMBER"		, Истина);
		Поля.Вставить("QUANTITY"			, Истина);
		Поля.Вставить("QUANTITYOFCUINTU"	, Истина);
		Поля.Вставить("PRICE"				, Истина);
		Поля.Вставить("VAT"					, Истина);
		Поля.Вставить("AMOUNT"				, Истина);
		
		POSITION = ДанныеФайла.POSITION;
		
		//&lt;Обработка элемента POSITION&gt;
		Для Каждого ЭлементСтруктура Из POSITION Цикл
			
			Для каждого Поле Из Поля Цикл
				
				Если ЭлементСтруктура.Свойство(Поле.Ключ) Тогда
					
					Если Поле.Значение Тогда
						//&lt;Преобразование строковых значений в число&gt;	
						Попытка
							ЭлементСтруктура[Поле.Ключ] = Число(ЭлементСтруктура[Поле.Ключ]);
						Исключение
							ЭлементСтруктура[Поле.Ключ] = ЭКОМ_ПреобразоватьВЧисло(ЭлементСтруктура[Поле.Ключ]);
						КонецПопытки;
						
					КонецЕсли;
				Иначе
					//&lt;Добавление свойств в массив структур элемента POSITION&gt;
					ЭлементСтруктура.Вставить(Поле.Ключ, "");
					
					Если Поле.Значение Тогда
						ЭлементСтруктура[Поле.Ключ] = 0;	
					КонецЕсли;
					
				КонецЕсли;					
			КонецЦикла;
			
			СтрокаИдентификация = ТЗ_ДанныеИдентификация.Добавить();
			СтрокаИдентификация.DR_Документ = ДанныеДокумента.DR_Документ;
			ЗаполнитьЗначенияСвойств(СтрокаИдентификация, HEAD);
			ЗаполнитьЗначенияСвойств(СтрокаИдентификация, ЭлементСтруктура, "POSITIONNUMBER, PRODUCT");
			
		КонецЦикла;
		
		НовЭлКоллекции 				   = ТаблицаНовДокументов.Добавить();	
		НовЭлКоллекции.ChainID		   = ДанныеДокумента.ИдентификаторЦепочки;		
		НовЭлКоллекции.DocUUID         = ДанныеДокумента.ИдентификаторДокумента;
		НовЭлКоллекции.ДатаФайла       = ДанныеДокумента.ДатаФайла;
		НовЭлКоллекции.ДанныеДокумента = ДанныеДокумента;
		
	КонецЦикла;
	
	//&lt;Очищаем коллекцию&gt;
	ТаблицаЗагруженных = Неопределено;
	
	#КонецОбласти
	
	#Область ПолучениеДанныхПоНеОбработаннымДокументам
	
	Индекс = МассивРезультатов.ВГраница();
	ТаблицаНеОбработанные = МассивРезультатов[Индекс].Выгрузить();
	
	//&lt;Получение данных для поиска сопоставленных УчастниковЭДО и Номенклатуры&gt;
	Если ТаблицаНеОбработанные.Количество() Тогда 
		
		ТаблицаНеОбработанные.Колонки.Добавить("HEAD");
		ТаблицаНеОбработанные.Колонки.Добавить("POSITION");	
		МассивУдаленияСтрок = Новый Массив;
		
		Для каждого СтрокаТаблицы Из ТаблицаНеОбработанные Цикл
			
			СтрокаНеОбработан = ТЗ_ДанныеИдентификация.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтрокаТаблицы);  
			
			//&lt;Получение идентификационных данных по УчастникамЭДО&gt;
			СтрокаТаблицы.HEAD = СтрокаТаблицы.ХЗ_HEAD.Получить();
			ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтрокаТаблицы.HEAD);
			
			ЗначениеИзХранилища = СтрокаТаблицы.ХЗ_POSITION.Получить();
			
			Если ЗначениеИзХранилища &lt;&gt; Неопределено Тогда
				СтрокаТаблицы.POSITION = ЗначениеИзХранилища;	
			Иначе //&lt;Удаление записи из таблицы по DR_Документу в котром отсутсвуют данные POSITION&gt; 
				
				ТЗ_ДанныеИдентификация.Удалить(СтрокаНеОбработан);
				МассивУдаленияСтрок.Добавить(СтрокаТаблицы);
				
				ТекстЛогаСобытий = НСтр("ru = 'По %ПредставлениеДокументаXML% отсутсвуют данные реквизита POSITION. Документ обработан не будет!!!'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ПредставлениеДокументаXML = СтрокаТаблицы.Представление;
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				
				Продолжить;
			КонецЕсли;
			
			//&lt;Получение идентификационных данных по Номенклатуре&gt;
			Для Счетчик = 0 По ЗначениеИзХранилища.ВГраница() Цикл
				
				СтруктураPOSITION = ЗначениеИзХранилища[Счетчик];
				
				Если ЗначениеЗаполнено(СтруктураPOSITION.Номенклатура) Тогда
					Продолжить;
				Иначе
					
					//&lt;Если по DR_Документу в POSITION больше одной позиции,
					//тогда в таблицу "ТЗ_ДанныеИдентификация" добавляем новую строку для каждой последующей позиции текущего DR_Документа&gt;
					Если Счетчик &lt;&gt; 0 Тогда
						НоваяСтрокаНеОбработан = ТЗ_ДанныеИдентификация.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНеОбработан, СтрокаНеОбработан);
						ЗаполнитьЗначенияСвойств(НоваяСтрокаНеОбработан, СтруктураPOSITION, "POSITIONNUMBER, PRODUCT");
					Иначе //&lt;Иначе заполняем данные по позиции в первую добавленную строку таблицы "ТЗ_ДанныеИдентификация" текущего DR_Документа&gt;
						ЗаполнитьЗначенияСвойств(СтрокаНеОбработан, СтруктураPOSITION, "POSITIONNUMBER, PRODUCT");	
					КонецЕсли;
					
				КонецЕсли;
				
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого Стр Из МассивУдаленияСтрок Цикл
			ТаблицаНеОбработанные.Удалить(Стр);
		КонецЦикла;
		
		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_HEAD");
		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_POSITION");		
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ЗапросДанныхСопоставления	
	
	//&lt;Получение данных по сопоставленным УчастникамЭДО и Номенклатуре&gt;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.DR_Документ КАК DR_Документ,
	|	Таблица.BUYER КАК xmlКонтрагент,
	|	Таблица.RECIPIENT КАК xmlОрганизация,
	|	Таблица.DELIVERYPLACE КАК xmlТочкаДоставки,
	|	Таблица.Контрагент КАК Контрагент,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ТочкаДоставки КАК ТочкаДоставки,
	|	Таблица.POSITIONNUMBER КАК POSITIONNUMBER,
	|	Таблица.PRODUCT КАК PRODUCT
	|ПОМЕСТИТЬ DR_Данные
	|ИЗ
	|	&amp;Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	DR_ДАННЫЕ.DR_Документ КАК DR_Документ,
	|	DR_ДАННЫЕ.xmlКонтрагент КАК xmlКонтрагент,
	|	DR_ДАННЫЕ.xmlОрганизация КАК xmlОрганизация,
	|	DR_ДАННЫЕ.xmlТочкаДоставки КАК xmlТочкаДоставки,
	|	ЕСТЬNULL(ЭКОМ_GLN_Организация.Объект, DR_ДАННЫЕ.Организация) КАК Организация,
	|	ЕСТЬNULL(ЭКОМ_GLN_Контрагент.Объект, DR_ДАННЫЕ.Контрагент) КАК Контрагент,
	|	ЕСТЬNULL(ЭКОМ_ТочкиДоставки.Объект, DR_ДАННЫЕ.ТочкаДоставки) КАК ТочкаДоставки,
	|	ЕСТЬNULL(ЭКОМ_GLN_Контрагент.РасчетСумм, Ложь) КАК РасчетСумм
	|ПОМЕСТИТЬ DR_УчастиникЭДО
	|ИЗ
	|	DR_Данные КАК DR_ДАННЫЕ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN_Организация
	|		ПО DR_ДАННЫЕ.xmlОрганизация = ЭКОМ_GLN_Организация.GLN
	|			И (НЕ ЭКОМ_GLN_Организация.Объект ССЫЛКА Справочник.Контрагенты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN_Контрагент
	|		ПО DR_ДАННЫЕ.xmlКонтрагент = ЭКОМ_GLN_Контрагент.GLN
	|			И (ЭКОМ_GLN_Контрагент.Объект ССЫЛКА Справочник.Контрагенты)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
	|		ПО DR_ДАННЫЕ.xmlТочкаДоставки = ЭКОМ_ТочкиДоставки.GLN
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	DR_Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_ДАННЫЕ.DR_Документ КАК DR_Документ,
	|	DR_ДАННЫЕ.xmlКонтрагент КАК xmlКонтрагент,
	|	DR_ДАННЫЕ.xmlОрганизация КАК xmlОрганизация,
	|	DR_ДАННЫЕ.xmlТочкаДоставки КАК xmlТочкаДоставки,
	|	DR_УчастиникЭДО.Организация КАК Организация,
	|	DR_УчастиникЭДО.Контрагент КАК Контрагент,
	|	DR_УчастиникЭДО.ТочкаДоставки КАК ТочкаДоставки,
	|	DR_УчастиникЭДО.РасчетСумм КАК РасчетСумм,
	|	DR_ДАННЫЕ.POSITIONNUMBER КАК POSITIONNUMBER,
	|	DR_ДАННЫЕ.PRODUCT КАК PRODUCT,
	|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
	|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.ХарактеристикаНоменклатуры, НЕОПРЕДЕЛЕНО) КАК Характеристика,
	|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.ЕдиницаНоменклатурыКонтрагента, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения
	|ИЗ
	|	DR_Данные КАК DR_ДАННЫЕ
	|		ЛЕВОЕ СОЕДИНЕНИЕ DR_УчастиникЭДО КАК DR_УчастиникЭДО
	|		ПО DR_ДАННЫЕ.DR_Документ = DR_УчастиникЭДО.DR_Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
	|		ПО (DR_УчастиникЭДО.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент)
	|			И DR_ДАННЫЕ.PRODUCT = ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента";
	
	Запрос.УстановитьПараметр("Таблица", ТЗ_ДанныеИдентификация);
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатСопоставления = РезультатЗапроса.Выгрузить();
	РезультатСопоставления.Индексы.Добавить("DR_Документ");
	
	//&lt;Очищаем коллекцию&gt;
	ТЗ_ДанныеИдентификация = Неопределено;
	
	#КонецОбласти
	
	#Область ОбработкаДанныхНовыхДокументов
	
	//&lt;Выполняем сортировку документов в порядке их появления на FTP, т.е. в рамках цепочки по дате файла&gt;
	ТаблицаНовДокументов.Сортировать("ChainID, ДатаФайла");
	
	//&lt;ТаблицаНовДокументов - Тип ТаблицаЗначений&gt;
	//&lt;Поля&gt;
	//    &lt;ChainID 	- Тип Строка (Идентификатор цепочки)&gt;
	//    &lt;DocUUID 	- Тип Строка (Идентификатор документа)&gt;
	//    &lt;ДатаФайла - Тип Дата&gt;
	//    &lt;ДанныеДокумента 	- Тип Структура&gt;:
	//      	&lt;Ключ&gt;:
	//			- ДанныеФайла - Тип Структура
	//			- ИдентификаторДокумента - Тип Строка
	//			- ИдентификаторЦепочки - Тип Строка
	//			- DR_Документ - Тип ДокументСсылка.DR_Документ
	//			- Статус - Тип Строка
	//			- ДатаФайла - Тип Дата
	
	Для каждого Элемент ИЗ ТаблицаНовДокументов Цикл
		
		МассивНеСопоставленныхШК = Новый Массив;
		
		//&lt;Тип - Структура&gt;
		ДанныеДокумента 			= Элемент.ДанныеДокумента;
		ДанныеФайла			 		= ДанныеДокумента.ДанныеФайла;  
		СтруктураРегистра_DRСобытия	= Новый Структура;
		
		DR_ДокументСсылка 	= ДанныеДокумента.DR_Документ; 
		
		//&lt;Тип - Строка&gt;
		ИдентификаторДокумента	= ДанныеДокумента.ИдентификаторДокумента;
		ИдентификаторЦепочки	= ДанныеДокумента.ИдентификаторЦепочки;
		СтатусДокумента			= "НеОбработан";
		ТекстОшибки 			= "";
		Комментарий				= "";
		ЗаписьСообщение			= "";
		
		СоответствиеУчастникиЭДО   = Новый Соответствие;
		СоответствиеПоНоменклатуре = Новый Соответствие;	
		
		МассивСопоставленныхДанных = РезультатСопоставления.НайтиСтроки(Новый Структура("DR_Документ", DR_ДокументСсылка));
		УчастникиЭДО = МассивСопоставленныхДанных[0];
		
		СтруктураУчастникиЭДО = Новый Структура("Контрагент, Организация, ТочкаДоставки");
		
		//&lt;Заполнение УчастниковЭДО&gt;
		Для каждого ЭлСтруктуры Из СтруктураУчастникиЭДО Цикл
			
			ИмяУчастника = ЭлСтруктуры.Ключ; 
			
			Если ЗначениеЗаполнено(УчастникиЭДО[ИмяУчастника]) Тогда
				ДанныеФайла[ИмяУчастника] = УчастникиЭДО[ИмяУчастника];	
			Иначе
				
				GLN = УчастникиЭДО["xml" + ИмяУчастника];
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
				+ "Не заполнен(а) " + ИмяУчастника + " (" + GLN + ")";
				
				СоотвествиеУчастник = Новый Соответствие;
				СоотвествиеУчастник.Вставить(ИмяУчастника + "_" + GLN, GLN);					
				СоответствиеУчастникиЭДО.Вставить(ИмяУчастника + "_", СоотвествиеУчастник);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда 
			ДанныеФайла.ЗаполнитьУчастниковЭДО = Ложь;	
		КонецЕсли;
		
		ТабНоменклатура = Новый ТаблицаЗначений;			
		ТабНоменклатура.Колонки.Добавить("PRODUCT");
		ТабНоменклатура.Колонки.Добавить("Номенклатура");
		ТабНоменклатура.Колонки.Добавить("Характеристика");
		ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения");
		
		Для Каждого СтрокаТабЗнч Из МассивСопоставленныхДанных Цикл 
			НоваяСтрока = ТабНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЗнч);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеФайла.Контрагент) Тогда
			
			ДанныеФайла.ПервичныйПоискНоменклатуры = Ложь;
			
			//&lt;Заполнение номенклатуры&gt;						
			Для каждого СтрСтруктура Из ДанныеФайла.POSITION Цикл
				
				НайденнаяСтрока = ТабНоменклатура.Найти(СтрСтруктура.PRODUCT, "PRODUCT");
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда
					ЗаполнитьЗначенияСвойств(СтрСтруктура, НайденнаяСтрока, "Номенклатура, Характеристика, ЕдиницаИзмерения");						
				Иначе
					
					//&lt;Заполнение массива штрихкодами по которым не найдено сопоставление&gt;
					МассивНеСопоставленныхШК.Добавить(СтрСтруктура.PRODUCT);
					
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
					+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
					+ "(" + СтрСтруктура.PRODUCT + ")";
					
					Код = ?(ЗначениеЗаполнено(СтрСтруктура.PRODUCT), СтрСтруктура.PRODUCT, СтрСтруктура.PRODUCTIDBUYER) 
					+ "_" + ДанныеФайла.BUYER;
					
					СоответствиеПоНоменклатуре.Вставить("АртикулНоменклатурыКонтрагента_"      + Код, СтрСтруктура.PRODUCTIDSUPPLIER);
					СоответствиеПоНоменклатуре.Вставить("КодНоменклатурыКонтрагента_"          + Код, СтрСтруктура.PRODUCTIDBUYER);
					СоответствиеПоНоменклатуре.Вставить("ШтрихКодНоменклатурыКонтрагента_"     + Код, СтрСтруктура.PRODUCT);
					СоответствиеПоНоменклатуре.Вставить("НаименованиеНоменклатурыКонтрагента_" + Код, СтрСтруктура.DESCRIPTION);
					СоответствиеПоНоменклатуре.Вставить("ЕдиницаНоменклатурыКонтрагента_"      + Код, СтрСтруктура.ЕдиницаИзмерения);
					СоответствиеПоНоменклатуре.Вставить("Контрагент_"                          + Код, ДанныеФайла.Контрагент);
					СоответствиеПоНоменклатуре.Вставить("xmlЕдиницаИзмерения_"                 + Код, СтрСтруктура.QUANTITYUNIT);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			//&lt;Получение всех штрихкодов по документу, т.к. Контрагент не сопоставлен&gt;
			МассивНеСопоставленныхШК = ТабНоменклатура.ВыгрузитьКолонку("PRODUCT");					
		КонецЕсли;
		
		//&lt;Изменение статуса DR_Документа&gt;
		Если ПустаяСтрока(ТекстОшибки) Тогда
			СтатусДокумента = "Обработан";
		КонецЕсли;
		
		//&lt;Добавление записей в РС ЭКОМ_ЗначениеДополнительныхКонстант по не сопоставленным данным&gt;
		Если СоответствиеУчастникиЭДО.Количество() Тогда				    
			Для Каждого Участник Из СоответствиеУчастникиЭДО Цикл
				НастройкиПараметровЗаписатьНабором(Участник.Значение, Участник.Ключ);
			КонецЦикла;			
		КонецЕсли;
		
		Если СоответствиеПоНоменклатуре.Количество() Тогда
			НастройкиПараметровЗаписатьНабором(СоответствиеПоНоменклатуре    , "Номенклатура_");
		КонецЕсли;
		
		//&lt;Заполнение реквизитов и табл. части DR_Документа данными&gt;
		DR_ДокументОбъект 						= DR_ДокументСсылка.ПолучитьОбъект();
		DR_ДокументОбъект.ИдентификаторЦепочки	= ИдентификаторЦепочки;
		DR_ДокументОбъект.ДанныеФайла 			= Новый ХранилищеЗначения(Неопределено);
		DR_ДокументОбъект.Статус 				= СтатусДокумента;
		DR_ДокументОбъект.Сообщение 			= ТекстОшибки;
		DR_ДокументОбъект.Комментарий			= Комментарий;
		DR_ДокументОбъект.Пользователь 			= НайтиТекущегоПользователя();
		ТЧ_Документа 							= DR_ДокументОбъект.ДополнительныеРеквизиты;
		
		Для каждого ЭлСтруктуры Из ДанныеФайла Цикл
			
			НоваяСтрока = ТЧ_Документа.Добавить();
			НоваяСтрока.Реквизит = ЭлСтруктуры.Ключ;
			
			Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Массив") ИЛИ ТипЗнч(ЭлСтруктуры.Значение) = Тип("Структура") Тогда					
				Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
				НоваяСтрока.ХранилищеЗначения = Хранилище;
			Иначе
				НоваяСтрока.Значение = ЭлСтруктуры.Значение;				
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;Добавление в табл. часть "Дополнительные реквизиты" DR_Документа записей по не сопоставленным ШК&gt;
		Для каждого Штрихкод Из МассивНеСопоставленныхШК Цикл
			
			НоваяСтрока = ТЧ_Документа.Добавить();
			НоваяСтрока.Реквизит = "ШК_НеСопоставлен";
			НоваяСтрока.Значение = Штрихкод;
			
		КонецЦикла;
		
		//&lt;Определение текста сообщения DR_События по DR_Документу&gt;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьСообщение = "В документе есть ошибка";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Комментарий) Тогда
			Если ПустаяСтрока(ЗаписьСообщение) Тогда
				ЗаписьСообщение = "Документ содержит комментарий";
			Иначе
				ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			////////////////////////////&lt;Создание записи в РС DR_События&gt;/////////////////////////////////////
			
			//&lt;Заполнение структуры для DR_События&gt;
			СтруктураРегистра_DRСобытия.Вставить("ДатаСообщения"			, ДанныеДокумента.ДатаСообщения);
			СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, ИдентификаторЦепочки);
			СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
			СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
			СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "INSDES_Входящий");
			СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, ИдентификаторДокумента);
			СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
			СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
			
			НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
			НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
			НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
			НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
			НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
			НЗ_DRСобытия.Прочитать();
			
			Если НЗ_DRСобытия.Количество() = 0 Тогда
				НоваяЗапись = НЗ_DRСобытия.Добавить();
			Иначе
				НоваяЗапись = НЗ_DRСобытия[0];
			КонецЕсли;
			
			Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
				НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
			КонецЦикла;
			
			НЗ_DRСобытия.Записать();
			
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстЛогаСобытий = НСтр("ru = 'Формирование записей в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ПредставлениеДокументаXML = "INSDES (Инструкция по доставке)" + " № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D");
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
			ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
	//&lt;Очищаем коллекцию&gt;
	ТаблицаНовДокументов = Неопределено;
	
	#КонецОбласти
	
	#Область ОбработкаДанныхПоНеОбработаннымДокументам
	
	Для Каждого СтрокаТаблицы Из ТаблицаНеОбработанные Цикл
		
		МассивСопоставленныхШК 		= Новый Массив; 
		СтруктураРегистра_DRСобытия = Новый Структура;
		СоответствиеПоНоменклатуре 	= Новый Соответствие;
		
		DRДокументМодифицирован  = Ложь;
		
		СтатусДокумента	= "НеОбработан";
		ТекстОшибки 	= "";
		ЗаписьСообщение	= "";
		Комментарий		= СтрокаТаблицы.Комментарий;
		
		DR_ДокументСсылка = СтрокаТаблицы.DR_Документ;
		
		МассивСопоставленныхДанных = РезультатСопоставления.НайтиСтроки(Новый Структура("DR_Документ", DR_ДокументСсылка));
		УчастникиЭДО = МассивСопоставленныхДанных[0];
		
		СтруктураУчастникиЭДО = Новый Структура("Контрагент, Организация, ТочкаДоставки");
		
		//&lt;Заполнение УчастниковЭДО&gt;
		Для каждого ЭлСтруктуры Из СтруктураУчастникиЭДО Цикл
			
			ИмяУчастника = ЭлСтруктуры.Ключ; 
			
			Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяУчастника]) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(УчастникиЭДО[ИмяУчастника]) Тогда
				СтрокаТаблицы[ИмяУчастника] = УчастникиЭДО[ИмяУчастника];
				
				МодификацияЦепочки	 	= Истина;
				DRДокументМодифицирован = Истина;
				
			Иначе
				
				GLN = УчастникиЭДО["xml" + ИмяУчастника];
				
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
				+ "Не заполнен(а) " + ИмяУчастника + " (" + GLN + ")";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстОшибки) Тогда 
			СтрокаТаблицы.ЗаполнитьУчастниковЭДО = Ложь;	
		КонецЕсли;
		
		ТабНоменклатура = Новый ТаблицаЗначений;			
		ТабНоменклатура.Колонки.Добавить("PRODUCT");
		ТабНоменклатура.Колонки.Добавить("Номенклатура");
		ТабНоменклатура.Колонки.Добавить("Характеристика");
		ТабНоменклатура.Колонки.Добавить("ЕдиницаИзмерения");
		
		Для Каждого СтрокаТабЗнч Из МассивСопоставленныхДанных Цикл 
			НоваяСтрока = ТабНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабЗнч);
		КонецЦикла;				
		
		Если СтрокаТаблицы.ШК_Сопоставлен Тогда
			
			Для каждого СтрСтруктура Из СтрокаТаблицы.POSITION Цикл
				
				НайденнаяСтрока = ТабНоменклатура.Найти(СтрСтруктура.PRODUCT, "PRODUCT");
				
				Если НЕ ЗначениеЗаполнено(СтрСтруктура.Номенклатура) Тогда
					
					Если НайденнаяСтрока &lt;&gt; Неопределено Тогда					
						
						ЗаполнитьЗначенияСвойств(СтрСтруктура, НайденнаяСтрока, "Номенклатура, Характеристика, ЕдиницаИзмерения");
						DRДокументМодифицирован = Истина;
						
						//&lt;Заполнение массива сопоставленными ШК. С целью их исключения из повторной обработки&gt;
						МассивСопоставленныхШК.Добавить(СтрСтруктура.PRODUCT);
						
					Иначе							
						ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
						+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
						+ "(" + СтрСтруктура.PRODUCT + ")";							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) И СтрокаТаблицы.ПервичныйПоискНоменклатуры Тогда
				
				Для каждого СтрСтруктура Из СтрокаТаблицы.POSITION Цикл
					
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
					+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
					+ "(" + СтрСтруктура.PRODUCT + ")";
					
					Код = ?(ЗначениеЗаполнено(СтрСтруктура.PRODUCT), СтрСтруктура.PRODUCT, СтрСтруктура.PRODUCTIDBUYER) + "_" + СтрокаТаблицы.HEAD.BUYER;
					
					СоответствиеПоНоменклатуре.Вставить("АртикулНоменклатурыКонтрагента_"      + Код, СтрСтруктура.PRODUCTIDSUPPLIER);
					СоответствиеПоНоменклатуре.Вставить("КодНоменклатурыКонтрагента_"          + Код, СтрСтруктура.PRODUCTIDBUYER);
					СоответствиеПоНоменклатуре.Вставить("ШтрихКодНоменклатурыКонтрагента_"     + Код, СтрСтруктура.PRODUCT);
					СоответствиеПоНоменклатуре.Вставить("НаименованиеНоменклатурыКонтрагента_" + Код, СтрСтруктура.DESCRIPTION);
					СоответствиеПоНоменклатуре.Вставить("ЕдиницаНоменклатурыКонтрагента_"      + Код, СтрСтруктура.ЕдиницаИзмерения);
					СоответствиеПоНоменклатуре.Вставить("Контрагент_"                          + Код, СтрокаТаблицы.Контрагент);
					СоответствиеПоНоменклатуре.Вставить("xmlЕдиницаИзмерения_"                 + Код, СтрСтруктура.QUANTITYUNIT);
					
				КонецЦикла;	
				
				СтрокаТаблицы.ПервичныйПоискНоменклатуры = Ложь;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
				
				Для каждого СтрСтруктура Из СтрокаТаблицы.POSITION Цикл
					
					Если НЕ ЗначениеЗаполнено(СтрСтруктура.Номенклатура) Тогда
						ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
						+ "Позиция № " + СтрСтруктура.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
						+ "(" + СтрСтруктура.PRODUCT + ")";
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//&lt;Проверка на запись повторно обрабатываемого DR_Документа&gt;
		Если НЕ DRДокументМодифицирован Тогда 
			Продолжить; 	
		КонецЕсли;
		
		//&lt;Изменение статуса DR_Документа&gt;
		Если ПустаяСтрока(ТекстОшибки) Тогда
			СтатусДокумента = "Обработан";
		КонецЕсли;
		
		//&lt;Добавление записей в РС ЭКОМ_ЗначениеДополнительныхКонстант по не сопоставленным данным&gt;
		Если СоответствиеПоНоменклатуре.Количество() Тогда
			НастройкиПараметровЗаписатьНабором(СоответствиеПоНоменклатуре    , "Номенклатура_");
		КонецЕсли;
		
		//&lt;Обновление данных в DR_Документе&gt;
		DR_ДокументОбъект 				= DR_ДокументСсылка.ПолучитьОбъект();
		DR_ДокументОбъект.Статус 		= СтатусДокумента;
		DR_ДокументОбъект.Сообщение 	= ТекстОшибки;
		DR_ДокументОбъект.Комментарий   = Комментарий;
		ТЧ_Документа 					= DR_ДокументОбъект.ДополнительныеРеквизиты;
		
		Для каждого Колонка Из ТаблицаНеОбработанные.Колонки Цикл
			
			ЗнчЯчейки = СтрокаТаблицы[Колонка.Имя];
			
			НайденнаяСтрока	= ТЧ_Документа.Найти(Колонка.Имя, "Реквизит");
			
			Если ТипЗнч(ЗнчЯчейки) = Тип("Массив") ИЛИ ТипЗнч(ЗнчЯчейки) = Тип("Структура") Тогда				
				Хранилище = Новый ХранилищеЗначения(ЗнчЯчейки);
				НайденнаяСтрока.ХранилищеЗначения = Хранилище;
			Иначе
				
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				Иначе
					НайденнаяСтрока.Значение = ЗнчЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;Удаление из табл. части "Дополнительные реквизиты" DR_Документа записей ШК_НеСопоставлен по сопоставленному штрихкоду&gt;
		Для Каждого Штрихкод Из МассивСопоставленныхШК Цикл
			
			СтрокаТабличнойЧасти = ТЧ_Документа.Найти(Штрихкод, "Значение");
			
			Если СтрокаТабличнойЧасти &lt;&gt; Неопределено Тогда 
				ТЧ_Документа.Удалить(СтрокаТабличнойЧасти);	
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;Определение текста сообщения DR_События по DR_Документу&gt;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьСообщение = "В документе есть ошибка";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Комментарий) Тогда
			Если ПустаяСтрока(ЗаписьСообщение) Тогда
				ЗаписьСообщение = "Документ содержит комментарий";
			Иначе
				ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
			КонецЕсли;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			//&lt;Перезапись события по DR_документу&gt;
			Если ВРег(СтатусДокумента) = "ОБРАБОТАН" Тогда
				
				СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, СтрокаТаблицы.ИдентификаторЦепочки);
				СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
				СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
				СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "INSDES_Входящий");
				СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, СтрокаТаблицы.ИдентификаторДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			
			ТекстЛогаСобытий = НСтр("ru = 'Изменение данных в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			ПредставлениеДокументаXML = "INSDES (Инструкция по доставке)" + " № " + СтрокаТаблицы.NUMBER + " от " + Формат(СтрокаТаблицы.ДатаЭлектронногоДокумента, "ДЛФ=D");
			ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
			ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
	//&lt;Очищаем коллекцию&gt;
	ТаблицаНеОбработанные = Неопределено;
	
	#КонецОбласти
	
Иначе
	
	ТекстЛогаСобытий = "Ошибка получения Идентификаторов. Проверьте доступность сети и корректность заполнения профилей обмена.";
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
	
КонецЕсли;
</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Входящий INSDES</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокInsdesВходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Входящий INSDES</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
	</row>
</ValueTree>