<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий ORDER</Value>
		<Value xsi:type="xs:string">//ВыполнитьГибкиеНастройки(, МассивЛогаСобытий, ИмяСобытия);

    ТипДокумента 			 = "ORDER";	
	ТипДокументооборота      = "EDI";
	ИдентификаторыУчастников = Новый Массив;
	ЕстьОшибкаПолученияИдентификаторов = Ложь;
	
	#Область ПолучениеИдентификаторовЦепочекПоВсемПрофилям	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭКОМ_GLN.ПрофильОбмена КАК ПрофильОбмена,
	|	ЭКОМ_GLN.Объект КАК Организация,
	|	ЭКОМ_GLN.GLN КАК GLN,
	|	ЭКОМ_GLN.Ид_ОЭД КАК ИдУчастника
	|ИЗ
	|	РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
	|ГДЕ
	|	НЕ ЭКОМ_GLN.ПрофильОбмена = НЕОПРЕДЕЛЕНО
	|	И НЕ ЭКОМ_GLN.ПрофильОбмена.ПометкаУдаления
	|ИТОГИ ПО
	|	ПрофильОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаДокументовAPI = Новый ТаблицаЗначений;
		ТаблицаДокументовAPI.Колонки.Добавить("chainID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Колонки.Добавить("ftpFileName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТаблицаДокументовAPI.Колонки.Добавить("docUUID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Колонки.Добавить("date"       , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Индексы.Добавить("docUUID");
		
		ВыборкаПрофильОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПрофильОбмена.Следующий() Цикл
			
			ПрофильОбмена = ВыборкаПрофильОбмена.ПрофильОбмена;
			
			#Область ПолучениеСпискаИдентификаторовПоПрофилюОбмена
			
			ВыборкаДетальныеЗаписи = ВыборкаПрофильОбмена.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыУчастников.Добавить(ВыборкаДетальныеЗаписи.GLN);	 
			КонецЦикла; 
			
			#КонецОбласти
			
			#Область ПодготовкаВспомогательныхДанныхДляRestApi
			
			ИмяСобытия = "Заполнение идентификаторов цепочки для входящих файлов " + ТипДокумента + ".";  		
			ЛимитСообщений = ЭКОМ_ОбщегоНазначения.Настройка_Параметр_Прочитать("ЭКОМ_ЛимитСообщенийRESTv2", "1000");
			ДанныеДляREST = Новый Структура("ЕстьОшибка, ВидДокумента, ДанныеПодключения, doc_type", Ложь, Неопределено, Неопределено, Неопределено); 
			
			ДанныеДляREST.ВидДокумента 	=  "ORDER_Входящий";	
			ДанныеДляREST.doc_type 		= "orders";
			
			ДанныеАвторизации = ЭКОМ_ВзаимодействиеREST_API.ВыполнитьАвторизациюАтолл(ПрофильОбмена);
			Если Не ДанныеАвторизации.Получены Тогда
				ТекстЛогаСобытий = "Не удалось выполнить авторизацию. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;	
			ДанныеПодключения = ЭКОМ_ВзаимодействиеREST_API.ПолучитьДанныеПодключенияEvolution(ПрофильОбмена);
			Если Не ДанныеПодключения.ПолученПрофиль ИЛИ Не ДанныеПодключения.ПолученТокен Тогда
				ТекстЛогаСобытий = "Не удалось получить данные для подключения к REST API. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;
			ДанныеДляREST.ДанныеПодключения = ДанныеПодключения;	
			
			#КонецОбласти
			
			#Область ПолучитьИдентификаторыЦепочекВходящихФайлов
			
			Если Не ДанныеДляREST.ЕстьОшибка Тогда	
				НачалоПериода = Дата(1,1,1);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	МАКСИМУМ(DR_События.ДатаСообщения) КАК ДатаПоследнегоСообщения
				|ИЗ
				|	РегистрСведений.DR_События КАК DR_События
				|ГДЕ
				|	DR_События.ВидДокумента = &amp;ВидДокумента
				|	И DR_События.АктуализироватьИдентификатор = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("ВидДокумента", ДанныеДляREST.ВидДокумента);
				ВыборкаДата = Запрос.Выполнить().Выбрать();
				Если ВыборкаДата.Следующий() Тогда
					НачалоПериода = ВыборкаДата.ДатаПоследнегоСообщения;
				КонецЕсли;   
				
				МинимальнаяДата =  НачалоПериода;
				Сутки         = 60*60*24;
				ТекущаяДата   = ТекущаяДата(); 
				Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
					МинимальнаяДата = МинимальнаяДата - Сутки;
				Иначе
					МинимальнаяДата = ТекущаяДата - Сутки * 30;					
				КонецЕсли;         
				МаксимальнаяДата =  ТекущаяДата + Сутки; 
				
				НачалоПериода = Формат(МинимальнаяДата , "ДФ=yyyy-MM-dd");
				КонецПериода  = Формат(МаксимальнаяДата, "ДФ=yyyy-MM-dd");  	
				
				ВсеСообщенияAPI  = Новый Массив;
				
				Для Каждого ИдУчастника Из ИдентификаторыУчастников Цикл
					ПараметрыМетода = Новый Структура("gln, doc_type, time_from, time_to, limit, direction", ИдУчастника, ДанныеДляREST.doc_type, НачалоПериода, КонецПериода, ЛимитСообщений, "0");
					МассивСообщенийAPI = ЭКОМ_ВзаимодействиеREST_API.ПолучитьСписокВходящихДокументовEDI(ПараметрыМетода, ДанныеПодключения);
					
					Для Каждого Сообщение Из МассивСообщенийAPI Цикл
						ВсеСообщенияAPI.Добавить(Сообщение);
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого Соответствие Из ВсеСообщенияAPI Цикл
					НовСтр = ТаблицаДокументовAPI.Добавить();
					НовСтр.chainID     = Соответствие.Получить("chainID");
					НовСтр.ftpFileName = Соответствие.Получить("ftpFileName");
					НовСтр.docUUID     = Соответствие.Получить("docUUID");
					НовСтр.date        = Соответствие.Получить("date");
				КонецЦикла;
			Иначе
				ЕстьОшибкаПолученияИдентификаторов = Истина;
			КонецЕсли
			#КонецОбласти
			
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не ЕстьОшибкаПолученияИдентификаторов Тогда
		
		/////////////////////////////////////////////////////////////////////////////////
		//          					ВХОДЯЩИЙ ORDER                                 //
		/////////////////////////////////////////////////////////////////////////////////
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК DR_Документ,
		|	ПРЕДСТАВЛЕНИЕ(DR_Документ.Ссылка) КАК Представление,
		|	DR_Документ.Статус КАК СтатусДокумента,
		|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.ИдентификаторЦепочки В(&amp;ИдентификаторЦепочки)
		|	И DR_Документ.ИдентификаторДокумента В(&amp;ИдентификаторДокумента)
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК Ссылка,
		|	DR_Документ.ДанныеФайла КАК ДанныеФайла,
		|	DR_Документ.Статус КАК Статус,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ПОМЕСТИТЬ ВТ_Загружен
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.Статус = &amp;Загружен
		|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Загружен.Ссылка КАК DR_Документ,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_Загружен.Ссылка) КАК Представление,
		|	ВТ_Загружен.ДанныеФайла КАК ДанныеФайла,
		|	ВТ_Загружен.Статус КАК СтатусДокумента,
		|	ВТ_Загружен.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ТЧ_ДатаФайла.Значение КАК ДатаФайла,
		|	ТЧ_ФайлЗагруженЛокально.Значение КАК ФайлЗагруженЛокально
		|ИЗ
		|	ВТ_Загружен КАК ВТ_Загружен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаФайла
		|		ПО ВТ_Загружен.Ссылка = ТЧ_ДатаФайла.Ссылка
		|			И (ТЧ_ДатаФайла.Реквизит = ""ДатаФайла"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ФайлЗагруженЛокально
		|		ПО ВТ_Загружен.Ссылка = ТЧ_ФайлЗагруженЛокально.Ссылка
		|			И (ТЧ_ФайлЗагруженЛокально.Реквизит = ""ФайлЗагруженЛокально"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаФайла,
		|	ИдентификаторДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК Ссылка,
		|	DR_Документ.Комментарий КАК Комментарий,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки
		|ПОМЕСТИТЬ ВТ_НеОбработан
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.Статус = &amp;НеОбработан
		|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НеОбработан.Ссылка КАК Ссылка,
		|	ВЫРАЗИТЬ(ТЧ_ШК_НеСопоставлен.Значение КАК Строка(14)) КАК Штриход,
		|	ВЫРАЗИТЬ(ТЧ_Контрагент.Значение КАК Справочник.Контрагенты) КАК Контрагент
		|ПОМЕСТИТЬ ВТ_ШК_НеСопоставлен
		|ИЗ
		|	ВТ_НеОбработан КАК ВТ_НеОбработан
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ШК_НеСопоставлен
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ШК_НеСопоставлен.Ссылка
		|			И (ТЧ_ШК_НеСопоставлен.Реквизит = ""ШК_НеСопоставлен"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Контрагент
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_Контрагент.Ссылка
		|			И (ТЧ_Контрагент.Реквизит = ""Контрагент"")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_ШК_НеСопоставлен.Ссылка КАК Ссылка,
		|	ИСТИНА КАК Сопоставлено
		|ПОМЕСТИТЬ ВТ_ШК_Сопоставлено
		|ИЗ
		|	ВТ_ШК_НеСопоставлен КАК ВТ_ШК_НеСопоставлен
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
		|		ПО ВТ_ШК_НеСопоставлен.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
		|			И ВТ_ШК_НеСопоставлен.Штриход = ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НеОбработан.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ЗаполнитьУчастниковЭДО
		|ИЗ
		|	ВТ_НеОбработан КАК ВТ_НеОбработан
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ЗаполнитьУчастниковЭДО
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ЗаполнитьУчастниковЭДО.Ссылка
		|			И (ТЧ_ЗаполнитьУчастниковЭДО.Реквизит = ""ЗаполнитьУчастниковЭДО"")
		|ГДЕ
		|	ТЧ_ЗаполнитьУчастниковЭДО.Значение = ИСТИНА
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВТ_НеОбработан.Ссылка
		|ИЗ
		|	ВТ_НеОбработан КАК ВТ_НеОбработан
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ПервичныйПоискНоменклатуры
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ПервичныйПоискНоменклатуры.Ссылка
		|			И (ТЧ_ПервичныйПоискНоменклатуры.Реквизит = ""ПервичныйПоискНоменклатуры"")
		|ГДЕ
		|	ТЧ_ПервичныйПоискНоменклатуры.Значение = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВТ_ШК_Сопоставлено.Ссылка, ВТ_ЗаполнитьУчастниковЭДО.Ссылка) КАК Ссылка,
		|	ЕСТЬNULL(ВТ_ШК_Сопоставлено.Сопоставлено, ЛОЖЬ) КАК Сопоставлено
		|ПОМЕСТИТЬ ВТ_Итог
		|ИЗ
		|	ВТ_ЗаполнитьУчастниковЭДО КАК ВТ_ЗаполнитьУчастниковЭДО
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ШК_Сопоставлено КАК ВТ_ШК_Сопоставлено
		|		ПО (ВТ_ШК_Сопоставлено.Ссылка = ВТ_ЗаполнитьУчастниковЭДО.Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_НеОбработан.Ссылка КАК DR_Документ,
		|	ВТ_НеОбработан.Комментарий КАК Комментарий,
		|	ВТ_НеОбработан.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
		|	ВТ_НеОбработан.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ВЫРАЗИТЬ(ТЧ_NUMBER.Значение КАК СТРОКА(35)) КАК NUMBER,
		|	ТЧ_HEAD.ХранилищеЗначения КАК HEAD,
		|	ВЫРАЗИТЬ(ТЧ_Организация.Значение КАК Справочник.Организации) КАК Организация,
		|	ВЫРАЗИТЬ(ТЧ_Контрагент.Значение КАК Справочник.Контрагенты) КАК Контрагент,
		|	ТЧ_ТочкаДоставки.Значение КАК ТочкаДоставки,
		|	ВЫРАЗИТЬ(ТЧ_ЗаполнитьУчастниковЭДО.Значение КАК БУЛЕВО) КАК ЗаполнитьУчастниковЭДО,
		|	ВЫРАЗИТЬ(ТЧ_ПервичныйПоискНоменклатуры.Значение КАК БУЛЕВО) КАК ПервичныйПоискНоменклатуры,
		|	ВЫРАЗИТЬ(ТЧ_ДатаЭлектронногоДокумента.Значение КАК ДАТА) КАК ДатаЭлектронногоДокумента,
		|	ВЫРАЗИТЬ(ТЧ_ДатаПоставки.Значение КАК ДАТА) КАК ДатаПоставки,
		|	ВТ_Итог.Сопоставлено КАК ШК_Сопоставлен
		|ИЗ
		|	ВТ_НеОбработан КАК ВТ_НеОбработан
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Итог КАК ВТ_Итог
		|		ПО ВТ_НеОбработан.Ссылка = ВТ_Итог.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ЗаполнитьУчастниковЭДО
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ЗаполнитьУчастниковЭДО.Ссылка
		|			И (ТЧ_ЗаполнитьУчастниковЭДО.Реквизит = ""ЗаполнитьУчастниковЭДО"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ПервичныйПоискНоменклатуры
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ПервичныйПоискНоменклатуры.Ссылка
		|			И (ТЧ_ПервичныйПоискНоменклатуры.Реквизит = ""ПервичныйПоискНоменклатуры"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_NUMBER
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_NUMBER.Ссылка
		|			И (ТЧ_NUMBER.Реквизит = ""NUMBER"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_HEAD
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_HEAD.Ссылка
		|			И (ТЧ_HEAD.Реквизит = ""HEAD"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Организация
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_Организация.Ссылка
		|			И (ТЧ_Организация.Реквизит = ""Организация"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_Контрагент
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_Контрагент.Ссылка
		|			И (ТЧ_Контрагент.Реквизит = ""Контрагент"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ТочкаДоставки
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ТочкаДоставки.Ссылка
		|			И (ТЧ_ТочкаДоставки.Реквизит = ""ТочкаДоставки"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаЭлектронногоДокумента
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ДатаЭлектронногоДокумента.Ссылка
		|			И (ТЧ_ДатаЭлектронногоДокумента.Реквизит = ""ДатаЭлектронногоДокумента"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаПоставки
		|		ПО ВТ_НеОбработан.Ссылка = ТЧ_ДатаПоставки.Ссылка
		|			И (ТЧ_ДатаПоставки.Реквизит = ""ДатаПоставки"")";
		
		//&lt;Полученный список ID раскладываем по массивам для передачи их в запрос параметром&gt;
		DocUUID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("docUUID");
		ChainID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("chainID");
				
		Запрос.УстановитьПараметр("ВидДокумента"			, ТипДокумента + "_входящий");
		Запрос.УстановитьПараметр("Загружен"				, "Загружен");
		Запрос.УстановитьПараметр("НеОбработан"				, "НеОбработан");
		Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, ChainID_API);
		Запрос.УстановитьПараметр("ИдентификаторДокумента"	, DocUUID_API);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		//&lt;Таблица используется для поиска Дублей&gt;
		ТаблицаDR_ДокументовПоID  = МассивРезультатов[0].Выгрузить();
		ТаблицаDR_ДокументовПоID.Индексы.Добавить("ИдентификаторЦепочки, ИдентификаторДокумента");

		//&lt;Таблица DR_Документов со статусом "Загружен"&gt;
		ТаблицаЗагруженных	= МассивРезультатов[2].Выгрузить();
		
		//&lt;Инициализация массива примитивных типов&gt;
		ПримитивныеТипы = Новый Массив;
		ПримитивныеТипы.Добавить(Тип("Строка"));
		ПримитивныеТипы.Добавить(Тип("Число"));		
		
		//&lt;Инициализация квалификаторов&gt;
		КвалификаторСтрока	= Новый КвалификаторыСтроки(200);
		КвалификаторЧисло 	= Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		
		//&lt;Создание описателей типов&gt;
		ОписаниеПримитивныхТипов 	= Новый ОписаниеТипов(ПримитивныеТипы,,,КвалификаторЧисло,КвалификаторСтрока);
		ОписаниеТипаТЗ 				= Новый ОписаниеТипов("ТаблицаЗначений");
		ОписаниеТиповНоменклатура 	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		ОписаниеТиповХарактеристи 	= Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		
		МассивТиповЕдИзм = Новый Массив;
		ИмяОбъектов 	 = Новый Массив;
		ИмяОбъектов.Добавить("УпаковкиЕдиницыИзмерения");
		ИмяОбъектов.Добавить("КлассификаторЕдиницИзмерения");
		ИмяОбъектов.Добавить("ЕдиницыИзмерения");
		
		Для каждого ИмяСпр Из ИмяОбъектов Цикл
			Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
				МассивТиповЕдИзм.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
			КонецЕсли;
		КонецЦикла;
			
		ОписаниеТиповЕдИзм 	= Новый ОписаниеТипов(МассивТиповЕдИзм);	
		
		//&lt;Элементы по спецификации множественные, т.е. могут в ORDER переданы несколько раз. 
		//В созданной структуре будут иметь тип Таблица значений не зависимо от их количества в электронном документе&gt;
		ЭлементыТипаТЗ = Новый Массив;
		ЭлементыТипаТЗ.Добавить("POSITION");   
		ЭлементыТипаТЗ.Добавить("CAMPAIGNINFO");
		ЭлементыТипаТЗ.Добавить("SELFSHIPLIMES");
		ЭлементыТипаТЗ.Добавить("LIMES");
		ЭлементыТипаТЗ.Добавить("PACKING");
		
		//&lt;В таблицу добавляются данные по распарсенным XML&gt;
		ТаблицаНовДокументов = Новый ТаблицаЗначений;
		ТаблицаНовДокументов.Колонки.Добавить("ChainID");         //Тип - Строка
		ТаблицаНовДокументов.Колонки.Добавить("DocUUID");         //Тип - Строка
		ТаблицаНовДокументов.Колонки.Добавить("ДатаФайла");       //Тип - Дата
		ТаблицаНовДокументов.Колонки.Добавить("ДанныеДокумента"); //Тип - Структура

		//&lt;Создание индекса для поиска по таблице&gt;
		ТаблицаНовДокументов.Индексы.Добавить("DocUUID");
		
		//&lt;Получение значения доп. константы&gt;
		СрокПовторнойОбработки = Настройка_Параметр_Прочитать("СрокПовторнойОбработкиДокументов", 2);
		ПерезаписыватьЗаказ    = Настройка_Параметр_Прочитать("ПерезаписыватьЗаказ", Ложь);
		АвтоЗаказ    		   = Настройка_Параметр_Прочитать("АвтоматическоеСозданиеЗаказа", Ложь);
		
		//Для автоматического создания или перезаписи Заказа 1С
		ТаблицаВыбранныхЗаписей = Новый ТаблицаЗначений;
		ТаблицаВыбранныхЗаписей.Колонки.Добавить("Документ", Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
		ТаблицаВыбранныхЗаписей.Колонки.Добавить("ИдентификаторЦепочки", Новый ОписаниеТипов("Строка"));
		ТаблицаВыбранныхЗаписей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
				
		#Область СозданиеКоллекцииДанныхПоНовымДокументам
		
		Для каждого СтрокаТаблицы ИЗ ТаблицаЗагруженных Цикл
			
			//&lt;Тип - Структура&gt;
			ДанныеДокумента = Новый Структура;	
			ДанныеФайла 	= Новый Структура;
			ПараметрыОтбора = Новый Структура;
			
			//&lt;Получение данных XML&gt;
			Попытка
				
				ДвоичныеДанныеФайла = СтрокаТаблицы.ДанныеФайла.Получить();	
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
				
				Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда					
					ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);					
				Иначе					
					ТекстЛогаСобытий = СтрокаТаблицы.Представление + "не обработан. Причина: отсутствуют Двоичные данные XML";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецЕсли;
				
			Исключение				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Продолжить;	
			КонецПопытки;
			
			ТекущийФайл = Новый Файл(ИмяВременногоФайла);
			
			КодировкаXML = "UTF-8";
			ЧтениеXMLДляТекущегоФайла = ПолучитьЧтениеXMLДляФайла(ТекущийФайл.Имя, ТекущийФайл, КодировкаXML, МассивЛогаСобытий); 							
			Если ЧтениеXMLДляТекущегоФайла = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектXDTO = Неопределено;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLДляТекущегоФайла);
			
			//&lt;Преобразование данных из XDTO в Структуру - "ДанныеФайла"&gt;
			Если ОбъектXDTO &lt;&gt; Неопределено Тогда
				РекурсивноПостроитьСтруктуруEDI(ОбъектXDTO, ЭлементыТипаТЗ, ДанныеФайла, ОписаниеПримитивныхТипов, ОписаниеТипаТЗ);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЧтениеXMLДляТекущегоФайла.Закрыть();
			
			//&lt;Удаление временного файла&gt;
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
			КонецПопытки;
			
			//&lt;Поиск ID цепочки по ID эл.документа&gt;
			НайденнаяСтрока = ТаблицаДокументовAPI.Найти(СтрокаТаблицы.ИдентификаторДокумента, "docUUID");
			
			//&lt;Найденный ID цепочки присваиваем эл. документу&gt;
			Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
				
				ДатаAPI = СтрЗаменить(НайденнаяСтрока.date, "-", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, ":", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, " ", "");
				
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", НайденнаяСтрока.chainID);
				ДанныеДокумента.Вставить("ДатаСообщения", Дата(ДатаAPI));
				
			ИначеЕсли СтрокаТаблицы.ФайлЗагруженЛокально = Истина Тогда
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", "TMP_" + СтрокаТаблицы.ИдентификаторДокумента);
				ДанныеДокумента.Вставить("ДатаСообщения", ТекущаяДата());
				
			Иначе
				Комментарий = "По ORDER (Электронный заказ) № " + ДанныеФайла.NUMBER + " не найден идентификатор цепочки в списке полученных идентификаторов с сервера.";
				
				DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
				DR_ДокументОбъект.Комментарий = Комментарий;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Комментарий;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;				
			КонецЕсли;
			
			//&lt;Параметры отбора для поиска дублей&gt;
			ПараметрыОтбора.Вставить("ИдентификаторЦепочки", ДанныеДокумента.ИдентификаторЦепочки);
			ПараметрыОтбора.Вставить("ИдентификаторДокумента", СтрокаТаблицы.ИдентификаторДокумента);
			
			//&lt;Поиск дублей. РезультатПоиска - тип Массив&gt;
			РезультатПоиска = ТаблицаDR_ДокументовПоID.НайтиСтроки(ПараметрыОтбора);
			
			//&lt;Проверка на дубли по DR_Документам со статусом "Обработан" или "Не обработан" найденных по установленному отбору&gt;
			Если НЕ РезультатПоиска.Количество() = 0 Тогда
				
				ЭлементМассива = РезультатПоиска[0];
				
				Если ВРег(ЭлементМассива.СтатусДокумента) = "НЕОБРАБОТАН" 
						ИЛИ ВРег(ЭлементМассива.СтатусДокумента) = "ОБРАБОТАН" Тогда 
					
					//&lt;Для Нового DR_Документа изменяем статус&gt;
					DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
					DR_ДокументОбъект.Статус = "Архивный";
					DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
					DR_ДокументОбъект.Комментарий = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление;
					
					ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
					
					НовСтр = ТабличнаяЧасть.Добавить();
					НовСтр.Реквизит = "НеОбрабатывать";
					НовСтр.Значение = Истина;
					DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Причина = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление; 
					ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Причина;
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;					
				КонецЕсли;
				
			КонецЕсли;
			
			//&lt;Проверка дублей по DR_Документам со статусом "Загружен"&gt; 
			ЭлементКоллекции = ТаблицаНовДокументов.Найти(СтрокаТаблицы.ИдентификаторДокумента, "DocUUID");
			
			Если ЭлементКоллекции &lt;&gt; Неопределено Тогда
				
				//&lt;Изменям статус DR_Документа определенного как дубль&gt;
				DR_ДокументСсылка = ЭлементКоллекции.ДанныеДокумента.DR_Документ; 
				DR_ДокументОбъект = DR_ДокументСсылка.ПолучитьОбъект();
				DR_ДокументОбъект.Статус = "Архивный";
				DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
				DR_ДокументОбъект.Комментарий = "Документ определен как дубль";
				
				ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				НовСтр = ТабличнаяЧасть.Добавить();
				НовСтр.Реквизит = "НеОбрабатывать";
				НовСтр.Значение = Истина;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстЛогаСобытий =  "В процессе обработки " + СтрокаТаблицы.Представление + ". " + Строка(DR_ДокументСсылка) + " определен как дубль и обработан не будет.";
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				//&lt;Удаляем найденную запись из таблицы&gt;
				ТаблицаНовДокументов.Удалить(ЭлементКоллекции);
				
			КонецЕсли;
			
			ДанныеДокумента.Вставить("ИдентификаторДокумента"	, СтрокаТаблицы.ИдентификаторДокумента);
			ДанныеДокумента.Вставить("DR_Документ"				, СтрокаТаблицы.DR_Документ);
			ДанныеДокумента.Вставить("Статус"					, СтрокаТаблицы.СтатусДокумента);
			ДанныеДокумента.Вставить("ДанныеФайла"				, ДанныеФайла);
			ДанныеДокумента.Вставить("ДатаФайла"				, СтрокаТаблицы.ДатаФайла);
			
			//&lt;Классификатор валют&gt;
			КлассификаторВалюты = Новый Соответствие;
			КлассификаторВалюты.Вставить("RUB"	,643);
			КлассификаторВалюты.Вставить("KZT"	,398);
			КлассификаторВалюты.Вставить("UAH"	,980);
			КлассификаторВалюты.Вставить("USD"	,840);
			КлассификаторВалюты.Вставить("EUR"	,978);
			КлассификаторВалюты.Вставить("MDL"	,498);
			КлассификаторВалюты.Вставить("BYR"	,974);
			КлассификаторВалюты.Вставить("TMT"	,934);
			КлассификаторВалюты.Вставить("USD"	,840);
			КлассификаторВалюты.Вставить("kz"	,398);
			КлассификаторВалюты.Вставить("ru"	,643);
			
			//&lt;БКВ - Буквенный код валюты. ЦКВ - цифровой код валюты&gt;
			БКВ = Неопределено;
			ДанныеФайла.Свойство("CURRENCY", БКВ);
			
			//&lt;Получение валюты из классификатора валют по буквенному коду&gt;
			Если БКВ &lt;&gt; Неопределено Тогда
				ЦКВ = КлассификаторВалюты[БКВ];
				ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
			Иначе //&lt;иначе получаем по коду страны из профиля обмена&gt;
				ЗапросКодаСтраны = Новый Запрос;
				ЗапросКодаСтраны.Текст = 
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(DR_НастройкиДополнительныеРеквизиты.Значение КАК СТРОКА(3)) КАК Страна
				|ИЗ
				|	Справочник.DR_Настройки КАК DR_Настройки
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_НастройкиДополнительныеРеквизиты
				|		ПО DR_Настройки.Ссылка = DR_НастройкиДополнительныеРеквизиты.Ссылка
				|			И (DR_Настройки.ВидНастройки = ""ПрофилиОбмена"")
				|ГДЕ
				|	DR_Настройки.ПометкаУдаления = ЛОЖЬ
				|	И DR_Настройки.Статус = ""Активный""
				|	И DR_НастройкиДополнительныеРеквизиты.Реквизит = ""Страна""";
				
				ВыборкаЗапрос = ЗапросКодаСтраны.Выполнить().Выбрать();

				ВыборкаЗапрос.Следующий();
				ЦКВ = КлассификаторВалюты.Получить(ВыборкаЗапрос.Страна);
				ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(ЦКВ);
				
			КонецЕсли;
			
			//&lt;Добавление валюты&gt;
			ДанныеФайла.Вставить("Валюта", ВалютаСсылка);
			
			# Область ПодменыGLNПоТорговымСетям
			
			//&lt;В созданной структуре документа подмену не делаем. Оставляем как передала сеть&gt; 
			//&lt;Для этого создаем отдельную структуру "ЭДО_GLN" заполняем ее с учетом подмен&gt;
			//&lt;Полученную структуру преобразуем в Таблицу значений "HEAD" для поиска УчастниковЭДО в базе&gt;
			
			HEAD 	= Новый ТаблицаЗначений;
			ЭДО_GLN = Новый Структура;
			
			INVOICEPARTNER = Неопределено;
			ДанныеФайла.Свойство("INVOICEPARTNER", INVOICEPARTNER);
			
			//&lt;Подмена по ТС Метро&gt;
			Если INVOICEPARTNER &lt;&gt; Неопределено Тогда 
				ЭДО_GLN.Вставить("BUYER"	, ?(INVOICEPARTNER = "4607070199991", INVOICEPARTNER, ДанныеФайла.BUYER));				
			Иначе 
				ЭДО_GLN.Вставить("BUYER"	, ДанныеФайла.BUYER);	  //Покупатель		
			КонецЕсли;
			
			ЭДО_GLN.Вставить("RECIPIENT"		, ДанныеФайла.RECIPIENT);     //Продавец
			ЭДО_GLN.Вставить("DELIVERYPLACE"	, ДанныеФайла.DELIVERYPLACE); //Грузополучатель
			
			//&lt;Заполнение таблицы GLN&gt;
			ДобавитьСтрокуВТаблицуШапка(HEAD, ЭДО_GLN);
			ДанныеФайла.Вставить("HEAD", HEAD);
			
			#КонецОбласти
			
			//&lt;Добавление реквизитов по Участникам ЭДО для последующего их заполнения&gt;
			ДанныеФайла.Вставить("Организация"		, "");
			ДанныеФайла.Вставить("Контрагент"		, "");
			ДанныеФайла.Вставить("ТочкаДоставки"	, "");
			
			//&lt;..Для проверки необходимости получения данных из базы по участникам ЭДО&gt;
			ДанныеФайла.Вставить("ЗаполнитьУчастниковЭДО", Истина);
			//&lt;..Для проверки необходимости получения данных из базы по не сопостваленной Номенклатуры в первый раз&gt;
			ДанныеФайла.Вставить("ПервичныйПоискНоменклатуры", Истина);
			//&lt;..Для проверки необходимости обработки DR_Документа по кастомному условию&gt;
			ДанныеФайла.Вставить("НеОбрабатывать", Ложь);
			
			//&lt;Преобразование даты формата 2023-02-12 в формат 12.02.2022 00:00:00&gt;
			ЭлементыТипаДата = Новый Структура("DATE, DELIVERYDATE, CAMPAIGNDATE", "ДатаЭлектронногоДокумента", "ДатаПоставки", "ДатаДоговора");
			
			Для каждого Элемент Из ЭлементыТипаДата Цикл 
				Если ДанныеФайла.Свойство(Элемент.Ключ) Тогда
					ДанныеФайла.Вставить(Элемент.Значение, Дата(СтрЗаменить(ДанныеФайла[Элемент.Ключ], "-", "")));	 	
				Иначе
					ДанныеФайла.Вставить(Элемент.Значение, Дата(0001,01,01));
				КонецЕсли;				
			КонецЦикла;
						
			Если ДанныеФайла.Свойство("DELIVERYTIME") Тогда
				DELIVERYTIME = СтрЗаменить(ДанныеФайла.DELIVERYTIME, ":", "");
				DELIVERYTIME = ?(СтрДлина(DELIVERYTIME) = 3, "0" + DELIVERYTIME, DELIVERYTIME);
				ДанныеФайла.Вставить("ВремяПоставки", ДАТА("00010101" + DELIVERYTIME));
			КонецЕсли;
		
			Если ДанныеФайла.Свойство("FRESH") Тогда 
				ДанныеФайла.FRESH = ?(ДанныеФайла.FRESH = "0", "Нет", "Да");
			КонецЕсли;
			
			Если ДанныеФайла.Свойство("PROMO") Тогда 
				ДанныеФайла.PROMO = ?(ДанныеФайла.PROMO = "0", "Нет", "Да");
			КонецЕсли;
			
			ТипСтрока = Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200));
			ТипЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3));
			
			//&lt;Поля табличной части POSITION&gt;
			Поля = Новый Структура;
			Поля.Вставить("Номенклатура"		, ОписаниеТиповНоменклатура);
			Поля.Вставить("Характеристика"		, ОписаниеТиповХарактеристи);
			Поля.Вставить("ЕдиницаИзмерения"	, ОписаниеТиповЕдИзм);
			Поля.Вставить("DESCRIPTION"			, ТипСтрока);
			Поля.Вставить("PRODUCTIDSUPPLIER"	, ТипСтрока);
			Поля.Вставить("QUANTITYOFCUINTU"	, ТипЧисло);
			Поля.Вставить("ORDERPRICE"			, ТипЧисло);
			Поля.Вставить("PRICEWITHVAT"		, ТипЧисло);
			Поля.Вставить("VAT"					, ТипЧисло);
			Поля.Вставить("AMOUNTWITHVAT"		, ТипЧисло);
			Поля.Вставить("AMOUNT"				, ТипЧисло);
			Поля.Вставить("VATAMOUNT"			, ТипЧисло);
			
			POSITION = ДанныеФайла.POSITION;
			
			//&lt;Добавление полей в табличную часть POSITION&gt;
			Для каждого Поле Из Поля Цикл
				
				Если POSITION.Колонки.Найти(Поле.Ключ) = Неопределено Тогда
					POSITION.Колонки.Добавить(Поле.Ключ, Поле.Значение);
				КонецЕсли;
				
			КонецЦикла;
			
			//&lt;Преобразование строковых значений в число&gt;
			Для Каждого Стр Из POSITION Цикл
				
				Стр.POSITIONNUMBER      = ЭКОМ_ПреобразоватьВЧисло(Стр.POSITIONNUMBER);                                     //Порядковый номер строки
				Стр.ORDERPRICE   		= ?(Стр.ORDERPRICE = "", 		0, ЭКОМ_ПреобразоватьВЧисло(Стр.ORDERPRICE));  		//Цена продукта без НДС
				Стр.PRICEWITHVAT  		= ?(Стр.PRICEWITHVAT = "", 		0, ЭКОМ_ПреобразоватьВЧисло(Стр.PRICEWITHVAT));		//Цена продукта с НДС		
				Стр.VAT 				= ?(Стр.VAT = "", 				0, ЭКОМ_ПреобразоватьВЧисло(Стр.VAT));          	//Ставка НДС
				Стр.ORDEREDQUANTITY 	= ЭКОМ_ПреобразоватьВЧисло(Стр.ORDEREDQUANTITY);									//Заказанное количество
				Стр.QUANTITYOFCUINTU  	= ?(Стр.QUANTITYOFCUINTU = "", 	0, ЭКОМ_ПреобразоватьВЧисло(Стр.QUANTITYOFCUINTU)); //Количество в упаковке
				Стр.AMOUNTWITHVAT  		= ?(Стр.AMOUNTWITHVAT = "", 	0, ЭКОМ_ПреобразоватьВЧисло(Стр.AMOUNTWITHVAT)); 	//Сумма с НДС
				Стр.AMOUNT  			= ?(Стр.AMOUNT = "", 			0, ЭКОМ_ПреобразоватьВЧисло(Стр.AMOUNT)); 			//Сумма Без НДС
				Стр.VATAMOUNT  			= ?(Стр.VATAMOUNT = "", 		0, ЭКОМ_ПреобразоватьВЧисло(Стр.VATAMOUNT)); 		//Сумма НДС
				
			КонецЦикла;
			
			//////////////////////////////////////////////////////////////////////////////////////////////////////////
			//Для того, что бы не обрабатывать Новый DR_Документы необходимо, значение реквизита "НеОбрабатывать"	//
			//по условию установить в Истина. Условие может быть любым.												//
			//////////////////////////////////////////////////////////////////////////////////////////////////////////			
			
			//&lt;Пример&gt;			
			//МассивТочкеДоставок = новый Массив;
			//МассивТочкеДоставок.Добавить("9864398478404");
			//
			//Если НЕ МассивТочкеДоставок.Найти(ДанныеФайла.DELIVERYPLACE) = Неопределено Тогда
			//	ДанныеФайла.Вставить("НеОбрабатывать", Истина);
			//КонецЕсли;
			
			Если ДанныеФайла.НеОбрабатывать Тогда
				
				//&lt;Для Нового DR_Документа изменяем статус&gt;
				DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
				DR_ДокументОбъект.Статус = "Архивный";
				DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
				DR_ДокументОбъект.Комментарий = "Документ не был обработан по условию описанному в шаблоне ""ORDER входящий""";
				
				ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				НовСтр = ТабличнаяЧасть.Добавить();
				НовСтр.Реквизит = "НеОбрабатывать";
				НовСтр.Значение = Истина;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				Продолжить;
			КонецЕсли;
			
			НовЭлКоллекции 				   = ТаблицаНовДокументов.Добавить();	
			НовЭлКоллекции.ChainID		   = ДанныеДокумента.ИдентификаторЦепочки;		
			НовЭлКоллекции.DocUUID         = ДанныеДокумента.ИдентификаторДокумента;
			НовЭлКоллекции.ДатаФайла       = ДанныеДокумента.ДатаФайла;
			НовЭлКоллекции.ДанныеДокумента = ДанныеДокумента;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ОбработкаКоллекцииДанных
		
		//&lt;Очищаем коллекцию, данные которой уже не нужны&gt;
		ТаблицаЗагруженных = Неопределено;
		
		//&lt;Выполняем сортировку документов в порядке их появления на FTP, т.е. в рамках цепочки по дате файла&gt;
		ТаблицаНовДокументов.Сортировать("ChainID, ДатаФайла");
		
		//&lt;ТаблицаНовДокументов - Тип ТаблицаЗначений&gt;
		//&lt;Поля&gt;
		//    &lt;ChainID 	- Тип Строка (Идентификатор цепочки)&gt;
		//    &lt;DocUIID 	- Тип Строка (Идентификатор документа)&gt;
		//    &lt;ДатаФайла - Тип Дата&gt;
		//    &lt;ДанныеДокумента 	- Тип Структура&gt;:
		//      	&lt;Ключ&gt;:
		//			- ДанныеФайла - Тип Структура
		//			- ИдентификаторДокумента - Тип Строка
		//			- ИдентификаторЦепочки - Тип Строка
		//			- DR_Документ - Тип ДокументСсылка.DR_Документ
		//			- Статус - Тип Строка
		//			- ДатаФайла - Тип Дата
		
		Для каждого Элемент ИЗ ТаблицаНовДокументов Цикл
			
			//&lt;Тип - Массив&gt;
			МассивНеСопоставленныхШК = Новый Массив;
			
			//&lt;Тип - Структура&gt;
			ДанныеДокумента 			= Элемент.ДанныеДокумента;
			ДанныеФайла					= ДанныеДокумента.ДанныеФайла;  
			СтруктураРегистра_DRСобытия	= Новый Структура;
			СтруктураРегистра_DRЦепочки	= Новый Структура;
			
			//&lt;Тип - Ссылка&gt;
			DR_ДокументСсылка	= ДанныеДокумента.DR_Документ; 
			
			//&lt;Тип - Строка&gt;
			ИдентификаторДокумента	 = ДанныеДокумента.ИдентификаторДокумента;
			ИдентификаторЦепочки 	 = ДанныеДокумента.ИдентификаторЦепочки;
			СтатусДокумента		 	 = "НеОбработан";
			ТекстОшибки			 	 = "";
			Комментарий			  	 = "";
			ЗаписьСообщение 	  	 = "";
			
			//&lt;Тип - Соответствие&gt;
			СоответствиеУчастникиЭДО	= Новый Соответствие;
			СоответствиеПоНоменклатуре 	= Новый Соответствие;
			
			КомментарийПоТипуORDER = Новый Структура;
			//Латиница Unicode - 79
			КомментарийПоТипуORDER.Вставить("O", "«ORDER № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D") + " первичный!»");
			//Кириллица Unicode - 1054
			КомментарийПоТипуORDER.Вставить("О", "«ORDER № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D") + " первичный!»");
			КомментарийПоТипуORDER.Вставить("R", "«ORDER № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D") + " был скорректирован!»");
			КомментарийПоТипуORDER.Вставить("D", "«ORDER № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D") + " был аннулирован!»");
			
			ТипORDER = Неопределено;
			ДанныеФайла.Свойство("DOCTYPE", ТипORDER);
			
			//&lt;Заполнение комментария по значению элемента "DOCTYPE"&gt;
			Если ТипORDER &lt;&gt; Неопределено Тогда				
				Комментарий = КомментарийПоТипуORDER[ТипORDER];
			КонецЕсли;
			
			Если ТаблицаВыбранныхЗаписей.Количество() &gt; 0 И ТипORDER &lt;&gt; "D" Тогда
				
				ЭлементКоллекции = ТаблицаВыбранныхЗаписей.Найти(ИдентификаторЦепочки, "ИдентификаторЦепочки");
				
				Если ЭлементКоллекции &lt;&gt; Неопределено Тогда
					//&lt;Удаляем найденную запись из таблицы&gt;
					ТаблицаВыбранныхЗаписей.Удалить(ЭлементКоллекции);
				КонецЕсли;	
				
			КонецЕсли;
			
			//&lt;Поиск и заполнение Участников ЭДО&gt;
			Запрос = Новый Запрос;	
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПОДСТРОКА(ТаблицаGLN.RECIPIENT		, 1, 13) КАК xmlОрганизацияGLN,
			|	ПОДСТРОКА(ТаблицаGLN.BUYER			, 1, 13) КАК xmlКонтрагентGLN,
			|	ПОДСТРОКА(ТаблицаGLN.DELIVERYPLACE	, 1, 13) КАК xmlТочкаДоставкиGLN
			|ПОМЕСТИТЬ ВТ_УчастиникиЭДО
			|ИЗ
			|	&amp;ТаблицаGLN КАК ТаблицаGLN
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭКОМ_GLN_Организация.Объект КАК Организация,
			|	ЭКОМ_GLN_Контрагент.Объект КАК Контрагент,
			|	ЭКОМ_ТочкиДоставки.Объект КАК ТочкаДоставки
			|ИЗ
			|	ВТ_УчастиникиЭДО КАК ВТ_УчастиникиЭДО
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN_Организация
			|		ПО ВТ_УчастиникиЭДО.xmlОрганизацияGLN = ЭКОМ_GLN_Организация.GLN
			|			И (НЕ ЭКОМ_GLN_Организация.Объект ССЫЛКА Справочник.Контрагенты)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN_Контрагент
			|		ПО ВТ_УчастиникиЭДО.xmlКонтрагентGLN = ЭКОМ_GLN_Контрагент.GLN
			|			И (ЭКОМ_GLN_Контрагент.Объект ССЫЛКА Справочник.Контрагенты)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
			|		ПО ВТ_УчастиникиЭДО.xmlТочкаДоставкиGLN = ЭКОМ_ТочкиДоставки.GLN
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВТ_УчастиникиЭДО.xmlОрганизацияGLN,
			|	ВТ_УчастиникиЭДО.xmlКонтрагентGLN,
			|	ВТ_УчастиникиЭДО.xmlТочкаДоставкиGLN
			|ИЗ
			|	ВТ_УчастиникиЭДО КАК ВТ_УчастиникиЭДО";
			
			ТаблицаGLN = ДанныеФайла.HEAD;
			
			Запрос.УстановитьПараметр("ТаблицаGLN", ТаблицаGLN);
			
			РезультатЗапроса = Запрос.Выполнить();
			УчастникиЭДО 	 = РезультатЗапроса.Выгрузить();			
			
			Для Каждого Колонка Из УчастникиЭДО.Колонки Цикл
				
				Ссылка = УчастникиЭДО[0][Колонка.Имя];
				GLN = УчастникиЭДО[1][Колонка.Имя];
				
				Если ЗначениеЗаполнено(Ссылка) Тогда					
					ДанныеФайла[Колонка.Имя] = Ссылка;					
				Иначе					
					//&lt;Заполнение текста ошибки&gt;
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
									+ "Не заполнен(а) " + Колонка.Имя + " (" + GLN + ")";
					
					СоотвествиеУчастник = Новый Соответствие;
					СоотвествиеУчастник.Вставить(Колонка.Имя + "_" + GLN, GLN);					
					СоответствиеУчастникиЭДО.Вставить(Колонка.Имя + "_", СоотвествиеУчастник);					
				КонецЕсли;
				
			КонецЦикла;                                                     
			
			Если ПустаяСтрока(ТекстОшибки) Тогда 
				ДанныеФайла.ЗаполнитьУчастниковЭДО = Ложь;	
			КонецЕсли;
			
			//&lt;Поиск и заполнение номенклатуры&gt;
			Если ЗначениеЗаполнено(ДанныеФайла["Контрагент"]) Тогда
				
				ДанныеФайла.ПервичныйПоискНоменклатуры = Ложь;
				
				ЗапросНоменклатуры = Новый Запрос;
				ЗапросНоменклатуры.Текст =
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТЧ_Товары.PRODUCT КАК СТРОКА(30)) КАК Штрихкод,
				|	&amp;Контрагент КАК Контрагент
				|ПОМЕСТИТЬ ВТ
				|ИЗ
				|	&amp;ТЧ_Товары КАК ТЧ_Товары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ.Штрихкод КАК Штрихкод,
				|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
				|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.ХарактеристикаНоменклатуры, НЕОПРЕДЕЛЕНО) КАК ХарактеристикаНоменклатуры,
				|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.ЕдиницаНоменклатурыКонтрагента, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
				|	ЕСТЬNULL(ЭКОМ_GLN.РасчетСумм, Ложь) КАК РасчетСумм
				|ИЗ
				|	ВТ КАК ВТ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
				|		ПО ВТ.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
				|			И ВТ.Штрихкод = ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
				|		ПО (ЭКОМ_GLN.Объект = &amp;Контрагент)";
				
				POSITION = ДанныеФайла.POSITION;
				
				ЗапросНоменклатуры.УстановитьПараметр("ТЧ_Товары", POSITION.Скопировать(, "PRODUCT"));
				ЗапросНоменклатуры.УстановитьПараметр("Контрагент", ДанныеФайла.Контрагент);
				
				РезультатЗапроса = ЗапросНоменклатуры.Выполнить();
				СписокНоменклатуры = РезультатЗапроса.Выгрузить();
				
				POSITION.Индексы.Добавить("PRODUCT");
				
				Для каждого Строка Из СписокНоменклатуры Цикл
					
					PRODUCT = СокрЛП(Строка.Штрихкод);
					НайденнаяСтрока = POSITION.Найти(PRODUCT, "PRODUCT");
					
					//&lt;построчный расчет сумм&gt;
					Если Строка.РасчетСумм Тогда
						
						ЦенаБезНДС   	= НайденнаяСтрока.ORDERPRICE;  		
						ЦенаСНДС	    = НайденнаяСтрока.PRICEWITHVAT;		
						ЗаказанноеКол	= НайденнаяСтрока.ORDEREDQUANTITY;
						
						СуммаСНДС 	 	= НайденнаяСтрока.AMOUNTWITHVAT;  	
						СуммаНДС 		= НайденнаяСтрока.VATAMOUNT;  		
						СуммаБезНДС 	= НайденнаяСтрока.AMOUNT; 			
						
						Если ЦенаСНДС &lt;&gt; 0 Тогда
							СуммаСНДС = Окр(ЦенаСНДС * ЗаказанноеКол, 2);	
						КонецЕсли;
						
						Если ЦенаБезНДС &lt;&gt; 0 Тогда
							СуммаБезНДС = Окр(ЦенаБезНДС * ЗаказанноеКол, 2);
						КонецЕсли;
						
						Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
							СуммаНДС    = Окр(СуммаСНДС - СуммаБезНДС, 2);
						КонецЕсли;
						
						НайденнаяСтрока.AMOUNTWITHVAT 	= СуммаСНДС;
						НайденнаяСтрока.VATAMOUNT		= СуммаНДС;
						НайденнаяСтрока.AMOUNT 			= СуммаБезНДС;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
						
						НайденнаяСтрока.Номенклатура 	 = Строка.Номенклатура;
						НайденнаяСтрока.Характеристика 	 = Строка.ХарактеристикаНоменклатуры;
						НайденнаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
						
					Иначе
						//&lt;Заполняем массив ШК по которым не найдено сопоставление&gt;
						МассивНеСопоставленныхШК.Добавить(PRODUCT);
						
						ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
										+ "Позиция № " + НайденнаяСтрока.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
										+ "(" + НайденнаяСтрока.PRODUCT + ")";
						
						Код = ?(ЗначениеЗаполнено(НайденнаяСтрока.PRODUCT), НайденнаяСтрока.PRODUCT, НайденнаяСтрока.PRODUCTIDBUYER) 
								+ "_" + ТаблицаGLN[0].BUYER;
						
						СоответствиеПоНоменклатуре.Вставить("АртикулНоменклатурыКонтрагента_"      + Код, НайденнаяСтрока.PRODUCTIDSUPPLIER);
						СоответствиеПоНоменклатуре.Вставить("КодНоменклатурыКонтрагента_"          + Код, НайденнаяСтрока.PRODUCTIDBUYER);
						СоответствиеПоНоменклатуре.Вставить("ШтрихКодНоменклатурыКонтрагента_"     + Код, НайденнаяСтрока.PRODUCT);
						СоответствиеПоНоменклатуре.Вставить("НаименованиеНоменклатурыКонтрагента_" + Код, НайденнаяСтрока.DESCRIPTION);
						СоответствиеПоНоменклатуре.Вставить("ЕдиницаНоменклатурыКонтрагента_"      + Код, Строка.ЕдиницаИзмерения);
						СоответствиеПоНоменклатуре.Вставить("Контрагент_"                          + Код, ДанныеФайла.Контрагент);
						СоответствиеПоНоменклатуре.Вставить("xmlЕдиницаИзмерения_"                 + Код, НайденнаяСтрока.ORDERUNIT);
						
					КонецЕсли;
										
				КонецЦикла;
				
			Иначе
				//&lt;Полчаем все ШК, т.к. контрагент не сопоставлен&gt;
				МассивНеСопоставленныхШК = ДанныеФайла.POSITION.ВыгрузитьКолонку("PRODUCT");				
			КонецЕсли;
			
			//&lt;Проверка по изменению статуса&gt;
			Если ПустаяСтрока(ТекстОшибки) Тогда
				
				СтатусДокумента = "Обработан";
				
				Если (ПерезаписыватьЗаказ ИЛИ АвтоЗаказ) И ТипORDER &lt;&gt; "D" Тогда
									
					 НоваяСтрока = ТаблицаВыбранныхЗаписей.Добавить();
					 НоваяСтрока.Документ = DR_ДокументСсылка;
					 НоваяСтрока.ИдентификаторЦепочки = ИдентификаторЦепочки;
					 НоваяСтрока.Идентификатор = ИдентификаторДокумента;
					 
				КонецЕсли;
				
			КонецЕсли;
			
			//&lt;Добавление записей в РС ЭКОМ_ЗначениеДополнительныхКонстант по не сопоставленным данным&gt;
			Если НЕ СоответствиеУчастникиЭДО.Количество() = 0 Тогда				    
				Для Каждого Участник Из СоответствиеУчастникиЭДО Цикл
					НастройкиПараметровЗаписатьНабором(Участник.Значение, Участник.Ключ);
				КонецЦикла;			
			КонецЕсли;
			
			Если НЕ СоответствиеПоНоменклатуре.Количество() = 0 Тогда
				НастройкиПараметровЗаписатьНабором(СоответствиеПоНоменклатуре    , "Номенклатура_");
			КонецЕсли;
			
			//&lt;Заполнение данных по DR_Документу&gt;
			DR_ДокументОбъект 						= DR_ДокументСсылка.ПолучитьОбъект();
			DR_ДокументОбъект.ИдентификаторЦепочки	= ИдентификаторЦепочки;
			DR_ДокументОбъект.ДанныеФайла 			= Новый ХранилищеЗначения(Неопределено);
			DR_ДокументОбъект.Статус 				= СтатусДокумента;
			DR_ДокументОбъект.Сообщение 			= ТекстОшибки;
			DR_ДокументОбъект.Комментарий			= Комментарий;
			DR_ДокументОбъект.Пользователь 			= НайтиТекущегоПользователя();
			ТЧ_Документа 							= DR_ДокументОбъект.ДополнительныеРеквизиты;
			
			Для каждого ЭлСтруктуры Из ДанныеФайла Цикл
				
				НоваяСтрока = ТЧ_Документа.Добавить();
				НоваяСтрока.Реквизит = ЭлСтруктуры.Ключ;
				
				Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда					
					Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
					НоваяСтрока.ХранилищеЗначения = Хранилище;
				Иначе
					НоваяСтрока.Значение = ЭлСтруктуры.Значение;				
				КонецЕсли;
				
			КонецЦикла;
			
			//&lt;Добавление записей в ТЧ DR_Документа по не сопоставленным ШК&gt;
			Для каждого Штрихкод Из МассивНеСопоставленныхШК Цикл
				
				НоваяСтрока = ТЧ_Документа.Добавить();
				НоваяСтрока.Реквизит = "ШК_НеСопоставлен";
				НоваяСтрока.Значение = Штрихкод;
				
			КонецЦикла;
			
			//&lt;Текст сообщения в событии по документу&gt;
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				ЗаписьСообщение = "В документе есть ошибка";
			КонецЕсли;
			
			Если Не ПустаяСтрока(Комментарий) Тогда
				Если ПустаяСтрока(ЗаписьСообщение) Тогда
					ЗаписьСообщение = "Документ содержит комментарий";
				Иначе
					ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
				КонецЕсли;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			Попытка				
				//&lt;Запись DR_Документа&gt;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				////////////////////////////&lt;Создание записи в РС DR_События&gt;/////////////////////////////////////
				
				//&lt;Заполнение структуры для DR_События&gt;
				СтруктураРегистра_DRСобытия.Вставить("ДатаСообщения"			, ДанныеДокумента.ДатаСообщения);
				СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, ИдентификаторЦепочки);
				СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
				СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
				СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "ORDER_Входящий");
				СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, ИдентификаторДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
				////////////////////////////&lt;Создание записи в РС DR_ЦепочкиДокументов&gt;//////////////////////////////////
				
				//&lt;Заполнение структуры для DR_События&gt;
				СтруктураРегистра_DRЦепочки.Вставить("ДатаЗаказа"				, ДанныеФайла.ДатаЭлектронногоДокумента);
				СтруктураРегистра_DRЦепочки.Вставить("ИдентификаторЦепочки"		, ИдентификаторЦепочки);
				СтруктураРегистра_DRЦепочки.Вставить("ДатаПоставки"				, ДанныеФайла.ДатаПоставки);
				СтруктураРегистра_DRЦепочки.Вставить("НомерЗаказа"				, ДанныеФайла.NUMBER);
				
				Если ЗначениеЗаполнено(ДанныеФайла["Организация"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("Организация"			, ДанныеФайла.Организация);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеФайла["Контрагент"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("Контрагент"			, ДанныеФайла.Контрагент);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеФайла["ТочкаДоставки"]) Тогда
					СтруктураРегистра_DRЦепочки.Вставить("ТочкаДоставки"		, ДанныеФайла.ТочкаДоставки);
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	DR_ЦепочкиДокументов.НомерЗаказа КАК НомерЗаказа,
				|	DR_ЦепочкиДокументов.ДатаЗаказа КАК ДатаЗаказа,
				|	DR_ЦепочкиДокументов.ДатаПоставки КАК ДатаПоставки,
				|	DR_ЦепочкиДокументов.ИдентификаторЦепочки КАК ИдентификаторЦепочки
				|ИЗ
				|	РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
				|ГДЕ
				|	DR_ЦепочкиДокументов.НомерЗаказа = &amp;НомерЗаказа
				|	И DR_ЦепочкиДокументов.ДатаЗаказа МЕЖДУ ДОБАВИТЬКДАТЕ(&amp;ДатаЗаказа, МЕСЯЦ, -1) И ДОБАВИТЬКДАТЕ(&amp;ДатаЗаказа, МЕСЯЦ, 1)
				|	И DR_ЦепочкиДокументов.ИдентификаторЦепочки = &amp;ИдентификаторЦепочки";
				
				Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
				Запрос.УстановитьПараметр("НомерЗаказа"				, СтруктураРегистра_DRЦепочки.НомерЗаказа);
				Запрос.УстановитьПараметр("ДатаЗаказа"				, СтруктураРегистра_DRЦепочки.ДатаЗаказа);
				
				РезультатЗапроса = Запрос.Выполнить();
				ТЗ_Цепочка = РезультатЗапроса.Выгрузить();
				
				//&lt;Возможные значения: 0 - создать запись; 1 - перезаписать; "" - ни каких действий не производить&gt;
				ДействияСЗаписью = 0;
				
				Если НЕ ТЗ_Цепочка.Количество() = 0 Тогда
					
					Цепочка = ТЗ_Цепочка[0];
					
					Если ТипORDER = "D" ИЛИ ТипORDER = "O" ИЛИ ТипORDER = Неопределено Тогда						
						ДействияСЗаписью = "";						
					ИначеЕсли ТипORDER = "R" Тогда						
						ДействияСЗаписью = 1;						
					КонецЕсли;
					
				КонецЕсли;
				
				НЗ_DRЦепочкиДокументов = РегистрыСведений.DR_ЦепочкиДокументов.СоздатьНаборЗаписей();
				
				Если ДействияСЗаписью = 0 Тогда
									
					НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(СтруктураРегистра_DRЦепочки.НомерЗаказа);
					НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(СтруктураРегистра_DRЦепочки.ДатаЗаказа);
					НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(СтруктураРегистра_DRЦепочки.ДатаПоставки);
					НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
					
				ИначеЕсли ДействияСЗаписью = 1 Тогда
									
					НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(Цепочка.НомерЗаказа);
					НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(Цепочка.ДатаЗаказа);
					НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(Цепочка.ДатаПоставки);
					НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(Цепочка.ИдентификаторЦепочки);					
					
					НЗ_DRЦепочкиДокументов.Прочитать();
					НЗ_DRЦепочкиДокументов.Удалить(0);
					НЗ_DRЦепочкиДокументов.Записать();
					
					НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(СтруктураРегистра_DRЦепочки.НомерЗаказа);
					НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(СтруктураРегистра_DRЦепочки.ДатаЗаказа);
					НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(СтруктураРегистра_DRЦепочки.ДатаПоставки);
					НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
					
				ИначеЕсли ДействияСЗаписью = "" Тогда
					
					ЗафиксироватьТранзакцию();					
					Продолжить;
				КонецЕсли;
				
				НЗ_DRЦепочкиДокументов.Прочитать();
				
				Если НЗ_DRЦепочкиДокументов.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRЦепочкиДокументов.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRЦепочкиДокументов[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистра_DRЦепочки Цикл			
						НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRЦепочкиДокументов.Записать();
				
				ЗафиксироватьТранзакцию();
				
			Исключение				
				ОтменитьТранзакцию();
				
				ТекстЛогаСобытий = НСтр("ru = 'Формирование записей в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
				ПредставлениеДокументаXML = "ORDER (Электронный заказ)" + " № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.ДатаЭлектронногоДокумента, "ДЛФ=D");
				ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
				ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ОбработкаДокументовСоСтатустомНеОбработан
		
		//&lt;Очищаем коллекцию, данные которой уже не нужны&gt;
		ТаблицаНовДокументов = Неопределено;
		
		Индекс = МассивРезультатов.ВГраница();
		
		Если НЕ МассивРезультатов[Индекс].Пустой() Тогда
			
			//&lt;Получение коллекции колонок. По которым будет выполнен обход строки&gt;
			Колонки = МассивРезультатов[Индекс].Колонки;
			
			ВыборкаДетальныеЗаписи = МассивРезультатов[Индекс].Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				//&lt;Тип - Массив&gt;
				МассивСопоставленныхШК = Новый Массив;
				
				//&lt;Тип - Булево&gt;
				МодификацияЦепочки	 	= Ложь;
				DRДокументМодифицирован = Ложь;
				
				//&lt;Тип - Строка&gt;
				СтатусДокумента	= "НеОбработан";
				ТекстОшибки = "";
				ЗаписьСообщение	= "";
				
				//&lt;Тип - Ссылка&gt;
				DR_ДокументСсылка 	= ВыборкаДетальныеЗаписи.DR_Документ;
				
				//&lt;Тип - Структура&gt;
				СтруктураДанных 			= Новый Структура;
				СтруктураРегистра_DRСобытия = Новый Структура;
				СтруктураРегистра_DRЦепочки	= Новый Структура;
				
				//&lt;Тип - Соответствие&gt;
				СоответствиеПоНоменклатуре = Новый Соответствие;
				
				//&lt;Заполнение структуры данными&gt;
				Для каждого Колонка ИЗ Колонки Цикл
					
					Значение = ВыборкаДетальныеЗаписи[Колонка.Имя];
					
					Если ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
						
						ЗначениеИзХранилища = Значение.Получить();
						
						Если ЗначениеЗаполнено(ЗначениеИзХранилища) Тогда			
							СтруктураДанных.Вставить(Колонка.Имя, ЗначениеИзХранилища);		
						КонецЕсли;
						
					Иначе	
						СтруктураДанных.Вставить(Колонка.Имя, Значение);	
					КонецЕсли;
					
				КонецЦикла;
				
				Комментарий = СтруктураДанных.Комментарий; 
				
				//&lt;Получение возраста Заказа в днях&gt;
				ТекДата = КонецДня(ТекущаяДата()) + 1; 		//Текущая дата включительно.
				ВозрастВДнях = (ТекДата - СтруктураДанных.ДатаЭлектронногоДокумента) / 86400;
				
				//&lt;Если возраст ORDER больше срока обработки DR_Документов со статусом "Не обработан"&gt;
				//&lt;Тогда по таким документам меняем статус и переходим к обработке следующего DR_Документа&gt;
				Если ВозрастВДнях &gt; СрокПовторнойОбработки Тогда
					
					DR_ДокументОбъект 			  = DR_ДокументСсылка.ПолучитьОбъект();
					DR_ДокументОбъект.Статус 	  = "Архивный";
					DR_ДокументОбъект.Комментарий = Комментарий + ?(ЗначениеЗаполнено(Комментарий), Символы.ПС, "")
													+ "Документу изменен статус на ""Архивный"" по причине: Срок повторной обработки Документа истек.";
					
					НачатьТранзакцию();
					
					Попытка						
						//&lt;Запись DR_Документа&gt;
						DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						МЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьМенеджерЗаписи();
						МЗ_DRСобытия.ИдентификаторЦепочки 	= СтруктураДанных.ИдентификаторЦепочки;
						МЗ_DRСобытия.Документ 				= DR_ДокументСсылка;
						МЗ_DRСобытия.ВидДокумента 			= "ORDER_Входящий";
						МЗ_DRСобытия.Идентификатор 			= СтруктураДанных.ИдентификаторДокумента;
						
						МЗ_DRСобытия.Прочитать();
						
						Если МЗ_DRСобытия.Выбран() Тогда							
							МЗ_DRСобытия.ДатаЗаписи = ТекущаяДата();
							МЗ_DRСобытия.Статус = "Архивный";
							МЗ_DRСобытия.Записать();							
						КонецЕсли;
						
						ЗафиксироватьТранзакцию();
						
					Исключение
						ОтменитьТранзакцию();
						
						ПредставлениеДокументаXML = "ORDER (Электронный заказ)" + " № " + СтруктураДанных.NUMBER + " от " + Формат(СтруктураДанных.ДатаЭлектронногоДокумента, "ДЛФ=D");
						ТекстЛогаСобытий = "Изменение статуса " + ПредставлениеДокументаXML + ", срок обработки которого истек, не выполнено. По причине - " + ОписаниеОшибки();
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);						
						ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки - " + ОписаниеОшибки());
						
					КонецПопытки;
					
					Продолжить;					
				КонецЕсли;
				
				//&lt;Поиск и заполнение Участников ЭДО&gt;		
				Если СтруктураДанных["ЗаполнитьУчастниковЭДО"] Тогда 
					
					Запрос = Новый Запрос;	
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ПОДСТРОКА(ТаблицаGLN.RECIPIENT		, 1, 13) КАК xmlОрганизацияGLN,
					|	ПОДСТРОКА(ТаблицаGLN.BUYER			, 1, 13) КАК xmlКонтрагентGLN,
					|	ПОДСТРОКА(ТаблицаGLN.DELIVERYPLACE	, 1, 13) КАК xmlТочкаДоставкиGLN
					|ПОМЕСТИТЬ ВТ_УчастиникиЭДО
					|ИЗ
					|	&amp;ТаблицаGLN КАК ТаблицаGLN
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ЭКОМ_GLN_Организация.Объект КАК Организация,
					|	ЭКОМ_GLN_Контрагент.Объект КАК Контрагент,
					|	ЭКОМ_ТочкиДоставки.Объект КАК ТочкаДоставки
					|ИЗ
					|	ВТ_УчастиникиЭДО КАК ВТ_УчастиникиЭДО
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN_Организация
					|		ПО ВТ_УчастиникиЭДО.xmlОрганизацияGLN = ЭКОМ_GLN_Организация.GLN
					|			И (НЕ ЭКОМ_GLN_Организация.Объект ССЫЛКА Справочник.Контрагенты)
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN_Контрагент
					|		ПО ВТ_УчастиникиЭДО.xmlКонтрагентGLN = ЭКОМ_GLN_Контрагент.GLN
					|			И (ЭКОМ_GLN_Контрагент.Объект ССЫЛКА Справочник.Контрагенты)
					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
					|		ПО ВТ_УчастиникиЭДО.xmlТочкаДоставкиGLN = ЭКОМ_ТочкиДоставки.GLN
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ВТ_УчастиникиЭДО.xmlОрганизацияGLN,
					|	ВТ_УчастиникиЭДО.xmlКонтрагентGLN,
					|	ВТ_УчастиникиЭДО.xmlТочкаДоставкиGLN
					|ИЗ
					|	ВТ_УчастиникиЭДО КАК ВТ_УчастиникиЭДО";
					
					ТаблицаGLN = СтруктураДанных.HEAD;
					
					Запрос.УстановитьПараметр("ТаблицаGLN", ТаблицаGLN);
					
					РезультатЗапроса = Запрос.Выполнить();
					УчастникиЭДО = РезультатЗапроса.Выгрузить();
					
					Для Каждого Колонка Из УчастникиЭДО.Колонки Цикл
						
						УчастникЭДО = Неопределено;				
						СтруктураДанных.Свойство(Колонка.Имя, УчастникЭДО);
						
						Если ЗначениеЗаполнено(УчастникЭДО) Тогда
							Продолжить;	
						КонецЕсли;
						
						Ссылка = УчастникиЭДО[0][Колонка.Имя];
						GLN = УчастникиЭДО[1][Колонка.Имя];
						
						Если ЗначениеЗаполнено(Ссылка) Тогда
													
							СтруктураДанных[Колонка.Имя] = Ссылка;
							
							МодификацияЦепочки	 	= Истина;
							DRДокументМодифицирован = Истина;
							
						Иначе							
							ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
											+ "Не заполнен(а) " + Колонка.Имя + " (" + GLN + ")";							
						КонецЕсли;
						
					КонецЦикла;                                                     
					
					Если ПустаяСтрока(ТекстОшибки) Тогда 
						СтруктураДанных.ЗаполнитьУчастниковЭДО = Ложь;	
					КонецЕсли;
					
				КонецЕсли;
				
				//&lt;Получение Таблицы значений POSITION&gt;
				ТЧ_ДопРеквизиты = DR_ДокументСсылка.ДополнительныеРеквизиты;
				
				НайденнаяСтрока = ТЧ_ДопРеквизиты.Найти("POSITION", "Реквизит");
				
				Если НайденнаяСтрока &lt;&gt; Неопределено Тогда 
					
					POSITION = НайденнаяСтрока.ХранилищеЗначения.Получить();
					
					Если ЗначениеЗаполнено(POSITION) Тогда
						СтруктураДанных.Вставить("POSITION", POSITION);	
					Иначе
						ПредставлениеДокументаXML = "ORDER (Электронный заказ)" + " № " + СтруктураДанных.NUMBER + " от " + Формат(СтруктураДанных.ДатаЭлектронногоДокумента, "ДЛФ=D");
						ТекстЛогаСобытий = "По " + ПредставлениеДокументаXML + ", отсутсвует значение реквизита POSITION";
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
						
						Продолжить;	
					КонецЕсли;
					
				Иначе
					ПредставлениеДокументаXML = "ORDER (Электронный заказ)" + " № " + СтруктураДанных.NUMBER + " от " + Формат(СтруктураДанных.ДатаЭлектронногоДокумента, "ДЛФ=D");
					ТекстЛогаСобытий = "По " + ПредставлениеДокументаXML + ", отсутсвует реквизит POSITION";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;					
				КонецЕсли;
				
				//&lt;Поиск и заполнение номенклатуры&gt;
				ЗапросНоменклатуры = Новый Запрос;
				ЗапросНоменклатуры.Текст =
				"ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТЧ_Товары.PRODUCT КАК СТРОКА(30)) КАК Штрихкод,
				|	&amp;Контрагент КАК Контрагент
				|ПОМЕСТИТЬ ВТ
				|ИЗ
				|	&amp;ТЧ_Товары КАК ТЧ_Товары
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТ.Штрихкод КАК Штрихкод,
				|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
				|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.ХарактеристикаНоменклатуры, НЕОПРЕДЕЛЕНО) КАК ХарактеристикаНоменклатуры,
				|	ЕСТЬNULL(ЭКОМ_НоменклатураКонтрагентов.ЕдиницаНоменклатурыКонтрагента, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
				|	ЕСТЬNULL(ЭКОМ_GLN.РасчетСумм, Ложь) КАК РасчетСумм
				|ИЗ
				|	ВТ КАК ВТ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
				|		ПО ВТ.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
				|			И ВТ.Штрихкод = ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
				|		ПО (ЭКОМ_GLN.Объект = &amp;Контрагент)";
				
				ЗапросНоменклатуры.УстановитьПараметр("ТЧ_Товары", POSITION.Скопировать(, "PRODUCT"));
				ЗапросНоменклатуры.УстановитьПараметр("Контрагент", СтруктураДанных.Контрагент);
				
				Если СтруктураДанных.ШК_Сопоставлен Тогда
					
					РезультатЗапроса = ЗапросНоменклатуры.Выполнить();
					СписокНоменклатуры = РезультатЗапроса.Выгрузить();
					
					POSITION.Индексы.Добавить("PRODUCT");
					
					Для каждого Строка Из СписокНоменклатуры Цикл
						
						PRODUCT = СокрЛП(Строка.Штрихкод);
						НайденнаяСтрока = POSITION.Найти(PRODUCT, "PRODUCT");
						
						//&lt;построчный расчет сумм&gt;
						Если Строка.РасчетСумм Тогда
							
							ЦенаБезНДС   	= НайденнаяСтрока.ORDERPRICE;  		
							ЦенаСНДС	    = НайденнаяСтрока.PRICEWITHVAT;		
							ЗаказанноеКол	= НайденнаяСтрока.ORDEREDQUANTITY;
							
							СуммаСНДС 	 	= НайденнаяСтрока.AMOUNTWITHVAT;  	
							СуммаНДС 		= НайденнаяСтрока.VATAMOUNT;  		
							СуммаБезНДС 	= НайденнаяСтрока.AMOUNT; 			
							
							Если ЦенаСНДС &lt;&gt; 0 Тогда
								СуммаСНДС = Окр(ЦенаСНДС * ЗаказанноеКол, 2);	
							КонецЕсли;
							
							Если ЦенаБезНДС &lt;&gt; 0 Тогда
								СуммаБезНДС = Окр(ЦенаБезНДС * ЗаказанноеКол, 2);
							КонецЕсли;
							
							Если СуммаСНДС &lt;&gt; 0 И СуммаБезНДС &lt;&gt; 0 Тогда
								СуммаНДС    = Окр(СуммаСНДС - СуммаБезНДС, 2);
							КонецЕсли;
							
							НайденнаяСтрока.AMOUNTWITHVAT 	= СуммаСНДС;
							НайденнаяСтрока.VATAMOUNT		= СуммаНДС;
							НайденнаяСтрока.AMOUNT 			= СуммаБезНДС;
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) Тогда
							Продолжить;	
						КонецЕсли;
						
						Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда					
							
							НайденнаяСтрока.Номенклатура = Строка.Номенклатура;
							НайденнаяСтрока.Характеристика = Строка.ХарактеристикаНоменклатуры;
							НайденнаяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
							
							DRДокументМодифицирован = Истина;
							//&lt;Удаление из ТЧ DR_Документа записей ШК_НеСопоставлен&gt;
							МассивСопоставленныхШК.Добавить(PRODUCT);
							
						Иначе							
							ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
											+ "Позиция № " + НайденнаяСтрока.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
											+ "(" + НайденнаяСтрока.PRODUCT + ")";							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе					
					
					Если ЗначениеЗаполнено(СтруктураДанных["Контрагент"]) И СтруктураДанных.ПервичныйПоискНоменклатуры Тогда
						
						Для каждого Строка Из POSITION Цикл
							
							ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
											+ "Позиция № " + Строка.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
											+ "(" + Строка.PRODUCT + ")";	
							
							Код = ?(ЗначениеЗаполнено(Строка.PRODUCT), Строка.PRODUCT, Строка.PRODUCTIDBUYER) 
									+ "_" + СтруктураДанных.HEAD[0].BUYER;
							
							СоответствиеПоНоменклатуре.Вставить("АртикулНоменклатурыКонтрагента_"      + Код, Строка.PRODUCTIDSUPPLIER);
							СоответствиеПоНоменклатуре.Вставить("КодНоменклатурыКонтрагента_"          + Код, Строка.PRODUCTIDBUYER);
							СоответствиеПоНоменклатуре.Вставить("ШтрихКодНоменклатурыКонтрагента_"     + Код, Строка.PRODUCT);
							СоответствиеПоНоменклатуре.Вставить("НаименованиеНоменклатурыКонтрагента_" + Код, Строка.DESCRIPTION);
							СоответствиеПоНоменклатуре.Вставить("ЕдиницаНоменклатурыКонтрагента_"      + Код, Строка.ЕдиницаИзмерения);
							СоответствиеПоНоменклатуре.Вставить("Контрагент_"                          + Код, СтруктураДанных.Контрагент);
							СоответствиеПоНоменклатуре.Вставить("xmlЕдиницаИзмерения_"                 + Код, Строка.ORDERUNIT);
							
						КонецЦикла; 
						
						СтруктураДанных.ПервичныйПоискНоменклатуры = Ложь;
						
					ИначеЕсли ЗначениеЗаполнено(СтруктураДанных["Контрагент"]) Тогда
						
						Для каждого Строка Из POSITION Цикл
							
							Если НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
								ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "")
												+ "Позиция № " + Строка.POSITIONNUMBER + ". Не заполнена номенклатура по штрихкоду - " 
												+ "(" + Строка.PRODUCT + ")";	
							КонецЕсли;
							
						КонецЦикла;

					КонецЕсли;
					
				КонецЕсли;
				
				//&lt;Проверка на перезапись повторно обрабатываемых документов&gt;
				Если НЕ DRДокументМодифицирован Тогда 
					Продолжить; 	
				КонецЕсли;
				
				//&lt;Проверка на изменение статуса&gt;
				Если ПустаяСтрока(ТекстОшибки) Тогда					
					СтатусДокумента = "Обработан";
				КонецЕсли;
				
				//&lt;Добавление записей в РС ЭКОМ_ЗначениеДополнительныхКонстант по не сопоставленным данным&gt;
				Если НЕ СоответствиеПоНоменклатуре.Количество() = 0 Тогда
					НастройкиПараметровЗаписатьНабором(СоответствиеПоНоменклатуре    , "Номенклатура_");
				КонецЕсли;
				
				//&lt;Обновление данных в DR_Документе&gt;
				DR_ДокументОбъект 				= DR_ДокументСсылка.ПолучитьОбъект();
				DR_ДокументОбъект.Статус 		= СтатусДокумента;
				DR_ДокументОбъект.Сообщение 	= ТекстОшибки;
				DR_ДокументОбъект.Комментарий   = Комментарий;
				
				ТЧ_Документа = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				Для каждого ЭлСтруктуры Из СтруктураДанных Цикл
					
					НайденнаяСтрока	= ТЧ_Документа.Найти(ЭлСтруктуры.Ключ, "Реквизит");
					
					Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда				
						Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
						НайденнаяСтрока.ХранилищеЗначения = Хранилище;
					Иначе
						
						Если НайденнаяСтрока = Неопределено Тогда
							Продолжить;
						Иначе
							НайденнаяСтрока.Значение = ЭлСтруктуры.Значение;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				//&lt;Удаление записей ШК_НеСопоставлен&gt;
				Для Каждого Штрихкод Из МассивСопоставленныхШК Цикл
					
					СтрокаТабличнойЧасти = ТЧ_Документа.Найти(Штрихкод, "Значение");
					
					Если СтрокаТабличнойЧасти &lt;&gt; Неопределено Тогда 
						ТЧ_Документа.Удалить(СтрокаТабличнойЧасти);	
					КонецЕсли;
					
				КонецЦикла;
				
				//Текст сообщения в событии по документу
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ЗаписьСообщение = "В документе есть ошибка";
				КонецЕсли;
				
				Если Не ПустаяСтрока(Комментарий) Тогда
					Если ПустаяСтрока(ЗаписьСообщение) Тогда
						ЗаписьСообщение = "Документ содержит комментарий";
					Иначе
						ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
					КонецЕсли;
				КонецЕсли;
				
				НачатьТранзакцию();
				
				Попытка					
					//&lt;Запись DR_Документа&gt;
					DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					//&lt;Перезапись события по DR_документу&gt;
					Если ВРег(СтатусДокумента) = "ОБРАБОТАН" Тогда
						
						СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, СтруктураДанных.ИдентификаторЦепочки);
						СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
						СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
						СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "ORDER_Входящий");
						СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, СтруктураДанных.ИдентификаторДокумента);
						СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
						СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
						
						НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
						НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
						НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
						НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
						НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
						НЗ_DRСобытия.Прочитать();
						
						Если НЗ_DRСобытия.Количество() = 0 Тогда
							НоваяЗапись = НЗ_DRСобытия.Добавить();
						Иначе
							НоваяЗапись = НЗ_DRСобытия[0];
						КонецЕсли;
						
						Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
							НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
						КонецЦикла;
						
						НЗ_DRСобытия.Записать();
						
					КонецЕсли;
					
					//&lt;Перезапись данных в РС DR_ЦепочкиДокументов&gt;
					Если МодификацияЦепочки Тогда
						
						СтруктураРегистра_DRЦепочки.Вставить("ДатаЗаказа"				, СтруктураДанных.ДатаЭлектронногоДокумента);
						СтруктураРегистра_DRЦепочки.Вставить("ИдентификаторЦепочки"		, СтруктураДанных.ИдентификаторЦепочки);
						СтруктураРегистра_DRЦепочки.Вставить("ДатаПоставки"				, СтруктураДанных.ДатаПоставки);
						СтруктураРегистра_DRЦепочки.Вставить("НомерЗаказа"				, СтруктураДанных.NUMBER);
						
						Если ЗначениеЗаполнено(СтруктураДанных["Организация"]) Тогда
							СтруктураРегистра_DRЦепочки.Вставить("Организация"			, СтруктураДанных.Организация);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтруктураДанных["Контрагент"]) Тогда
							СтруктураРегистра_DRЦепочки.Вставить("Контрагент"			, СтруктураДанных.Контрагент);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтруктураДанных["ТочкаДоставки"]) Тогда
							СтруктураРегистра_DRЦепочки.Вставить("ТочкаДоставки"		, СтруктураДанных.ТочкаДоставки);
						КонецЕсли;
						
						НЗ_DRЦепочкиДокументов = РегистрыСведений.DR_ЦепочкиДокументов.СоздатьНаборЗаписей();
						НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(СтруктураРегистра_DRЦепочки.НомерЗаказа);
						НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(СтруктураРегистра_DRЦепочки.ДатаЗаказа);
						НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(СтруктураРегистра_DRЦепочки.ДатаПоставки);
						НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
						
						НЗ_DRЦепочкиДокументов.Прочитать();
						
						Если НЗ_DRЦепочкиДокументов.Количество() = 0 Тогда
							ЗафиксироватьТранзакцию();
							Продолжить;
						Иначе
							НоваяЗапись = НЗ_DRЦепочкиДокументов[0];
						КонецЕсли;
						
						Для Каждого Элемент Из СтруктураРегистра_DRЦепочки Цикл			
							НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
						КонецЦикла;
						
						НЗ_DRЦепочкиДокументов.Записать();				
						
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение					
					ОтменитьТранзакцию();
					
					ТекстЛогаСобытий = НСтр("ru = 'Изменение данных в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ПредставлениеДокументаXML = "ORDER (Электронный заказ)" + " № " + СтруктураДанных.NUMBER + " от " + Формат(СтруктураДанных.ДатаЭлектронногоДокумента, "ДЛФ=D");
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
					ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
					ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		#КонецОбласти
		
	#Область АвтоматическоеСозданиеПерезаписьДокументаЗаказ
	
	Если ТаблицаВыбранныхЗаписей.Количество() &gt; 0 Тогда
			
			//&lt;Отбор записей&gt;
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВыбранныеЗаписи.Документ КАК Документ,
			|	ВЫРАЗИТЬ(ВыбранныеЗаписи.ИдентификаторЦепочки КАК СТРОКА(36)) КАК ИдентификаторЦепочки,
			|	ВЫРАЗИТЬ(ВыбранныеЗаписи.Идентификатор КАК СТРОКА(36)) КАК Идентификатор
			|ПОМЕСТИТЬ ВТ_ВыбранныеЗаписи
			|ИЗ
			|	&amp;ВыбранныеЗаписи КАК ВыбранныеЗаписи
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ВыбранныеЗаписи.Документ КАК Документ,
			|	ВТ_ВыбранныеЗаписи.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
			|	ВТ_ВыбранныеЗаписи.Идентификатор КАК Идентификатор
			|ИЗ
			|	ВТ_ВыбранныеЗаписи КАК ВТ_ВыбранныеЗаписи
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События
			|		ПО ВТ_ВыбранныеЗаписи.ИдентификаторЦепочки = DR_События.ИдентификаторЦепочки
			|			И (DR_События.ВидДокумента = ""Заказ_Входящий"")
			|
			|СГРУППИРОВАТЬ ПО
			|	ВТ_ВыбранныеЗаписи.Документ,
			|	ВТ_ВыбранныеЗаписи.ИдентификаторЦепочки,
			|	ВТ_ВыбранныеЗаписи.Идентификатор
			|
			|ИМЕЮЩИЕ
			|	КОЛИЧЕСТВО(ВТ_ВыбранныеЗаписи.ИдентификаторЦепочки) = 1";
			
			Запрос.УстановитьПараметр("ВыбранныеЗаписи", ТаблицаВыбранныхЗаписей);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыбранныеСтроки = Новый Массив;
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				//&lt;получение гибких настроек создания заказа&gt;
				ИмяКолонки = "";
				СтруктураФайлаДанных = Неопределено;
				
				ШаблоныСозданияДокументов = Настройка_Параметр_Прочитать("СтруктураФайлаXMLДокументы");
				СтрокиНастроекПоОтбору	  = ШаблоныСозданияДокументов.Строки.НайтиСтроки(Новый Структура("Использовать, Кнопка", Истина, "Создать заказ клиента"));
				
				Если СтрокиНастроекПоОтбору.Количество() Тогда
					//&lt;используется первый найденный шаблон с признаком "Использовать"&gt;
					СтруктураФайлаДанных = СтрокиНастроекПоОтбору[0];
					
					ЕстьКолонка = НЕ СтруктураФайлаДанных.Владелец().Колонки.Найти("КолонкаИсточника") = Неопределено;
					
					Если ЕстьКолонка Тогда
						ИмяКолонки = СтруктураФайлаДанных.КолонкаИсточника;
					КонецЕсли;			
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтруктураФайлаДанных) Тогда					
					
					Выборка = РезультатЗапроса.Выбрать();
					//&lt;Заполнения массива выбранных документов для создания/перезаписи Заказа 1С&gt;
					Пока Выборка.Следующий() Цикл
						Структура = Новый Структура("ИдентификаторЦепочки, Документ");
						ЗаполнитьЗначенияСвойств(Структура,Выборка);
						ВыбранныеСтроки.Добавить(Структура);
					КонецЦикла;
				
					КэшированныеЗначенияЗаказ = Неопределено;
					КоличествоСозданныхДокументов = 0;

					//&lt;изменение имени переменной Приемник для исключения пересечений наименований текущего шаблона и вложенного&gt;
					ГибкиеНастройки = СтрЗаменить(СтруктураФайлаДанных.Служебные, "КэшированныеЗначения", "КэшированныеЗначенияЗаказ"); 
					
					//&lt;переменная для работы вызываемого шаблона по алгоритму предназначенному для сценария вызова из входящего ORDER&gt;
					ГибкиеНастройки = "ВызовВходящимORDER = Истина;" + Символы.ПС + ГибкиеНастройки;
					
					// выполнение подготовленного шаблона
					Выполнить(ГибкиеНастройки); 
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецОбласти
	
	Иначе
		ТекстЛогаСобытий = "Ошибка получения Идентификаторов. Проверьте доступность сети и корректность заполнения профилей обмена.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		
	КонецЕсли;
</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Входящий ORDER</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокOrderВходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Входящий ORDER</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>