<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий CONDRA</Value>
		<Value xsi:type="xs:string">	ТипДокумента = "CONDRA";	
	ТипДокументооборота      = "CONDRA";
	ИдентификаторыУчастников = Новый Массив;
	ЕстьОшибкаПолученияИдентификаторов = Ложь;
	
	#Область ПолучениеИдентификаторовЦепочекПоВсемПрофилям	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	DR_GLN.ПрофильОбмена КАК ПрофильОбмена,
	|	DR_GLN.Объект КАК Организация,
	|	DR_GLN.GLN КАК GLN,
	|	DR_GLN.Ид_ОЭД КАК ИдУчастника
	|ИЗ
	|	РегистрСведений.DR_GLN КАК DR_GLN
	|ГДЕ
	|	НЕ DR_GLN.ПрофильОбмена = НЕОПРЕДЕЛЕНО
	|	И НЕ DR_GLN.ПрофильОбмена.ПометкаУдаления
	|ИТОГИ ПО
	|	ПрофильОбмена";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаДокументовAPI = Новый ТаблицаЗначений;
		ТаблицаДокументовAPI.Колонки.Добавить("chainID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Колонки.Добавить("ftpFileName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТаблицаДокументовAPI.Колонки.Добавить("docUUID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Колонки.Добавить("date"       , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
		ТаблицаДокументовAPI.Индексы.Добавить("docUUID");
		
		ВыборкаПрофильОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПрофильОбмена.Следующий() Цикл
			
			ПрофильОбмена = ВыборкаПрофильОбмена.ПрофильОбмена;
			
			#Область ПолучениеСпискаИдентификаторовПоПрофилюОбмена
			
			ВыборкаДетальныеЗаписи = ВыборкаПрофильОбмена.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ИдентификаторыУчастников.Добавить(ВыборкаДетальныеЗаписи.GLN);	 
			КонецЦикла; 
			
			#КонецОбласти
			
			#Область ПодготовкаВспомогательныхДанныхДляRestApi
			
			ИмяСобытия = "Заполнение идентификаторов цепочки для входящих файлов " + ТипДокумента + ".";  		
			ЛимитСообщений = DR_EDI_ОбщегоНазначения.Настройка_Параметр_Прочитать("EDI_ЛимитСообщенийRESTv2", "1000");
			ДанныеДляREST = Новый Структура("ЕстьОшибка, ВидДокумента, ДанныеПодключения, doc_type", Ложь, Неопределено, Неопределено, Неопределено); 
			
			ДанныеДляREST.ВидДокумента 	= "CONDRA_Входящий";	
			ДанныеДляREST.doc_type 		= "condra";
			
			ДанныеАвторизации = DR_EDI_ВзаимодействиеREST_API.ВыполнитьАвторизациюАтолл(ПрофильОбмена);
			
			Если Не ДанныеАвторизации.Получены Тогда
				ТекстЛогаСобытий = "Не удалось выполнить авторизацию. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;	
			
			ДанныеПодключения = DR_EDI_ВзаимодействиеREST_API.ПолучитьДанныеПодключенияEvolution(ПрофильОбмена);
			
			Если Не ДанныеПодключения.ПолученПрофиль ИЛИ Не ДанныеПодключения.ПолученТокен Тогда
				ТекстЛогаСобытий = "Не удалось получить данные для подключения к REST API. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;
			
			ДанныеДляREST.ДанныеПодключения = ДанныеПодключения;	
			
			#КонецОбласти
			
			#Область ПолучитьИдентификаторыЦепочекВходящихФайлов
			
			Если Не ДанныеДляREST.ЕстьОшибка Тогда	
				НачалоПериода = Дата(1,1,1);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	МАКСИМУМ(DR_События.ДатаСообщения) КАК ДатаПоследнегоСообщения
				|ИЗ
				|	РегистрСведений.DR_События КАК DR_События
				|ГДЕ
				|	DR_События.ВидДокумента = &amp;ВидДокумента
				|	И DR_События.АктуализироватьИдентификатор = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("ВидДокумента", ДанныеДляREST.ВидДокумента);
				ВыборкаДата = Запрос.Выполнить().Выбрать();
				
				Если ВыборкаДата.Следующий() Тогда
					НачалоПериода = ВыборкаДата.ДатаПоследнегоСообщения;
				КонецЕсли;   
				
				МинимальнаяДата =  НачалоПериода;
				Сутки         = 60*60*24;
				ТекущаяДата   = ТекущаяДата(); 
				
				Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
					МинимальнаяДата = МинимальнаяДата - Сутки;
				Иначе
					МинимальнаяДата = ТекущаяДата - Сутки * 30;					
				КонецЕсли;         
				
				МаксимальнаяДата =  ТекущаяДата + Сутки; 
				
				НачалоПериода = Формат(МинимальнаяДата , "ДФ=yyyy-MM-dd");
				КонецПериода  = Формат(МаксимальнаяДата, "ДФ=yyyy-MM-dd");  	
				
				ВсеСообщенияAPI  = Новый Массив;
				
				Для Каждого ИдУчастника Из ИдентификаторыУчастников Цикл
					//ПараметрыМетода = Новый Структура("gln, doc_type, time_from, time_to, limit, direction", ИдУчастника, ДанныеДляREST.doc_type, НачалоПериода, КонецПериода, ЛимитСообщений, "0");
					ПараметрыМетода = Новый Структура("gln, time_from, time_to, limit", ИдУчастника, НачалоПериода, КонецПериода, ЛимитСообщений);
					МассивСообщенийAPI = DR_EDI_ВзаимодействиеREST_API.ПолучитьСписокВходящихДокументовCONDRA(ПараметрыМетода, ДанныеПодключения);
					
					Для Каждого Сообщение Из МассивСообщенийAPI Цикл
						ВсеСообщенияAPI.Добавить(Сообщение);
					КонецЦикла;
				КонецЦикла;
				
				Для Каждого Соответствие Из ВсеСообщенияAPI Цикл
					
					Если Соответствие = Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					
					НовСтр = ТаблицаДокументовAPI.Добавить();
					НовСтр.chainID     = Соответствие.Получить("chainID");
					НовСтр.ftpFileName = Соответствие.Получить("ftpFileName");
					НовСтр.docUUID     = Соответствие.Получить("docUUID");
					НовСтр.date        = Соответствие.Получить("date");
				КонецЦикла;
			Иначе
				ЕстьОшибкаПолученияИдентификаторов = Истина;
			КонецЕсли;
			
			#КонецОбласти
			
		КонецЦикла;
		
	Иначе 
		
		ТекстЛогаСобытий = "Обработка DR_Документов с видом операции ""RETANN_входящий"" не выполнена! Проверьте настройки профиля обмена. " 
		+ "Возможно профиль помечен на удаление, либо не заполнен в настройках соответствия по Организации.";
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);	
		
		ЕстьОшибкаПолученияИдентификаторов = Истина;
		
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не ЕстьОшибкаПолученияИдентификаторов Тогда
		
		/////////////////////////////////////////////////////////////////////////////////
		//          					ВХОДЯЩИЙ CONDRA                                //
		/////////////////////////////////////////////////////////////////////////////////
		
		//Описание пакетного запроса.
		//Запрос 0 				 	 - Получение ранее загруженных (обработанных/не обработанных) DR_Документов 
		//								по ИдентификаторЦепочки и ИдентификаторДокумента (полученных по rest), для поиска дублей в процессе обработки новых DR_Документов.	
		//Запрос 1 (DR_Загружен) 	 - Получение DR_Документов со статусом "Загружен", видом документа "ORDER_входящий" и не помеченных на удаление.
		//Запрос 2 				 	 - Получение данных из табличной части DR_Документов (полученных в DR_Загружен) и упорядочивание записей по "ДатаФайла", "ИдентификаторДокумента"
		
		//Результат  - Получение данных из табличной части DR_Документов (полученных в DR_НеОбработан).
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК DR_Документ,
		|	ПРЕДСТАВЛЕНИЕ(DR_Документ.Ссылка) КАК Представление,
		|	DR_Документ.Статус КАК СтатусДокумента,
		|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.ИдентификаторЦепочки В(&amp;ИдентификаторЦепочки)
		|	И DR_Документ.ИдентификаторДокумента В(&amp;ИдентификаторДокумента)
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_Документ.Ссылка КАК Ссылка,
		|	DR_Документ.ДанныеФайла КАК ДанныеФайла,
		|	DR_Документ.Статус КАК Статус,
		|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
		|ПОМЕСТИТЬ DR_Загружен
		|ИЗ
		|	Документ.DR_Документ КАК DR_Документ
		|ГДЕ
		|	DR_Документ.Статус = &amp;Загружен
		|	И DR_Документ.ВидДокумента = &amp;ВидДокумента
		|	И НЕ DR_Документ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	DR_Загружен.Ссылка КАК DR_Документ,
		|	ПРЕДСТАВЛЕНИЕ(DR_Загружен.Ссылка) КАК Представление,
		|	DR_Загружен.ДанныеФайла КАК ДанныеФайла,
		|	DR_Загружен.Статус КАК СтатусДокумента,
		|	DR_Загружен.ИдентификаторДокумента КАК ИдентификаторДокумента,
		|	ВЫРАЗИТЬ(ТЧ_ДатаФайла.Значение КАК ДАТА) КАК ДатаФайла,
		|	ТЧ_ФайлЗагруженЛокально.Значение КАК ФайлЗагруженЛокально
		|ИЗ
		|	DR_Загружен КАК DR_Загружен
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ДатаФайла
		|		ПО DR_Загружен.Ссылка = ТЧ_ДатаФайла.Ссылка
		|			И (ТЧ_ДатаФайла.Реквизит = ""ДатаФайла"")
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ФайлЗагруженЛокально
		|		ПО DR_Загружен.Ссылка = ТЧ_ФайлЗагруженЛокально.Ссылка
		|			И (ТЧ_ФайлЗагруженЛокально.Реквизит = ""ФайлЗагруженЛокально"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаФайла,
		|	ИдентификаторДокумента";
		
		//&lt;Полученный список ID раскладываем по массивам для передачи их ввиде параметров в запрос&gt;
		DocUUID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("docUUID");
		ChainID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("chainID");
		
		Запрос.УстановитьПараметр("ВидДокумента"			, ТипДокумента + "_входящий");
		Запрос.УстановитьПараметр("Загружен"				, "Загружен");
		Запрос.УстановитьПараметр("НеОбработан"				, "НеОбработан");
		Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, ChainID_API);
		Запрос.УстановитьПараметр("ИдентификаторДокумента"	, DocUUID_API);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		//&lt;Таблица используется для поиска Дублей&gt;
		ТаблицаDR_ДокументовПоID  = МассивРезультатов[0].Выгрузить();
		ТаблицаDR_ДокументовПоID.Индексы.Добавить("ИдентификаторЦепочки, ИдентификаторДокумента");
		
		//&lt;Таблица DR_Документов со статусом "Загружен"&gt;
		ТаблицаЗагруженных	= МассивРезультатов[2].Выгрузить();
		
		//&lt;Инициализация массива примитивных типов&gt;
		ПримитивныеТипы = Новый Массив;
		ПримитивныеТипы.Добавить(Тип("Строка"));
		ПримитивныеТипы.Добавить(Тип("Число"));		
		
		//&lt;Инициализация квалификаторов&gt;
		КвалификаторСтрока	= Новый КвалификаторыСтроки(200);
		КвалификаторЧисло 	= Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		
		//&lt;Определение типа УчастникиЭДО&gt;
		МассивТиповУчЭДО = Новый Массив;
		ИмяОбъектов 	 = Новый Массив;
		ИмяОбъектов.Добавить("Организации");
		ИмяОбъектов.Добавить("Контрагенты");
		
		Для каждого ИмяСпр Из ИмяОбъектов Цикл
			Если Метаданные.Справочники.Найти(ИмяСпр) &lt;&gt; Неопределено Тогда
				МассивТиповУчЭДО.Добавить(Тип("СправочникСсылка." + ИмяСпр));		
			КонецЕсли;
		КонецЦикла;
		
		//&lt;Инициализация описателей типов&gt;
		ОписаниеПримитивныхТипов 	= Новый ОписаниеТипов(ПримитивныеТипы,,,КвалификаторЧисло,КвалификаторСтрока);
		ОписаниеТиповDR_Документ 	= Новый ОписаниеТипов("ДокументСсылка.DR_Документ");
		ОписаниеТиповЧисло			= Новый ОписаниеТипов("Число",,,,КвалификаторЧисло);
		ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока);
		ОписаниеТиповУчЭДо 			= Новый ОписаниеТипов(МассивТиповУчЭДО);
		
		//&lt;Элементы по спецификации множественные, т.е. в CONDRA нет множественные. 
		//В созданной структуре будут иметь тип - Массив, элементы массива тип - Структура&gt;
		СтруктураЭлементов = Новый Структура;
		
		//&lt;В таблицу добавляются данные по распарсенным XML&gt;
		ТаблицаНовДокументов = Новый ТаблицаЗначений;
		ТаблицаНовДокументов.Колонки.Добавить("ChainID");         //Тип - Строка
		ТаблицаНовДокументов.Колонки.Добавить("DocUUID");         //Тип - Строка
		ТаблицаНовДокументов.Колонки.Добавить("ДатаФайла");       //Тип - Дата
		ТаблицаНовДокументов.Колонки.Добавить("ДанныеДокумента"); //Тип - Структура
		
		ТаблицаНовДокументов.Индексы.Добавить("DocUUID");
		
		//&lt;В таблицу добавляются идентификационные данные для поиска Участников ЭДО и Номенклатуры&gt;
		ТЗ_ДанныеИдентификация = Новый ТаблицаЗначений;
		ТЗ_ДанныеИдентификация.Колонки.Добавить("DR_Документ"	 , ОписаниеТиповDR_Документ);
		ТЗ_ДанныеИдентификация.Колонки.Добавить("SENDER"		 , ОписаниеТиповСтрока);
		ТЗ_ДанныеИдентификация.Колонки.Добавить("RECIPIENT"	 	 , ОписаниеТиповСтрока);
		ТЗ_ДанныеИдентификация.Колонки.Добавить("Получатель" 	 , ОписаниеТиповУчЭДо);
		ТЗ_ДанныеИдентификация.Колонки.Добавить("Отправитель"  	 , ОписаниеТиповУчЭДо);
		
		#Область ПолучениеДанныхПоНовымДокументам
		
		Для каждого СтрокаТаблицы ИЗ ТаблицаЗагруженных Цикл
			
			//&lt;Тип - Структура&gt;
			ДанныеДокумента = Новый Структура;	
			ДанныеФайла 	= Новый Структура;
			ПараметрыОтбора = Новый Структура;
			
			//&lt;Получение данных XML&gt;
			Попытка
				
				ДвоичныеДанныеФайла = СтрокаТаблицы.ДанныеФайла.Получить();	
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
				
				Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда					
					ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);					
				Иначе					
					ТекстЛогаСобытий = СтрокаТаблицы.Представление + "не обработан. Причина: отсутствуют Двоичные данные XML";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецЕсли;
				
			Исключение				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Продолжить;	
			КонецПопытки;
			
			ТекущийФайл = Новый Файл(ИмяВременногоФайла);
			
			КодировкаXML = "UTF-8";
			ЧтениеXMLДляТекущегоФайла = ПолучитьЧтениеXMLДляФайла(ТекущийФайл.Имя, ТекущийФайл, КодировкаXML, МассивЛогаСобытий); 							
			
			Если ЧтениеXMLДляТекущегоФайла = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектXDTO = Неопределено;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLДляТекущегоФайла);
			
			//&lt;Преобразование данных из XDTO в Структуру - "ДанныеФайла"&gt;
			Если ОбъектXDTO &lt;&gt; Неопределено Тогда
				РекурсивноПостроитьСтруктуруEDI(ОбъектXDTO, СтруктураЭлементов, ДанныеФайла);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЧтениеXMLДляТекущегоФайла.Закрыть();
			
			//&lt;Удаление временного файла&gt;
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
			КонецПопытки;
			
			//&lt;Поиск ID цепочки по ID эл.документа&gt;
			НайденнаяСтрока = ТаблицаДокументовAPI.Найти(СтрокаТаблицы.ИдентификаторДокумента, "docUUID");
			
			//&lt;Найденный ID цепочки присваиваем эл. документу&gt;
			Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
				
				ДатаAPI = СтрЗаменить(НайденнаяСтрока.date, "-", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, ":", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, " ", "");
				
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", НайденнаяСтрока.chainID);
				ДанныеДокумента.Вставить("ДатаСообщения", Дата(ДатаAPI));
				
			ИначеЕсли СтрокаТаблицы.ФайлЗагруженЛокально = Истина Тогда
				
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", "TMP_" + СтрокаТаблицы.ИдентификаторДокумента);
				ДанныеДокумента.Вставить("ДатаСообщения", ТекущаяДата());
				
			Иначе
				
				Комментарий = "По CONDRA (Неструктурированный документ) № " + ДанныеФайла.NUMBER + " не найден идентификатор цепочки в списке полученных идентификаторов с сервера.";
				
				DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
				DR_ДокументОбъект.Комментарий = Комментарий;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Комментарий;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;    			
			КонецЕсли;
			
			//&lt;Параметры отбора для поиска дублей&gt;
			ПараметрыОтбора.Вставить("ИдентификаторЦепочки", ДанныеДокумента.ИдентификаторЦепочки);
			ПараметрыОтбора.Вставить("ИдентификаторДокумента", СтрокаТаблицы.ИдентификаторДокумента);
			
			//&lt;Поиск дублей. РезультатПоиска - Массив строк таблицы значений&gt;
			РезультатПоиска = ТаблицаDR_ДокументовПоID.НайтиСтроки(ПараметрыОтбора);
			
			//&lt;Проверка на дубли по DR_Документам со статусом "Обработан" или "НеОбработан" найденных по установленному отбору&gt;
			Если РезультатПоиска.Количество() Тогда
				
				ЭлементМассива = РезультатПоиска[0];
				
				Если ВРег(ЭлементМассива.СтатусДокумента) = "НЕОБРАБОТАН" 
					ИЛИ ВРег(ЭлементМассива.СтатусДокумента) = "ОБРАБОТАН" Тогда 
					
					//&lt;Для Нового DR_Документа изменяем статус&gt;
					DR_ДокументОбъект = СтрокаТаблицы.DR_Документ.ПолучитьОбъект();
					DR_ДокументОбъект.Статус = "Архивный";
					DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
					DR_ДокументОбъект.Комментарий = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление;
					
					ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
					
					НовСтр = ТабличнаяЧасть.Добавить();
					НовСтр.Реквизит = "НеОбрабатывать";
					НовСтр.Значение = Истина;
					DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Причина = "Документ является дублем по ранее созданному " + ЭлементМассива.Представление; 
					ТекстЛогаСобытий = СтрокаТаблицы.Представление + " не обработан. Причина: " + Причина;
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;					
				КонецЕсли;
				
			КонецЕсли;
			
			//&lt;Проверка на дубли по DR_Документам со статусом "Загружен"&gt; 
			НайденнаяСтрока = ТаблицаНовДокументов.Найти(СтрокаТаблицы.ИдентификаторДокумента, "DocUUID");
			
			Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
				
				//&lt;Изменям статус DR_Документа определенного как дубль&gt;
				DR_ДокументСсылка = НайденнаяСтрока.ДанныеДокумента.DR_Документ; 
				DR_ДокументОбъект = DR_ДокументСсылка.ПолучитьОбъект();
				DR_ДокументОбъект.Статус = "Архивный";
				DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
				DR_ДокументОбъект.Комментарий = "Документ определен как дубль";
				
				ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
				
				НовСтр = ТабличнаяЧасть.Добавить();
				НовСтр.Реквизит = "НеОбрабатывать";
				НовСтр.Значение = Истина;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстЛогаСобытий =  "В процессе обработки " + СтрокаТаблицы.Представление + ". " + Строка(DR_ДокументСсылка) + " определен как дубль и обработан не будет.";
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				//&lt;Удаляем найденную запись из таблицы&gt;
				ТаблицаНовДокументов.Удалить(НайденнаяСтрока);
				
			КонецЕсли;
			
			ДанныеДокумента.Вставить("ИдентификаторДокумента"	, СтрокаТаблицы.ИдентификаторДокумента);
			ДанныеДокумента.Вставить("DR_Документ"				, СтрокаТаблицы.DR_Документ);
			ДанныеДокумента.Вставить("Статус"					, СтрокаТаблицы.СтатусДокумента);
			ДанныеДокумента.Вставить("ДанныеФайла"				, ДанныеФайла);
			ДанныеДокумента.Вставить("ДатаФайла"				, СтрокаТаблицы.ДатаФайла);
			
			КэшированныеЗначения = Неопределено;
			
			Если НЕ ДанныеФайла.Свойство("DOCTYPE") Тогда
				ДанныеФайла.Вставить("DOCTYPE", ""); 
			КонецЕсли;
			
			Если ДанныеФайла.Свойство("КаталогПуть") Тогда
				ДанныеФайла.Вставить("КаталогПуть", ""); 
			КонецЕсли;
			
			ДокументыШапка = Новый ТаблицаЗначений;
			ДобавитьСтрокуВТаблицуШапка(ДокументыШапка, ДанныеФайла); 
			
			ТЗСтруктур = Неопределено;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = "ВЫБРАТЬ
			|	ДокументыШапка.NUMBER,
			|	ДокументыШапка.DATE,
			|	ДокументыШапка.FILENAME,
			|	ДокументыШапка.SIGNNAME,
			|	ДокументыШапка.DOCGUID,
			|	ДокументыШапка.SENDER,
			|	ДокументыШапка.SENDERGUID,
			|	ДокументыШапка.RECIPIENT,
			|	ДокументыШапка.RECIPIENTGUID,
			|	ДокументыШапка.DOCTYPE,
			|	ДокументыШапка.TRANSGUID,
			|	ДокументыШапка.INFO,
			|	ДокументыШапка.CONTRACTNUMBER,
			|	ДокументыШапка.CONTRACTDATE,
			|	ДокументыШапка.SUM,
			|	ВЫРАЗИТЬ(ДокументыШапка.TYPE КАК Строка(1)) КАК TYPE
			|ПОМЕСТИТЬ ДокументыШапка
			|ИЗ
			|	&amp;ДокументыШапка КАК ДокументыШапка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	DR_Настройки.Ссылка КАК Ссылка,
			|	ВТ_Идентификатор.Значение КАК Идентификатор
			|ПОМЕСТИТЬ ВТ_ТипыНеструктДокументов
			|ИЗ
			|	Справочник.DR_Настройки КАК DR_Настройки
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ВТ_Идентификатор
			|		ПО DR_Настройки.Ссылка = ВТ_Идентификатор.Ссылка
			|			И (ВТ_Идентификатор.Реквизит = ""Идентификатор"")
			|ГДЕ
			|	DR_Настройки.ВидНастройки = ""ТипыНеструктДокументов""
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	DR_События.Идентификатор КАК Идентификатор,
			|	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
			|	DR_События.Документ КАК Документ
			|ПОМЕСТИТЬ ВтПервичныйCondra
			|ИЗ
			|	ДокументыШапка КАК ДокументыШапка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ДокументДополнительныеРеквизиты
			|			ПО (DR_События.Документ = DR_ДокументДополнительныеРеквизиты.Ссылка
			|					И DR_ДокументДополнительныеРеквизиты.Реквизит = ""HEAD_TYPE"")
			|		ПО ВЫРАЗИТЬ(ДокументыШапка.TRANSGUID КАК СТРОКА(36)) = DR_События.ИдентификаторЦепочки
			|ГДЕ
			|	DR_ДокументДополнительныеРеквизиты.Значение = ""1""
			|;
            |
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДокументыШапка.NUMBER КАК NUMBER,
			|	ДокументыШапка.DATE КАК DATE,
			|	ДокументыШапка.FILENAME КАК HEAD_CONTENT_FILENAME,
			|	ДокументыШапка.SIGNNAME КАК HEAD_CONTENT_SIGNNAME,
			|	ДокументыШапка.DOCGUID КАК HEAD_DOCGUID,
			|	ДокументыШапка.SENDER КАК HEAD_SENDER,
			|	ДокументыШапка.SENDERGUID КАК HEAD_SENDERGUID,
			|	ДокументыШапка.RECIPIENT КАК HEAD_RECIPIENT,
			|	ДокументыШапка.RECIPIENTGUID КАК HEAD_RECIPIENTGUID,
			|	ДокументыШапка.DOCTYPE КАК DOCTYPE,
			|	ДокументыШапка.TRANSGUID КАК HEAD_TRANSGUID,
			|	ДокументыШапка.INFO,
			|	ДокументыШапка.CONTRACTNUMBER,
			|	ДокументыШапка.CONTRACTDATE,
			|	ДокументыШапка.SUM,
			|	ДокументыШапка.TYPE КАК HEAD_TYPE,
			|	DR_GLN_Получатель.Объект КАК Организация,
			|	DR_GLN_Получатель.GLN КАК xmlОрганизация,
			|	DR_GLN_Получатель.Ид_ОЭД КАК ОрганизацияGUID,
			|	DR_GLN_Отправитель.Объект КАК Контрагент,
			|	DR_GLN_Отправитель.GLN КАК xmlКонтрагент,
			|	DR_GLN_Отправитель.Ид_ОЭД КАК КонтрагентGUID,	
			|	DR_ТипыНеструктДокументов.Ссылка КАК ТипДокумента,
			|	""Входящий"" КАК НаправлениеОбмена,
			|   ВЫБОР 
			|		КОГДА ДокументыШапка.TYPE = ""2"" 
			|   		ТОГДА ""Принят"" 
			|       КОГДА ДокументыШапка.TYPE = ""3""
			|           ТОГДА ""Отклонён""
			|		КОГДА ДокументыШапка.TYPE = ""4""
			|           ТОГДА ""Отозван""
			|		ИНАЧЕ ""Получен"" 
			|	КОНЕЦ КАК Статус,
			|	ЕСТЬNULL(DR_Документ.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЭкомДокумент,
			|	DR_Документ.Номер КАК Номер,
			|	DR_Документ.Дата КАК Дата,
			|	DR_Документ.Статус КАК СтатусОбработкиДокумента,
			|	DR_ЦепочкиДокументов.ИдентификаторЦепочки КАК TRANSGUID_Цепочки,
			|	DR_ДокументДополнительныеРеквизиты.Значение КАК КаталогПуть,
			|	ВтПервичныйCondra.Идентификатор КАК ИдентификаторОснования
			|ИЗ
			|	ДокументыШапка КАК ДокументыШапка
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Отправитель
			|		ПО ((ВЫРАЗИТЬ(ДокументыШапка.SENDER КАК СТРОКА(13))) = DR_GLN_Отправитель.GLN)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Получатель
			|		ПО ((ВЫРАЗИТЬ(ДокументыШапка.RECIPIENT КАК СТРОКА(13))) = DR_GLN_Получатель.GLN)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТипыНеструктДокументов КАК DR_ТипыНеструктДокументов
			|		ПО ((ВЫРАЗИТЬ(ДокументыШапка.DOCTYPE КАК СТРОКА(4))) = DR_ТипыНеструктДокументов.Идентификатор)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
			|			ПРАВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ДокументДополнительныеРеквизиты
			|			ПО DR_ДокументДополнительныеРеквизиты.Ссылка = DR_Документ.Ссылка
			|				И (DR_Документ.Ссылка = DR_ДокументДополнительныеРеквизиты.Ссылка
			|					И DR_ДокументДополнительныеРеквизиты.Реквизит = ""КаталогПуть"")
			|		ПО ((ВЫРАЗИТЬ(ДокументыШапка.DOCGUID КАК СТРОКА(100))) = DR_Документ.ИдентификаторДокумента)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
			|		ПО ((ВЫРАЗИТЬ(ДокументыШапка.TRANSGUID КАК СТРОКА(100))) = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПервичныйCondra КАК ВтПервичныйCondra
			|		ПО ВЫРАЗИТЬ(ДокументыШапка.TRANSGUID КАК СТРОКА(36)) = ВтПервичныйCondra.ИдентификаторЦепочки";
				
			Если ДокументыШапка.Колонки.Найти("INFO") = Неопределено Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДокументыШапка.INFO,","");  
			КонецЕсли;	
			Если ДокументыШапка.Колонки.Найти("CONTRACTNUMBER") = Неопределено Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДокументыШапка.CONTRACTNUMBER,","");  
			КонецЕсли;
			Если ДокументыШапка.Колонки.Найти("CONTRACTDATE") = Неопределено Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДокументыШапка.CONTRACTDATE,","");  
			КонецЕсли;
			Если ДокументыШапка.Колонки.Найти("SUM") = Неопределено Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДокументыШапка.SUM,","");  
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ДокументыШапка", ДокументыШапка);
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			ИмяСобытия = "Создание записи по квитанции CONDRA";

			СтруктурыФайлов = новый Структура;
			СтруктурыФайлов.Вставить("ЭКОМ_СтруктураФайлаXMLВходящие", Настройка_Параметр_Прочитать("EDI_СтруктураФайлаXMLВходящие", Новый ДеревоЗначений));
			СтруктурыФайлов.Вставить("ЭКОМ_СтруктураФайлаXMLИсходящие", Настройка_Параметр_Прочитать("EDI_СтруктураФайлаXMLИсходящие", Новый ДеревоЗначений));
			СтруктурыФайлов.Вставить("ЭКОМ_СтруктураФайлаXMLДокументы", Настройка_Параметр_Прочитать("EDI_СтруктураФайлаXMLДокументы", Новый ДеревоЗначений));
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ТекстЛогаСобытий 			= "";
				СтруктураДокумента 			= Неопределено;
				СоответствиеПоОрганизации 	= Новый Соответствие;
				СоответствиеПоКонтрагенту 	= Новый Соответствие;
				
				СтруктураРегистра_DRСобытия	= Новый Структура;
				СтруктураРегистра_DRЦепочки	= Новый Структура;
				
				ПредставлениеДокументаXML = "Неструктурированный документ № " + ВыборкаДетальныеЗаписи.NUMBER + " от " + ВыборкаДетальныеЗаписи.DATE;
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.HEAD_TRANSGUID) Тогда
					
					ТекстЛогаСобытий = "Ошибка заполнения для неструктурированного документа с номером &lt;" + ВыборкаДетальныеЗаписи.NUMBER + "&gt; и датой &lt;"
					+ ВыборкаДетальныеЗаписи.DATE + "&gt;." + Символы.ПС + "	- не заполнено обязательное поле TRANSGUID. Документ пропущен.";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;	
				ИначеЕсли НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.TRANSGUID_Цепочки)
					И (Лев(ВыборкаДетальныеЗаписи.HEAD_TYPE, 1) = "2"
					ИЛИ Лев(ВыборкаДетальныеЗаписи.HEAD_TYPE, 1) = "3"
					ИЛИ Лев(ВыборкаДетальныеЗаписи.HEAD_TYPE, 1) = "4") Тогда
					// Это не инициатор цепочки, а в регистре нет записи о полученном ДокументОригинала.
					// Нужно игнорировать запись и удалить файл с платформы (если в настройках включено удаление файлов).
					ТекстЛогаСобытий = "Ошибка загрузки неструктурированного документа с номером &lt;" + ВыборкаДетальныеЗаписи.NUMBER + "&gt;, датой &lt;"
					+ ВыборкаДетальныеЗаписи.DATE + "&gt; и типом &lt;" + ВыборкаДетальныеЗаписи.HEAD_TYPE + "&gt;." + Символы.ПС
					+ "	- не найден ранее загруженный документ оригинала. Документ пропущен.";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецЕсли;
				
				// Проверка на ошибки.
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.DATE) Тогда
					ТекстОшибки = "	- не заполнено обязательное поле DATE";
					ТекстЛогаСобытий = ТекстЛогаСобытий + ?(ПустаяСтрока(ТекстЛогаСобытий), "", ";"  + Символы.ПС) + ТекстОшибки;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.NUMBER) Тогда
					ТекстОшибки = "	- не заполнено обязательное поле NUMBER";
					ТекстЛогаСобытий = ТекстЛогаСобытий + ?(ПустаяСтрока(ТекстЛогаСобытий), "", ";"  + Символы.ПС) + ТекстОшибки;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Организация) Тогда
					СоответствиеПоОрганизации.Вставить("Организация_" + ВыборкаДетальныеЗаписи.xmlОрганизация, ВыборкаДетальныеЗаписи.xmlОрганизация);	
					ТекстОшибки = "	- не заполнено обязательное поле Организация";
					ТекстЛогаСобытий = ТекстЛогаСобытий + ?(ПустаяСтрока(ТекстЛогаСобытий), "", ";"  + Символы.ПС) + ТекстОшибки;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Контрагент) Тогда
					СоответствиеПоКонтрагенту.Вставить("Контрагент_" + ВыборкаДетальныеЗаписи.xmlКонтрагент, ВыборкаДетальныеЗаписи.xmlКонтрагент);
					ТекстОшибки = "	- не заполнено обязательное поле Контрагент";
					ТекстЛогаСобытий = ТекстЛогаСобытий + ?(ПустаяСтрока(ТекстЛогаСобытий), "", ";"  + Символы.ПС) + ТекстОшибки;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.HEAD_CONTENT_FILENAME) Тогда
					ТекстОшибки = "	- не заполнено обязательное поле FILENAME";
					ТекстЛогаСобытий = ТекстЛогаСобытий + ?(ПустаяСтрока(ТекстЛогаСобытий), "", ";"  + Символы.ПС) + ТекстОшибки;
				КонецЕсли;
				
				ТипФайлаCONDRA = Лев(ВыборкаДетальныеЗаписи.HEAD_TYPE, 1);
				Если ЗначениеЗаполнено(ТипФайлаCONDRA) Тогда
					
					// Заполнение документа.
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЭкомДокумент) Тогда
						ДокументОбъект = СтрокаТаблицы.DR_Документ;
					Иначе
						ДокументОбъект = ВыборкаДетальныеЗаписи.ЭкомДокумент;	
					КонецЕсли;	
					
					ДокументОбъект = ДокументОбъект.ПолучитьОбъект();
					ДокументОбъект.ИдентификаторЦепочки = ВыборкаДетальныеЗаписи.HEAD_TRANSGUID;
					ДокументОбъект.Статус = ВыборкаДетальныеЗаписи.Статус;
					
					ДокументОбъект.ДополнительныеРеквизиты.Очистить();
					
					СтруктураДокумента = Новый Структура("NUMBER, DATE, CONTRACTNUMBER, CONTRACTDATE, DOCTYPE  
					| , HEAD_SENDER, HEAD_SENDERGUID, HEAD_RECIPIENT, HEAD_RECIPIENTGUID, HEAD_INFO, HEAD_DOCGUID, HEAD_TRANSGUID, HEAD_SUM, HEAD_TYPE
					| , HEAD_CONTENT_FILENAME, HEAD_CONTENT_SIGNNAME");
					ЗаполнитьЗначенияСвойств(СтруктураДокумента, ВыборкаДетальныеЗаписи);
					
					Если НЕ ДокументыШапка.Колонки.Найти("INFO") = Неопределено Тогда
						Попытка
							СтруктураДокумента.HEAD_INFO = ВыборкаДетальныеЗаписи.INFO;
						Исключение КонецПопытки;
					КонецЕсли;
					Если НЕ ДокументыШапка.Колонки.Найти("SUM") = Неопределено Тогда
						Попытка
							СтруктураДокумента.HEAD_SUM = ?(ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.SUM),Число(ВыборкаДетальныеЗаписи.SUM),0);
						Исключение КонецПопытки;
					КонецЕсли;
					
					ПоляCondra = Новый Структура;
					ПоляCondra.Вставить("ИмяФайла"				, ВыборкаДетальныеЗаписи.HEAD_CONTENT_FILENAME);
					ПоляCondra.Вставить("ТекстОшибки"			, ТекстЛогаСобытий);
					ПоляCondra.Вставить("ТипДокумента"			, ВыборкаДетальныеЗаписи.ТипДокумента);
					ПоляCondra.Вставить("Описание"				, ?(ДокументыШапка.Колонки.Найти("INFO") = Неопределено, "", ВыборкаДетальныеЗаписи.INFO));
					ПоляCondra.Вставить("Сумма"					, СтруктураДокумента.HEAD_SUM);
					ПоляCondra.Вставить("ДатаДокумента"			, ВыборкаДетальныеЗаписи.Дата);
					ПоляCondra.Вставить("НомерДокумента"		, ВыборкаДетальныеЗаписи.NUMBER);
					ПоляCondra.Вставить("ДатаПринятияДокумента"	, ТекущаяДата());
					ПоляCondra.Вставить("КаталогПуть"           , ВыборкаДетальныеЗаписи.КаталогПуть);
					ПоляCondra.Вставить("xmlОрганизация"        , ВыборкаДетальныеЗаписи.xmlОрганизация);
					ПоляCondra.Вставить("ОрганизацияGUID"       , ВыборкаДетальныеЗаписи.ОрганизацияGUID);
					ПоляCondra.Вставить("xmlКонтрагент"         , ВыборкаДетальныеЗаписи.xmlКонтрагент);
					ПоляCondra.Вставить("КонтрагентGUID"        , ВыборкаДетальныеЗаписи.КонтрагентGUID);
					
					Для Каждого ЭлементСтруктуры Из СтруктураДокумента Цикл
						
						НоваяСтрока = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
						НоваяСтрока.Реквизит = ЭлементСтруктуры.Ключ;
						НоваяСтрока.Значение = ЭлементСтруктуры.Значение;
						
					КонецЦикла;
					
					Для Каждого ЭлементCondra Из ПоляCondra Цикл
						
						НоваяСтрока = ДокументОбъект.ДополнительныеРеквизиты.Добавить();
						НоваяСтрока.Реквизит = ЭлементCondra.Ключ;
						НоваяСтрока.Значение = ЭлементCondra.Значение;
						
					КонецЦикла;							
					
					ТекстОшибки = "";
										
					НачатьТранзакцию();
					
					Попытка				
						
						ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
						
						////////////////////////////&lt;Создание записи в РС DR_События&gt;/////////////////////////////////////
						
						//&lt;Заполнение структуры для DR_События&gt;
						СтруктураРегистра_DRСобытия.Вставить("ДатаСообщения"			, ТекущаяДата());
						СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, ДокументОбъект.ИдентификаторЦепочки);
						СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
						СтруктураРегистра_DRСобытия.Вставить("Документ"					, ДокументОбъект.Ссылка);
						СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, "CONDRA_Входящий");
						СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, ДокументОбъект.ИдентификаторДокумента);
						СтруктураРегистра_DRСобытия.Вставить("Статус"					, ДокументОбъект.Статус);
						СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, СтруктураДокумента.HEAD_INFO);
						
						Если ТипФайлаCONDRA = "2" ИЛИ  ТипФайлаCONDRA = "3" Тогда 
							СтруктураРегистра_DRСобытия.Вставить("ИдентификаторОснования"	, ВыборкаДетальныеЗаписи.ИдентификаторОснования);
						КонецЕсли;	
						
						НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
						НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
						НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
						НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
						НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
						НЗ_DRСобытия.Прочитать();
						
						Если НЗ_DRСобытия.Количество() = 0 Тогда
							НоваяЗапись = НЗ_DRСобытия.Добавить();
						Иначе
							НоваяЗапись = НЗ_DRСобытия[0];
						КонецЕсли;
						
						Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
							НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
						КонецЦикла;
						
						НЗ_DRСобытия.Записать();
						
						Если ТипФайлаCONDRA = "1" Тогда
							////////////////////////////&lt;Создание записи в РС DR_ЦепочкиДокументов&gt;//////////////////////////////////
							
							//&lt;Заполнение структуры для DR_ЦепочкиДокументов&gt;
							СтруктураРегистра_DRЦепочки.Вставить("ДатаЗаказа"				, ТекущаяДата()); //ДанныеФайла.ДатаЭлектронногоДокумента);
							СтруктураРегистра_DRЦепочки.Вставить("ИдентификаторЦепочки"		, ДокументОбъект.ИдентификаторЦепочки);
							СтруктураРегистра_DRЦепочки.Вставить("ДатаПоставки"				, ТекущаяДата()); //ДанныеФайла.ДатаПоставки);
							СтруктураРегистра_DRЦепочки.Вставить("НомерЗаказа"				, ВыборкаДетальныеЗаписи.NUMBER);
							
							Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи["Организация"]) Тогда
								СтруктураРегистра_DRЦепочки.Вставить("Организация"			, ВыборкаДетальныеЗаписи.Организация);
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи["Контрагент"]) Тогда
								СтруктураРегистра_DRЦепочки.Вставить("Контрагент"			, ВыборкаДетальныеЗаписи.Контрагент);
							КонецЕсли;
							
							//&lt;Поиск записей по обрабатываемому экземпляру CONDRA&gt;
							Запрос = Новый Запрос;
							Запрос.Текст = 
							"ВЫБРАТЬ
							|	DR_ЦепочкиДокументов.НомерЗаказа КАК НомерЗаказа,
							|	DR_ЦепочкиДокументов.ДатаЗаказа КАК ДатаЗаказа,
							|	DR_ЦепочкиДокументов.ДатаПоставки КАК ДатаПоставки,
							|	DR_ЦепочкиДокументов.ИдентификаторЦепочки КАК ИдентификаторЦепочки
							|ИЗ
							|	РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
							|ГДЕ
							|	DR_ЦепочкиДокументов.НомерЗаказа = &amp;НомерЗаказа
							|	И DR_ЦепочкиДокументов.ДатаЗаказа МЕЖДУ ДОБАВИТЬКДАТЕ(&amp;ДатаЗаказа, МЕСЯЦ, -1) И ДОБАВИТЬКДАТЕ(&amp;ДатаЗаказа, МЕСЯЦ, 1)
							|	И DR_ЦепочкиДокументов.ИдентификаторЦепочки = &amp;ИдентификаторЦепочки";
							
							Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
							Запрос.УстановитьПараметр("НомерЗаказа"				, СтруктураРегистра_DRЦепочки.НомерЗаказа);
							Запрос.УстановитьПараметр("ДатаЗаказа"				, СтруктураРегистра_DRЦепочки.ДатаЗаказа);
							
							РезультатЗапроса = Запрос.Выполнить();
							ТЗ_Цепочка = РезультатЗапроса.Выгрузить();
							
							//&lt;Действия: 0 - создать запись; 1 - перезаписать; "" - ни каких действий не производить&gt;
							ДействияСЗаписью = 0;
							
							//&lt;От количества найденных записей, выполняем соответствующее действие&gt;
							Если ТЗ_Цепочка.Количество() Тогда
								
								Цепочка = ТЗ_Цепочка[0];
								ДействияСЗаписью = 1;
								
							КонецЕсли;
							
							НЗ_DRЦепочкиДокументов = РегистрыСведений.DR_ЦепочкиДокументов.СоздатьНаборЗаписей();
							
							Если ДействияСЗаписью = 0 Тогда
								
								НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(СтруктураРегистра_DRЦепочки.НомерЗаказа);
								НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(СтруктураРегистра_DRЦепочки.ДатаЗаказа);
								НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(СтруктураРегистра_DRЦепочки.ДатаПоставки);
								НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
								
							ИначеЕсли ДействияСЗаписью = 1 Тогда
								
								НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(Цепочка.НомерЗаказа);
								НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(Цепочка.ДатаЗаказа);
								НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(Цепочка.ДатаПоставки);
								НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(Цепочка.ИдентификаторЦепочки);					
								
								НЗ_DRЦепочкиДокументов.Прочитать();
								НЗ_DRЦепочкиДокументов.Удалить(0);
								НЗ_DRЦепочкиДокументов.Записать();
								
								НЗ_DRЦепочкиДокументов.Отбор.НомерЗаказа.Установить(СтруктураРегистра_DRЦепочки.НомерЗаказа);
								НЗ_DRЦепочкиДокументов.Отбор.ДатаЗаказа.Установить(СтруктураРегистра_DRЦепочки.ДатаЗаказа);
								НЗ_DRЦепочкиДокументов.Отбор.ДатаПоставки.Установить(СтруктураРегистра_DRЦепочки.ДатаПоставки);
								НЗ_DRЦепочкиДокументов.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRЦепочки.ИдентификаторЦепочки);
								
							ИначеЕсли ДействияСЗаписью = "" Тогда
								
								ЗафиксироватьТранзакцию();					
								Продолжить;
							КонецЕсли;
							
							НЗ_DRЦепочкиДокументов.Прочитать();
							
							Если НЗ_DRЦепочкиДокументов.Количество() = 0 Тогда
								НоваяЗапись = НЗ_DRЦепочкиДокументов.Добавить();
							Иначе
								НоваяЗапись = НЗ_DRЦепочкиДокументов[0];
							КонецЕсли;
							
							Для Каждого Элемент Из СтруктураРегистра_DRЦепочки Цикл			
								НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
							КонецЦикла;
							
							НЗ_DRЦепочкиДокументов.Записать();
							
						КонецЕсли;	
						
						ЗафиксироватьТранзакцию();
						
					Исключение				
						ОтменитьТранзакцию();
						
						ТекстЛогаСобытий = НСтр("ru = 'Формирование записей в Регистрах Docrobot по %ПредставлениеДокументаXML% не выполнено.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
						ПредставлениеДокументаXML = "Неструктурированный документ" + " № " + ДанныеФайла.NUMBER + " от " + Формат(ДанныеФайла.DATE, "ДЛФ=D");
						ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
						ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
						
						ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
						МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
						ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
						
					КонецПопытки;	
					
				Иначе
					
					ТекстЛогаСобытий = НСтр("ru = 'не удалось определить статус по значению тиу файла, по %ПредставлениеДокументаXML% .'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
					ТекстЛогаСобытий = СтрЗаменить(ТекстЛогаСобытий, "%ПредставлениеДокументаXML%", ПредставлениеДокументаXML);
					ТекстЛогаСобытий = ТекстЛогаСобытий + Символы.ПС + "По причине: "+ ОписаниеОшибки();
					
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
					ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки: " + ОписаниеОшибки());
					
				КонецЕсли;
				
				Если НЕ СоответствиеПоОрганизации.Количество() = 0 Тогда
					НастройкиПараметровЗаписатьНабором(СоответствиеПоОрганизации     , "Организация_");
				КонецЕсли;
				Если НЕ СоответствиеПоКонтрагенту.Количество() = 0 Тогда
					НастройкиПараметровЗаписатьНабором(СоответствиеПоКонтрагенту     , "Контрагент_");
				КонецЕсли;
				
			КонецЦикла;			
						
			НовЭлКоллекции 				   = ТаблицаНовДокументов.Добавить();	
			НовЭлКоллекции.ChainID		   = ДанныеДокумента.ИдентификаторЦепочки;		
			НовЭлКоллекции.DocUUID         = ДанныеДокумента.ИдентификаторДокумента;
			НовЭлКоллекции.ДатаФайла       = ДанныеДокумента.ДатаФайла;
			НовЭлКоллекции.ДанныеДокумента = ДанныеДокумента;
			
		КонецЦикла;
		
		//&lt;Очищаем коллекцию&gt;
		ТаблицаЗагруженных = Неопределено;
		
		#КонецОбласти
		
	КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Входящий CONDRA</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">5</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<presentation>СписокCondraВходящиеИсходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Входящий CONDRA</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ВходящийCondra</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">5</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:string">ВходящийCondra</Value>
	</row>
</ValueTree>