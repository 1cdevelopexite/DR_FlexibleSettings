<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий DP_PRANNUL_22</Value>
		<Value xsi:type="xs:string">
ИдентификаторыУчастников = Новый Массив;
ЕстьОшибкаПолученияИдентификаторов = Ложь;

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	DR_GLN.ПрофильОбмена КАК ПрофильОбмена,
|	DR_GLN.Объект КАК Организация,
|	DR_GLN.GLN КАК GLN,
|	DR_GLN.Ид_ОЭД КАК ИдУчастника
|ИЗ
|	РегистрСведений.DR_GLN КАК DR_GLN
|ГДЕ
|	НЕ DR_GLN.ПрофильОбмена = НЕОПРЕДЕЛЕНО
|	И НЕ DR_GLN.ПрофильОбмена.ПометкаУдаления
|ИТОГИ ПО
|	ПрофильОбмена";

РезультатЗапроса = Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	
	ТаблицаДокументовAPI = Новый ТаблицаЗначений;
	ТаблицаДокументовAPI.Колонки.Добавить("chainID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("ftpFileName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаДокументовAPI.Колонки.Добавить("docUUID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("date"       , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Индексы.Добавить("docUUID");
	
	ВыборкаПрофильОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПрофильОбмена.Следующий() Цикл
		
		ПрофильОбмена = ВыборкаПрофильОбмена.ПрофильОбмена;	
		
		ВыборкаДетальныеЗаписи = ВыборкаПрофильОбмена.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИдентификаторыУчастников.Добавить(ВыборкаДетальныеЗаписи.ИдУчастника);	 
		КонецЦикла;
		
		#Область ПодготовкаВспомогательныхДанныхДляRestApi
		
		ИмяСобытия = "Заполнение идентификаторов цепочки для входящих файлов ""DP_PDPOL"".";  		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить("DP_PRANNUL_22");
		
		Для каждого ЭлементМассиваТипДокумента из МассивТипов Цикл																	
			
			ДанныеДляREST = Новый Структура("ЕстьОшибка, ВидДокумента, ДанныеПодключения, doc_type", Ложь, Неопределено, Неопределено, Неопределено); 
			
			ДанныеДляREST.ВидДокумента 	= "DP_PRANNUL_22_Входящий";
			ДанныеДляREST.doc_type 		= Новый Структура("doc_type, ticket_type", "", "АннулированиеУПД");
			
			ДанныеАвторизации = DR_EDI_ВзаимодействиеREST_API.ВыполнитьАвторизациюАтолл(ПрофильОбмена);
			
			Если Не ДанныеАвторизации.Получены Тогда
				ТекстЛогаСобытий = "Не удалось выполнить авторизацию. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;	
			
			ДанныеПодключения = DR_EDI_ВзаимодействиеREST_API.ПолучитьДанныеПодключенияEvolution(ПрофильОбмена);
			
			Если Не ДанныеПодключения.ПолученПрофиль ИЛИ Не ДанныеПодключения.ПолученТокен Тогда
				ТекстЛогаСобытий = "Не удалось получить данные для подключения к REST API. ";
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				ДанныеДляREST.ЕстьОшибка = Истина;
			КонецЕсли;
			
			ДанныеДляREST.ДанныеПодключения = ДанныеПодключения;	
			
			#КонецОбласти		
			
			#Область ЗаполнитьИдентификаторыЦепочекВходящихФайлов
			
			Если Не ДанныеДляREST.ЕстьОшибка Тогда	
				
				НачалоПериода = Дата(1,1,1);
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	МАКСИМУМ(DR_События.ДатаСообщения) КАК ДатаПоследнегоСообщения
				|ИЗ
				|	РегистрСведений.DR_События КАК DR_События
				|ГДЕ
				|	DR_События.ВидДокумента = &amp;ВидДокумента
				|	И DR_События.АктуализироватьИдентификатор = ЛОЖЬ";
				
				Запрос.УстановитьПараметр("ВидДокумента", ДанныеДляREST.ВидДокумента);
				
				ВыборкаДата = Запрос.Выполнить().Выбрать();
				
				Если ВыборкаДата.Следующий() Тогда
					НачалоПериода = ВыборкаДата.ДатаПоследнегоСообщения;
				КонецЕсли;   
				
				МинимальнаяДата =  НачалоПериода;
				Сутки         = 60*60*24;
				ТекущаяДата   = ТекущаяДата(); 
				
				Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
					МинимальнаяДата = МинимальнаяДата - Сутки;
				Иначе
					МинимальнаяДата = ТекущаяДата - Сутки * 30;					
				КонецЕсли;         
				
				МаксимальнаяДата =  ТекущаяДата + Сутки;  
				
				НачалоПериода = Формат(МинимальнаяДата , "ДФ=yyyy-MM-dd");
				КонецПериода  = Формат(МаксимальнаяДата, "ДФ=yyyy-MM-dd");  	
				
				ВсеСообщенияAPI  = Новый Массив;
				
				Для Каждого ИдУчастника Из ИдентификаторыУчастников Цикл
					
					ПараметрыМетода = Новый Структура;
					ПараметрыМетода.Вставить("guid",		ИдУчастника);
					ПараметрыМетода.Вставить("time_from",	НачалоПериода);
					ПараметрыМетода.Вставить("time_to",		КонецПериода);
					ПараметрыМетода.Вставить("limit",		ЛимитСообщений);
					ПараметрыМетода.Вставить("doc_type",	ДанныеДляREST.doc_type.doc_type);
					ПараметрыМетода.Вставить("ticket_type",	ДанныеДляREST.doc_type.ticket_type);
					
					МассивСообщенийAPI = DR_EDI_ВзаимодействиеREST_API.ПолучитьСписокВходящихДокументовЮЗД(ПараметрыМетода, ДанныеПодключения);
					
					Для Каждого Сообщение Из МассивСообщенийAPI Цикл
						ВсеСообщенияAPI.Добавить(Сообщение);
					КонецЦикла;
					
				КонецЦикла;
				
				Для Каждого Соответствие Из ВсеСообщенияAPI Цикл
					НовСтр = ТаблицаДокументовAPI.Добавить();
					НовСтр.chainID     = Соответствие.Получить("chainID");
					НовСтр.ftpFileName = Соответствие.Получить("ftpFileName");
					НовСтр.docUUID     = Соответствие.Получить("docUUID");
					НовСтр.date        = Соответствие.Получить("date");
				КонецЦикла;
				
			Иначе
				ЕстьОшибкаПолученияИдентификаторов = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

Иначе 
	
	ТекстЛогаСобытий = "Обработка DR_Документов с видом операции ""DP_PRANNUL_22_входящий"" не выполнена! Проверьте настройки профиля обмена. " 
						+ "Возможно профиль помечен на удаление, либо не заполнен в настройках соответствия по Организации.";
			
	ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);	
			
	ЕстьОшибкаПолученияИдентификаторов = Истина;
		
КонецЕсли;

#КонецОбласти

Если Не ЕстьОшибкаПолученияИдентификаторов Тогда

#Область РаботаСТаблицейВходящихДокументов

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	DR_Документ.Ссылка КАК DR_Документ,
|	DR_Документ.ДанныеФайла КАК ДанныеФайла,
|	DR_Документ.Статус КАК СтатусДокумента,
|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента,
|	DR_ФайлBIN.Значение КАК DR_ФайлBIN
|ИЗ
|	Документ.DR_Документ КАК DR_Документ
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ФайлBIN
|		ПО (DR_ФайлBIN.Ссылка = DR_Документ.Ссылка)
|			И (DR_ФайлBIN.Реквизит = ""ФайлBIN"")
|ГДЕ
|	DR_Документ.Статус = ""Загружен""
|	И DR_Документ.ВидДокумента = ""DP_PRANNUL_Входящий""
|	И НЕ DR_Документ.ПометкаУдаления";

//Полученный список ID раскладываем по массивам для передачи их в запрос параметром
DocUUID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("docUUID");
ChainID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("chainID");

Выборка =Запрос.Выполнить().Выбрать(); 

Пока Выборка.Следующий() Цикл
	
	//Тип - Структура;
	ДанныеДокумента = Новый Структура;	
	ДанныеФайла 	= Новый Структура;
	ПараметрыОтбора = Новый Структура;
	
	ТекстОшибки = "";
	Комментарий = "";
	
	СтруктураРегистраDR_События = Новый Структура;
	
	DR_ДокументСсылка = Выборка.DR_Документ; 
	
	//Получение данных XML
	Попытка
		
		ДвоичныеДанныеФайла = Выборка.ДанныеФайла.Получить();	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда					
			ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);					
		Иначе					
			ТекстЛогаСобытий = Строка(Выборка.DR_Документ) + " не обработан. Причина: отсутствуют Двоичные данные XML";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
		
	Исключение
		
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Продолжить;	
	КонецПопытки;
	
	ТекущийФайл = Новый Файл(ИмяВременногоФайла);
	
	КодировкаXML = "WINDOWS-1251";
	ЧтениеXMLДляТекущегоФайла = ПолучитьЧтениеXMLДляФайла(ТекущийФайл.Имя, ТекущийФайл, КодировкаXML, МассивЛогаСобытий); 							
	
	Если ЧтениеXMLДляТекущегоФайла = Неопределено Тогда
		Продолжить;
	КонецЕсли;  
	
	ОбъектXDTO = Неопределено;
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLДляТекущегоФайла);
	
	//Преобразование данных из XDTO в Структуру - "ДанныеФайла"
	Если ОбъектXDTO &lt;&gt; Неопределено Тогда
		ДанныеФайла = ПолучитьСтруктуруДокумента(ОбъектXDTO, МассивЛогаСобытий);
	Иначе
		Продолжить;
	КонецЕсли;
	
	ЧтениеXMLДляТекущегоФайла.Закрыть();
	
	//Удалние временного файл
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение				
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Предупреждение", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
	КонецПопытки;
	
	//Поиск ID цепочки по ID эл.документа
	НайденнаяСтрока = ТаблицаДокументовAPI.Найти(НРег(Выборка.ИдентификаторДокумента), "docUUID");
	
	//Найденный ID цепочки присваиваем эл. документу
	Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
		
		ДатаAPI = СтрЗаменить(НайденнаяСтрока.date, "-", "");
		ДатаAPI = СтрЗаменить(ДатаAPI, ":", "");
		ДатаAPI = СтрЗаменить(ДатаAPI, " ", "");
		
		ДанныеДокумента.Вставить("ИдентификаторЦепочки", НайденнаяСтрока.chainID);
		ДанныеДокумента.Вставить("ДатаСообщения", Дата(ДатаAPI));
		
		
	Иначе 
		
		Комментарий = "Для файла " + ДанныеФайла.ИдФайл + " не найден идентификатор цепочки в списке полученных идентификаторов с сервера.";
		
		DR_ДокументОбъект = Выборка.DR_Документ.ПолучитьОбъект();
		DR_ДокументОбъект.Комментарий = Комментарий;
		DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Продолжить;				
	КонецЕсли;			
	
	//Добавляем обязательные поля	
	Если ДанныеФайла.Свойство("Документ_СвПредАн_СведАнФайл_ИмяАнФайла") = Ложь Тогда
		ДанныеФайла.Вставить("Документ_СвПредАн_СведАнФайл_ИмяАнФайла", "");			
	КонецЕсли;
	
	Если ДанныеФайла.Свойство("Документ_СвПредАн_ТекстПредАн") = Ложь Тогда
		ДанныеФайла.Вставить("Документ_СвПредАн_ТекстПредАн", "");			
	КонецЕсли;
	
	
	ВидДокумента = "DP_PRANNUL_22_Входящий";
			
	ДанныеФайла.Вставить("ВидДокумента", ВидДокумента);			
	ДанныеФайла.Вставить("ИдентификаторЦепочки", ДанныеДокумента.ИдентификаторЦепочки);   
	
	//Заполнение данных по DR_Документу
	DR_ДокументОбъект 						= DR_ДокументСсылка.ПолучитьОбъект();
	DR_ДокументОбъект.ИдентификаторЦепочки	= ДанныеДокумента.ИдентификаторЦепочки;
	DR_ДокументОбъект.ВидДокумента			= ВидДокумента;
	//DR_ДокументОбъект.ДанныеФайла 			= Новый ХранилищеЗначения(Неопределено);// не очищаем данные, при подтверждении отправляем оригинал из хранилища
	DR_ДокументОбъект.Статус 				= "Обработан";
	DR_ДокументОбъект.Сообщение 			= ТекстОшибки;
	DR_ДокументОбъект.Комментарий			= Комментарий;
	DR_ДокументОбъект.Пользователь 			= НайтиТекущегоПользователя();
	ТЧ_Документа 							= DR_ДокументОбъект.ДополнительныеРеквизиты;
	
	Для каждого ЭлСтруктуры Из ДанныеФайла Цикл
		
		НоваяСтрока = ТЧ_Документа.Добавить();
		НоваяСтрока.Реквизит = ЭлСтруктуры.Ключ;
		
		Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Массив") Тогда
			
			Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
			НоваяСтрока.ХранилищеЗначения = Хранилище;
		Иначе
			НоваяСтрока.Значение = ЭлСтруктуры.Значение;				
		КонецЕсли;
		
	КонецЦикла;
	
	//Текст сообщения в событии по документу 
	ЗаписьСообщение = "";
	
	ДанныеФайла.Свойство("Документ_СвПредАн_ТекстПредАн", ЗаписьСообщение);     
	
	НачатьТранзакцию();
	
	Попытка
		
		//Запись DR_Документа
		DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		////////////////////////////Создание записи в РС DR_События/////////////////////////////////////
		
		//Заполнение структуры для DR_События
		СтруктураРегистраDR_События.Вставить("ДатаСообщения"			, ДанныеДокумента.ДатаСообщения);
		СтруктураРегистраDR_События.Вставить("ИдентификаторЦепочки"		, ДанныеДокумента.ИдентификаторЦепочки);
		СтруктураРегистраDR_События.Вставить("ДатаЗаписи"				, ТекущаяДата());
		СтруктураРегистраDR_События.Вставить("Документ"					, DR_ДокументСсылка);
		СтруктураРегистраDR_События.Вставить("ВидДокумента"				, ВидДокумента);
		СтруктураРегистраDR_События.Вставить("Идентификатор"			, DR_ДокументСсылка.ИдентификаторДокумента);
		СтруктураРегистраDR_События.Вставить("ИдентификаторОснования"	, Прав(ДанныеФайла.Документ_СвПредАн_СведАнФайл_ИмяАнФайла, 36));
		СтруктураРегистраDR_События.Вставить("Статус"					, "Обработан");
		СтруктураРегистраDR_События.Вставить("Сообщение"				, ЗаписьСообщение);
		
		//На случай если сообщение содержит больше символов чем ресурс "Сообщение"
		ДополнительнаяИнформация = Новый Структура;
		ДополнительнаяИнформация.Вставить("Сообщение", ЗаписьСообщение);
		СтруктураРегистраDR_События.Вставить("ДополнительнаяИнформация"	, Новый ХранилищеЗначения(ДополнительнаяИнформация, Новый СжатиеДанных(9)));
		
		НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
		НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистраDR_События.ИдентификаторЦепочки);
		НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистраDR_События.Документ);
		НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистраDR_События.ВидДокумента);
		НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистраDR_События.Идентификатор);
		НЗ_DRСобытия.Прочитать();
		
		Если НЗ_DRСобытия.Количество() = 0 Тогда
			НоваяЗапись = НЗ_DRСобытия.Добавить();
		Иначе
			НоваяЗапись = НЗ_DRСобытия[0];
		КонецЕсли;
		
		Для Каждого Элемент Из СтруктураРегистраDR_События Цикл			
			НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
		КонецЦикла;
		
		НЗ_DRСобытия.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстЛогаСобытий = "Формирование записей в Регистрах Docrobot по " + ДанныеФайла.ИдФайл + " не выполнено. По причине - " + ОписаниеОшибки();
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
		ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки - " + ОписаниеОшибки());
		
	КонецПопытки;
		
КонецЦикла; 

#КонецОбласти

КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Входящий DP_PRANNUL</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">3</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Входящий DP_PRANNUL</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
		</Value>
	</row>
</ValueTree>