<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Входящий ON_NSCHFDOPPRMARK</Value>
		<Value xsi:type="xs:string">ТипДокумента = "ON_NSCHFDOPPRMARK";
ТипДокументооборота      = "ЮЗД";
ИдентификаторыУчастников = Новый Массив;
ЕстьОшибкаПолученияИдентификаторов = Ложь;

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	DR_GLN.ПрофильОбмена КАК ПрофильОбмена,
|	DR_GLN.Объект КАК Организация,
|	DR_GLN.GLN КАК GLN,
|	DR_GLN.Ид_ОЭД КАК ИдУчастника
|ИЗ
|	РегистрСведений.DR_GLN КАК DR_GLN
|ГДЕ
|	НЕ DR_GLN.ПрофильОбмена = НЕОПРЕДЕЛЕНО
|	И НЕ DR_GLN.ПрофильОбмена.ПометкаУдаления
|ИТОГИ ПО
|	ПрофильОбмена";

РезультатЗапроса = Запрос.Выполнить();

Если НЕ РезультатЗапроса.Пустой() Тогда
	
	ТаблицаДокументовAPI = Новый ТаблицаЗначений;
	ТаблицаДокументовAPI.Колонки.Добавить("chainID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("ftpFileName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаДокументовAPI.Колонки.Добавить("docUUID"    , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Колонки.Добавить("date"       , Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(36)));
	ТаблицаДокументовAPI.Индексы.Добавить("docUUID");
	
	ВыборкаПрофильОбмена = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПрофильОбмена.Следующий() Цикл
		
		ПрофильОбмена = ВыборкаПрофильОбмена.ПрофильОбмена;
		
		#Область ПолучениеСпискаИдентификаторовПоПрофилюОбмена
		
		ВыборкаДетальныеЗаписи = ВыборкаПрофильОбмена.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИдентификаторыУчастников.Добавить(ВыборкаДетальныеЗаписи.ИдУчастника);	 
		КонецЦикла; 
		
		#КонецОбласти
		
		#Область ПодготовкаВспомогательныхДанныхДляRestApi
		
		ИмяСобытия = "Заполнение идентификаторов цепочки для входящих файлов " + ТипДокумента + ".";  		
		ДанныеДляREST = Новый Структура("ЕстьОшибка, ВидДокумента, ДанныеПодключения, doc_type", Ложь, Неопределено, Неопределено, Неопределено); 
		
		ДанныеДляREST.ВидДокумента 	= "ON_NSCHFDOPPRMARK_01_Входящий";	
		ДанныеДляREST.doc_type 		= Новый Структура("doc_type, ticket_type", "updsfaktdop", "УПД");
		
		ДанныеАвторизации = DR_EDI_ВзаимодействиеREST_API.ВыполнитьАвторизациюАтолл(ПрофильОбмена);
		
		Если Не ДанныеАвторизации.Получены Тогда
			ТекстЛогаСобытий = "Не удалось выполнить авторизацию. ";
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			ДанныеДляREST.ЕстьОшибка = Истина;
		КонецЕсли;	
		
		ДанныеПодключения = DR_EDI_ВзаимодействиеREST_API.ПолучитьДанныеПодключенияEvolution(ПрофильОбмена);
		
		Если Не ДанныеПодключения.ПолученПрофиль ИЛИ Не ДанныеПодключения.ПолученТокен Тогда
			ТекстЛогаСобытий = "Не удалось получить данные для подключения к REST API. ";
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			ДанныеДляREST.ЕстьОшибка = Истина;
		КонецЕсли;
		
		ДанныеДляREST.ДанныеПодключения = ДанныеПодключения;	
		
		#КонецОбласти
		
		#Область ПолучитьИдентификаторыЦепочекВходящихФайлов
		
		Если Не ДанныеДляREST.ЕстьОшибка Тогда	
			
			НачалоПериода = Дата(1,1,1);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	МАКСИМУМ(DR_События.ДатаСообщения) КАК ДатаПоследнегоСообщения
			|ИЗ
			|	РегистрСведений.DR_События КАК DR_События
			|ГДЕ
			|	DR_События.ВидДокумента = &amp;ВидДокумента
			|	И DR_События.АктуализироватьИдентификатор = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("ВидДокумента", ДанныеДляREST.ВидДокумента);
			
			ВыборкаДата = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаДата.Следующий() Тогда
				НачалоПериода = ВыборкаДата.ДатаПоследнегоСообщения;
			КонецЕсли;   
			
			МинимальнаяДата =  НачалоПериода;
			Сутки         = 60*60*24;
			ТекущаяДата   = ТекущаяДата(); 
			
			Если ЗначениеЗаполнено(МинимальнаяДата) Тогда
				МинимальнаяДата = МинимальнаяДата - Сутки;
			Иначе
				МинимальнаяДата = ТекущаяДата - Сутки * 30;					
			КонецЕсли;         
			
			МаксимальнаяДата =  ТекущаяДата + Сутки; 
			
			НачалоПериода = Формат(МинимальнаяДата , "ДФ=yyyy-MM-dd");
			КонецПериода  = Формат(МаксимальнаяДата, "ДФ=yyyy-MM-dd");  	
			
			ВсеСообщенияAPI  = Новый Массив;
			
			Для Каждого ИдУчастника Из ИдентификаторыУчастников Цикл
				
				ПараметрыМетода = Новый Структура;					
				ПараметрыМетода.Вставить("guid"			, ИдУчастника);
				ПараметрыМетода.Вставить("time_from"	, НачалоПериода);
				ПараметрыМетода.Вставить("time_to"		, КонецПериода);
				ПараметрыМетода.Вставить("limit"		, "200");
				ПараметрыМетода.Вставить("doc_type"		, ДанныеДляREST.doc_type.doc_type);
				ПараметрыМетода.Вставить("ticket_type"	, ДанныеДляREST.doc_type.ticket_type);
				
				МассивСообщенийAPI = Вычислить("DR_EDI_ВзаимодействиеREST_API.ПолучитьСписокВходящихДокументовЮЗД(ПараметрыМетода, ДанныеПодключения)");
				
				Для Каждого Сообщение Из МассивСообщенийAPI Цикл
					ВсеСообщенияAPI.Добавить(Сообщение);
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого Соответствие Из ВсеСообщенияAPI Цикл
				
				НовСтр = ТаблицаДокументовAPI.Добавить();
				НовСтр.chainID     = Соответствие.Получить("chainID");
				НовСтр.ftpFileName = Соответствие.Получить("ftpFileName");
				НовСтр.docUUID     = Соответствие.Получить("docUUID");
				НовСтр.date        = Соответствие.Получить("date");
				
			КонецЦикла;
		Иначе 
			ЕстьОшибкаПолученияИдентификаторов = Истина;	
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла;
	
Иначе 
	
	ТекстЛогаСобытий = "Обработка DR_Документов с видом операции ""ON_NSCHFDOPPRMARK_входящий"" не выполнена! Проверьте настройки профиля обмена. " 
					 + "Возможно профиль помечен на удаление, либо не заполнен в настройках соответствия по Организации.";
	
	ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);	
	
	ЕстьОшибкаПолученияИдентификаторов = Истина;
	
КонецЕсли;

Если Не ЕстьОшибкаПолученияИдентификаторов Тогда
	
	/////////////////////////////////////////////////////////////////////////////////
	//          	   ВХОДЯЩИЙ NSCHFDOPPRMARK/NSCHFDOPPRMARK_ИСПР                 //
	/////////////////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК DR_Документ,
	|	DR_Документ.ДанныеФайла КАК ДанныеФайла,
	|	DR_Документ.Статус КАК СтатусДокумента,
	|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ DR_Загружен
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.Статус = &amp;Загружен
	|	И DR_Документ.ВидДокумента = &amp;ВидДокументаНовых
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Загружен.DR_Документ КАК DR_Документ,		
	|	DR_Загружен.ДанныеФайла КАК ДанныеФайла,
	|	DR_Загружен.СтатусДокумента КАК СтатусДокумента,
	|	DR_Загружен.ИдентификаторДокумента КАК ИдентификаторДокумента,		
	|	ВЫРАЗИТЬ(ТЧ_ФайлЗагруженЛокально.Значение КАК БУЛЕВО) КАК ФайлЗагруженЛокально
	|ИЗ
	|	DR_Загружен КАК DR_Загружен
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ТЧ_ФайлЗагруженЛокально
	|		ПО DR_Загружен.DR_Документ = ТЧ_ФайлЗагруженЛокально.Ссылка
	|			И (ТЧ_ФайлЗагруженЛокально.Реквизит = ""ФайлЗагруженЛокально"")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК DR_Документ,
	|	DR_Документ.Статус КАК СтатусДокумента,
	|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.ИдентификаторЦепочки В(&amp;ИдентификаторЦепочки)
	|	И DR_Документ.ИдентификаторДокумента В(&amp;ИдентификаторДокумента)
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	DR_Документ.Ссылка КАК Ссылка,
	|	DR_Документ.Комментарий КАК Комментарий,
	|	DR_Документ.ВидДокумента КАК ВидДокумента,
	|	DR_Документ.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	DR_Документ.ИдентификаторЦепочки КАК ИдентификаторЦепочки
	|ПОМЕСТИТЬ ВТ_НеОбработан
	|ИЗ
	|	Документ.DR_Документ КАК DR_Документ
	|ГДЕ
	|	DR_Документ.Статус = &amp;НеОбработан
	|	И DR_Документ.ВидДокумента В(&amp;ВидДокументаПовторных)
	|	И НЕ DR_Документ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НеОбработан.Ссылка КАК DR_Документ,
	|	ВТ_НеОбработан.Комментарий КАК Комментарий,
	|	ВТ_НеОбработан.ВидДокумента КАК ВидДокумента,
	|	ВТ_НеОбработан.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
	|	ВТ_НеОбработан.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ДР_ИнфПолФХЖ1.ХранилищеЗначения КАК ХЗ_ИнфПолФХЖ1,
	|	ДР_ДокументТЧ.ХранилищеЗначения КАК ХЗ_ДокументТЧ,
	|	ДР_Контрагент.Значение КАК Контрагент,
	|	ДР_ИННЮЛ.Значение КАК ИННЮЛ,
	|	ДР_ИННФЛ.Значение КАК ИННФЛ,
	|	ДР_КПП.Значение КАК КПП,
	|	ДР_СвУчДокОбор_ИдОтпр.Значение КАК ИдОтпр,
	|	ДР_СвУчДокОбор_ИдПол.Значение КАК ИдПол,
	|	ДР_ДатаСчФ.Значение КАК ДатаСчФ,
	|	ДР_НомерСчФ.Значение КАК НомерСчФ
	|ИЗ
	|	ВТ_НеОбработан КАК ВТ_НеОбработан
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_СвУчДокОбор_ИдОтпр
	|		ПО ВТ_НеОбработан.Ссылка = ДР_СвУчДокОбор_ИдОтпр.Ссылка
	|			И (ДР_СвУчДокОбор_ИдОтпр.Реквизит = ""СвУчДокОбор_ИдОтпр"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_СвУчДокОбор_ИдПол
	|		ПО ВТ_НеОбработан.Ссылка = ДР_СвУчДокОбор_ИдПол.Ссылка
	|			И (ДР_СвУчДокОбор_ИдПол.Реквизит = ""СвУчДокОбор_ИдПол"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДокументТЧ
	|		ПО ВТ_НеОбработан.Ссылка = ДР_ДокументТЧ.Ссылка
	|			И (ДР_ДокументТЧ.Реквизит = ""ДокументТЧ"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ИнфПолФХЖ1
	|		ПО ВТ_НеОбработан.Ссылка = ДР_ИнфПолФХЖ1.Ссылка
	|			И (ДР_ИнфПолФХЖ1.Реквизит = ""Документ_СвСчФакт_ИнфПолФХЖ1"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_Контрагент
	|		ПО ВТ_НеОбработан.Ссылка = ДР_Контрагент.Ссылка
	|			И (ДР_Контрагент.Реквизит = ""Контрагент"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ИННЮЛ
	|		ПО ВТ_НеОбработан.Ссылка = ДР_ИННЮЛ.Ссылка
	|			И (ДР_ИННЮЛ.Реквизит = ""Документ_СвСчФакт_СвПрод_ИдСв_СвЮЛУч_ИННЮЛ"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ИННФЛ
	|		ПО ВТ_НеОбработан.Ссылка = ДР_ИННФЛ.Ссылка
	|			И (ДР_ИННФЛ.Реквизит = ""Документ_СвСчФакт_СвПрод_ИдСв_СвИП_ИННФЛ"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_КПП
	|		ПО ВТ_НеОбработан.Ссылка = ДР_КПП.Ссылка
	|			И (ДР_КПП.Реквизит = ""Документ_СвСчФакт_СвПрод_ИдСв_СвЮЛУч_КПП"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_ДатаСчФ
	|		ПО ВТ_НеОбработан.Ссылка = ДР_ДатаСчФ.Ссылка
	|			И (ДР_ДатаСчФ.Реквизит = ""Документ_СвСчФакт_ДатаСчФ"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДР_НомерСчФ
	|		ПО ВТ_НеОбработан.Ссылка = ДР_НомерСчФ.Ссылка
	|			И (ДР_НомерСчФ.Реквизит = ""Документ_СвСчФакт_НомерСчФ"")";
	
	//&lt;Полученный список ID раскладываем по массивам для передачи их в запрос параметром&gt;
	DocUUID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("docUUID");
	ChainID_API = ТаблицаДокументовAPI.ВыгрузитьКолонку("chainID");
	
	МассивВидовДокумента = Новый Массив;
	МассивВидовДокумента.Добавить(ТипДокумента + "_01_входящий");
	МассивВидовДокумента.Добавить(ТипДокумента + "_01_Испр_Входящий");
	
	Запрос.УстановитьПараметр("ВидДокументаПовторных"	, МассивВидовДокумента);
	Запрос.УстановитьПараметр("ВидДокументаНовых"		, ТипДокумента + "_входящий");
	Запрос.УстановитьПараметр("Загружен"				, "Загружен");
	Запрос.УстановитьПараметр("НеОбработан"				, "НеОбработан");
	Запрос.УстановитьПараметр("ИдентификаторЦепочки"	, ChainID_API);
	Запрос.УстановитьПараметр("ИдентификаторДокумента"	, DocUUID_API);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//&lt;Таблица используется для поиска Дублей&gt;
	ТаблицаDR_ДокументовПоID  = МассивРезультатов[2].Выгрузить();
	ТаблицаDR_ДокументовПоID.Индексы.Добавить("ИдентификаторЦепочки, ИдентификаторДокумента");
	
	//&lt;Инициализация квалификаторов&gt;
	КвалификаторСтрока	= Новый КвалификаторыСтроки(200);
	КвалификаторЧисло 	= Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
	
	//&lt;Создание описателей типов&gt;
	ОписаниеТиповНоменклатура 	= Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеТиповDR_Документ 	= Новый ОписаниеТипов("ДокументСсылка.DR_Документ");
	ОписаниеТиповЧисло			= Новый ОписаниеТипов("Число",,,,КвалификаторЧисло);
	ОписаниеТиповСтрока			= Новый ОписаниеТипов("Строка",,,,КвалификаторСтрока);
	ОписаниеТиповДата			= Новый ОписаниеТипов("Дата");
	
	//&lt;В таблицу добавляются данные по распарсенным XML&gt;
	ТаблицаНовДокументов = Новый ТаблицаЗначений;
	ТаблицаНовДокументов.Колонки.Добавить("ChainID"	, ОписаниеТиповСтрока);  //Тип - Строка
	ТаблицаНовДокументов.Колонки.Добавить("DocUUID"	, ОписаниеТиповСтрока);  //Тип - Строка
	ТаблицаНовДокументов.Колонки.Добавить("ИдОтпр"	, ОписаниеТиповСтрока);  //Тип - Строка
	ТаблицаНовДокументов.Колонки.Добавить("ИдПол"	, ОписаниеТиповСтрока);  //Тип - Строка		                                                 	
	ТаблицаНовДокументов.Колонки.Добавить("ДанныеДокумента"); //Тип - Структура
	
	//&lt;В таблицу добавляются данные Участникам ЭДО&gt;
	ТаблицаУчастникиЭДО = Новый ТаблицаЗначений;
	ТаблицаУчастникиЭДО.Колонки.Добавить("DR_Документ"	, ОписаниеТиповDR_Документ);
	ТаблицаУчастникиЭДО.Колонки.Добавить("ИдПол"		, ОписаниеТиповСтрока);
	ТаблицаУчастникиЭДО.Колонки.Добавить("ИдОтпр"		, ОписаниеТиповСтрока);
	ТаблицаУчастникиЭДО.Колонки.Добавить("ИНН"			, ОписаниеТиповСтрока);
	ТаблицаУчастникиЭДО.Колонки.Добавить("КПП"			, ОписаниеТиповСтрока);
	
	//&lt;В таблицу добавляются данные товарным позициям&gt;
	ТаблицаСведТов = Новый ТаблицаЗначений;
	ТаблицаСведТов.Колонки.Добавить("DR_Документ"		, ОписаниеТиповDR_Документ);
	ТаблицаСведТов.Колонки.Добавить("НомСтр"			, ОписаниеТиповЧисло);
	ТаблицаСведТов.Колонки.Добавить("НомерПродукта"		, ОписаниеТиповСтрока);
	
	#Область ПолучениеДанныхПоНовымДокументам
	
	Если НЕ МассивРезультатов[1].Пустой() Тогда
		
		ВыборкаДетальныеЗаписи = МассивРезультатов[1].Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			//&lt;Тип - Структура&gt;
			ДанныеДокумента = Новый Структура;	
			ДанныеФайла 	= Новый Структура;
			ПараметрыОтбора = Новый Структура;
			
			//&lt;&lt;Получение данных XML&gt;&gt;
			Попытка
				
				ДвоичныеДанныеФайла = ВыборкаДетальныеЗаписи.ДанныеФайла.Получить();	
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
				
				Если ЗначениеЗаполнено(ДвоичныеДанныеФайла) Тогда					
					ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);					
				Иначе					
					ТекстЛогаСобытий = Строка(ВыборкаДетальныеЗаписи.DR_Документ) + " не обработан. Причина: отсутствуют Двоичные данные XML";
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;
				КонецЕсли;
				
			Исключение
				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Продолжить;	
			КонецПопытки;
			
			ТекущийФайл = Новый Файл(ИмяВременногоФайла);
			
			КодировкаXML = "WINDOWS-1251";
			ЧтениеXMLДляТекущегоФайла = ПолучитьЧтениеXMLДляФайла(ТекущийФайл.Имя, ТекущийФайл, КодировкаXML, МассивЛогаСобытий); 							
			Если ЧтениеXMLДляТекущегоФайла = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектXDTO = Неопределено;
			ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXMLДляТекущегоФайла);
			
			//&lt;Преобразование данных из XDTO в Структуру - "ДанныеФайла"&gt;
			Если ОбъектXDTO &lt;&gt; Неопределено Тогда
				ДанныеФайла = ПолучитьСтруктуруДокумента(ОбъектXDTO, МассивЛогаСобытий);
			Иначе
				Продолжить;
			КонецЕсли;
			
			ЧтениеXMLДляТекущегоФайла.Закрыть();
			
			//&lt;Удалние временного файл&gt;
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение				
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), "Предупреждение", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обработка ""Интеграция Docrobot""'"), УровеньЖурналаРегистрации.Предупреждение, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));				
			КонецПопытки;
			
			//&lt;Поиск ID цепочки по ID эл.документа&gt;
			НайденнаяСтрока = ТаблицаДокументовAPI.Найти(НРег(ВыборкаДетальныеЗаписи.ИдентификаторДокумента), "docUUID");
			
			//&lt;&lt;Найденный ID цепочки присваиваем эл. документу&gt;&gt;
			Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
				
				ДатаAPI = СтрЗаменить(НайденнаяСтрока.date, "-", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, ":", "");
				ДатаAPI = СтрЗаменить(ДатаAPI, " ", "");
				
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", НайденнаяСтрока.chainID);
				ДанныеДокумента.Вставить("ДатаСообщения", Дата(ДатаAPI));
				
			ИначеЕсли ВыборкаДетальныеЗаписи.ФайлЗагруженЛокально = Истина Тогда
				
				ДанныеДокумента.Вставить("ИдентификаторЦепочки", "TMP_" + ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
				ДанныеДокумента.Вставить("ДатаСообщения", ТекущаяДата());
				
			Иначе
				Комментарий = "По ЮЗД № " + ДанныеФайла.Документ_СвСчФакт_НомерСчФ + " не найден идентификатор цепочки в списке полученных идентификаторов с сервера.";
				
				DR_ДокументОбъект = ВыборкаДетальныеЗаписи.DR_Документ.ПолучитьОбъект();
				DR_ДокументОбъект.Комментарий = Комментарий;
				DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстЛогаСобытий = Строка(ВыборкаДетальныеЗаписи.DR_Документ) + " не обработан. Причина: " + Комментарий;
				ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
				МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
				
				Продолжить;
			КонецЕсли;			
			
			//&lt;Праметры отбора для поиска дублей&gt;
			ПараметрыОтбора.Вставить("ИдентификаторЦепочки", ДанныеДокумента.ИдентификаторЦепочки);
			ПараметрыОтбора.Вставить("ИдентификаторДокумента", ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
			
			//&lt;Поиск дублей. РезультатПоиска - тип Массив&gt;
			РезультатПоиска = ТаблицаDR_ДокументовПоID.НайтиСтроки(ПараметрыОтбора);
			
			//&lt;Проверка на дубли по DR_Документам со статусом "Обработан" или "Не обработан" найденных по установленному отбору&gt;
			Если НЕ РезультатПоиска.Количество() = 0 Тогда
				
				ЭлементМассива = РезультатПоиска[0];
				
				Если ВРег(ЭлементМассива.СтатусДокумента) = "НЕОБРАБОТАН" 
					ИЛИ ВРег(ЭлементМассива.СтатусДокумента) = "ОБРАБОТАН" Тогда 
					
					//&lt;Для Нового DR_Документа изменям статус&gt;
					DR_ДокументОбъект = ВыборкаДетальныеЗаписи.DR_Документ.ПолучитьОбъект();
					DR_ДокументОбъект.Статус = "Архивный";
					DR_ДокументОбъект.ДанныеФайла = Новый ХранилищеЗначения(Неопределено);
					DR_ДокументОбъект.Комментарий = "Документ является дублем по ранее созданному " + Строка(ЭлементМассива.DR_Документ);
					
					ТабличнаяЧасть = DR_ДокументОбъект.ДополнительныеРеквизиты;
					
					НовСтр = ТабличнаяЧасть.Добавить();
					НовСтр.Реквизит = "НеОбрабатывать";
					НовСтр.Значение = Истина;
					DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					
					Причина = "Документ является дублем по ранее созданному " + Строка(ЭлементМассива.DR_Документ); 
					ТекстЛогаСобытий = Строка(ВыборкаДетальныеЗаписи.DR_Документ) + " не обработан. Причина: " + Причина;
					ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
					МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
					
					Продолжить;					
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеДокумента.Вставить("ИдентификаторДокумента"	, ВыборкаДетальныеЗаписи.ИдентификаторДокумента);
			ДанныеДокумента.Вставить("DR_Документ"				, ВыборкаДетальныеЗаписи.DR_Документ);
			ДанныеДокумента.Вставить("Статус"					, ВыборкаДетальныеЗаписи.СтатусДокумента);
			ДанныеДокумента.Вставить("ДанныеФайла"				, ДанныеФайла);
			
			//&lt;определение вида документа&gt;
			ВидДокумента = "ON_NSCHFDOPPRMARK_01_Входящий";
			НомИспрСчФ   = "";
			ДанныеФайла.Свойство("Документ_СвСчФакт_ИспрСчФ_НомИспрСчФ", НомИспрСчФ);
			
			Если ЗначениеЗаполнено(НомИспрСчФ) Тогда
				ВидДокумента = "ON_NSCHFDOPPRMARK_01_Испр_Входящий";
			КонецЕсли;
			
			ДанныеДокумента.Вставить("ВидДокумента"	, ВидДокумента);
			ДанныеДокумента.Вставить("НомИспрСчФ"	, НомИспрСчФ);
			ДанныеДокумента.Вставить("ИдОтпр"		, ДанныеФайла.СвУчДокОбор_ИдОтпр);
			ДанныеДокумента.Вставить("ИдПол"		, ДанныеФайла.СвУчДокОбор_ИдПол);
			
			//&lt;&lt;Добавление элементов&gt;&gt; 
			//&lt;По Участникам ЭДО для последующего их заполнения&gt;
			ДанныеФайла.Вставить("Организация"	, "");
			ДанныеФайла.Вставить("Контрагент"	, "");
			
			//&lt;Для проверки необходимости обработки DR_Документа по кастомному условию&gt;
			ДанныеФайла.Вставить("НеОбрабатывать", Ложь);
			
			//&lt;&lt;Получение идентификационных данных для поиска Участников ЭДО&gt;&gt;
			Структура = Новый Структура("DR_Документ, ИдПол, ИдОтпр, ИНН, КПП");
			ЗаполнитьЗначенияСвойств(Структура, ДанныеДокумента);
			
			//&lt;ЮЛ&gt;
			ДанныеФайла.Свойство("Документ_СвСчФакт_СвПрод_ИдСв_СвЮЛУч_ИННЮЛ", Структура.ИНН);
			//&lt;ФЛ&gt;
			Если НЕ ЗначениеЗаполнено(Структура.ИНН) Тогда
				ДанныеФайла.Свойство("Документ_СвСчФакт_СвПрод_ИдСв_СвИП_ИННФЛ", Структура.ИНН);
			КонецЕсли;				
			
			ДанныеФайла.Свойство("Документ_СвСчФакт_СвПрод_ИдСв_СвЮЛУч_КПП", Структура.КПП);
			
			НоваяСтр = ТаблицаУчастникиЭДО.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр, Структура);
			
			//&lt;Итоговые поля по которым выполняется приобразование строковых значений в число&gt;
			СуммыИтого = Новый Структура("Документ_ТаблСчФакт_ВсегоОпл_СтТовБезНДСВсего, 
										| Документ_ТаблСчФакт_ВсегоОпл_СтТовУчНалВсего, 
										| Документ_ТаблСчФакт_ВсегоОпл_СумНалВсего_СумНал");
			
			//&lt;Преобразование строковых значений ВсегоОпл в число&gt;
			Для каждого Стр Из СуммыИтого Цикл			
				ДанныеФайла[Стр.Ключ] = ЭКОМ_ПреобразоватьВЧисло(ДанныеФайла[Стр.Ключ]);			
			КонецЦикла;
			
			//&lt;Поля табличной части по которым выполняется приобразование строковых значений в число&gt;
			СписокПолей = Новый Структура("Документ_ТаблСчФакт_СведТов_НомСтр, 
										 | Документ_ТаблСчФакт_СведТов_КолТов, 
										 | Документ_ТаблСчФакт_СведТов_ЦенаТов,
										 | Документ_ТаблСчФакт_СведТов_НалСт, 
										 | Документ_ТаблСчФакт_СведТов_СтТовУчНал, 
										 | Документ_ТаблСчФакт_СведТов_СтТовБезНДС,
										 | Документ_ТаблСчФакт_СведТов_СумНал_СумНал");
			
			//&lt;Поля для определения маркированного товара&gt;				
			ПоляМаркировка = Новый Структура("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_ИдентТрансУпак,
											| Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_,
											| Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ_,
											| Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ,
											| Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак_,
											| Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак");
			
			//&lt;Коллекция данных по маркированной продукции&gt;
			ДанныеПоМаркировке = Новый Массив;
			ДанныеФайла.Вставить("Маркировка", ДанныеПоМаркировке);
			
			//&lt;&lt;&lt;&lt;Обработка ТаблСчФакт&gt;&gt;&gt;&gt;
			Для каждого СтруктСтрока Из ДанныеФайла.ДокументТЧ Цикл
				
				Маркируемая = Ложь;
				НаимТов = СтруктСтрока.Документ_ТаблСчФакт_СведТов_НаимТов;
				
				//&lt;&lt;Проверка наличия атрибута. Вслучае отсутствия добавление значения отсутствующего кода в ОКЕИ&gt;&gt;
				Если НЕ СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ОКЕИ_Тов") Тогда 
					СтруктСтрока.Вставить("Документ_ТаблСчФакт_СведТов_ОКЕИ_Тов", "0000");			
				КонецЕсли;
				
				//&lt;&lt;Преобразование строковых значений СведТов в число&gt;&gt;
				Для каждого Поле Из СписокПолей Цикл
					СтруктСтрока[Поле.Ключ] = ЭКОМ_ПреобразоватьВЧисло(СтруктСтрока[Поле.Ключ]);
				КонецЦикла;				
				
				//&lt;добавление в структуру СведТов новых элементов&gt;
				СтруктСтрока.Вставить("Номенклатура",);
				СтруктСтрока.Вставить("ЕдиницаИзмерения",);
				
				//&lt;&lt;&lt;Выносим инфополя ФХЖ2 на один уровень с данными по товару&gt;&gt;&gt;
				//&lt;инфополя ФХЖ2 - тип массив&gt;
				Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_") Тогда
					
					Для каждого ЭлСтруктура Из СтруктСтрока.Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_ Цикл
						
						Ключ = ЭлСтруктура.Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_Идентиф;
						Значение = ЭлСтруктура.Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_Значен;
						
						СтруктСтрока.Вставить("ИнфПолФХЖ2_" + Ключ, Значение);
						
					КонецЦикла;
					
					СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_");
					
				ИначеЕсли СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_Значен") Тогда //&lt;Одна строка&gt;	
					
					//&lt;Вместо двух элементов структуры формируем один с именем значения Идентификатора&gt;
					Ключ = СтруктСтрока.Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_Идентиф;
					Значение = СтруктСтрока.Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_Значен;
					
					СтруктСтрока.Вставить("ИнфПолФХЖ2_" + Ключ, Значение);
					
					СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_Идентиф");
					СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ИнфПолФХЖ2_Значен");
					
				КонецЕсли;
				
				//&lt;Получение идентификационных данных для поиска номенклатуры&gt;
				Структура = Новый Структура("DR_Документ, НомСтр, НомерПродукта", ДанныеДокумента.DR_Документ);
				
				СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_НомСтр", Структура.НомСтр);
				
				Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_КодТов") Тогда
					СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_КодТов", Структура.НомерПродукта);	
				Иначе 
					СтруктСтрока.Свойство("ИнфПолФХЖ2_штрихкод", Структура.НомерПродукта);
				КонецЕсли;
				
				НоваяСтр = ТаблицаСведТов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр,Структура);
				
				//&lt;Проверка является товар маркируемым&gt;					
				Для каждого Поле Из ПоляМаркировка Цикл
					
					Если СтруктСтрока.Свойство(Поле.Ключ) Тогда
						Маркируемая = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Маркируемая Тогда
					//&lt;&lt;&lt;Обработка элементов НомСредИдентТов,НомУпак,КИЗ. Приведение значении элементов КИЗ/НомУпак к типу - МАССИВ&gt;&gt;&gt;
					//&lt;ИдентТрансУпак - Уникальный идентификатор транспортной упаковки - (КИТУ) Коды идентификации транспортной упаковки. Например, SSCC&gt; 
					//&lt;КИЗ            - Контрольный идентификационный знак - (КИ) Коды идентификации товаров в потребительской упаковке&gt;
					//&lt;НомУпак        - Уникальный идентификатор вторичной (потребительской),
					//					третичной (заводской, транспортной) упаковки - (КИГУ, КИН).
					//					Коды идентификации групповой упаковки: блоки, наборы, прочие групповые упаковки&gt;
					
					СтруктураМаркировка = Новый Структура;
					СтруктураМаркировка.Вставить("НомерСтроки"			, Структура.НомСтр);
					СтруктураМаркировка.Вставить("НаименованиеТовара"	, НаимТов);						
					СтруктураМаркировка.Вставить("НомСредИдентТов"		, Новый Массив);
					ДанныеПоМаркировке.Добавить(СтруктураМаркировка);
					
					СтруктураНомСредИдентТов = Новый Структура;
					СтруктураНомСредИдентТов.Вставить("ИдентТрансУпак"	, "");
					СтруктураНомСредИдентТов.Вставить("НомУпак" 		, "");
					СтруктураНомСредИдентТов.Вставить("КИЗ"				, "");
					
					НомУпак = "";
					КИЗ = "";					
					
					//&lt;&lt;ИдентТрансУпак&gt;&gt;
					//&lt;Несколько атрибутов, т.е. передан более одного ИдентТрансУпак&gt;
					Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_") Тогда
						
						Для каждого Эл Из СтруктСтрока.Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_ Цикл
							
							СтруктураИдентТрансУпак = Новый Структура;
							СтруктураИдентТрансУпак.Вставить("ИдентТрансУпак"	, "");
							СтруктураИдентТрансУпак.Вставить("НомУпак" 			, "");
							СтруктураИдентТрансУпак.Вставить("КИЗ"				, "");
							
							Эл.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_ИдентТрансУпак", СтруктураИдентТрансУпак.ИдентТрансУпак);
							
							//&lt;&lt;НомУпак&gt;&gt;
							//&lt;Несколько элементов, т.е. передан более одного НомУпак&gt;
							Эл.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак_", СтруктураИдентТрансУпак.НомУпак);
							
							//&lt;Один элемент, т.е. передан один НомУпак&gt;
							Если Эл.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак", НомУпак) Тогда
								
								МассивНомУпак = Новый Массив;
								МассивНомУпак.Добавить(НомУпак);
								
								СтруктураИдентТрансУпак["НомУпак"] = МассивНомУпак;
								
							КонецЕсли;
							
							//&lt;&lt;КИЗ&gt;&gt;
							//&lt;Несколько элементов, т.е. передан более одного КИЗ&gt;
							Эл.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ_", СтруктураИдентТрансУпак.КИЗ);
							
							//&lt;Один элемент, т.е. передан один КИЗ&gt;
							Если Эл.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ", КИЗ) Тогда
								
								МассивКИЗ = Новый Массив;
								МассивКИЗ.Добавить(КИЗ);
								
								СтруктураИдентТрансУпак["КИЗ"] = МассивКИЗ;
								
							КонецЕсли;
							
							СтруктураМаркировка.НомСредИдентТов.Добавить(СтруктураИдентТрансУпак);
							
						КонецЦикла;
						
						СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_");
						
						//&lt;дальнейшие проверки не выполняем&gt;
						Продолжить;
					КонецЕсли;
					
					//&lt;Один атрибут, т.е. передан один ИдентТрансУпак&gt;
					Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_ИдентТрансУпак", СтруктураНомСредИдентТов.ИдентТрансУпак) Тогда
						СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_ИдентТрансУпак");
					КонецЕсли;						
					
					//&lt;&lt;НомУпак&gt;&gt;
					//&lt;Несколько строк, т.е. передан более одного НомУпак&gt;
					Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак_", СтруктураНомСредИдентТов.НомУпак) Тогда
						СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак_");
					КонецЕсли;
					
					//&lt;Одна строка, т.е. передан один НомУпак&gt;
					Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак", НомУпак) Тогда
						
						МассивНомУпак = Новый Массив;
						МассивНомУпак.Добавить(НомУпак);
						
						СтруктураНомСредИдентТов["НомУпак"] = МассивНомУпак;						
						
						СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_НомУпак");
						
					КонецЕсли;
					
					//&lt;&lt;КИЗ&gt;&gt;
					//&lt;Несколько строк, т.е. передан более одного КИЗ&gt;
					Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ_", СтруктураНомСредИдентТов.КИЗ) Тогда
						СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ_");
					КонецЕсли;
					
					//&lt;Одна строка, т.е. передан один КИЗ&gt;
					Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ", КИЗ) Тогда
						
						МассивКИЗ = Новый Массив;
						МассивКИЗ.Добавить(КИЗ);
						
						СтруктураНомСредИдентТов["КИЗ"] = МассивКИЗ;						
						
						СтруктСтрока.Удалить("Документ_ТаблСчФакт_СведТов_ДопСведТов_НомСредИдентТов_КИЗ");
						
					КонецЕсли;
					
					СтруктураМаркировка.НомСредИдентТов.Добавить(СтруктураНомСредИдентТов);
					
				КонецЕсли;
				
			КонецЦикла;
			
			//&lt;&lt;Объединение инфополей ФХЖ1 и ФХЖ2 перечисленных в СтруктураИнфоПолей&gt;&gt;
			//&lt;когда данные сопроводительных документов не переданы в ФХЖ1, но переданны в ФХЖ2&gt;
			СтруктураИнфоПолей = Новый Структура("номер_уведомления_об_отгрузке,
												| номер_накладной,
												| НомТранНакл,
												| Номер_накладной,
												| номер_отгрузки,
												| номер_заказа,
												| Заказ_на_поставку,
												| номер_акта,
												| дата_отгрузки,
												| дата_поставки,
												| дата_акта,
												| дата_заказа,
												| дата_накладной,
												| ДатаТранНакл,
												| дата_уведомления_об_отгрузке");
			
			//&lt;Инфополя ФХЖ1 - тип массив&gt;
			Если ДанныеФайла.Свойство("Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_") Тогда
				
				Для каждого ЭлСтруктура Из ДанныеФайла.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_ Цикл
					
					Если СтруктураИнфоПолей.Свойство(ЭлСтруктура.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф) Тогда
						СтруктураИнфоПолей[ЭлСтруктура.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф] = ЭлСтруктура.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Значен;
					Иначе
						
						Ключ = ЭлСтруктура.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф;
						Значение = ЭлСтруктура.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Значен;
						
						СтруктураИнфоПолей.Вставить(Ключ, Значение);
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ДанныеФайла.Свойство("Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф") Тогда  //&lt;Одна строка&gt;
				
				Если СтруктураИнфоПолей.Свойство(ДанныеФайла.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф) Тогда
					СтруктураИнфоПолей[ДанныеФайла.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф] = ДанныеФайла.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Значен;
				Иначе
					
					Ключ = ДанныеФайла.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф;
					Значение = ДанныеФайла.Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Значен;
					
					СтруктураИнфоПолей.Вставить(Ключ, Значение);
					
				КонецЕсли;
				
				//&lt;удаление элементов структуры, вместо этого создан элемент со значением типа массив&gt;
				ДанныеФайла.Удалить("Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Идентиф");
				ДанныеФайла.Удалить("Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_Значен");
				
			КонецЕсли;
			
			//&lt;по каждому СведТов передается одинаковый список ИнфПолФХЖ2, поэтому берем первую строку&gt;
			СведТовФХЖ2 = ДанныеФайла.ДокументТЧ[0];
			
			Для каждого ИнфоПоле Из СтруктураИнфоПолей Цикл				
				
				//&lt;пропускаем инфополя, которые идентифицируют товар, т.е. штрихкод, код_покупателя и т.п.&gt;
				Если СведТовФХЖ2.Свойство("ИнфПолФХЖ2_" + ИнфоПоле.Ключ) Тогда
					СтруктураИнфоПолей[ИнфоПоле.Ключ] = СведТовФХЖ2["ИнфПолФХЖ2_" + ИнфоПоле.Ключ];
				КонецЕсли;
				
			КонецЦикла;
			
			//&lt;Обновление ФХЖ1&gt;
			Массив = Новый Массив;
			Массив.Добавить(СтруктураИнфоПолей);
			
			ДанныеФайла.Удалить("Документ_СвСчФакт_ИнфПолФХЖ1_ТекстИнф_");
			ДанныеФайла.Вставить("Документ_СвСчФакт_ИнфПолФХЖ1", Массив);
			
			//&lt;заполнение таблицы данными по новым документам&gt;
			НовЭлКоллекции 				   = ТаблицаНовДокументов.Добавить();	
			НовЭлКоллекции.ChainID		   = ДанныеДокумента.ИдентификаторЦепочки;		
			НовЭлКоллекции.DocUUID         = ДанныеДокумента.ИдентификаторДокумента;
			НовЭлКоллекции.ИдОтпр          = ДанныеДокумента.ИдОтпр;
			НовЭлКоллекции.ИдПол           = ДанныеДокумента.ИдПол;
			НовЭлКоллекции.ДанныеДокумента = ДанныеДокумента;
			
		КонецЦикла; 
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПолучениеДанныхПоНеОбработаннымДокументам
	
	Индекс = МассивРезультатов.ВГраница();
	ТаблицаНеОбработанные = МассивРезультатов[Индекс].Выгрузить();
	
	Если ТаблицаНеОбработанные.Количество() &gt; 0 Тогда 
		
		ТаблицаНеОбработанные.Колонки.Добавить("ИнфПолФХЖ1");
		ТаблицаНеОбработанные.Колонки.Добавить("ДокументТЧ");	
		
		Для каждого Строка Из ТаблицаНеОбработанные Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
				
				//&lt;&lt;получение идентификационных данных по Контрагенту&gt;&gt;
				//&lt;ЮЛ/ФЛ&gt;
				ИНН = ?(ЗначениеЗаполнено(Строка.ИННЮЛ), Строка.ИННЮЛ, Строка.ИННФЛ);
				КПП = ?(ЗначениеЗаполнено(Строка.КПП), Строка.КПП, "");
				
				НоваяСтр = ТаблицаУчастникиЭДО.Добавить();				
				ЗаполнитьЗначенияСвойств(НоваяСтр, Строка);
				
				НоваяСтр.ИНН = ИНН;
				НоваяСтр.КПП = КПП;				
				
			КонецЕсли;
			
			//&lt;получение данных из хранилища&gt;
			Строка.ИнфПолФХЖ1 = Строка.ХЗ_ИнфПолФХЖ1.Получить();
			Строка.ДокументТЧ = Строка.ХЗ_ДокументТЧ.Получить();
			
			Для каждого СтруктСтрока Из Строка.ДокументТЧ Цикл
				
				Если ЗначениеЗаполнено(СтруктСтрока.Номенклатура) Тогда
					Продолжить;
				Иначе //&lt;получение идентификационных данных по товару&gt;
					
					Структура = Новый Структура("DR_Документ, НомСтр, НомерПродукта", Строка.DR_Документ);
					
					СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_НомСтр", Структура.НомСтр);
					
					Если СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_КодТов") Тогда
						СтруктСтрока.Свойство("Документ_ТаблСчФакт_СведТов_ДопСведТов_КодТов", Структура.НомерПродукта);	
					Иначе 
						СтруктСтрока.Свойство("ИнфПолФХЖ2_штрихкод", Структура.НомерПродукта);
					КонецЕсли;
					
					НоваяСтр = ТаблицаСведТов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтр,Структура);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		//&lt;удаление колонок с типом ХранилищеЗначения&gt;
		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_ИнфПолФХЖ1");
		ТаблицаНеОбработанные.Колонки.Удалить("ХЗ_ДокументТЧ");		
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоискУчастниковЭДО		
	
	Если ТаблицаУчастникиЭДО.Количество() &gt; 0 Тогда
		
		//&lt;Поиск по ИД&gt;	  		
		ЗапросКА = Новый Запрос;
		ЗапросКА.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаИД.DR_Документ КАК DR_Документ,
		|	ПОДСТРОКА(ТаблицаИД.ИдПол, 4, 100) КАК ИдПол,
		|	ПОДСТРОКА(ТаблицаИД.ИдОтпр, 4, 100) КАК ИдОтпр,
		|	ПОДСТРОКА(ТаблицаИД.ИдОтпр, 1, 3) КАК ИдЭДО,
		|	ПОДСТРОКА(ТаблицаИД.ИНН, 1, 12) КАК ИНН,
		|	ПОДСТРОКА(ТаблицаИД.КПП, 1, 9) КАК КПП
		|ПОМЕСТИТЬ ВТ_УчастникиЭДО
		|ИЗ
		|	&amp;ТаблицаИД КАК ТаблицаИД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_УчастникиЭДО.DR_Документ КАК DR_Документ,
		|	ВТ_УчастникиЭДО.ИдПол КАК ИдПол,
		|	ВТ_УчастникиЭДО.ИдОтпр КАК ИдОтпр,
		|	ВТ_УчастникиЭДО.ИдЭДО КАК ИдЭДО,
		|	ВТ_УчастникиЭДО.ИНН КАК ИНН,
		|	ВТ_УчастникиЭДО.КПП КАК КПП,
		|	DR_GLN_Организация.Объект КАК Организация,
		|	DR_GLN_Контрагент.Объект КАК Контрагент,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(250)) КАК ТекстОшибкиКА
		|ИЗ
		|	ВТ_УчастникиЭДО КАК ВТ_УчастникиЭДО
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Организация
		|		ПО ВТ_УчастникиЭДО.ИдПол = DR_GLN_Организация.Ид_ОЭД
		|			И (НЕ DR_GLN_Организация.Объект ССЫЛКА Справочник.Контрагенты)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Контрагент
		|		ПО ВТ_УчастникиЭДО.ИдОтпр = DR_GLN_Контрагент.Ид_ОЭД
		|			И (DR_GLN_Контрагент.Объект ССЫЛКА Справочник.Контрагенты)";
		
		ЗапросКА.УстановитьПараметр("ТаблицаИД", ТаблицаУчастникиЭДО); 
		
		РезультатЗапроса = ЗапросКА.Выполнить();		
		УчастникиЭДО = РезультатЗапроса.Выгрузить();
		
		УчастникиЭДО.Индексы.Добавить("DR_Документ");
		
		Для каждого Участник Из УчастникиЭДО Цикл
			
			Если НЕ ЗначениеЗаполнено(Участник.Контрагент) Тогда
				
				НайденныйКонтрагент = "";
				
				ИНН = СокрЛП(Участник.ИНН);
				КПП = СокрЛП(Участник.КПП);
				
				//&lt;Поиск Контрагента по ИНН/КПП&gt;				
				ТекстЗапроса = 
				"ВЫБРАТЬ
				|    Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|    Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|    Контрагенты.ИНН = &amp;ИНН
				|    И Контрагенты.КПП = &amp;КПП";                    
				
				//&lt;Для ФЛ&gt;
				Если НЕ ЗначениеЗаполнено(Участник.КПП) Тогда
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Контрагенты.КПП = &amp;КПП", "ИСТИНА");	
				КонецЕсли;	
				
				ЗапросКА = Новый Запрос;
				ЗапросКА.Текст = ТекстЗапроса;
				ЗапросКА.УстановитьПараметр("ИНН", ИНН);
				ЗапросКА.УстановитьПараметр("КПП", КПП);
				
				РезультатЗапроса = ЗапросКА.Выполнить();
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					
					Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
						
						ВыборкаДетальныеЗаписи.Следующий();
						НайденныйКонтрагент = ВыборкаДетальныеЗаписи.Ссылка;
						
					Иначе 
						Участник.ТекстОшибкиКА = "По ИНН/КПП: " + ИНН + "/" + КПП + " найдено несколько Контрагентов.";	
					КонецЕсли;
					
				Иначе
					Участник.ТекстОшибкиКА = "По ИНН/КПП: " + ИНН + "/" + КПП + " Контрагент не найден.";	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НайденныйКонтрагент)  Тогда                                                 
					
					//&lt;Поиск Оператора ЭДО&gt;					
					ЗапросОЭД = Новый Запрос;
					ЗапросОЭД.Текст = 
					"ВЫБРАТЬ
					|	DR_Настройки.Ссылка
					|ИЗ
					|	Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_Настройки
					|ГДЕ
					|	DR_Настройки.Ссылка.ВидНастройки = &amp;ВидНастройки
					|	И DR_Настройки.Реквизит = ""Идентификатор""
					|	И (ВЫРАЗИТЬ(DR_Настройки.Значение КАК СТРОКА(3))) = &amp;Идентификатор"; 
					
					ЗапросОЭД.УстановитьПараметр("ВидНастройки"		, "ОператорыЭДО");
					ЗапросОЭД.УстановитьПараметр("Идентификатор"	, Участник.ИдЭДО);
					
					Оператор = Неопределено;
					
					РезультатЗапроса = ЗапросОЭД.Выполнить();
					
					Если НЕ РезультатЗапроса.Пустой() Тогда
						
						ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						ВыборкаДетальныеЗаписи.Следующий();
						
						Оператор = ВыборкаДетальныеЗаписи.Ссылка;
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Оператор) Тогда        
						
						Участник.Контрагент = НайденныйКонтрагент;
						
						//&lt;Запишем в регистр GLN&gt;					
						МенеджерЗаписи = РегистрыСведений.DR_GLN.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Объект = НайденныйКонтрагент;    
						
						МенеджерЗаписи.Прочитать();  
						
						//&lt;Если запись не существует то записать&gt;
						Если НЕ МенеджерЗаписи.Выбран() Тогда
							
							МенеджерЗаписи.Объект  = НайденныйКонтрагент;
							МенеджерЗаписи.Ид_ОЭД  = СокрЛП(Участник.ИдОтпр);
							МенеджерЗаписи.Партнер = Оператор;
							
							МенеджерЗаписи.Записать();
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоискНоменклатуры
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблСчФакт.DR_Документ КАК DR_Документ,
	|	ВЫРАЗИТЬ(ТаблСчФакт.НомСтр КАК Число(15,0)) КАК НомСтр,
	|	ВЫРАЗИТЬ(ТаблСчФакт.НомерПродукта КАК Строка(30)) КАК Штрихкод
	|ПОМЕСТИТЬ ВТ_ТаблСчФакт
	|ИЗ
	|	&amp;ТаблСчФакт КАК ТаблСчФакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблСчФакт.DR_Документ КАК DR_Документ,
	|	ВТ_ТаблСчФакт.НомСтр КАК НомСтр,
	|	ШтрихкодыНоменклатуры.*
	|ИЗ
	|	ВТ_ТаблСчФакт КАК ВТ_ТаблСчФакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ВТ_ТаблСчФакт.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод";
	
	//&lt;Определяем источник поиска&gt;
	Если Метаданные.РегистрыСведений.Найти("ШтрихкодыНоменклатуры") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ШтрихкодыНоменклатуры", "РегистрСведений.Штрихкоды");
	КонецЕсли;
	
	ЗапросНоменклатуры = Новый Запрос;
	ЗапросНоменклатуры.Текст = ТекстЗапроса;
	ЗапросНоменклатуры.УстановитьПараметр("ТаблСчФакт", ТаблицаСведТов);
	
	РезультатЗапроса = ЗапросНоменклатуры.Выполнить();				
	СписокНоменклатуры = РезультатЗапроса.Выгрузить();		
	
	СписокНоменклатуры.Индексы.Добавить("DR_Документ, НомСтр");			
	
	#КонецОбласти
	
	#Область ОбработкаДанныхПоНовымДокументам
	
	//&lt;Выполняем сортировку&gt;
	ТаблицаНовДокументов.Сортировать("ChainID");
	
	//&lt;ТаблицаНовДокументов - Тип ТаблицаЗначений&gt;
	//&lt;Поля&gt;
	//    &lt;ChainID 	- Тип Строка (Идентификатор цепочки)&gt;
	//    &lt;DocUIID 	- Тип Строка (Идентификатор документа)&gt;
	//	  &lt;ИдОтпр&gt;  - Тип Строка
	//	  &lt;ИдПол&gt;   - Тип Строка
	//    &lt;ДанныеДокумента 	- Тип Структура&gt;:
	//      	&lt;Ключ&gt;:
	//			- ДанныеФайла - Тип Структура
	//			- ИдентификаторДокумента - Тип Строка
	//			- ИдентификаторЦепочки - Тип Строка
	//			- DR_Документ - Тип ДокументСсылка.DR_Документ
	//			- Статус - Тип Строка
	//			- ВидДокумента - Тип Строка
	//			- НомИспрСчФ - Тип Строка
	//			- ИдОтпр - Тип Строка
	//			- ИдПол - Тип Строка
	
	Для каждого Элемент ИЗ ТаблицаНовДокументов Цикл
		
		//&lt;Тип - Структура&gt;
		ДанныеДокумента 			= Элемент.ДанныеДокумента;
		ДанныеФайла					= ДанныеДокумента.ДанныеФайла;  
		ВидДокумента				= ДанныеДокумента.ВидДокумента;
		СтруктураРегистра_DRСобытия = Новый Структура;
		
		//&lt;Тип - Ссылка&gt;
		DR_ДокументСсылка	= ДанныеДокумента.DR_Документ; 
		
		//&lt;Тип - Строка&gt;
		ИдентификаторДокумента	= ДанныеДокумента.ИдентификаторДокумента;
		ИдентификаторЦепочки	= ДанныеДокумента.ИдентификаторЦепочки;
		СтатусДокумента			= "НеОбработан";
		ТекстОшибки 			= "";
		Комментарий				= "";
		ЗаписьСообщение 		= "";
		
		//&lt;&lt;Заполнение УчастниковЭДО&gt;&gt;
		НайденнаяСтрока = УчастникиЭДО.Найти(DR_ДокументСсылка, "DR_Документ");
		ДанныеФайла.Организация = НайденнаяСтрока.Организация;
		
		Если ЗначениеЗаполнено(НайденнаяСтрока.Контрагент) Тогда 
			ДанныеФайла.Контрагент = НайденнаяСтрока.Контрагент;
		Иначе				
			ТекстОшибки = НайденнаяСтрока.ТекстОшибкиКА;
		КонецЕсли;
		
		//&lt;&lt;Заполнение номенклатуры&gt;&gt;
		//&lt;Определяем имя колонки&gt;
		ИмяКолонкиНоменклатура = ?(СписокНоменклатуры.Колонки.Найти("Номенклатура") &lt;&gt; Неопределено, "Номенклатура", "Владелец");
		ИмяКолонкиЕдИзм = ?(СписокНоменклатуры.Колонки.Найти("Упаковка") &lt;&gt; Неопределено, "Упаковка", "ЕдиницаИзмерения");
		
		Для каждого Стр Из ДанныеФайла.ДокументТЧ Цикл
			
			НомерСтроки = Стр.Документ_ТаблСчФакт_СведТов_НомСтр;
			Строки = СписокНоменклатуры.НайтиСтроки(Новый Структура("DR_Документ, НомСтр", DR_ДокументСсылка, НомерСтроки));
			
			Строка = Строки[0];
			Номенклатура = Неопределено;
			
			Если ЗначениеЗаполнено(Строка[ИмяКолонкиНоменклатура]) Тогда
				
				Номенклатура     = Строка[ИмяКолонкиНоменклатура];
				ЕдиницаИзмерения = Строка[ИмяКолонкиЕдИзм];
				
				Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
					
					Если Номенклатура.Метаданные().Реквизиты.Найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
						ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
					Иначе 
						ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НомерПродуктаПокупателя = "";
				Стр.Свойство("ИнфПолФХЖ2_код_материала", НомерПродуктаПокупателя);
				
				Если ЗначениеЗаполнено(НомерПродуктаПокупателя) Тогда
					
					//&lt;Если элемент не найден метод вернет пустую ссылку&gt;
					Номенклатура = Справочники.Номенклатура.НайтиПоКоду(НомерПродуктаПокупателя);
					
					Если Номенклатура.Метаданные().Реквизиты.Найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
						ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
					Иначе 
						ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Номенклатура) Тогда  
				
				Стр.Номенклатура = Номенклатура;
				Стр.ЕдиницаИзмерения = ЕдиницаИзмерения;
				
			Иначе
				ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") 
							+ "Позиция № " + НомерСтроки + ". По " + """" + Стр.Документ_ТаблСчФакт_СведТов_НаимТов + """"
							+ " не заполнен товар, проверьте корректность штрихкода или код товара.";
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;Проверка по изменению статуса&gt;
		Если ПустаяСтрока(ТекстОшибки) Тогда
			СтатусДокумента = "Обработан";				
		КонецЕсли;
		
		//&lt;&lt;Заполнение данных по DR_Документу&gt;&gt;
		DR_ДокументОбъект 						= DR_ДокументСсылка.ПолучитьОбъект();
		DR_ДокументОбъект.ИдентификаторЦепочки	= ИдентификаторЦепочки;
		DR_ДокументОбъект.ВидДокумента			= ВидДокумента;
		DR_ДокументОбъект.ДанныеФайла 			= Новый ХранилищеЗначения(Неопределено);
		DR_ДокументОбъект.Статус 				= СтатусДокумента;
		DR_ДокументОбъект.Сообщение 			= ТекстОшибки;
		DR_ДокументОбъект.Комментарий			= Комментарий;
		DR_ДокументОбъект.Пользователь 			= НайтиТекущегоПользователя();
		ТЧ_Документа 							= DR_ДокументОбъект.ДополнительныеРеквизиты;
		
		Для каждого ЭлСтруктуры Из ДанныеФайла Цикл
			
			НоваяСтрока = ТЧ_Документа.Добавить();
			НоваяСтрока.Реквизит = ЭлСтруктуры.Ключ;
			
			Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Массив") Тогда
				
				Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
				НоваяСтрока.ХранилищеЗначения = Хранилище;
				
			Иначе
				НоваяСтрока.Значение = ЭлСтруктуры.Значение;				
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;&lt;Текст сообщения в событии по документу&gt;&gt;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьСообщение = "В документе есть ошибка";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Комментарий) Тогда
			
			Если ПустаяСтрока(ЗаписьСообщение) Тогда
				ЗаписьСообщение = "Документ содержит комментарий";
			Иначе
				ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			//&lt;Запись DR_Документа&gt;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			////////////////////////////&lt;Создание записи в РС DR_События&gt;/////////////////////////////////////
			
			//&lt;&lt;Заполнение структуры для DR_События&gt;&gt;
			СтруктураРегистра_DRСобытия.Вставить("ДатаСообщения"			, ДанныеДокумента.ДатаСообщения);
			СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, ИдентификаторЦепочки);
			СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
			СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
			СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, ВидДокумента);
			СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, ИдентификаторДокумента);
			СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
			СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
			
			НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
			НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
			НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
			НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
			НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
			НЗ_DRСобытия.Прочитать();
			
			Если НЗ_DRСобытия.Количество() = 0 Тогда
				НоваяЗапись = НЗ_DRСобытия.Добавить();
			Иначе
				НоваяЗапись = НЗ_DRСобытия[0];
			КонецЕсли;
			
			Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
				НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
			КонецЦикла;
			
			НЗ_DRСобытия.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПредставлениеДокументаXML = "ЮЗД" + " № " + ДанныеФайла.Документ_СвСчФакт_НомерСчФ + " от " + Формат(ДанныеФайла.Документ_СвСчФакт_ДатаСчФ, "ДЛФ=D");
			ТекстЛогаСобытий = "Формирование записей в Регистрах Docrobot по " + ПредставлениеДокументаXML + " не выполнено. По причине - " + ОписаниеОшибки();
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);				
			ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки - " + ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
	//&lt;Очищаем коллекцию, данные которой уже не нужны&gt;
	ТаблицаНовДокументов = Неопределено;
	
	#КонецОбласти
	
	#Область ОбработкаДанныхПоНеОбработаннымДокументам
	
	//&lt;ТаблицаНеОбработанные - Тип ТаблицаЗначений&gt;
	//&lt;Поля&gt;
	//    &lt;DR_Документ&gt; - Тип ДокументСсылка.DR_Документ
	//    &lt;Контрагент&gt;  - Тип СправочникСсылка.Контрагенты
	//    &lt;ИдентификаторЦепочки&gt; 	- Тип Строка
	//    &lt;ИдентификаторДокумента&gt;	- Тип Строка		
	//	  &lt;НомерСчФ&gt; - Тип Строка
	//	  &lt;ДатаСчФ&gt;  - Тип Дата		
	//	  &lt;ИдОтпр&gt;  - Тип Строка
	//	  &lt;ИдПол&gt;   - Тип Строка
	//	  &lt;ИННЮЛ&gt;   - Тип Строка
	//	  &lt;ИННФЛ&gt;   - Тип Строка
	//	  &lt;КПП&gt;   	- Тип Строка
	//    &lt;Комментарий&gt; - Тип Строка
	//	  &lt;ИнфПолФХЖ1&gt;  - Тип Массив(Элементы - тип Структура)
	//	  &lt;ДокументТЧ&gt;  - Тип Массив(Элементы - тип Структура)
	
	Для каждого Строка Из ТаблицаНеОбработанные Цикл
		
		//&lt;Тип - Булево&gt;
		DRДокументМодифицирован = Ложь;
		
		//&lt;Тип - Строка&gt;
		СтатусДокумента	= "НеОбработан";
		ТекстОшибки 	= "";
		ЗаписьСообщение	= "";
		
		//&lt;Тип - Структура&gt;
		СтруктураДанных 			= Новый Структура;
		СтруктураРегистра_DRСобытия = Новый Структура;
		
		СтруктураДанных.Вставить("Контрагент", Строка.Контрагент);
		СтруктураДанных.Вставить("ДокументТЧ", Строка.ДокументТЧ);				
		
		DR_ДокументСсылка 	= Строка.DR_Документ;
		Комментарий 		= Строка.Комментарий; 
		
		//&lt;&lt;Заполнение Контрагента&gt;&gt;
		Если НЕ ЗначениеЗаполнено(СтруктураДанных.Контрагент) Тогда
			
			НайденнаяСтрока = УчастникиЭДО.Найти(DR_ДокументСсылка, "DR_Документ");
			
			Если НайденнаяСтрока &lt;&gt; Неопределено Тогда
				
				Если ЗначениеЗаполнено(НайденнаяСтрока.Контрагент) Тогда
										
					СтруктураДанных.Контрагент = НайденнаяСтрока.Контрагент;
					DRДокументМодифицирован = Истина;
					
				Иначе					
					ТекстОшибки = НайденнаяСтрока.ТекстОшибкиКА;	
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//&lt;&lt;Заполнение номенклатуры&gt;&gt;
		//&lt;Определяем имена колонок&gt;
		ИмяКолонкиНоменклатура = ?(СписокНоменклатуры.Колонки.Найти("Номенклатура") &lt;&gt; Неопределено, "Номенклатура", "Владелец");
		ИмяКолонкиЕдИзм = ?(СписокНоменклатуры.Колонки.Найти("Упаковка") &lt;&gt; Неопределено, "Упаковка", "ЕдиницаИзмерения");
		
		Для каждого СтруктСтрока Из СтруктураДанных.ДокументТЧ Цикл
			
			Если ЗначениеЗаполнено(СтруктСтрока.Номенклатура) Тогда
				Продолжить;
			Иначе
				
				НомерСтроки = СтруктСтрока.Документ_ТаблСчФакт_СведТов_НомСтр;
				НайденныеСтроки = СписокНоменклатуры.НайтиСтроки(Новый Структура("DR_Документ, НомСтр", DR_ДокументСсылка, НомерСтроки));
				
				СтрокаТаблицы = НайденныеСтроки[0];
				Номенклатура = Неопределено;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяКолонкиНоменклатура]) Тогда
					
					Номенклатура     = СтрокаТаблицы[ИмяКолонкиНоменклатура];
					ЕдиницаИзмерения = СтрокаТаблицы[ИмяКолонкиЕдИзм];
					
					Если Не ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
						
						Если Номенклатура.Метаданные().Реквизиты.найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
						Иначе 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					НомерПродуктаПокупателя = "";
					СтруктСтрока.Свойство("ИнфПолФХЖ2_код_материала", Структура.НомерПродуктаПокупателя);
					
					Если ЗначениеЗаполнено(НомерПродуктаПокупателя) Тогда
						
						//&lt;Если элемент не найден метод вернет пустую ссылку&gt;
						Номенклатура = Справочники.Номенклатура.НайтиПоКоду(НомерПродуктаПокупателя);
						
						Если Номенклатура.Метаданные().Реквизиты.Найти("ЕдиницаХраненияОстатков") = Неопределено Тогда 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
						Иначе 
							ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;	
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Номенклатура) Тогда  
					
					СтруктСтрока.Номенклатура = Номенклатура;
					СтруктСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
					
					DRДокументМодифицирован = Истина;
					
				Иначе
					ТекстОшибки = ТекстОшибки + ?(ЗначениеЗаполнено(ТекстОшибки), Символы.ПС, "") 
								+ "Позиция № " + НомерСтроки + ". По " + """" + СтруктСтрока.Документ_ТаблСчФакт_СведТов_НаимТов + """"
								+ " не заполнен товар, проверьте корректность штрихкода или код товара.";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;Проверка на перезапись повторно обрабатываемых документов&gt;
		Если НЕ DRДокументМодифицирован Тогда 
			Продолжить; 	
		КонецЕсли;
		
		//&lt;Проверка на изменение статуса&gt;
		Если ПустаяСтрока(ТекстОшибки) Тогда
			СтатусДокумента = "Обработан";
		КонецЕсли;
		
		//&lt;&lt;Обновление данных в DR_Документе&gt;&gt;
		DR_ДокументОбъект 				= DR_ДокументСсылка.ПолучитьОбъект();
		DR_ДокументОбъект.Статус 		= СтатусДокумента;
		DR_ДокументОбъект.Сообщение 	= ТекстОшибки;
		DR_ДокументОбъект.Комментарий   = Комментарий;
		ТЧ_Документа = DR_ДокументОбъект.ДополнительныеРеквизиты;
		
		Для каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			НайденнаяСтрока	= ТЧ_Документа.Найти(ЭлСтруктуры.Ключ, "Реквизит");
			
			Если ТипЗнч(ЭлСтруктуры.Значение) = Тип("Массив") Тогда
				
				Хранилище = Новый ХранилищеЗначения(ЭлСтруктуры.Значение);
				НайденнаяСтрока.ХранилищеЗначения = Хранилище;
				
			Иначе
				НайденнаяСтрока.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		//&lt;&lt;Текст сообщения в событии по документу&gt;&gt;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ЗаписьСообщение = "В документе есть ошибка";
		КонецЕсли;
		
		Если Не ПустаяСтрока(Комментарий) Тогда
			
			Если ПустаяСтрока(ЗаписьСообщение) Тогда
				ЗаписьСообщение = "Документ содержит комментарий";
			Иначе
				ЗаписьСообщение = ЗаписьСообщение + " и комментарий";
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			//&lt;Запись DR_Документа&gt;
			DR_ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			//&lt;&lt;Перезапись события по DR_документу&gt;&gt;
			Если ВРег(СтатусДокумента) = "ОБРАБОТАН" Тогда
				
				СтруктураРегистра_DRСобытия.Вставить("ИдентификаторЦепочки"		, Строка.ИдентификаторЦепочки);
				СтруктураРегистра_DRСобытия.Вставить("ДатаЗаписи"				, ТекущаяДата());
				СтруктураРегистра_DRСобытия.Вставить("Документ"					, DR_ДокументСсылка);
				СтруктураРегистра_DRСобытия.Вставить("ВидДокумента"				, Строка.ВидДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Идентификатор"			, Строка.ИдентификаторДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Статус"					, СтатусДокумента);
				СтруктураРегистра_DRСобытия.Вставить("Сообщение"				, ЗаписьСообщение);
				
				НЗ_DRСобытия = РегистрыСведений.DR_События.СоздатьНаборЗаписей();
				НЗ_DRСобытия.Отбор.ИдентификаторЦепочки.Установить(СтруктураРегистра_DRСобытия.ИдентификаторЦепочки);
				НЗ_DRСобытия.Отбор.Документ.Установить(СтруктураРегистра_DRСобытия.Документ);
				НЗ_DRСобытия.Отбор.ВидДокумента.Установить(СтруктураРегистра_DRСобытия.ВидДокумента);
				НЗ_DRСобытия.Отбор.Идентификатор.Установить(СтруктураРегистра_DRСобытия.Идентификатор);
				НЗ_DRСобытия.Прочитать();
				
				Если НЗ_DRСобытия.Количество() = 0 Тогда
					НоваяЗапись = НЗ_DRСобытия.Добавить();
				Иначе
					НоваяЗапись = НЗ_DRСобытия[0];
				КонецЕсли;
				
				Для Каждого Элемент Из СтруктураРегистра_DRСобытия Цикл			
					НоваяЗапись[Элемент.Ключ] = Элемент.Значение; 	
				КонецЦикла;
				
				НЗ_DRСобытия.Записать();
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПредставлениеДокументаXML = "ЮЗД" + " № " + Строка.НомерСчФ + " от " + Формат(Строка.ДатаСчФ, "ДЛФ=D");
			ТекстЛогаСобытий = "Изменение данных в Регистрах Docrobot по " + ПредставлениеДокументаXML + " не выполнено. По причине - " + ОписаниеОшибки();
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);					
			ЗаписьЖурналаРегистрации("Обработка ""Интеграция Docrobot""", УровеньЖурналаРегистрации.Ошибка, , , "Описание ошибки - " + ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
	#КонецОбласти
	
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Входящий УПД (УПД испр) с маркировкой</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">4</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Входящий УПД (УПД испр) с маркировкой</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ВходящийON_NSCHFDOPPRMARK</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:string">ВходящийON_NSCHFDOPPRMARK</Value>
	</row>
</ValueTree>