<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий УПД</Value>
		<Value xsi:type="xs:string">ВызовМастерКнопкойЮЗД 	= ?(ВызовМастерКнопкойЮЗД = Неопределено, Ложь, ВызовМастерКнопкойЮЗД);

Если НЕ ВызовМастерКнопкойЮЗД Тогда
	МассивСтруктурИсходящих = Новый Массив;
КонецЕсли;

DRВидыДокументов = Новый Массив;
DRВидыДокументов.Добавить("ON_NSCHFDOPPR_01_Исходящий");
DRВидыДокументов.Добавить("ON_NSCHFDOPPR_01_Испр_Исходящий");

///МЧД
ЗапросМЧД = Новый Запрос;
ЗапросМЧД.Текст = ТекстЗапроса_МЧД_ПоОрганизациям();
ЗапросМЧД.УстановитьПараметр("ЭтоРегламентноеЗадание", ЭтоРегламентноеЗадание); 
ЗапросМЧД.УстановитьПараметр("Пользователь", НайтиТекущегоПользователя()); 
ЗапросМЧД.УстановитьПараметр("ТекущаяДата", ТекущаяДата()); 
ТаблицаМЧД = ЗапросМЧД.Выполнить().Выгрузить();

////////////////////////////////////++ШАПКА++/////////////////////////////////////

//Список таблиц запроса:
//ВТ_Источник 				- Отбор, получение данных и суммовых показателей первичных СчФ.
//ВТ_ДанныеРегСведМаркПоСчФ	- По отобранным первичным Счф выполняется получение данных из РС DR_События, DR_ЦепочкиДокументов и определение количества отгружаемых товаров в т.ч маркируемых.
//ВТ_ИдентСчФОтправленных 	- Получение значений измерения "Идентификатор" последних записей из РС_События по ранее отправленным первичным СчФ.
//ВТ_Основная  				- Объединение данных ВТ_ДанныеРегСведМаркПоСчФ и ВТ_ИдентСчФОтправленных, получение данных по ORDER, RECADV, Точка доставки.
//ВТ_УчастникиЭДО 			- Получение из массива выбранных первичных СчФ уникальных значений Организация, Контрагент. (Ограничение списка) 
//ВТ_СОУП                   - По данным, полученным в ВТ_УчастникиЭДО выполняется получение данных Сертификата, ОператораЭДО, Участники(адреса, gln и т.п.), Подписант - (СОУП).

//РЕЗУЛЬТАТ - Объединение данных ВТ_Основная, ВТ_СОУП, определение ЭтоМаркируемыйЮЗД и получение данных инфополей по формату УПД контрагента.
                                                                            
Запрос = Новый Запрос;  
Запрос.Текст = "ВЫБРАТЬ
               |	СчетФактураВыданный.Ссылка КАК Ссылка,
               |	СчетФактураВыданный.Номер КАК НомерСчф,
               |	СчетФактураВыданный.Дата КАК ДатаСчф,
               |	ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.РеализацияТоваровУслуг) КАК ДокументОснованиеСЧФ,
               |	СчетФактураВыданный.Организация КАК Организация,
               |	СчетФактураВыданный.Контрагент КАК Контрагент,
               |	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
               |	СчетФактураВыданный.СуммаДокумента КАК ВсегоСтТовУчНалВсего,
               |	СчетФактураВыданный.СуммаНДСДокумента КАК ВсегоСумНДС,
               |	СчетФактураВыданный.СуммаДокумента - СчетФактураВыданный.СуммаНДСДокумента КАК ВсегоСтТовБезНДСВсего
               |ПОМЕСТИТЬ ВТ_Источник
               |ИЗ
               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
               |ГДЕ
               |	СчетФактураВыданный.Ссылка В(&amp;Источник)
               |	И СчетФактураВыданный.ПометкаУдаления = ЛОЖЬ
               |	И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
               |	И СчетФактураВыданный.Исправление = ЛОЖЬ
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТ_Источник.Ссылка КАК Ссылка,
               |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
               |ПОМЕСТИТЬ ВТ_НоменклатураРТУ
               |ИЗ
               |	ВТ_Источник КАК ВТ_Источник
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
               |		ПО ВТ_Источник.ДокументОснованиеСЧФ = РеализацияТоваровУслугТовары.Ссылка
               |
               |ОБЪЕДИНИТЬ ВСЕ
               |
               |ВЫБРАТЬ
               |	ВТ_Источник.Ссылка,
               |	РеализацияТоваровУслугУслуги.Номенклатура
               |ИЗ
               |	ВТ_Источник КАК ВТ_Источник
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
               |		ПО ВТ_Источник.ДокументОснованиеСЧФ = РеализацияТоваровУслугУслуги.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	СчетФактураВыданный.Ссылка КАК Ссылка,
               |	СчетФактураВыданный.НомерСчф КАК НомерСЧФ,
               |	СчетФактураВыданный.ДатаСчф КАК ДатаСЧФ,
               |	СчетФактураВыданный.ВсегоСтТовУчНалВсего КАК ВсегоСтТовУчНалВсего,
               |	СчетФактураВыданный.ВсегоСумНДС КАК ВсегоСумНДС,
               |	СчетФактураВыданный.ВсегоСтТовБезНДСВсего КАК ВсегоСтТовБезНДСВсего,
               |	СчетФактураВыданный.ДокументОснованиеСЧФ КАК ДокументОснованиеСЧФ,
               |	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
               |	СчетФактураВыданный.Организация КАК Организация,
               |	СчетФактураВыданный.Контрагент КАК Контрагент,
               |	ЕСТЬNULL(Источник_События.ИдентификаторЦепочки, """") КАК ИдентификаторЦепочки,
               |	МАКСИМУМ(ЕСТЬNULL(События_ТекСчфОтправленный.ДатаЗаписи, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаЗаписиТекСЧФОтправленный,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки, СчетФактураВыданный.ДоговорКонтрагента) КАК ТочкаДоставкиЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.НомерЗаказа, """") КАК НомерЗаказаЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаЗаказа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаказаЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоставкиЦепочка,
               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_НоменклатураРТУ.Номенклатура) КАК КоличествоПозиций,
               |	МАКСИМУМ(НЕ DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции ЕСТЬ NULL) КАК ЭтоМаркируемыйЮЗД,
               |	МАКСИМУМ(ВЫБОР
               |			КОГДА ВЫРАЗИТЬ(DR_ВидыПодотчетнойПродукции_N3.Значение КАК СТРОКА(2)) ЕСТЬ NULL
               |				ТОГДА 0
               |			ИНАЧЕ 1
               |		КОНЕЦ) КАК DR_N3,
               |	МАКСИМУМ(ВЫБОР
               |			КОГДА ВЫРАЗИТЬ(DR_ВидыПодотчетнойПродукции_N4.Значение КАК СТРОКА(2)) ЕСТЬ NULL
               |				ТОГДА 0
               |			ИНАЧЕ 1
               |		КОНЕЦ) КАК DR_N4,
               |	МАКСИМУМ(ВЫБОР
               |			КОГДА ВЫРАЗИТЬ(DR_ВидыПодотчетнойПродукции_N5.Значение КАК СТРОКА(2)) ЕСТЬ NULL
               |				ТОГДА 0
               |			ИНАЧЕ 1
               |		КОНЕЦ) КАК DR_N5
               |ПОМЕСТИТЬ ВТ_ДанныеРегСведМаркПоСчФ
               |ИЗ
               |	ВТ_Источник КАК СчетФактураВыданный
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураРТУ КАК ВТ_НоменклатураРТУ
               |		ПО СчетФактураВыданный.ДокументОснованиеСЧФ = ВТ_НоменклатураРТУ.Ссылка
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК DR_НоменклатураКонтрагентов
               |		ПО СчетФактураВыданный.Контрагент = DR_НоменклатураКонтрагентов.Контрагент
               |			И (ВТ_НоменклатураРТУ.Номенклатура = DR_НоменклатураКонтрагентов.Номенклатура)
               |			И (НЕ DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции = ЗНАЧЕНИЕ(Справочник.DR_Настройки.ПустаяСсылка))
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ВидыПодотчетнойПродукции_N3
               |		ПО (DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции = DR_ВидыПодотчетнойПродукции_N3.Ссылка)
               |			И (DR_ВидыПодотчетнойПродукции_N3.Реквизит = ""ТипТоварнойГруппы"")
               |			И (DR_ВидыПодотчетнойПродукции_N3.Значение = ""N3"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ВидыПодотчетнойПродукции_N4
               |		ПО (DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции = DR_ВидыПодотчетнойПродукции_N4.Ссылка)
               |			И (DR_ВидыПодотчетнойПродукции_N4.Реквизит = ""ТипТоварнойГруппы"")
               |			И (DR_ВидыПодотчетнойПродукции_N4.Значение = ""N4"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ВидыПодотчетнойПродукции_N5
               |		ПО (DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции = DR_ВидыПодотчетнойПродукции_N5.Ссылка)
               |			И (DR_ВидыПодотчетнойПродукции_N5.Реквизит = ""ТипТоварнойГруппы"")
               |			И (DR_ВидыПодотчетнойПродукции_N5.Значение = ""N5"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Источник_События
               |		ПО СчетФактураВыданный.Ссылка = Источник_События.Документ
               |			И (Источник_События.ВидДокумента = ""СчетФактура_Исходящий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
               |		ПО (Источник_События.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
			   |			И (РАЗНОСТЬДАТ(DR_ЦепочкиДокументов.ДатаЗаказа, Источник_События.ДатаЗаписи, ДЕНЬ) МЕЖДУ 0 И &amp;ПериодСвязиДокументов)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК События_ТекСчфОтправленный
               |		ПО (DR_ЦепочкиДокументов.ИдентификаторЦепочки = События_ТекСчфОтправленный.ИдентификаторЦепочки)
               |			И (События_ТекСчфОтправленный.ВидДокумента В (&amp;DRВидыДокументов))
               |			И СчетФактураВыданный.Ссылка = События_ТекСчфОтправленный.Документ
               |
               |СГРУППИРОВАТЬ ПО
               |	СчетФактураВыданный.Ссылка,
               |	СчетФактураВыданный.НомерСчф,
               |	СчетФактураВыданный.ДатаСчф,
               |	СчетФактураВыданный.ВсегоСтТовУчНалВсего,
               |	СчетФактураВыданный.ВсегоСумНДС,
               |	СчетФактураВыданный.ВсегоСтТовБезНДСВсего,
               |	СчетФактураВыданный.ДокументОснованиеСЧФ,
               |	СчетФактураВыданный.ДоговорКонтрагента,
               |	СчетФактураВыданный.Организация,
               |	СчетФактураВыданный.Контрагент,
               |	ЕСТЬNULL(Источник_События.ИдентификаторЦепочки, """"),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки, СчетФактураВыданный.ДоговорКонтрагента),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.НомерЗаказа, """"),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаЗаказа, ДАТАВРЕМЯ(1, 1, 1))
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТ_ДанныеРегСведПоСчФ.Ссылка КАК Ссылка,
               |	МАКСИМУМ(ЕСТЬNULL(События_ТекСчфОтправленный.Идентификатор, """")) КАК ИдентификаторТекСчФОтправленный
               |ПОМЕСТИТЬ ВТ_ИдентСчФОтправленных
               |ИЗ
               |	ВТ_ДанныеРегСведМаркПоСчФ КАК ВТ_ДанныеРегСведПоСчФ
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК События_ТекСчфОтправленный
               |		ПО ВТ_ДанныеРегСведПоСчФ.ИдентификаторЦепочки = События_ТекСчфОтправленный.ИдентификаторЦепочки
               |			И (События_ТекСчфОтправленный.ВидДокумента В (&amp;DRВидыДокументов))
               |			И ВТ_ДанныеРегСведПоСчФ.Ссылка = События_ТекСчфОтправленный.Документ
               |			И ВТ_ДанныеРегСведПоСчФ.ДатаЗаписиТекСЧФОтправленный = События_ТекСчфОтправленный.ДатаЗаписи
               |
               |СГРУППИРОВАТЬ ПО
               |	ВТ_ДанныеРегСведПоСчФ.Ссылка
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	ВТ_ДанныеРегСведПоСчФ.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	Источник.Ссылка КАК Ссылка,
               |	Источник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	Источник.НомерСЧФ КАК НомерСЧФ,
               |	Источник.ДатаСЧФ КАК ДатаСЧФ,
               |	Источник.ДокументОснованиеСЧФ КАК ДокументОснованиеСЧФ,
               |	Источник.ДоговорКонтрагента КАК ДоговорКонтрагента,
               |	Источник.КоличествоПозиций КАК КоличествоПозиций,
               |	Источник.ВсегоСтТовУчНалВсего КАК ВсегоСтТовУчНалВсего,
               |	Источник.ВсегоСумНДС КАК ВсегоСумНДС,
               |	Источник.ВсегоСтТовБезНДСВсего КАК ВсегоСтТовБезНДСВсего,
               |	ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.СчетНаОплатуПокупателю) КАК СчетПокупателю,
               |	Источник.Организация КАК Организация,
               |	Источник.Контрагент КАК Контрагент,
               |	ВТ_ИдентСчФОтправленных.ИдентификаторТекСчФОтправленный КАК ИдентификаторТекСчФОтправленный,
               |	ДанныеТочкиДоставки.GLN КАК ТочкаДоставкиGLN,
               |	ДанныеТочкиДоставки.Наименование КАК ТочкаДоставкиНаименованиеИзРегистра,
               |	ДанныеТочкиДоставки.ИНН КАК ТочкаДоставкиИННИзРегистра,
               |	ДанныеТочкиДоставки.КПП КАК ТочкаДоставкиКППИзРегистра,
               |	ДанныеТочкиДоставки.Адр_Город КАК ТочкаДоставкиГород,
               |	ДанныеТочкиДоставки.Адр_Дом КАК ТочкаДоставкиДом,
               |	ДанныеТочкиДоставки.Адр_Индекс КАК ТочкаДоставкиИндекс,
               |	ДанныеТочкиДоставки.Адр_КодРегиона КАК ТочкаДоставкиКодРегиона,
               |	ДанныеТочкиДоставки.Адр_Регион КАК ТочкаДоставкиНаименованиеРегиона,
               |	ДанныеТочкиДоставки.Адр_Улица КАК ТочкаДоставкиУлица,
               |	ДанныеТочкиДоставки.Адр_Район КАК ТочкаДоставкиРайон,
               |	ДанныеТочкиДоставки.Адр_НаселПункт КАК ТочкаДоставкиНаселенныйПункт,
               |	ДанныеТочкиДоставки.Адр_Корпус КАК ТочкаДоставкиКорпус,
               |	ДанныеТочкиДоставки.Адр_Кварт КАК ТочкаДоставкиКвартира,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_Номер.Значение КАК СТРОКА(25)), """") КАК RECADV_NUMBER,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_Дата.Значение КАК ДАТА), ДАТАВРЕМЯ(1, 1, 1)) КАК RECADV_DATE,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_CAMPAIGNNUMBER.Значение КАК СТРОКА(50)), """") КАК RECADV_CAMPAIGNNUMBER,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_ORDERVID.Значение КАК СТРОКА(25)), """") КАК ORDERVID,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_RECADVVID.Значение КАК СТРОКА(25)), """") КАК RECADVVID,
               |	Источник.НомерЗаказаЦепочка КАК ORDER_NUMBER,
               |	Источник.ДатаЗаказаЦепочка КАК ORDER_DATE,
               |	Источник.ДатаПоставкиЦепочка КАК ORDER_DELIVERYDATE,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(ORDER_BUYERCODE.Значение КАК СТРОКА(13)), """") КАК ORDER_BUYERCODE,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(ORDER_INFO.Значение КАК СТРОКА(256)), """") КАК ORDER_INFO,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(ORDER_CAMPAIGNNUMBER.Значение КАК СТРОКА(50)), """") КАК ORDER_CAMPAIGNNUMBER,
               |	POSITION.ХранилищеЗначения КАК ORDER_POSITION,
               |	Источник.ЭтоМаркируемыйЮЗД КАК ЭтоМаркируемыйЮЗД,
               |	ВЫБОР
               |		КОГДА Источник.DR_N3 = 1
               |				ИЛИ Источник.DR_N4 = 1
               |				ИЛИ Источник.DR_N5 = 1
               |			ТОГДА 1
               |		ИНАЧЕ Источник.DR_N3
               |	КОНЕЦ КАК N3,
               |	Источник.DR_N4 КАК N4,
               |	Источник.DR_N5 КАК N5
               |ПОМЕСТИТЬ ВТ_Основная
               |ИЗ
               |	ВТ_ДанныеРегСведМаркПоСчФ КАК Источник
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентСчФОтправленных КАК ВТ_ИдентСчФОтправленных
               |		ПО Источник.Ссылка = ВТ_ИдентСчФОтправленных.Ссылка
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Накладная_События
               |		ПО Источник.ИдентификаторЦепочки = Накладная_События.ИдентификаторЦепочки
               |			И (Накладная_События.ВидДокумента = ""Накладная_Исходящая"")
               |			И Источник.ДокументОснованиеСЧФ = Накладная_События.Документ
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК RECADV_События
               |		ПО Источник.ИдентификаторЦепочки = RECADV_События.ИдентификаторЦепочки
               |			И (RECADV_События.ВидДокумента = ""RECADV_Входящий"")
               |			И (Накладная_События.Идентификатор = RECADV_События.ИдентификаторОснования)
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_CAMPAIGNNUMBER
               |		ПО (RECADV_События.Документ = RECADV_CAMPAIGNNUMBER.Ссылка)
               |			И (RECADV_CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNINFO"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Номер
               |		ПО (RECADV_События.Документ = RECADV_Номер.Ссылка)
               |			И (RECADV_Номер.Реквизит = ""NUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Дата
               |		ПО (RECADV_События.Документ = RECADV_Дата.Ссылка)
               |			И (RECADV_Дата.Реквизит = ""ДатаЭлектронногоДокумента"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_ORDERVID
               |		ПО (RECADV_События.Документ = RECADV_ORDERVID.Ссылка)
               |			И (RECADV_ORDERVID.Реквизит = ""ORDERVID"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_RECADVVID
               |		ПО (RECADV_События.Документ = RECADV_RECADVVID.Ссылка)
               |			И (RECADV_RECADVVID.Реквизит = ""RECADVVID"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_ДатаПриемаТовара
               |		ПО (RECADV_События.Документ = RECADV_ДатаПриемаТовара.Ссылка)
               |			И (RECADV_ДатаПриемаТовара.Реквизит = ""ДатаПриемки"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
               |		ПО (Накладная_События.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки)
               |			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
               |			И (Накладная_События.ИдентификаторОснования = Заказ_События.Идентификатор)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК ORDER_События
               |		ПО (Заказ_События.ИдентификаторЦепочки = ORDER_События.ИдентификаторЦепочки)
               |			И (ORDER_События.ВидДокумента = ""ORDER_Входящий"")
               |			И (Заказ_События.ИдентификаторОснования = ORDER_События.Идентификатор)
               |			И (ORDER_События.Статус = ""Обработан"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК POSITION
               |		ПО (ORDER_События.Документ = POSITION.Ссылка)
               |			И (POSITION.Реквизит = ""POSITION"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDER_BUYERCODE
               |		ПО (ORDER_События.Документ = ORDER_BUYERCODE.Ссылка)
               |			И (ORDER_BUYERCODE.Реквизит = ""BUYERCODE"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDER_INFO
               |		ПО (ORDER_События.Документ = ORDER_INFO.Ссылка)
               |			И (ORDER_INFO.Реквизит = ""INFO"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDER_CAMPAIGNNUMBER
               |		ПО (ORDER_События.Документ = ORDER_CAMPAIGNNUMBER.Ссылка)
               |			И (ORDER_CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNNUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК ДанныеТочкиДоставки
               |		ПО Источник.ТочкаДоставкиЦепочка = ДанныеТочкиДоставки.Объект
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ВТ_Основная.Организация КАК Организация,
               |	ВТ_Основная.Контрагент КАК Контрагент
               |ПОМЕСТИТЬ ВТ_УчастникиЭДО
               |ИЗ
               |	ВТ_Основная КАК ВТ_Основная
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ДанныеУчастникиЭДО.Организация КАК Организация,
               |	ДанныеУчастникиЭДО.Контрагент КАК Контрагент,
               |	ДанныеОрганизации.GLN КАК ОрганизацияGLN,
               |	ДанныеОрганизации.Ид_ОЭД КАК ОрганизацияИдОЭД,
               |	ДанныеОрганизации.Сертификат КАК ОрганизацияДанныеСертификата,
               |	ДанныеОрганизации.ПоддерживаетМЧД КАК ОрганизацияПоддерживаетМЧД,
               |	ДанныеОрганизации.eXiteАдр_Город КАК ОрганизацияГород,
               |	ДанныеОрганизации.eXiteАдр_Индекс КАК ОрганизацияИндекс,
               |	ДанныеОрганизации.eXiteАдр_Дом КАК ОрганизацияДом,
               |	ДанныеОрганизации.eXiteАдр_КодРегиона КАК ОрганизацияКодРегиона,
               |	ДанныеОрганизации.eXiteАдр_Регион КАК ОрганизацияНаимРегион,
               |	ДанныеОрганизации.eXiteАдр_Улица КАК ОрганизацияУлица,
               |	ДанныеОрганизации.eXiteАдр_Район КАК ОрганизацияРайон,
               |	ДанныеОрганизации.eXiteАдр_НаселПункт КАК ОрганизацияНаселенныйПункт,
               |	ДанныеОрганизации.eXiteАдр_Корпус КАК ОрганизацияКорпус,
               |	ДанныеОрганизации.eXiteАдр_Кварт КАК ОрганизацияКвартира,
               |	ДанныеКонтрагента.Ид_ОЭД КАК КонтрагентИдОЭД,
               |	ДанныеКонтрагента.GLN КАК КонтрагентGLN,
               |	ДанныеКонтрагента.Контрагент_ФорматЭСФ КАК КонтрагентФорматУПД,
               |	ДанныеКонтрагента.Контрагент_ЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
               |	ДанныеКонтрагента.ПоддерживаетМЧД КАК КонтрагентОтправитьМЧД,
			   |	ДанныеКонтрагента.ПодтверждениеПолномочий КАК КонтрагентПодтверждениеПолномочий,
               |	ДанныеКонтрагента.eXiteАдр_Город КАК КонтрагентГород,
               |	ДанныеКонтрагента.eXiteАдр_Дом КАК КонтрагентДом,
               |	ДанныеКонтрагента.eXiteАдр_Индекс КАК КонтрагентИндекс,
               |	ДанныеКонтрагента.eXiteАдр_КодРегиона КАК КонтрагентКодРегиона,
               |	ДанныеКонтрагента.eXiteАдр_Регион КАК КонтрагентНаимРегион,
               |	ДанныеКонтрагента.eXiteАдр_Улица КАК КонтрагентУлица,
               |	ДанныеКонтрагента.eXiteАдр_Район КАК КонтрагентРайон,
               |	ДанныеКонтрагента.eXiteАдр_НаселПункт КАК КонтрагентНаселенныйПункт,
               |	ДанныеКонтрагента.eXiteАдр_Корпус КАК КонтрагентКорпус,
               |	ДанныеКонтрагента.eXiteАдр_Кварт КАК КонтрагентКвартира,
               |	ВЫРАЗИТЬ(ОрганизацияОператорИд.Значение КАК СТРОКА(3)) КАК ОрганизацияИдЭДООператор,
               |	ВЫРАЗИТЬ(КонтрагентОператорИд.Значение КАК СТРОКА(3)) КАК КонтрагентОператорИд,
               |	ВЫРАЗИТЬ(ДолжностьПодписанта.Значение КАК СТРОКА(100)) КАК ПодписантДолжность,
               |	ВЫРАЗИТЬ(ФамилияПодписанта.Значение КАК СТРОКА(50)) КАК ПодписантФамилия,
               |	ВЫРАЗИТЬ(ИмяПодписанта.Значение КАК СТРОКА(50)) КАК ПодписантИмя,
               |	ВЫРАЗИТЬ(ОтчествоПодписанта.Значение КАК СТРОКА(50)) КАК ПодписантОтчество,
			   |	ВЫРАЗИТЬ(ТипСертификата.Значение КАК Число(1,0)) КАК ОрганизацияТипСертификата,
               |	ВЫРАЗИТЬ(СертификатСпособПодтвержденияПолномочий.Значение КАК СТРОКА(1)) КАК СпособПодтвержденияПолномочий,
               |	ВЫРАЗИТЬ(СертификатНаСервере.Значение КАК БУЛЕВО) КАК СертификатНаСервере,
               |	(ВЫРАЗИТЬ(ОрганизацияОператорИд.Значение КАК СТРОКА(3))) + ДанныеОрганизации.Ид_ОЭД КАК ИдОтпр,
               |	(ВЫРАЗИТЬ(КонтрагентОператорИд.Значение КАК СТРОКА(3))) + ДанныеКонтрагента.Ид_ОЭД КАК ИдПок
               |ПОМЕСТИТЬ ВТ_СОУП
               |ИЗ
               |	ВТ_УчастникиЭДО КАК ДанныеУчастникиЭДО
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК ДанныеКонтрагента
               |		ПО ДанныеУчастникиЭДО.Контрагент = ДанныеКонтрагента.Объект
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК ДанныеОрганизации
               |		ПО ДанныеУчастникиЭДО.Организация = ДанныеОрганизации.Объект
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК КонтрагентОператорИд
               |		ПО (КонтрагентОператорИд.Ссылка = ДанныеКонтрагента.Партнер)
               |			И (КонтрагентОператорИд.Реквизит = ""Идентификатор"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОрганизацияОператорИд
               |		ПО (ОрганизацияОператорИд.Ссылка = ДанныеОрганизации.Партнер)
               |			И (ОрганизацияОператорИд.Реквизит = ""Идентификатор"")               
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ДолжностьПодписанта
               |		ПО (ДолжностьПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ДолжностьПодписанта.Реквизит = ""ДолжностьПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ФамилияПодписанта
               |		ПО (ФамилияПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ФамилияПодписанта.Реквизит = ""ФамилияПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ИмяПодписанта
               |		ПО (ИмяПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ИмяПодписанта.Реквизит = ""ИмяПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОтчествоПодписанта
               |		ПО (ОтчествоПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ОтчествоПодписанта.Реквизит = ""ОтчествоПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатСпособПодтвержденияПолномочий
               |		ПО (СертификатСпособПодтвержденияПолномочий.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатСпособПодтвержденияПолномочий.Реквизит = ""СпособПодтвержденияПолномочий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатНаСервере
               |		ПО (СертификатНаСервере.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатНаСервере.Реквизит = ""СертификатНаСервере"")
			   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ТипСертификата
               |		ПО (ТипСертификата.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ТипСертификата.Реквизит = ""ТипСертификата"")
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ПРЕДСТАВЛЕНИЕ(ВТОсновная.Ссылка) КАК ПредставлениеСчф,
               |	ВТОсновная.Ссылка КАК Ссылка,
               |	ВТОсновная.НомерСЧФ КАК НомерСЧФ,
               |	ВТОсновная.ДатаСЧФ КАК ДатаСЧФ,
               |	ЛОЖЬ КАК ЭтоИсправление,
               |	""643"" КАК КодОКВ,
               |	""Российский рубль"" КАК НаимОКВ,
               |	""Docrobot 1C"" КАК ВерсПрог,
               |	""5.02"" КАК ВерсФорм,
               |	""1115131"" КАК КНД,
               |	""ON_NSCHFDOPPR_01_Исходящий"" КАК ВидДокумента,
               |	""ON_NSCHFDOPPR_01_Испр_Исходящий"" КАК ВидДокументаИспр,
               |	""ON_NSCHFDOPPR"" КАК ТипФайла,
               |	ВТОсновная.КоличествоПозиций КАК КоличествоТоварныхПозиций,
               |	ВТОсновная.ВсегоСтТовБезНДСВсего КАК СтТовБезНДСВсего,
               |	ВТОсновная.ВсегоСтТовУчНалВсего КАК СтТовУчНалВсего,
               |	ВТОсновная.ВсегоСумНДС КАК СумНал,
               |	НЕОПРЕДЕЛЕНО КАК БезНДС,
               |	ВТОсновная.ДокументОснованиеСЧФ КАК ДокументОснованиеСЧФ,
               |	ВТОсновная.ДокументОснованиеСЧФ.СуммаВключаетНДС КАК СуммаВключаетНДС,
               |	ВТОсновная.ДокументОснованиеСЧФ.Дата КАК ДатаДокументОснованиеСЧФ,
               |	ВТОсновная.ДоговорКонтрагента.Номер КАК НомерДоговорКонтрагента,
               |	ВТОсновная.ДоговорКонтрагента.Дата КАК ДатаДоговорКонтрагента,
               |	ВТОсновная.СчетПокупателю КАК СчетПокупателю,
               |	ВТОсновная.ИдентификаторТекСчФОтправленный КАК ИдентификаторТекСчФОтправленный,
               |	ВТОсновная.Организация КАК Организация,
               |	ВЫБОР
               |		КОГДА ВТОсновная.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА ВТОсновная.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ИП""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ КАК ПродТипОрганизации,
               |	ВТОсновная.Организация.НаименованиеПолное КАК ПродНаимОрг,
               |	ВТОсновная.Организация.ФамилияИП КАК ПродФамилияИП,
               |	ВТОсновная.Организация.ИмяИП КАК ПродИмяИП,
               |	ВТОсновная.Организация.ОтчествоИП КАК ПродОтчествоИП,
               |	ВТОсновная.Организация.ИНН КАК ПродИННЮЛ,
               |	ВТОсновная.Организация.КПП КАК ПродКПП,
               |	ВТОсновная.Организация.ОГРН КАК ОрганизацияОГРН,
               |	ВТОсновная.Организация.СвидетельствоСерияНомер КАК ОрганизацияСвидетельствоСерияНомер,
               |	ВТОсновная.Организация.СвидетельствоДатаВыдачи КАК ОрганизацияСвидетельствоДатаВыдачи,
               |	ВТ_СОУП.ОрганизацияИдОЭД КАК ОрганизацияИдОЭД,
               |	ВТ_СОУП.ОрганизацияGLN КАК ОрганизацияGLN,
               |	ВТ_СОУП.ОрганизацияПоддерживаетМЧД КАК ОрганизацияПоддерживаетМЧД,
               |	ВТ_СОУП.ОрганизацияИдЭДООператор КАК ИдЭДООператор,
               |	ВТ_СОУП.ОрганизацияДанныеСертификата КАК ОрганизацияДанныеСертификата,
               |	ВТ_СОУП.ОрганизацияГород КАК ПродГород,
               |	ВТ_СОУП.ОрганизацияИндекс КАК ПродИндекс,
               |	ВТ_СОУП.ОрганизацияДом КАК ПродДом,
               |	ВТ_СОУП.ОрганизацияКодРегиона КАК ПродКодРегион,
               |	ВТ_СОУП.ОрганизацияНаимРегион КАК ПродНаимРегион,
               |	ВТ_СОУП.ОрганизацияУлица КАК ПродУлица,
               |	ВТ_СОУП.ОрганизацияРайон КАК ПродРайон,
               |	ВТ_СОУП.ОрганизацияНаселенныйПункт КАК ПродНаселПункт,
               |	ВТ_СОУП.ОрганизацияКорпус КАК ПродКорпус,
               |	ВТ_СОУП.ОрганизацияКвартира КАК ПродКварт,
               |	ВТОсновная.Контрагент КАК Контрагент,
               |	ВЫБОР
               |		КОГДА ВТОсновная.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА ВТОсновная.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ИП""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ КАК ПокТипОрганизации,
               |	ВТОсновная.Контрагент.Наименование КАК ПокНаимОрг,
               |	ВТОсновная.Контрагент.ИНН КАК ПокИННЮЛ,
               |	ВТОсновная.Контрагент.КПП КАК ПокКПП,
               |	ВТ_СОУП.КонтрагентИдОЭД КАК КонтрагентИдОЭД,
               |	ВТ_СОУП.КонтрагентGLN КАК КонтрагентGLN,
               |	ВТ_СОУП.КонтрагентОтправитьМЧД КАК КонтрагентОтправитьМЧД,
			   |	ВТ_СОУП.КонтрагентПодтверждениеПолномочий КАК КонтрагентСпосПодтПолном,
               |	ВТ_СОУП.КонтрагентОператорИд КАК КонтрагентОператорИд,
               |	ВТ_СОУП.КонтрагентФорматУПД КАК ФорматУПД,
               |	ВТ_СОУП.КонтрагентЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
               |	ВТ_СОУП.КонтрагентГород КАК ПокГород,
               |	ВТ_СОУП.КонтрагентКодРегиона КАК ПокКодРегион,
               |	ВТ_СОУП.КонтрагентНаимРегион КАК ПокНаимРегион,
               |	ВТ_СОУП.КонтрагентДом КАК ПокДом,
               |	ВТ_СОУП.КонтрагентИндекс КАК ПокИндекс,
               |	ВТ_СОУП.КонтрагентУлица КАК ПокУлица,
               |	ВТ_СОУП.КонтрагентРайон КАК ПокРайон,
               |	ВТ_СОУП.КонтрагентНаселенныйПункт КАК ПокНаселПункт,
               |	ВТ_СОУП.КонтрагентКорпус КАК ПокКорпус,
               |	ВТ_СОУП.КонтрагентКвартира КАК ПокКварт,
               |	ВТОсновная.ТочкаДоставкиНаименованиеИзРегистра КАК ГрузополучательНаимОрг,
               |	ВТОсновная.ТочкаДоставкиИННИзРегистра КАК ГрузополучательИННЮЛ,
               |	ВТОсновная.ТочкаДоставкиКППИзРегистра КАК ГрузополучательКПП,
               |	ВТОсновная.ТочкаДоставкиГород КАК ГрузополучательГород,
               |	ВТОсновная.ТочкаДоставкиДом КАК ГрузополучательДом,
               |	ВТОсновная.ТочкаДоставкиИндекс КАК ГрузополучательИндекс,
               |	ВТОсновная.ТочкаДоставкиКодРегиона КАК ГрузополучательКодРегион,
               |	ВТОсновная.ТочкаДоставкиНаименованиеРегиона КАК ГрузополучательНаимРегион,
               |	ВТОсновная.ТочкаДоставкиУлица КАК ГрузополучательУлица,
               |	ВТОсновная.ТочкаДоставкиРайон КАК ГрузополучательРайон,
               |	ВТОсновная.ТочкаДоставкиНаселенныйПункт КАК ГрузополучательНаселПункт,
               |	ВТОсновная.ТочкаДоставкиКорпус КАК ГрузополучательКорпус,
               |	ВТОсновная.ТочкаДоставкиКвартира КАК ГрузополучательКварт,
               |	ВТОсновная.ТочкаДоставкиGLN КАК ТочкаДоставкиGLN,
               |	ВТОсновная.Организация.ИНН КАК ПодписантИНН,
               |	ВТ_СОУП.ПодписантДолжность КАК ПодписантДолжность,
               |	ВТ_СОУП.ПодписантФамилия КАК ПодписантФамилия,
               |	ВТ_СОУП.ПодписантИмя КАК ПодписантИмя,
               |	ВТ_СОУП.ПодписантОтчество КАК ПодписантОтчество,
               |	ВТ_СОУП.СертификатНаСервере КАК СертификатНаСервере,
			   |	ВТ_СОУП.ОрганизацияТипСертификата КАК ОрганизацияТипСертификата,
               |	ВТ_СОУП.СпособПодтвержденияПолномочий КАК ОгранизацияСертСпосПодтПолном,               
               |	ВТ_СОУП.ИдОтпр КАК ИдОтпр,
               |	ВТ_СОУП.ИдПок КАК ИдПок,
               |	ВТОсновная.RECADV_NUMBER КАК RECADV_NUMBER,
               |	ВТОсновная.RECADV_DATE КАК RECADV_DATE,
               |	ВТОсновная.RECADV_CAMPAIGNNUMBER КАК RECADV_CAMPAIGNNUMBER,
               |	ВТОсновная.ORDERVID КАК ORDERVID,
               |	ВТОсновная.RECADVVID КАК RECADVVID,
               |	ВТОсновная.ORDER_NUMBER КАК ORDER_NUMBER,
               |	ВТОсновная.ORDER_DATE КАК ORDER_DATE,
               |	ВТОсновная.ORDER_DELIVERYDATE КАК ORDER_DELIVERYDATE,
               |	ВТОсновная.ORDER_BUYERCODE КАК ORDER_BUYERCODE,
               |	ВТОсновная.ORDER_INFO КАК ORDER_INFO,
               |	ВТОсновная.ORDER_CAMPAIGNNUMBER КАК ORDER_CAMPAIGNNUMBER,
               |	ВТОсновная.ORDER_POSITION КАК ORDER_POSITION,
               |	ВТОсновная.ЭтоМаркируемыйЮЗД КАК ЭтоМаркируемыйЮЗД,
               |	ВТОсновная.N3 КАК N3,
               |	ВТОсновная.N4 КАК N4,
               |	ВТОсновная.N5 КАК N5,
               |	ЛОЖЬ КАК ЭтоПрослеживаемыйЮЗД,
               |	ЕСТЬNULL(DR_ИнфоПоля.Ссылка, НЕОПРЕДЕЛЕНО) КАК ИнфоПоля,
               |	ВТОсновная.ИдентификаторЦепочки КАК ИдентификаторЦепочки
               |ИЗ
               |	ВТ_Основная КАК ВТОсновная
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СОУП КАК ВТ_СОУП
               |		ПО ВТОсновная.Организация = ВТ_СОУП.Организация
               |			И ВТОсновная.Контрагент = ВТ_СОУП.Контрагент
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки КАК DR_ИнфоПоля
               |		ПО (DR_ИнфоПоля.ВидНастройки = ""ИнфоПоля"")
               |			И (ВТ_СОУП.КонтрагентФорматУПД = DR_ИнфоПоля.Наименование)
               |			И (НЕ DR_ИнфоПоля.ПометкаУдаления)";
                       
Запрос.УстановитьПараметр("Источник", Источник);
Запрос.УстановитьПараметр("DRВидыДокументов", DRВидыДокументов);
Запрос.УстановитьПараметр("ПериодСвязиДокументов", DR_EDI_ОбщегоНазначения.Настройка_Параметр_Прочитать("EDI_ПериодСвязиДокументов"));

РезультатЗапроса = Запрос.ВыполнитьПакет();

ИНДЕКС = РезультатЗапроса.Вграница();
ВыборкаДокумента = РезультатЗапроса[ИНДЕКС].Выбрать();

РезультатШапкаПодвалУПД = Новый ТаблицаЗначений;

КвалификаторСтроки 		= Новый КвалификаторыСтроки(500,ДопустимаяДлина.Переменная);
КвалификаторДаты		= Новый КвалификаторыДаты(ЧастиДаты.Дата);

ОписаниеТиповСтрока 			= Новый ОписаниеТипов("Строка"	, КвалификаторСтроки);
ОписаниеТиповДата   			= Новый ОписаниеТипов("Дата"	, КвалификаторДаты);
ОписаниеТиповБулево 			= Новый ОписаниеТипов("Булево");
ОписаниеТиповСчФ    			= Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный");
ОписаниеТиповDRДокумент  		= Новый ОписаниеТипов("ДокументСсылка.DR_Документ");
ОписаниеТиповСчетПокупателю  	= Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю");
ОписаниеТиповОрганизации  		= Новый ОписаниеТипов("СправочникСсылка.Организации");
ОписаниеТиповКонтрагенты  		= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
ОписаниеТиповРТУ  				= Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
ОписаниеТиповDRНастройки  		= Новый ОписаниеТипов("СправочникСсылка.DR_Настройки");

//&lt;Служебные поля&gt; ключ по алфавиту
СтруктураПолей = Новый Структура;
СтруктураПолей.Вставить("ВидДокумента"					, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ВидДокументаИспр"				, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ДокументОснованиеСчФ"			, ОписаниеТиповРТУ);
СтруктураПолей.Вставить("ДатаДокументОснованиеСчФ"		, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("НомерДокументОснованиеСчФ"		, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ИдОтпр"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ИдПок"							, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ИнфоПоля"						, ОписаниеТиповDRНастройки);
СтруктураПолей.Вставить("ИдентификаторЦепочки"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ИдентификаторЭлДокумента"		, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("КонтрагентОтправитьМЧД"		, ОписаниеТиповБулево);
СтруктураПолей.Вставить("КонтрагентЭСФБезИнфПоля"		, ОписаниеТиповБулево);
СтруктураПолей.Вставить("Контрагент"					, ОписаниеТиповКонтрагенты);
СтруктураПолей.Вставить("Организация"					, ОписаниеТиповОрганизации);
СтруктураПолей.Вставить("ОргСвГосРегИП"					, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ОрганизацияДанныеСертификата"	, ОписаниеТиповDRНастройки);
СтруктураПолей.Вставить("Ссылка"						, ОписаниеТиповСчФ);
СтруктураПолей.Вставить("СчетПокупателю"				, ОписаниеТиповСчетПокупателю);
СтруктураПолей.Вставить("Статус"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("СтрокаМЧД"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("СертификатНаСервере"			, ОписаниеТиповБулево);
СтруктураПолей.Вставить("ТипФайла"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ФайлИмя"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ФорматУПД"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("СуммаВключаетНДС"				, ОписаниеТиповБулево);
СтруктураПолей.Вставить("ЭтоМаркируемыйЮЗД"				, ОписаниеТиповБулево);
СтруктураПолей.Вставить("ЭтоИсправление"				, ОписаниеТиповБулево);

СтруктураПолей.Вставить("ORDER_NUMBER"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_DATE"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_CAMPAIGNNUMBER"	, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_INFO"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_BUYERCODE"		, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADV_CAMPAIGNNUMBER"	, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADV_NUMBER"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADV_DATE"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADVVID"				, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDERVID"				, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("GUIDФайла"				, ОписаниеТиповСтрока); 
СтруктураПолей.Вставить("GUIDДокОснование"		, ОписаниеТиповСтрока);
//&lt;/Служебные поля&gt;

Для каждого ЭлСтруктуры Из СтруктураПолей Цикл 
	РезультатШапкаПодвалУПД.Колонки.Добавить(ЭлСтруктуры.Ключ, ЭлСтруктуры.Значение);		
КонецЦикла;

МассивКолонок = Новый Массив; 

//&lt;Файл&gt;
МассивКолонок.Добавить("ИдФайл");
МассивКолонок.Добавить("ВерсПрог");
МассивКолонок.Добавить("ВерсФорм");

//&lt;Документ&gt;
МассивКолонок.Добавить("КНД");
МассивКолонок.Добавить("ДокФункция");
МассивКолонок.Добавить("ПоФактХЖ");
МассивКолонок.Добавить("НаимДокОпр");
МассивКолонок.Добавить("ДатаИнфПр");
МассивКолонок.Добавить("ВремИнфПр");
МассивКолонок.Добавить("НаимЭконСубСост");

//&lt;СвСчФакт&gt;
МассивКолонок.Добавить("НомерДок");
МассивКолонок.Добавить("ДатаДок");

//&lt;ИспрДок&gt;
МассивКолонок.Добавить("НомИспр");
МассивКолонок.Добавить("ДатаИспр");

//&lt;&lt;СвПрод&gt;&gt;
МассивКолонок.Добавить("ПродТипОрганизации");  // Служебное поле

//&lt;АдрРФ&gt;
МассивКолонок.Добавить("ПродИндекс");
МассивКолонок.Добавить("ПродКодРегион");
МассивКолонок.Добавить("ПродНаимРегион");
МассивКолонок.Добавить("ПродРайон");
МассивКолонок.Добавить("ПродГород");
МассивКолонок.Добавить("ПродНаселПункт");
МассивКолонок.Добавить("ПродУлица");
МассивКолонок.Добавить("ПродДом");
МассивКолонок.Добавить("ПродКорпус");
МассивКолонок.Добавить("ПродКварт");

//&lt;СвЮЛУч&gt;
МассивКолонок.Добавить("ПродНаимОрг");
МассивКолонок.Добавить("ПродИННЮЛ");
МассивКолонок.Добавить("ПродКПП");

//&lt;СвИП&gt;
МассивКолонок.Добавить("ПродИННФЛ");
МассивКолонок.Добавить("ПродСвГосРегИП");

//&lt;ФИО&gt;
МассивКолонок.Добавить("ПродФамилияИП");
МассивКолонок.Добавить("ПродИмяИП");
МассивКолонок.Добавить("ПродОтчествоИП");
//&lt;&lt;/СвПрод&gt;&gt;

//&lt;&lt;ГрузОт&gt;&gt;
МассивКолонок.Добавить("ГрузоотправительТип");  // Служебное поле
МассивКолонок.Добавить("ГрузоотправительОнЖе");

//&lt;АдрРФ&gt;
МассивКолонок.Добавить("ГрузоотправительИндекс");
МассивКолонок.Добавить("ГрузоотправительКодРегион");
МассивКолонок.Добавить("ГрузоотправительНаимРегион");
МассивКолонок.Добавить("ГрузоотправительРайон");
МассивКолонок.Добавить("ГрузоотправительГород");
МассивКолонок.Добавить("ГрузоотправительНаселПункт");
МассивКолонок.Добавить("ГрузоотправительУлица");
МассивКолонок.Добавить("ГрузоотправительДом");
МассивКолонок.Добавить("ГрузоотправительКорпус");
МассивКолонок.Добавить("ГрузоотправительКварт");

//&lt;СвЮЛУч&gt;
МассивКолонок.Добавить("ГрузоотправительНаимОрг");
МассивКолонок.Добавить("ГрузоотправительИННЮЛ");
МассивКолонок.Добавить("ГрузоотправительКПП");

//&lt;СвИП&gt;
МассивКолонок.Добавить("ГрузоотправительИННФЛ");
МассивКолонок.Добавить("ГрузоотправительСвГосРегИП");

//&lt;ФИО&gt;
МассивКолонок.Добавить("ГрузоотправительФамилияИП");
МассивКолонок.Добавить("ГрузоотправительИмяИП");
МассивКолонок.Добавить("ГрузоотправительОтчествоИП");
//&lt;&lt;/ГрузОт&gt;&gt;

//&lt;&lt;ГрузПолуч&gt;&gt;
МассивКолонок.Добавить("ГрузополучательТип"); // Служебное поле

//&lt;АдрРФ&gt;
МассивКолонок.Добавить("ГрузополучательИндекс");
МассивКолонок.Добавить("ГрузополучательКодРегион");
МассивКолонок.Добавить("ГрузополучательНаимРегион");
МассивКолонок.Добавить("ГрузополучательРайон");
МассивКолонок.Добавить("ГрузополучательГород");
МассивКолонок.Добавить("ГрузополучательНаселПункт");
МассивКолонок.Добавить("ГрузополучательУлица");
МассивКолонок.Добавить("ГрузополучательДом");
МассивКолонок.Добавить("ГрузополучательКорпус");
МассивКолонок.Добавить("ГрузополучательКварт");

//&lt;СвЮЛУч&gt;
МассивКолонок.Добавить("ГрузополучательНаимОрг");
МассивКолонок.Добавить("ГрузополучательИННЮЛ");
МассивКолонок.Добавить("ГрузополучательКПП");

//&lt;СвИП&gt;
МассивКолонок.Добавить("ГрузополучательИННФЛ");
МассивКолонок.Добавить("ГрузополучательСвГосРегИП");

//&lt;ФИО&gt;
МассивКолонок.Добавить("ГрузополучательФамилияИП");
МассивКолонок.Добавить("ГрузополучательИмяИП");
МассивКолонок.Добавить("ГрузополучательОтчествоИП");
//&lt;&lt;/ГрузПолуч&gt;&gt;

//&lt;&lt;СвПокуп&gt;&gt;
МассивКолонок.Добавить("ПокТипОрганизации"); // Служебное поле

//&lt;АдрРФ&gt;
МассивКолонок.Добавить("ПокИндекс");
МассивКолонок.Добавить("ПокКодРегион");
МассивКолонок.Добавить("ПокНаимРегион");
МассивКолонок.Добавить("ПокРайон");
МассивКолонок.Добавить("ПокГород");
МассивКолонок.Добавить("ПокНаселПункт");
МассивКолонок.Добавить("ПокУлица");
МассивКолонок.Добавить("ПокДом");
МассивКолонок.Добавить("ПокКорпус");
МассивКолонок.Добавить("ПокКварт");

//&lt;СвЮЛУч&gt;
МассивКолонок.Добавить("ПокНаимОрг");
МассивКолонок.Добавить("ПокИННЮЛ");
МассивКолонок.Добавить("ПокКПП");

//&lt;СвИП&gt;
МассивКолонок.Добавить("ПокИННФЛ");
МассивКолонок.Добавить("ПокСвГосРегИП");

//&lt;ФИО&gt;
МассивКолонок.Добавить("ПокФамилияИП");
МассивКолонок.Добавить("ПокИмяИП");
МассивКолонок.Добавить("ПокОтчествоИП");
//&lt;&lt;/СвПокуп&gt;&gt;

//&lt;ДокПодтвОтгрНом&gt;
МассивКолонок.Добавить("РеквНаимДок");
МассивКолонок.Добавить("РеквНомерДок");
МассивКолонок.Добавить("РеквДатаДок");

//&lt;ДенИзм&gt;
МассивКолонок.Добавить("КодОКВ");
МассивКолонок.Добавить("НаимОКВ");

//&lt;ИнфПолФХЖ1&gt;
МассивКолонок.Добавить("ИнфТекст");

//&lt;ВсегоОпл&gt;
МассивКолонок.Добавить("СтТовБезНДСВсего");
МассивКолонок.Добавить("СтТовУчНалВсего");
МассивКолонок.Добавить("СумНал");
МассивКолонок.Добавить("БезНДС");

//&lt;СвПер&gt;
МассивКолонок.Добавить("СодОпер"); //Содержание операции
//Формат - ДД.ММ.ГГГГ.
МассивКолонок.Добавить("ДатаПер"); //Дата отгрузки товаров, передачи имущественных прав
МассивКолонок.Добавить("ДатаНач"); //Дата начала периода оказания услуг (выполнения работ, поставки товаров)
МассивКолонок.Добавить("ДатаОкон");// Дата окончания периода оказания услуг (выполнения работ, поставки товаров)

//&lt;ОснПер&gt;
МассивКолонок.Добавить("ОснПерРеквНаимДок");															
МассивКолонок.Добавить("ОснПерРеквНомерДок");
МассивКолонок.Добавить("ОснПерРеквДатаДок");
//&lt;/СвПер&gt;

//&lt;Подписант&gt;
МассивКолонок.Добавить("ПодписантДолжность"); 
МассивКолонок.Добавить("ТипПодпис");		// значения см. "Формат документа" - табл 5.31
МассивКолонок.Добавить("ДатаПодДок");   	// Дата подписания документа
МассивКолонок.Добавить("СпосПодтПолном"); 	// значения см. "Формат документа" - табл 5.31
МассивКолонок.Добавить("ДопСведПодп");    	// Доп сведения о подписанте Строка(1-255)

//&lt;ФИО&gt;
МассивКолонок.Добавить("ПодписантФамилия");
МассивКолонок.Добавить("ПодписантИмя");
МассивКолонок.Добавить("ПодписантОтчество");

//&lt;СвДоверЭл&gt;
МассивКолонок.Добавить("НомДовер");         
МассивКолонок.Добавить("ДатаВыдДовер");     
МассивКолонок.Добавить("ВнНомДовер");    	
МассивКолонок.Добавить("ДатаВнРегДовер");	
МассивКолонок.Добавить("ИдСистХран");   	
МассивКолонок.Добавить("УРЛСист");
//&lt;/Подписант&gt;

Для Каждого Колонка Из МассивКолонок Цикл
	РезультатШапкаПодвалУПД.Колонки.Добавить(Колонка);
КонецЦикла;

РезультатШапкаПодвалУПД.Индексы.Добавить("Ссылка");

ДанныеТЧНоменклатурORDER = Новый ТаблицаЗначений;
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Ссылка"				, ОписаниеТиповСЧФ);
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("POSITIONNUMBER"		, ОписаниеТиповСтрока);
ДанныеТЧНоменклатурORDER.Колонки.Добавить("QUANTITYOFCUINTU"	, ОписаниеТиповСтрока);
ДанныеТЧНоменклатурORDER.Колонки.Добавить("INFO"				, ОписаниеТиповСтрока);

Пока ВыборкаДокумента.Следующий() Цикл 
	
	//&lt;Служебные переменные&gt;
	ПредставлениеОрганизации   = СокрЛП(ВыборкаДокумента.ПродНаимОрг);
	ПредставлениеКонтрагента   = СокрЛП(ВыборкаДокумента.ПокНаимОрг);
	ПредставлениеТочкаДоставки = СокрЛП(ВыборкаДокумента.ГрузополучательНаимОрг);
	
	ИдентификаторТекСчФОтправленный = ВыборкаДокумента.ИдентификаторТекСчФОтправленный;
    //&lt;/Служебные переменные&gt;
    
    СтруктураДокумента = РезультатШапкаПодвалУПД.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтруктураДокумента, ВыборкаДокумента);
	
	Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.КонтрагентОператорИд) Тогда
        
        ТекстЛогаСобытий = "Не заполнены данные по оператору ЭДО для контрагента " + ПредставлениеКонтрагента;
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий,"Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.ИдЭДООператор) Тогда
        
        ТекстЛогаСобытий = "Не заполнены данные по оператору ЭДО для организации " + ПредставлениеОрганизации;
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
	КонецЕсли;
	
	СтруктураДокумента.ОргСвГосРегИП = ВыборкаДокумента.ОрганизацияОГРН + ", " + ВыборкаДокумента.ОрганизацияСвидетельствоСерияНомер 
										+ " от " + Формат(ВыборкаДокумента.ОрганизацияСвидетельствоДатаВыдачи, "ДЛФ=Д");
						
	ОписаниеСообщенияПользователю = "";
	ЗаголовокСообщения = "УПД по документу &lt;" + ВыборкаДокумента.ПредставлениеСчФ + "&gt; не был отправлен по причиние: " + Символы.ПС;
	ЕстьОшибкиСертификатМЧД = Ложь;
	
	ИспользованиеМЧД = ВыборкаДокумента.ОрганизацияПоддерживаетМЧД И ВыборкаДокумента.КонтрагентОтправитьМЧД и ВыборкаДокумента.КонтрагентСпосПодтПолном = "4";
	
	Если ИспользованиеМЧД Тогда
		
		СтрокаПоМЧД = ТаблицаМЧД.Найти(ВыборкаДокумента.Организация, "Организация");
		
		//&lt;Получение данных МЧД Подписант&gt;
		Если СтрокаПоМЧД &lt;&gt; Неопределено Тогда
			
			Если Не СтрокаПоМЧД.ЕстьСертификат Тогда
				
				ЕстьОшибкиСертификатМЧД = Истина;
				ОписаниеСообщенияПользователю = "на вкладке ""Сертификаты, МЧД"" не выбран сертификат!";
				
			КонецЕсли;
			
			ЭтоСертификатФизЛица = СтрокаПоМЧД.ТипСертификата = 2;
			
			Если НЕ ЭтоСертификатФизЛица И Не ЕстьОшибкиСертификатМЧД Тогда
				
				ЕстьОшибкиСертификатМЧД = Истина;
				ОписаниеСообщенияПользователю = "на вкладке ""Сертификаты, МЧД"" выбранный сертификат должен иметь тип ""Физ. лицо""!";
				
			КонецЕсли;
			
			Если НЕ СтрокаПоМЧД.МЧД_Актуальна И НЕ ЕстьОшибкиСертификатМЧД Тогда
				
				ЕстьОшибкиСертификатМЧД = Истина;
				ОписаниеСообщенияПользователю = "на вкладке ""Сертификаты, МЧД"" не выбрана Доверенность или ее срок действия истек (не актуальна)!";
				
			КонецЕсли;
									
			Если Не ЕстьОшибкиСертификатМЧД Тогда
				
				Если ВыборкаДокумента.КонтрагентСпосПодтПолном = "4" Тогда	
					СтруктураДокумента.СтрокаМЧД 	= СтрокаПоМЧД.СтрокаМЧД;		
				КонецЕсли;	
				
				СтруктураДокумента.НомДовер			= СтрокаПоМЧД.НомерДоверенности; 					
				СтруктураДокумента.ДатаВыдДовер		= Формат(СтрокаПоМЧД.МЧДДействительнаС, "ДЛФ=Д");
				СтруктураДокумента.ВнНомДовер		= СтрокаПоМЧД.ВнутреннийНомерМЧД;				
				СтруктураДокумента.ДатаВнРегДовер	= Формат(СтрокаПоМЧД.ДатаВнутреннейРегистрацииМЧД, "ДЛФ=Д");
				СтруктураДокумента.ИдСистХран		= СтрокаПоМЧД.ИдентификаторСистемыХраненияМЧД;
				СтруктураДокумента.УРЛСист			= СтрокаПоМЧД.УнифицированныйУказательМЧД;
				
				
				СтруктураДокумента.СертификатНаСервере		 	= СтрокаПоМЧД.СертификатНаСервере;
				СтруктураДокумента.ОрганизацияДанныеСертификата	= СтрокаПоМЧД.Сертификат;
				
				СтруктураДокумента.СпосПодтПолном			 = ВыборкаДокумента.КонтрагентСпосПодтПолном;
				СтруктураДокумента.ПодписантДолжность		 = СтрокаПоМЧД.ДолжностьПодписанта;
				СтруктураДокумента.ПодписантФамилия  		 = СтрокаПоМЧД.ФамилияПодписанта;
				СтруктураДокумента.ПодписантИмя      		 = СтрокаПоМЧД.ИмяПодписанта;
				СтруктураДокумента.ПодписантОтчество  		 = СтрокаПоМЧД.ОтчествоПодписанта;
				
			КонецЕсли;
		
		Иначе
			
			ЕстьОшибкиСертификатМЧД = Истина;
			ОписаниеСообщенияПользователю = "на вкладке ""Сертификаты, МЧД"" отсутствуют данные по сертификату и доверенности!";
				
		КонецЕсли;
		
	Иначе
		
		Если ВыборкаДокумента.ОрганизацияТипСертификата &lt;&gt; 2 Тогда
			СтруктураДокумента.СпосПодтПолном = ВыборкаДокумента.ОгранизацияСертСпосПодтПолном;
		Иначе 
			
			ЕстьОшибкиСертификатМЧД = Истина;
			ОписаниеСообщенияПользователю = "на вкладке ""Сертификаты, МЧД"" отсутствуют данные по сертификату и доверенности!";
			
		КонецЕсли;		
			
	КонецЕсли;
	
	Если ЕстьОшибкиСертификатМЧД Тогда
		
		ТекстЛогаСобытий = ЗаголовокСообщения + "В настройках соответствия по Организации """ + ПредставлениеОрганизации + """, ";
		
		ТекстЛогаСобытий = ТекстЛогаСобытий + ОписаниеСообщенияПользователю;	
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
		
		РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантДолжность)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантИмя)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантФамилия)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантОтчество) 
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.СпосПодтПолном) Тогда
        
        ТекстЛогаСобытий = "Проверьте корректность заполнения данных подписанта "
        					+ "(Должность, Фамилия, Имя, Отчество, Подтверждение полномочий) в настройках сертификата по Организации: "
        					+ ПредставлениеОрганизации;
							
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;        
    КонецЕсли;
	
	ЭтоИсправление = СтруктураДокумента.ЭтоИсправление;
	
	Если НЕ ПустаяСтрока(НомерИсправления) Тогда		
		
		ТекущийНомерИсправления  = ?(Число(НомерИсправления) &lt;&gt; 0, СокрЛП(НомерИсправления), "");
    	ЭтоИсправление = ЗначениеЗаполнено(ТекущийНомерИсправления);
		
	КонецЕсли;	

    Если ЭтоИсправление И ПустаяСтрока(ИдентификаторТекСчФОтправленный) Тогда
			
		ТекстЛогаСобытий = "На основании " + ВыборкаДокумента.ПредставлениеСчФ + " Исправительный УПД не сформирован!!! Выполните отправку первичного УПД.";
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		
		РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);

		Продолжить;
	КонецЕсли;
    
    ИсходнаяСчетФактура = ВыборкаДокумента.Ссылка;
    
    Если ЭтоИсправление Тогда
        
        СтруктураДокумента.ВидДокумента = СтруктураДокумента.ВидДокументаИспр;
		
		СтруктураДокумента.НомИспр       = ТекущийНомерИсправления;
    	СтруктураДокумента.ДатаИспр      = Формат(ТекущаяДата(), "ДЛФ=Д");
		СтруктураДокумента.GUIDДокОснование = ИдентификаторТекСчФОтправленный;
        СтруктураДокумента.ЭтоИсправление   = ЭтоИсправление;
		
	КонецЕсли;
	
	НомерСчФ = Эком_ПолучитьНомерНаПечать(ИсходнаяСчетФактура, Истина, Ложь); //второй параметр убирает префикс, третий параметр убирает лидирующие нули.
	СтруктураДокумента.НомерДок = НомерСчФ;
	
	ДатаСчФ = Формат(ВыборкаДокумента.ДатаСчФ, "ДЛФ=Д");
    СтруктураДокумента.ДатаДок = ДатаСчФ;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.Организация)
        	ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Контрагент) Тогда
        
        ТекстЛогаСобытий = "Проверьте заполнение реквизитов (Организация/Контрагент) в " + ВыборкаДокумента.ПредставлениеСчФ;
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		
		РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
    КонецЕсли;
    
	//&lt;Продавец ИП&gt;
    Если СтруктураДокумента.ПродТипОрганизации = "ИП" Тогда
		
		СтруктураДокумента.ПродИННФЛ = СтруктураДокумента.ПродИННЮЛ;
		СтруктураДокумента.ПродСвГосРегИП = СтруктураДокумента.ОргСвГосРегИП;			
		
	КонецЕсли;
	
	СтруктураДокумента.ГрузоотправительТип 	= "ОнЖе";
	СтруктураДокумента.ГрузоотправительОнЖе = "он же";
	СтруктураДокумента.ГрузополучательТип	= "ЮЛ";
	
	Если НЕ ЗначениеЗаполнено(СтруктураДокумента.ГрузополучательНаимОрг) 
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ГрузополучательИННЮЛ)
		ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ГрузополучательКПП) Тогда
    
        ТекстЛогаСобытий = " УПД не сформирован. Проверьте в настройках сопоставления ""Точки доставки"" реквизиты: Наименование, ИНН/КПП! " + ПредставлениеТочкаДоставки;
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДокумента.ПокКПП) Тогда
		
		ТекстЛогаСобытий = "Не заполнен КПП по Контрагенту: " + ПредставлениеКонтрагента;
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
    КонецЕсли;

	//&lt;Покупатель ИП&gt;
	Если СтруктураДокумента.ПокТипОрганизации = "ИП" Тогда
        		
        СтруктураДокумента.ПокИННФЛ = СокрЛП(СтруктураДокумента.ПокИННЮЛ);
		
		ФИО = СтрЗаменить(СтруктураДокумента.ПокНаимОрг, "ИП ", "");
		ФИО = СтрЗаменить(ФИО, "Индивидуальный Предприниматель ", "");
		ФИО = СтрЗаменить(ФИО, "Индивидуальный предприниматель ", "");
		ФИО = СтрЗаменить(ФИО, " ", Символы.ПС);
		
        СтруктураДокумента.ПокФамилияИП		= СтрПолучитьСтроку(ФИО,1);
        СтруктураДокумента.ПокИмяИП       	= СтрПолучитьСтроку(ФИО,2);
        СтруктураДокумента.ПокОтчествоИП  	= СтрПолучитьСтроку(ФИО,3);
		
		//&lt;Данные Грузополучателя приравниваются к данным Контрагента&gt;
		СтруктураДокумента.ГрузополучательТип 		 = СтруктураДокумента.ПокТипОрганизации;
		СтруктураДокумента.ГрузополучательИННФЛ 	 = СтруктураДокумента.ПокИННФЛ;
		СтруктураДокумента.ГрузополучательФамилияИП  = СтруктураДокумента.ПокФамилияИП;
		СтруктураДокумента.ГрузополучательИмяИП    	 = СтруктураДокумента.ПокИмяИП;
		СтруктураДокумента.ГрузополучательОтчествоИП = СтруктураДокумента.ПокОтчествоИП;
		
    КонецЕсли;

    ОрганизацияКПП   = СтруктураДокумента.ПродКПП;
    КонтрагентКПП    = СтруктураДокумента.ПокКПП;
    ТочкаДоставкиКПП = СтруктураДокумента.ГрузополучательКПП;

    СписокАдресов = Новый Структура;
    СписокАдресов.Вставить("ПродИндекс");
    СписокАдресов.Вставить("ПродКодРегион");
    СписокАдресов.Вставить("ПродНаимРегион");
    СписокАдресов.Вставить("ПродРайон");
	СписокАдресов.Вставить("ПродГород");
	СписокАдресов.Вставить("ПродНаселПункт");
	СписокАдресов.Вставить("ПродУлица");
	СписокАдресов.Вставить("ПродДом");
	СписокАдресов.Вставить("ПродКорпус");
	СписокАдресов.Вставить("ПродКварт");
    СписокАдресов.Вставить("ПродКодРегионаИзКПП", Лев(ОрганизацияКПП, 2));

   	СписокАдресов.Вставить("ПокИндекс");
	СписокАдресов.Вставить("ПокКодРегион");
	СписокАдресов.Вставить("ПокНаимРегион");
	СписокАдресов.Вставить("ПокРайон");
	СписокАдресов.Вставить("ПокГород");
	СписокАдресов.Вставить("ПокНаселПункт");
	СписокАдресов.Вставить("ПокУлица");
	СписокАдресов.Вставить("ПокДом");
	СписокАдресов.Вставить("ПокКорпус");
	СписокАдресов.Вставить("ПокКварт");
    СписокАдресов.Вставить("ПокКодРегионаИзКПП", Лев(КонтрагентКПП, 2));

    СписокАдресов.Вставить("ГрузополучательИндекс");
	СписокАдресов.Вставить("ГрузополучательКодРегион");
	СписокАдресов.Вставить("ГрузополучательНаимРегион");
	СписокАдресов.Вставить("ГрузополучательРайон");
	СписокАдресов.Вставить("ГрузополучательГород");
	СписокАдресов.Вставить("ГрузополучательНаселПункт");
	СписокАдресов.Вставить("ГрузополучательУлица");
	СписокАдресов.Вставить("ГрузополучательДом");
	СписокАдресов.Вставить("ГрузополучательКорпус");
	СписокАдресов.Вставить("ГрузополучательКварт");
    СписокАдресов.Вставить("ГрузополучательКодРегионаИзКПП", Лев(ТочкаДоставкиКПП, 2));
	
	ЗаполнитьЗначенияСвойств(СписокАдресов, СтруктураДокумента);
	    
    //Обязательные параметры адреса по участникам ЭДО
	СписокЭлементовАдреса = Новый СписокЗначений;
	
	//Продавец
	КодРегионаПрод 	= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПродКодРегион"]	, ПредставлениеОрганизации);
	НаимРегионПрод 	= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПродНаимРегион"]	, ПредставлениеОрганизации);
	ИндексПрод 		= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПродИндекс"]		, ПредставлениеОрганизации);
    
    СписокЭлементовАдреса.Добавить(КодРегионаПрод	, "код региона Организации");
	СписокЭлементовАдреса.Добавить(НаимРегионПрод	, "наименование региона Организации");	
    СписокЭлементовАдреса.Добавить(ИндексПрод		, "индекс Организации");
	
	//Грузополучатель	
	КодРегионаГрузопол 	= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ГрузополучательКодРегион"]	, ПредставлениеТочкаДоставки);
	НаимРегионГрузопол 	= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ГрузополучательНаимРегион"]	, ПредставлениеТочкаДоставки);
	ИндексГрузопол 		= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ГрузополучательИндекс"]		, ПредставлениеТочкаДоставки);
	
    СписокЭлементовАдреса.Добавить(КодРегионаГрузопол	, "код региона Грузополучателя");
	СписокЭлементовАдреса.Добавить(НаимРегионГрузопол	, "наименование региона Грузополучателя");
    СписокЭлементовАдреса.Добавить(ИндексГрузопол		, "индекс Грузополучателя");
	
	//Покупатель
	КодРегионаПок 	= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПокКодРегион"]	, ПредставлениеКонтрагента);
	НаимРегионПок 	= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПокНаимРегион"]	, ПредставлениеКонтрагента);
	ИндексПок 		= Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПокИндекс"]		, ПредставлениеКонтрагента);
	
	СписокЭлементовАдреса.Добавить(КодРегионаПок	, "код региона Контрагента");
	СписокЭлементовАдреса.Добавить(НаимРегионПок	, "наименование региона Контрагента");
    СписокЭлементовАдреса.Добавить(ИндексПок		, "индекс Контрагента");
	
	БылиОшибкиВАдресе = Ложь;
	
	Для каждого ЗначениеЭлемента Из СписокЭлементовАдреса Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента.Значение.ЗначениеОбъекта) Тогда
			
			ТекстЛогаСобытий = "Не заполнен &lt;&lt;&lt;" + ЗначениеЭлемента.Представление + "&gt;&gt;&gt;. Проверьте заполнение адреса " + СокрЛП(ЗначениеЭлемента.Значение.Представление);
            
            ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
            БылиОшибкиВАдресе = Истина;
			
		КонецЕсли;
		
    КонецЦикла;

    Если БылиОшибкиВАдресе Тогда
		
		РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;
    КонецЕсли;
    
    Если ПустаяСтрока(СтруктураДокумента.ФорматУПД) Тогда
		
		ТекстЛогаСобытий = "Документ " + ВыборкаДокумента.ПредставлениеСчФ + " был пропущен. В настройках модуля у соответствия по Контрагенту """ + Строка(СтруктураДокумента.Контрагент) 
								+ """ - ""Не заполнен формат УПД""! Заполните формат УПД и повторите действие.";
																
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;
		
	КонецЕсли;
	
	ФорматУПД = СокрЛП(СтруктураДокумента.ФорматУПД);
	
	//Номер и дата первичной реализации
	СтруктураДокумента.НомерДокументОснованиеСчФ = Эком_ПолучитьНомерНаПечать(ВыборкаДокумента.ДокументОснованиеСЧФ, Истина, Ложь);
    СтруктураДокумента.ДатаДокументОснованиеСчФ  = Формат(ВыборкаДокумента.ДатаДокументОснованиеСЧФ, "ДЛФ=Д");
	
	//Даты входящих EDI по цепочке
	СтруктураДокумента.ORDER_DATE  = Формат(ВыборкаДокумента.ORDER_DATE, "ДЛФ=Д");
	СтруктураДокумента.RECADV_DATE = Формат(ВыборкаДокумента.RECADV_DATE, "ДЛФ=Д");
	
	//Номер и дата договора контрагента
	НомерДоговорКонтрагента = СокрЛП(ВыборкаДокумента.НомерДоговорКонтрагента);
    ДатаДоговорКонтрагента  = Формат(ВыборкаДокумента.ДатаДоговорКонтрагента, "ДЛФ=Д");
	
	НаименованиеОснования 	= "";
	НомерОснования          = "";
    ДатаОснования           = "";                       
	
    ГЛНОрганизации          = ВыборкаДокумента.ОрганизацияGLN;
    ГЛНКонтрагент           = ВыборкаДокумента.КонтрагентGLN;
    ГЛНТочкиДоставки        = ВыборкаДокумента.ТочкаДоставкиGLN;
	
	Если ФорматУПД = "УПД ЕВРОПА" Тогда
		
			НаименованиеОснования 	= "Заказ";			  
        	НомерОснования 			= СтруктураДокумента.ORDER_NUMBER;
			ДатаОснования  			= СтруктураДокумента.ORDER_DATE;
	
	ИначеЕсли ФорматУПД = "УПД ТАБЫШ" Тогда
		
			НаименованиеОснования 	= "Акт";			  
        	НомерОснования 			= СтруктураДокумента.RECADV_NUMBER;
			ДатаОснования  			= СтруктураДокумента.RECADV_DATE; 
		
	ИначеЕсли ЗначениеЗаполнено(НомерДоговорКонтрагента)
				И ЗначениеЗаполнено(ДатаДоговорКонтрагента) Тогда
				
		НаименованиеОснования = "Договор поставки";
		НомерОснования = НомерДоговорКонтрагента;
		ДатаОснования  = ДатаДоговорКонтрагента;
		
	КонецЕсли;

    ДанныеИнфополя = Новый Соответствие;
    ДанныеИнфополя.Вставить("VID"                 , СтруктураДокумента.RECADVVID);
    ДанныеИнфополя.Вставить("ORDID"               , СтруктураДокумента.ORDERVID);
    ДанныеИнфополя.Вставить("получатель"          , ?(ЗначениеЗаполнено(СтруктураДокумента.ORDER_BUYERCODE), СтруктураДокумента.ORDER_BUYERCODE, ГЛНКонтрагент));
    ДанныеИнфополя.Вставить("покупатель"          , ГЛНКонтрагент);
    ДанныеИнфополя.Вставить("отправитель"         , ГЛНОрганизации);
    ДанныеИнфополя.Вставить("грузоотправитель"    , ГЛНОрганизации);
    ДанныеИнфополя.Вставить("поставщик"           , ГЛНОрганизации);
    ДанныеИнфополя.Вставить("GLN_грузоотправителя", ГЛНОрганизации);
    ДанныеИнфополя.Вставить("GLN_грузополучателя" , ГЛНТочкиДоставки);
    ДанныеИнфополя.Вставить("грузополучатель"     , ГЛНТочкиДоставки);
    ДанныеИнфополя.Вставить("дата_акта"           , СтруктураДокумента.RECADV_DATE);
    ДанныеИнфополя.Вставить("дата_апп"            , СтруктураДокумента.RECADV_DATE);
    ДанныеИнфополя.Вставить("дата_заказа"         , СтруктураДокумента.ORDER_DATE);
    ДанныеИнфополя.Вставить("дата_накладной"      , СтруктураДокумента.ДатаДокументОснованиеСчФ);
    ДанныеИнфополя.Вставить("ДтНакл"              , СтруктураДокумента.ДатаДокументОснованиеСчФ);
    ДанныеИнфополя.Вставить("дата_отгрузки"       , СтруктураДокумента.ДатаДокументОснованиеСчФ);
    ДанныеИнфополя.Вставить("дата_поставки"       , Формат(ВыборкаДокумента.ORDER_DELIVERYDATE, "ДЛФ=Д"));
    ДанныеИнфополя.Вставить("код_поставщика"      , СтруктураДокумента.ORDER_CAMPAIGNNUMBER);
    ДанныеИнфополя.Вставить("номер_акта"          , СтруктураДокумента.RECADV_NUMBER);
    ДанныеИнфополя.Вставить("номер_апп"           , СтруктураДокумента.RECADV_NUMBER);
    ДанныеИнфополя.Вставить("номер_накладной"     , СтруктураДокумента.НомерДокументОснованиеСчФ);
    ДанныеИнфополя.Вставить("НомНакл"             , СтруктураДокумента.НомерДокументОснованиеСчФ);
    ДанныеИнфополя.Вставить("Номер накладной"     , СтруктураДокумента.НомерДокументОснованиеСчФ);
    ДанныеИнфополя.Вставить("номер_отгрузки"      , СтруктураДокумента.НомерДокументОснованиеСчФ);
    ДанныеИнфополя.Вставить("номер_заказа"        , СтруктураДокумента.ORDER_NUMBER);
    ДанныеИнфополя.Вставить("Заказ на поставку"   , СтруктураДокумента.ORDER_NUMBER);
    ДанныеИнфополя.Вставить("Номер_заказа"		  , СтруктураДокумента.ORDER_NUMBER);
	ДанныеИнфополя.Вставить("номер_договора"   	  , ?(ФорматУПД = "УПД ДА", СтруктураДокумента.ORDER_INFO, НомерДоговорКонтрагента));
	ДанныеИнфополя.Вставить("дата_договора"   	  , ДатаДоговорКонтрагента);

    СоответсвияИнфоПолей = ПолучитьСтруктуруИнфоПолейИзСправочника("ИнфПолФХЖ1", СтруктураДокумента.ИнфоПоля, ДанныеИнфополя, ВыборкаДокумента.КонтрагентЭСФБезИнфПоля);
	    
    Если СоответсвияИнфоПолей = Неопределено Тогда
		
		ТекстЛогаСобытий = "Не заполнены обязательные инфо поля! Формат ЮЗД - " + ФорматУПД;
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);

        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
        Продолжить;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДокумента.GUIDДокОснование) Тогда
		СоответсвияИнфоПолей.Вставить("документ_основание"  , СтруктураДокумента.GUIDДокОснование);
	КонецЕсли;
	
    СтруктураДокумента.ИнфТекст = СоответсвияИнфоПолей;
	
    СтруктураДокумента.ДокФункция = ПолучитьФункциюЮЗД(ФорматУПД);
	
	Если СтруктураДокумента.ДокФункция = "СЧФДОП" Тогда
		
		СтруктураДокумента.ПоФактХЖ = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
        СтруктураДокумента.НаимДокОпр = "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
		
    КонецЕсли;
    
    Если СтруктураДокумента.ПродТипОрганизации = "ЮЛ" Тогда
        СтруктураДокумента.НаимЭконСубСост = СтруктураДокумента.ПродНаимОрг;
    Иначе
        СтруктураДокумента.НаимЭконСубСост = СтруктураДокумента.ПродФамилияИП + " " + СтруктураДокумента.ПродИмяИП + " " + СтруктураДокумента.ПродОтчествоИП;
    КонецЕсли;
	
	//&lt;&lt;Заполнение данных с учетом выполненных проверок и преобразований&gt;&gt;
	GUIDФайла = Новый УникальныйИдентификатор;
	
	СтруктураДокумента.ИдентификаторЭлДокумента = GUIDФайла;
	
    СтруктураИДФайл = Новый Структура;
	СтруктураИДФайл.Вставить("R_Т"		, СтруктураДокумента.ТипФайла);
	СтруктураИДФайл.Вставить("A"		, СтруктураДокумента.ИдПок);
	СтруктураИДФайл.Вставить("О"		, СтруктураДокумента.ИдОтпр);
	СтруктураИДФайл.Вставить("GGGGMMDD"	, Формат(ТекущаяДата(), "ДФ=yyyyMMdd"));
	СтруктураИДФайл.Вставить("N1"		, GUIDФайла);
	СтруктураИДФайл.Вставить("N2"		, "0");
	СтруктураИДФайл.Вставить("N3"		, "0");
	СтруктураИДФайл.Вставить("N4"		, "0");
	СтруктураИДФайл.Вставить("N5"		, "0");
	СтруктураИДФайл.Вставить("N6"		, "0");
	СтруктураИДФайл.Вставить("N7"		, "00");
	
	Если СтруктураДокумента.ЭтоМаркируемыйЮЗД Тогда	
		ЗаполнитьЗначенияСвойств(СтруктураИДФайл, ВыборкаДокумента);	
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураИДФайл Цикл		 
		СтруктураДокумента.ИдФайл = ?(ПустаяСтрока(СтруктураДокумента.ИдФайл), ЭлементСтруктуры.Значение, СтруктураДокумента.ИдФайл + "_" + ЭлементСтруктуры.Значение);	
	КонецЦикла;
	
    СтруктураДокумента.ФайлИмя	 = СокрЛП(СтруктураДокумента.ИдФайл) + ".xml";
    СтруктураДокумента.GUIDФайла = GUIDФайла;
	
	ДатаФормированияДокумента		= ТекущаяДата();
	СтруктураДокумента.Статус		= "Отправлен";
		
	СтруктураДокумента.ДатаИнфПр    = Формат(ДатаФормированияДокумента, "ДЛФ=Д");
    СтруктураДокумента.ВремИнфПр    = Формат(ДатаФормированияДокумента, "ДФ=ЧЧ.мм.сс");
	СтруктураДокумента.СодОпер      = "Товары переданы";
    СтруктураДокумента.ДатаПер      = СтруктураДокумента.ДатаДокументОснованиеСчФ;
    
    //&lt;ОснПер&gt;
    СтруктураДокумента.ОснПерРеквНаимДок	= СокрЛП(НаименованиеОснования);
    СтруктураДокумента.ОснПерРеквНомерДок   = НомерОснования;
    СтруктураДокумента.ОснПерРеквДатаДок    = ДатаОснования;
    	
	//&lt;ДокПодтвОтгрНом&gt;
	СтруктураДокумента.РеквНаимДок  = "Документ об отгрузке"; 
	СтруктураДокумента.РеквДатаДок 	= ДатаСчФ;
	
	Если ФорматУПД &lt;&gt; "УПД Метро СЧФДОП" Тогда		
		СтруктураДокумента.РеквНомерДок = НомерСчФ;
	Иначе
		СтруктураДокумента.РеквНомерДок = "п/п 1-" + ВыборкаДокумента.КоличествоТоварныхПозиций + ", " + НомерСчФ;
	КонецЕсли;
	
	//&lt;ВсегоОпл&gt;
    СтруктураДокумента.СтТовБезНДСВсего = Формат(СтруктураДокумента.СтТовБезНДСВсего, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=");
    СтруктураДокумента.СтТовУчНалВсего  = Формат(СтруктураДокумента.СтТовУчНалВсего, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=");
	
	Если СтруктураДокумента.СумНал &lt;&gt; 0 Тогда
		СтруктураДокумента.СумНал = Формат(СтруктураДокумента.СумНал , "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=");
	Иначе
		СтруктураДокумента.БезНДС = "без НДС";	
	КонецЕсли; 

    Если ЗначениеЗаполнено(ВыборкаДокумента.ORDER_POSITION) Тогда                                    
	
    	POSITION = ВыборкаДокумента.ORDER_POSITION.Получить(); 
    	
    	Для Каждого СтрокаНоменклатуры Из POSITION Цикл
    		
    		НоваяСтрокаНоменклатуры 		= ДанныеТЧНоменклатурORDER.Добавить();
    		НоваяСтрокаНоменклатуры.Ссылка  = СтруктураДокумента.Ссылка;
    		
    		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры, СтрокаНоменклатуры);
    		
    	КонецЦикла;

    КонецЕсли;
	
КонецЦикла; 

//Возврат РезультатШапкаПодвалУПД;

////////////////--ШАПКА--/////////////////////////////////////

////////////////++РезультатНоменклатур++///////////////////////////////////// 
/// ТЧ - первичный/исправительный УПД
РезультатНоменклатур  = Новый ТаблицаЗначений;

Колонки = Новый Массив;
Колонки.Добавить("Ссылка");
Колонки.Добавить("ТоварМаркируемый");

//&lt;СведТов&gt;
Колонки.Добавить("НомСтр");
Колонки.Добавить("ЦенаТов");
Колонки.Добавить("НаимТов");
Колонки.Добавить("НаимЕдИзм");
Колонки.Добавить("ОКЕИ_Тов");
Колонки.Добавить("КолТов");
Колонки.Добавить("СтТовБезНДС");
Колонки.Добавить("СтТовУчНал");
Колонки.Добавить("НалСт");

//&lt;Акциз&gt;
Колонки.Добавить("СумАкциз");
Колонки.Добавить("АкцизБезАкциз");

//&lt;СумНал&gt;
Колонки.Добавить("СумНал");
Колонки.Добавить("СумНалБезНДС");

//&lt;СвТД&gt;
Колонки.Добавить("НомерДТ");
Колонки.Добавить("КодПроисх"); 

//&lt;ДопСведТов&gt;
Колонки.Добавить("ПрТовРаб");
Колонки.Добавить("КрНаимСтрПр"); 	// Обязателен при наличии КодПроисх.
Колонки.Добавить("ХарактерТов");	// Для &lt;Функция&gt;=ДОП Обязателен при отсутствии НаимТов и КодТов и АртикулТов. 
Колонки.Добавить("АртикулТов"); 	// Для &lt;Функция&gt;=ДОП Обязателен при отсутствии НаимТов и ХарактерТов и КодТов
Колонки.Добавить("КодТов");  		// Для &lt;Функция&gt;=ДОП Обязателен при отсутствии НаимТов и ХарактерТов и АртикулТов.
Колонки.Добавить("ГТИН");

//&lt;НомСредИдентТов&gt;
Колонки.Добавить("НомСредИдентТов");

//&lt;ИнфПолФХЖ2&gt;
Колонки.Добавить("ИнфПолСтр");


Для Каждого Колонка Из Колонки Цикл
	РезультатНоменклатур.Колонки.Добавить(Колонка);
КонецЦикла;

ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
                          |	ТаблицаДанныхИсточник.Ссылка КАК Ссылка,
                          |	ТаблицаДанныхИсточник.Организация КАК Организация,
                          |	ТаблицаДанныхИсточник.Контрагент КАК Контрагент,
                          |	ТаблицаДанныхИсточник.СуммаВключаетНДС КАК СуммаВключаетНДС,
                          |	ТаблицаДанныхИсточник.СчетПокупателю КАК СчетПокупателю,
                          |	ТаблицаДанныхИсточник.ДокументОснованиеСЧФ КАК ДокументОснованиеСЧФ,
                          |	ТаблицаДанныхИсточник.ДатаДокументОснованиеСЧФ КАК ДатаДокументОснованиеСЧФ,
                          |	ТаблицаДанныхИсточник.НомерДокументОснованиеСЧФ КАК НомерДокументОснованиеСЧФ,
                          |	ТаблицаДанныхИсточник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                          |	ТаблицаДанныхИсточник.ЭтоМаркируемыйЮЗД КАК ЭтоМаркируемыйЮЗД,
                          |	ТаблицаДанныхИсточник.ORDER_NUMBER КАК ORDER_NUMBER,
                          |	ТаблицаДанныхИсточник.ORDER_DATE КАК ORDER_DATE,
                          |	ТаблицаДанныхИсточник.ORDER_CAMPAIGNNUMBER КАК ORDER_CAMPAIGNNUMBER,
                          |	ТаблицаДанныхИсточник.RECADV_NUMBER КАК RECADV_NUMBER,
                          |	ТаблицаДанныхИсточник.RECADV_DATE КАК RECADV_DATE,
                          |	ТаблицаДанныхИсточник.КонтрагентЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
                          |	ТаблицаДанныхИсточник.ФорматУПД КАК ФорматУПД,
                          |	ТаблицаДанныхИсточник.ИнфоПоля КАК ИнфоПоля
                          |ПОМЕСТИТЬ Источник
                          |ИЗ
                          |	&amp;ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ДанныеТЧНоменклатурORDER.Ссылка КАК Ссылка,
                          |	ДанныеТЧНоменклатурORDER.Номенклатура КАК Номенклатура,
                          |	ДанныеТЧНоменклатурORDER.POSITIONNUMBER КАК POSITIONNUMBER,
                          |	ДанныеТЧНоменклатурORDER.QUANTITYOFCUINTU КАК QUANTITYOFCUINTU,
                          |	ДанныеТЧНоменклатурORDER.INFO КАК INFO
                          |ПОМЕСТИТЬ ВТ_НоменклатураORDER
                          |ИЗ
                          |	&amp;ДанныеТЧНоменклатурORDER КАК ДанныеТЧНоменклатурORDER
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |	Ссылка,
                          |	Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	Источник.Ссылка КАК Ссылка,
                          |	МИНИМУМ(РеализацияТоваровУслугТовары.НомерСтроки) КАК НомерСтроки,
                          |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
                          |	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
                          |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
                          |	РеализацияТоваровУслугТовары.Цена КАК Цена,
                          |	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
                          |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
                          |	СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
                          |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Код КАК ОКЕИ_Тов,
                          |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование КАК НаименованиеЕдиницыИзмерения,
                          |	"""" КАК НомерГТД,
                          |	"""" КАК КодПроисх,
                          |	"""" КАК КрНаимСтрПр
                          |ПОМЕСТИТЬ ВТ_ДанныеТабличнойЧасти
                          |ИЗ
                          |	Источник КАК Источник
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                          |		ПО (Источник.ДокументОснованиеСЧФ = РеализацияТоваровУслугТовары.Ссылка)
                          |ГДЕ
                          |	РеализацияТоваровУслугТовары.Цена &gt; 0
                          |
                          |СГРУППИРОВАТЬ ПО
                          |	Источник.Ссылка,
                          |	РеализацияТоваровУслугТовары.Номенклатура,
                          |	РеализацияТоваровУслугТовары.Номенклатура.Наименование,
                          |	РеализацияТоваровУслугТовары.Цена,
                          |	РеализацияТоваровУслугТовары.СтавкаНДС,
                          |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Код,
                          |	РеализацияТоваровУслугТовары.ЕдиницаИзмерения.Наименование
                          |
                          |ОБЪЕДИНИТЬ ВСЕ
                          |
                          |ВЫБРАТЬ
                          |	Источник.Ссылка,
                          |	МИНИМУМ(РеализацияТоваровУслугУслуги.НомерСтроки),
                          |	РеализацияТоваровУслугУслуги.Номенклатура,
                          |	РеализацияТоваровУслугУслуги.Номенклатура.Наименование,
                          |	СУММА(РеализацияТоваровУслугУслуги.Количество),
                          |	РеализацияТоваровУслугУслуги.Цена,
                          |	СУММА(РеализацияТоваровУслугУслуги.Сумма),
                          |	РеализацияТоваровУслугУслуги.СтавкаНДС,
                          |	СУММА(РеализацияТоваровУслугУслуги.СуммаНДС),
                          |	КлассификаторЕдиницИзмерения.Код,
                          |	КлассификаторЕдиницИзмерения.Наименование,
                          |	"""",
                          |	"""",
                          |	""""
                          |ИЗ
                          |	Источник КАК Источник
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
                          |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
                          |			ПО (РеализацияТоваровУслугУслуги.Номенклатура.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка)
                          |		ПО (Источник.ДокументОснованиеСЧФ = РеализацияТоваровУслугУслуги.Ссылка)
                          |ГДЕ
                          |	РеализацияТоваровУслугУслуги.Цена &gt; 0
                          |
                          |СГРУППИРОВАТЬ ПО
                          |	Источник.Ссылка,
                          |	РеализацияТоваровУслугУслуги.Номенклатура,
                          |	РеализацияТоваровУслугУслуги.Номенклатура.Наименование,
                          |	РеализацияТоваровУслугУслуги.Цена,
                          |	РеализацияТоваровУслугУслуги.СтавкаНДС,
                          |	КлассификаторЕдиницИзмерения.Код,
                          |	КлассификаторЕдиницИзмерения.Наименование
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |	Ссылка
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	Источник.Ссылка КАК Ссылка,
                          |	ВТ_ДанныеТабличнойЧасти.Номенклатура КАК Номенклатура,
                          |	ВЫРАЗИТЬ(DR_ТипТоварнойГруппы.Значение КАК СТРОКА(2)) КАК ТипТоварнойГруппыПодотчетнойПродукции,
                          |	ВЫРАЗИТЬ(DR_ВидУчета.Значение КАК СТРОКА(50)) КАК ВидУчетаПодотчетнойПродукции,
                          |	ИСТИНА КАК ТоварМаркируемый
                          |ПОМЕСТИТЬ ВТ_МаркируемыйТовар
                          |ИЗ
                          |	Источник КАК Источник
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеТабличнойЧасти КАК ВТ_ДанныеТабличнойЧасти
                          |		ПО (Источник.ЭтоМаркируемыйЮЗД = ИСТИНА)
                          |			И Источник.Ссылка = ВТ_ДанныеТабличнойЧасти.Ссылка
                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК DR_НоменклатураКонтрагентов
                          |		ПО Источник.Контрагент = DR_НоменклатураКонтрагентов.Контрагент
                          |			И (ВТ_ДанныеТабличнойЧасти.Номенклатура = DR_НоменклатураКонтрагентов.Номенклатура)
                          |			И (НЕ DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции = ЗНАЧЕНИЕ(Справочник.DR_Настройки.ПустаяСсылка))
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ВидУчета
                          |		ПО (DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции = DR_ВидУчета.Ссылка)
                          |			И (DR_ВидУчета.Реквизит = ""ВидУчета"")
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ТипТоварнойГруппы
                          |		ПО (DR_НоменклатураКонтрагентов.ВидПодотчетнойПродукции = DR_ТипТоварнойГруппы.Ссылка)
                          |			И (DR_ТипТоварнойГруппы.Реквизит = ""ТипТоварнойГруппы"")
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |	Источник.Ссылка,
                          |	ВТ_ДанныеТабличнойЧасти.Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ПРЕДСТАВЛЕНИЕ(Источник.Ссылка) КАК ПредставлениеСЧФ,
                          |	Источник.Ссылка КАК Ссылка,
                          |	Источник.ДокументОснованиеСЧФ КАК ДокументОснованиеСЧФ,
                          |	Источник.ДатаДокументОснованиеСЧФ КАК ДатаДокументОснованиеСЧФ,
                          |	Источник.НомерДокументОснованиеСЧФ КАК НомерДокументОснованиеСЧФ,
                          |	Источник.Организация КАК Организация,
                          |	Источник.Контрагент КАК Контрагент,
                          |	Источник.СуммаВключаетНДС КАК СуммаВключаетНДС,
                          |	Источник.СчетПокупателю КАК СчетПокупателю,
                          |	Источник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                          |	Источник.ORDER_NUMBER КАК ORDER_NUMBER,
                          |	Источник.ORDER_DATE КАК ORDER_DATE,
                          |	Источник.ORDER_CAMPAIGNNUMBER КАК ORDER_CAMPAIGNNUMBER,
                          |	Источник.RECADV_NUMBER КАК RECADV_NUMBER,
                          |	Источник.RECADV_DATE КАК RECADV_DATE,
                          |	Источник.КонтрагентЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
                          |	Источник.ФорматУПД КАК ФорматУПД,
                          |	Источник.ИнфоПоля КАК ИнфоПоля,
                          |	ДанныеТабличнойЧасти.Номенклатура КАК Номенклатура,
                          |	ДанныеТабличнойЧасти.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
                          |	ДанныеТабличнойЧасти.Номенклатура.Код КАК КодНоменклатурыПоставщика,
                          |	ДанныеТабличнойЧасти.Номенклатура.Артикул КАК АртикулНоменклатурыПоставщика,
                          |	ДанныеТабличнойЧасти.Количество КАК Количество,
                          |	ДанныеТабличнойЧасти.Цена КАК Цена,
                          |	ДанныеТабличнойЧасти.Сумма КАК Сумма,
                          |	ДанныеТабличнойЧасти.СтавкаНДС КАК СтавкаНДС,
                          |	ДанныеТабличнойЧасти.СуммаНДС КАК СуммаНДС,
                          |	ДанныеТабличнойЧасти.КодПроисх КАК КодПроисх,
                          |	ДанныеТабличнойЧасти.НомерДТ КАК НомерДТ,
                          |	ДанныеТабличнойЧасти.КрНаимСтрПр КАК КрНаимСтрПр,
                          |	ДанныеТабличнойЧасти.ОКЕИ_Тов КАК ОКЕИ_Тов,
                          |	ДанныеТабличнойЧасти.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
                          |	DR_НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК АртикулНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента КАК НаименованиеНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК ШтрихкодНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.GTIN КАК GTIN,
                          |	ЕСТЬNULL(DR_POSITION.QUANTITYOFCUINTU, """") КАК КоличествоВУпаковке,
                          |	ЕСТЬNULL(DR_POSITION.POSITIONNUMBER, """") КАК НомерПозицииORDER,
                          |	ЕСТЬNULL(DR_POSITION.INFO, """") КАК Информация,
                          |	ЕСТЬNULL(ВТ_МаркируемыйТовар.ТоварМаркируемый, ЛОЖЬ) КАК ТоварМаркируемый,
                          |	ЕСТЬNULL(ВТ_МаркируемыйТовар.ТипТоварнойГруппыПодотчетнойПродукции, """") КАК ТипТоварнойГруппы,
                          |	ЕСТЬNULL(ВТ_МаркируемыйТовар.ВидУчетаПодотчетнойПродукции, """") КАК ВидУчетаПодотчетнойПродукции
                          |ИЗ
                          |	Источник КАК Источник
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеТабличнойЧасти КАК ДанныеТабличнойЧасти
                          |		ПО Источник.Ссылка = ДанныеТабличнойЧасти.Ссылка
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураORDER КАК DR_POSITION
                          |		ПО Источник.Ссылка = DR_POSITION.Ссылка
                          |			И (ДанныеТабличнойЧасти.Номенклатура = DR_POSITION.Номенклатура)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК DR_НоменклатураКонтрагентов
                          |		ПО Источник.Контрагент = DR_НоменклатураКонтрагентов.Контрагент
                          |			И (ДанныеТабличнойЧасти.Номенклатура = DR_НоменклатураКонтрагентов.Номенклатура)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркируемыйТовар КАК ВТ_МаркируемыйТовар
                          |		ПО Источник.Ссылка = ВТ_МаркируемыйТовар.Ссылка
                          |			И (ДанныеТабличнойЧасти.Номенклатура = ВТ_МаркируемыйТовар.Номенклатура)
                          |
                          |УПОРЯДОЧИТЬ ПО
                          |	Источник.Ссылка,
                          |	ДанныеТабличнойЧасти.НомерСтроки";

СписокКолонок = "ДокументОснованиеСчФ, ДатаДокументОснованиеСчФ, СчетПокупателю, ИдентификаторЦепочки, 
				| ИнфоПоля, КонтрагентЭСФБезИнфПоля, Контрагент, НомерДокументОснованиеСчФ, Организация, 
				| Ссылка, СуммаВключаетНДС, ФорматУПД, ЭтоМаркируемыйЮЗД, ORDER_NUMBER, 
				| ORDER_DATE, ORDER_CAMPAIGNNUMBER, RECADV_NUMBER, RECADV_DATE";

ЗапросНоменклатур.УстановитьПараметр("ТаблицаДанныхИсточник"	, РезультатШапкаПодвалУПД.Скопировать(,СписокКолонок));
ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурORDER"	, ДанныеТЧНоменклатурORDER);

РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить();

ВыборкаНоменклатур = РезультатЗапросаНоменклатур.Выбрать();

//&lt;Служебные переменные&gt;
СсылкаСчф = Неопределено;
НомерСтроки = 0;

Пока ВыборкаНоменклатур.Следующий() Цикл

	НоваяПозиция = РезультатНоменклатур.Добавить();

	НоваяПозиция.Ссылка = ВыборкаНоменклатур.Ссылка;
	
	Если СсылкаСчф = Неопределено Тогда
		СсылкаСчф = НоваяПозиция.Ссылка;	
	КонецЕсли;
	
	Если СсылкаСчф = НоваяПозиция.Ссылка Тогда
		НомерСтроки = НомерСтроки + 1;		
	Иначе
		НомерСтроки = 1;
		СсылкаСчф = НоваяПозиция.Ссылка
	КонецЕсли;
	
	НоваяПозиция.НомСтр = Формат(НомерСтроки, "ЧГ=0");
	НоваяПозиция.НаимТов = СокрЛП(ВыборкаНоменклатур.НаименованиеНоменклатуры);

	НоваяПозиция.КодТов = ВыборкаНоменклатур.ШтрихкодНоменклатурыКонтрагента;

	КодПроисх   = ВРег(СокрЛП(ВыборкаНоменклатур.КодПроисх));
	КодПроисх   = ?(ПустаяСтрока(КодПроисх), "643", КодПроисх);
	НоваяПозиция.КодПроисх = КодПроисх;

	КрНаимСтрПр = ВРег(СокрЛП(ВыборкаНоменклатур.КрНаимСтрПр));
	КрНаимСтрПр = ?(ПустаяСтрока(КрНаимСтрПр), "RU", КрНаимСтрПр);
	НоваяПозиция.КрНаимСтрПр = КрНаимСтрПр;

	Если НЕ КрНаимСтрПр = "RU" Тогда
		НоваяПозиция.НомерДТ = ВыборкаНоменклатур.НомерДТ;
	КонецЕсли;

	ЗначПеречСтавкиНДС = Перечисления.СтавкиНДС.ПустаяСсылка().Метаданные().ЗначенияПеречисления;
	
	НалСт = ЗначПеречСтавкиНДС.Получить(Перечисления.СтавкиНДС.Индекс(ВыборкаНоменклатур.СтавкаНДС)).Синоним;
	НоваяПозиция.НалСт = НалСт;

	НоваяПозиция.ОКЕИ_Тов = СокрЛП(ВыборкаНоменклатур.ОКЕИ_Тов);
	НоваяПозиция.КолТов = Формат(ВыборкаНоменклатур.Количество, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");

	Если ВыборкаНоменклатур.СуммаВключаетНДС Тогда
		СтТовБезНДС = ВыборкаНоменклатур.Сумма - ВыборкаНоменклатур.СуммаНДС;
		ЦенаБезНДС  = Окр((ВыборкаНоменклатур.Цена * 100)/(100 + СтавкаНДСЧислом(ВыборкаНоменклатур.СтавкаНДС)), 2);
		СтТовУчНал = ВыборкаНоменклатур.Сумма;
	Иначе
		СтТовБезНДС = ВыборкаНоменклатур.Сумма;
		ЦенаБезНДС = ВыборкаНоменклатур.Цена;
		СтТовУчНал = ВыборкаНоменклатур.Сумма + ВыборкаНоменклатур.СуммаНДС;
	КонецЕсли;

	НоваяПозиция.СтТовБезНДС 	= Формат(СтТовБезНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	НоваяПозиция.СтТовУчНал 	= Формат(СтТовУчНал, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
    НоваяПозиция.СумНал 		= Формат(ВыборкаНоменклатур.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
    НоваяПозиция.СумНалБезНДС 	= ?(НалСт = "Без НДС", "без НДС", "");

	НоваяПозиция.ЦенаТов = Формат(ЦенаБезНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");

	НоваяПозиция.НаимЕдИзм = СокрЛП(ВыборкаНоменклатур.НаименованиеЕдиницыИзмерения);
	НоваяПозиция.ПрТовРаб = "1";
	НоваяПозиция.АкцизБезАкциз = "без акциза"; 

	//&lt;Служебные переменные&gt;
	НомерРасходнойНакладной = ВыборкаНоменклатур.НомерДокументОснованиеСЧФ;
	ДатаРасходнойНакладной  = ВыборкаНоменклатур.ДатаДокументОснованиеСЧФ;
	
	Если Найти(ФорматУПД, "УПД Метро") &gt; 0 Тогда
		КодТовараПоставщика 	= СокрЛП(ВыборкаНоменклатур.АртикулНоменклатурыПоставщика);
	Иначе
		КодТовараПоставщика 	= СокрЛП(ВыборкаНоменклатур.КодНоменклатурыПоставщика);
	КонецЕсли; 
	
	КодТовараПокупателя 	= СокрЛП(ВыборкаНоменклатур.КодНоменклатурыКонтрагента);
	КоличествоВУпаковке 	= ?(СокрЛП(ВыборкаНоменклатур.КоличествоВУпаковке) &lt;&gt; "0", ВыборкаНоменклатур.КоличествоВУпаковке, "");
	
	ФорматУПД 	= СокрЛП(ВыборкаНоменклатур.ФорматУПД);
	Штрихкод 	= СокрЛП(ВыборкаНоменклатур.ШтрихкодНоменклатурыКонтрагента);
	
	ДанныеИнфополя = Новый Соответствие;
	ДанныеИнфоПоля.Вставить("CAMPAIGNNUMBER"               , СокрЛП(ВыборкаНоменклатур.ORDER_CAMPAIGNNUMBER));
	ДанныеИнфоПоля.Вставить("дата_накладной"               , ДатаРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_уведомления_об_отгрузке", НомерРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_накладной"              , НомерРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_отгрузки"               , НомерРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_акта"                   , ВыборкаНоменклатур.RECADV_NUMBER);
	ДанныеИнфоПоля.Вставить("дата_акта"                    , ВыборкаНоменклатур.RECADV_DATE);
	ДанныеИнфоПоля.Вставить("номер_заказа"                 , ВыборкаНоменклатур.ORDER_NUMBER);
	ДанныеИнфоПоля.Вставить("дата_заказа"                  , ВыборкаНоменклатур.ORDER_DATE);
	ДанныеИнфоПоля.Вставить("код_материала"                , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("код_материала_заказчика"      , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("Артикул"				       , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("штрихкод"                     , Штрихкод);
	ДанныеИнфоПоля.Вставить("артикул_поставщика"           , КодТовараПоставщика);
	ДанныеИнфоПоля.Вставить("вложенность_кол"              , КоличествоВУпаковке);
	ДанныеИнфоПоля.Вставить("вложенность_океи"             , ВыборкаНоменклатур.Информация);
    ДанныеИнфоПоля.Вставить("позиция_заказа"               , СокрЛП(ВыборкаНоменклатур.НомерПозицииORDER));
	ДанныеИнфоПоля.Вставить("код_продавца"                 , КодТовараПоставщика);
    ДанныеИнфоПоля.Вставить("КдВЕРНЫЙ"                     , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("SKU"                          , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("Штрих-код"                    , Штрихкод);
	ДанныеИнфоПоля.Вставить("EAN_код"	                   , Штрихкод);
	ДанныеИнфоПоля.Вставить("КодПокупателя"                , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("ID товара"     	           , КодТовараПокупателя);

	СоответсвияИнфоПолей = ПолучитьСтруктуруИнфоПолейИзСправочника("ИнфПолФХЖ2", ВыборкаНоменклатур.ИнфоПоля, ДанныеИнфополя, ВыборкаНоменклатур.КонтрагентЭСФБезИнфПоля);

	Если СоответсвияИнфоПолей = Неопределено Тогда
		
		ТекстЛогаСобытий = "Не заполнены обязательные инфо поля &lt;&lt;&lt;ИнфПолФХЖ2&gt;&gt;&gt;! Формат ЮЗД - " + ФорматУПД;
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		
		СтрокаСчетфактура = РезультатШапкаПодвалУПД.Найти(НоваяПозиция.Ссылка, "Ссылка");
		
		Если СтрокаСчетфактура &lt;&gt; Неопределено Тогда 
			РезультатШапкаПодвалУПД.Удалить(СтрокаСчетфактура);
		КонецЕсли;

		Продолжить;
	КонецЕсли;

	НоваяПозиция.ИнфПолСтр = СоответсвияИнфоПолей;
	
	//&lt;НомСредИдентТов - Тип Массив т.к. может быть множественное использование&gt;
	НомСредИдентТов = Новый Массив;
	
	НоваяПозиция.ТоварМаркируемый = ВыборкаНоменклатур.ТоварМаркируемый;
	
	// Структура данных НомСредИдентТов:
    //	- СтруктураКодов:
	//		Ключ - ИдентТрансУпак; Значение - тип Строка; &lt;&lt;&lt; Элемент обязателен при отсутствии &lt;КИЗ&gt;, &lt;КолВедМарк&gt; и &lt;НомУпак&gt; &gt;&gt;&gt;
	//		Ключ - КолВедМарк; Значение - тип Строка;	  &lt;&lt;&lt; Элемент обязателен при отсутствии &lt;КИЗ&gt;, &lt;НомУпак&gt;, &lt;ИдентТрансУпак&gt; &gt;&gt;&gt;
	//		Ключ - ПрПартМарк; Значение - тип Строка;     &lt;&lt;&lt; Производственная партия (КОД) &gt;&gt;&gt;
	//		Ключ - НомУпак; Значение - Тип Массив; 		  &lt;&lt;&lt; Элемент обязателен при отсутствии &lt;КИЗ&gt;, &lt;ИдентТрансУпак&gt; и &lt;КолВедМарк&gt; &gt;&gt;&gt;
	//		Ключ - КИЗ; Значение - Тип Массив;            &lt;&lt;&lt; Элемент обязателен при отсутствии &lt;ИдентТрансУпак&gt;, &lt;НомУпак&gt; и &lt;КолВедМарк&gt; &gt;&gt;&gt;
	 
	 // Примечание:
	 // 1. Блок условия "ТоварМаркируемый" может быть обернут в дополнительный цикл.
	 // 2. Не зависимо от количества уровней, а так же количества агрегации, 
	 //    структура данных НомСредИдентТов должна соответствовать структуре описанной выше.
	
	Если ВыборкаНоменклатур.ТоварМаркируемый Тогда
		
		СтруктураКодов = Новый Структура;
		
		// &lt;ИдентТрансУпак - Заполнить при необходимости&gt;
		СтруктураКодов.Вставить("ИдентТрансУпак");
		
		// &lt;КолВедМарк - Заполнить при необходимости&gt;
		СтруктураКодов.Вставить("КолВедМарк");
		
		// Служебные переменные
		ЭтоТабак = ВыборкаНоменклатур.ТипТоварнойГруппы = "N5";		
		ЭтоОСУ 	 = ВыборкаНоменклатур.ВидУчетаПодотчетнойПродукции = "Объемно-сортовой";		
		
		Если ЭтоОСУ И ЭтоТабак Тогда
		    
			ТекстЛогаСобытий = "УПД к " + ВыборкаНоменклатур.ПредставлениеСчф + " не сформирован! " 
								+ "По номенклатуре """ + НоваяПозиция.НаимТов + """ не корректно заполнен Вид учета. "
								+ "Для Типа товарной группы: Табачная продукция, поддерживается только поэкземплярный учет.";
			
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			
			СтрокаСчетфактура = РезультатШапкаПодвалУПД.Найти(НоваяПозиция.Ссылка, "Ссылка");
			
			Если СтрокаСчетфактура &lt;&gt; Неопределено Тогда 
				РезультатШапкаПодвалУПД.Удалить(СтрокаСчетфактура);
			КонецЕсли;

			Продолжить;
		    
		КонецЕсли;
		
		Если ЭтоОСУ Тогда
			
			НоваяПозиция.ГТИН = Штрихкод;
			
			Если СтрДлина(Штрихкод) &lt;&gt; 14 Тогда
    			НоваяПозиция.ГТИН = Формат(Число(Штрихкод),"ЧЦ=14; ЧВН=; ЧГ=");
			КонецЕсли;
			
			КолВедМарк = XMLСтрока(Окр(ВыборкаНоменклатур.Количество, 0, РЕжимОкругления.Окр15как20));			
			СтруктураКодов.КолВедМарк = КолВедМарк;
			
		КонецЕсли;
				
		//&lt;ПрПартМарк - Заполнить при необходимости&gt;
		СтруктураКодов.Вставить("ПрПартМарк");
				
		//&lt;НомУпак - Тип Массив т.к. может быть множественное использование&gt;
		НомУпак = Новый Массив;
		//&lt;НомУпак - Заполнить при необходимости&gt;
		//НомУпак.Добавить("010460043994JddfF05160000");
		//..........
		
		//&lt;КИЗ - Тип Массив т.к. может быть множественное использование&gt;
		КИЗ = Новый Массив;
		//&lt;КИЗ - Заполнить при необходимости&gt;
		//...........
		//...........
		
		СтруктураКодов.Вставить("НомУпак"	, НомУпак);
		СтруктураКодов.Вставить("КИЗ"		, КИЗ);
				
		НомСредИдентТов.Добавить(СтруктураКодов);
		
	КонецЕсли;

	НоваяПозиция.НомСредИдентТов = НомСредИдентТов;

КонецЦикла;

//Возврат РезультатШапкаПодвалУПД;
  
////////////////--РезультатНоменклатур--/////////////////////////////////////

//////////////////++СОЗДАНИЕ_XML++///////////////////////////////////  

ОбязательныеРеквизиты = Новый СписокЗначений;
//Ключ - Имя реквизита
//Значение - Вложенность элемента в XML
//пометка - Признак обязательности  

ОбязательныеРеквизиты.Добавить("Документ", "Документ", Истина);
ОбязательныеРеквизиты.Добавить("ГрузОт"	, "ГрузОт", Истина);
//Указать список обязательных реквизитов согласно спецификации
//Опционально: добавить проверку наличия колонок в результирующих 
//таблицах, чтобы исключить блокировку транзакции и пропустить создание документов.

Для каждого СтрокаШапкиДокумента из РезультатШапкаПодвалУПД Цикл 

	ТекстОшибкиПроверкиОбязательныхПолей = "";

    СтруктураДок = Новый Структура;
    	
    	//+Файл 
	    СтруктураФайл = Новый Структура;
	    СписокЗначенийФайл = Новый СписокЗначений;
	    СписокЗначенийФайл.Добавить("ИдФайл"	, СтрокаШапкиДокумента.ИдФайл);
	    СписокЗначенийФайл.Добавить("ВерсПрог"	, СтрокаШапкиДокумента.ВерсПрог);
	    СписокЗначенийФайл.Добавить("ВерсФорм"	, СтрокаШапкиДокумента.ВерсФорм);
	    СтруктураФайл.Вставить("Файл", СписокЗначенийФайл); //Верхний Уровень		   
		
			//+Документ
	    	СтруктураДокумент = Новый Структура;
		    СписокЗначенийДокумент = Новый СписокЗначений;
		    СписокЗначенийДокумент.Добавить("КНД"				, СтрокаШапкиДокумента.КНД);
		    СписокЗначенийДокумент.Добавить("Функция"			, СтрокаШапкиДокумента.ДокФункция);
		    СписокЗначенийДокумент.Добавить("ПоФактХЖ"			, СтрокаШапкиДокумента.ПоФактХЖ);
		    СписокЗначенийДокумент.Добавить("НаимДокОпр"		, СтрокаШапкиДокумента.НаимДокОпр);
		    СписокЗначенийДокумент.Добавить("ДатаИнфПр"			, СтрокаШапкиДокумента.ДатаИнфПр);
		    СписокЗначенийДокумент.Добавить("ВремИнфПр"			, СтрокаШапкиДокумента.ВремИнфПр);
		    СписокЗначенийДокумент.Добавить("НаимЭконСубСост"	, СтрокаШапкиДокумента.НаимЭконСубСост); 
		    СтруктураДокумент.Вставить("Документ", СписокЗначенийДокумент);
		    
		    	///////////////////////////////////////////+СвСчФакт//////////////////////////////////////////////////// 
		    	СтруктураСвСчФакт = Новый Структура;
			    СписокЗначенийСвСчФакт = Новый СписокЗначений;
			    СписокЗначенийСвСчФакт.Добавить("НомерДок"	, СтрокаШапкиДокумента.НомерДок);
			    СписокЗначенийСвСчФакт.Добавить("ДатаДок"	, СтрокаШапкиДокумента.ДатаДок);			      
			    СтруктураСвСчФакт.Вставить("СвСчФакт", СписокЗначенийСвСчФакт);
				
					//+ИспрДок
			    	СтруктураИспрДок = Новый Структура;
			    	СписокЗначенийИспрДок = Новый СписокЗначений;
					
					Если СтрокаШапкиДокумента.ЭтоИсправление Тогда
						СписокЗначенийИспрДок.Добавить("НомИспр"	, СтрокаШапкиДокумента.НомИспр);
			    		СписокЗначенийИспрДок.Добавить("ДатаИспр"	, СтрокаШапкиДокумента.ДатаИспр);
					КонецЕсли;					
			    	  
			    	СтруктураИспрДок.Вставить("ИспрДок"		, СписокЗначенийИспрДок);
  	    	     	СтруктураСвСчФакт.Вставить("ИспрДок"	, СтруктураИспрДок);//Вложенность "Файл.Документ"
	    			//-ИспрДок   
					
					//+СвПрод  
			    	СтруктураСвПрод = Новый Структура;
					
						//+ИдСв
			    		СтруктураИдСв = Новый Структура;
						
						Если СтрокаШапкиДокумента.ПродТипОрганизации = "ЮЛ" Тогда
							
							//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг"	, СтрокаШапкиДокумента.ПродНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПродИННЮЛ);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"		, СтрокаШапкиДокумента.ПродКПП);
							
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч"	, СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч"		, СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.ИдСв"
			    	    	//-СвЮЛУч
							
						ИначеЕсли СтрокаШапкиДокумента.ПродТипОрганизации = "ИП" Тогда
							
							//+СвИП
							СтруктураСвИП = Новый Структура;
							СписокЗначенийСвИП = Новый СписокЗначений;
							СписокЗначенийСвИП.Добавить("ИННФЛ"			, СтрокаШапкиДокумента.ПродИННФЛ);
			    			СписокЗначенийСвИП.Добавить("СвГосРегИП"	, СтрокаШапкиДокумента.ПродСвГосРегИП);
							СтруктураСвИП.Вставить("СвИП", СписокЗначенийСвИП);
							
								//+ФИО
								СтруктураФИО= Новый Структура;
								СписокЗначенийФИО = Новый СписокЗначений;
								СписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПродФамилияИП);
				    			СписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПродИмяИП);
								СписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПродОтчествоИП);
								СтруктураСвИП.Вставить("ФИО", СтруктураФИО); //Вложенность "Файл.Документ.СвСчФакт.СвПрод.ИдСв.СвИП"
							    //-ФИО
								
							СтруктураИдСв.Вставить("СвИП", СтруктураСвИП);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.ИдСв"
							//-СвИП
							
						КонецЕсли;
						
						СтруктураСвПрод.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-ИдСв
						
						//+Адрес
			    		СтруктураАдрес = Новый Структура;
						
							//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"		, СтрокаШапкиДокумента.ПродИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион"	, СтрокаШапкиДокумента.ПродКодРегион);
							СписокЗначенийАдрРФ.Добавить("НаимРегион"	, СтрокаШапкиДокумента.ПродНаимРегион);
							СписокЗначенийАдрРФ.Добавить("Район"		, СтрокаШапкиДокумента.ПродРайон);
			    			СписокЗначенийАдрРФ.Добавить("Город"		, СтрокаШапкиДокумента.ПродГород);
							СписокЗначенийАдрРФ.Добавить("НаселПункт"	, СтрокаШапкиДокумента.ПродНаселПункт);
							СписокЗначенийАдрРФ.Добавить("Улица"		, СтрокаШапкиДокумента.ПродУлица);
							СписокЗначенийАдрРФ.Добавить("Дом"			, СтрокаШапкиДокумента.ПродДом);
							СписокЗначенийАдрРФ.Добавить("Корпус"		, СтрокаШапкиДокумента.ПродКорпус);
							СписокЗначенийАдрРФ.Добавить("Кварт"		, СтрокаШапкиДокумента.ПродКварт);
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.Адрес"
			    	    	//-АдрРФ
							
			    		СтруктураСвПрод.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-Адрес
						
					СтруктураСвСчФакт.Вставить("СвПрод", СтруктураСвПрод);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-СвПрод
					
					//+ГрузОт                                        
			    	СтруктураГрузОт = Новый Структура;  	    	
					
						Если СтрокаШапкиДокумента.ГрузоотправительТип = "ОнЖе" Тогда  //если грузоотправителем является продавец, достаточно указать "он же"
				    		//+ОнЖе   		    	
				    	    СтруктураГрузОт.Вставить("ОнЖе", СтрокаШапкиДокумента.ГрузоотправительОнЖе);
				    		//-ОнЖе
				    	Иначе
							
							//+ИдСв
				    		СтруктураИдСв = Новый Структура;
							
								//+СвЮЛУч
				    	    	СтруктураСвЮЛУч = Новый Структура;
				    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
				    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг", СтрокаШапкиДокумента.ПродНаимОрг);
				    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПродИННЮЛ);
				    			СписокЗначенийСвЮЛУч.Добавить("КПП"	, СтрокаШапкиДокумента.ПродКПП);
				    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
				    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.ГрузОт.ИдСв"
				    	    	//-СвЮЛУч
								
				    		СтруктураГрузОт.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.ГрузОт"
	  	    	     		//-ИдСв
							
	  	    	     		//+Адрес
				    		СтруктураАдрес = Новый Структура;
							
							//+АдрРФ
				    	    	СтруктураАдрРФ = Новый Структура;
				    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
				    			СписокЗначенийАдрРФ.Добавить("Индекс"		, СтрокаШапкиДокумента.ПродИндекс);
				    			СписокЗначенийАдрРФ.Добавить("КодРегион"	, СтрокаШапкиДокумента.ПродКодРегион);								
								СписокЗначенийАдрРФ.Добавить("НаимРегион"	, СтрокаШапкиДокумента.ПродНаимРегион);
								СписокЗначенийАдрРФ.Добавить("Район"		, СтрокаШапкиДокумента.ПродРайон);
				    			СписокЗначенийАдрРФ.Добавить("Город"		, СтрокаШапкиДокумента.ПродГород);
								СписокЗначенийАдрРФ.Добавить("НаселПункт"	, СтрокаШапкиДокумента.ПродНаселПункт);
								СписокЗначенийАдрРФ.Добавить("Улица"		, СтрокаШапкиДокумента.ПродУлица);
								СписокЗначенийАдрРФ.Добавить("Дом"			, СтрокаШапкиДокумента.ПродДом);
								СписокЗначенийАдрРФ.Добавить("Корпус"		, СтрокаШапкиДокумента.ПродКорпус);
								СписокЗначенийАдрРФ.Добавить("Кварт"		, СтрокаШапкиДокумента.ПродКварт);
				    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
				    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.ГрузОт.Адрес"
				    	    	//-АдрРФ
								
				    		СтруктураГрузОт.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.ГрузОт"
	  	    	     		//-Адрес
							
						КонецЕсли;
						
					СтруктураСвСчФакт.Вставить("ГрузОт", СтруктураГрузОт);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-ГрузОт
					
					//+ГрузПолуч  
			    	СтруктураГрузПолуч = Новый Структура;
					
						//+ИдСв
			    		СтруктураИдСв = Новый Структура;
						
						Если СтрокаШапкиДокумента.ГрузополучательТип = "ЮЛ" Тогда
							
							//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг"	, СтрокаШапкиДокумента.ГрузополучательНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ГрузополучательИННЮЛ);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"		, СтрокаШапкиДокумента.ГрузополучательКПП);
							
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.ГрузПолуч.ИдСв"
			    	    	//-СвЮЛУч
							
						ИначеЕсли СтрокаШапкиДокумента.ГрузополучательТип = "ИП" Тогда
							
							//+СвИП
							СтруктураСвИП = Новый Структура;
							СписокЗначенийСвИП = Новый СписокЗначений;
							СписокЗначенийСвИП.Добавить("ИННФЛ"	, СтрокаШапкиДокумента.ГрузополучательИННФЛ);
							СтруктураСвИП.Вставить("СвИП", СписокЗначенийСвИП);
							
								//+ФИО
								СтруктураФИО= Новый Структура;
								СписокЗначенийФИО = Новый СписокЗначений;
								СписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ГрузополучательФамилияИП);
				    			СписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ГрузополучательИмяИП);
								СписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ГрузополучательОтчествоИП);
								СтруктураСвИП.Вставить("ФИО", СтруктураФИО); //Вложенность "Файл.Документ.СвСчФакт.ГрузПолуч.ИдСв.СвИП"
							    //-ФИО
								
							СтруктураИдСв.Вставить("СвИП", СтруктураСвИП);//Вложенность "Файл.Документ.СвСчФакт.ГрузПолуч.ИдСв"
							//-СвИП
							
						КонецЕсли;
						
			    		СтруктураГрузПолуч.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.ГрузПолуч"
  	    	     		//-ИдСв
						
						//+Адрес
			    		СтруктураАдрес = Новый Структура;
						
							//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"		, СтрокаШапкиДокумента.ГрузополучательИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион"	, СтрокаШапкиДокумента.ГрузополучательКодРегион);
							СписокЗначенийАдрРФ.Добавить("НаимРегион"	, СтрокаШапкиДокумента.ГрузополучательНаимРегион);
							СписокЗначенийАдрРФ.Добавить("Район"		, СтрокаШапкиДокумента.ГрузополучательРайон);
			    			СписокЗначенийАдрРФ.Добавить("Город"		, СтрокаШапкиДокумента.ГрузополучательГород);
							СписокЗначенийАдрРФ.Добавить("НаселПункт"	, СтрокаШапкиДокумента.ГрузополучательНаселПункт);
			    			СписокЗначенийАдрРФ.Добавить("Улица"		, СтрокаШапкиДокумента.ГрузополучательУлица);
							СписокЗначенийАдрРФ.Добавить("Дом"			, СтрокаШапкиДокумента.ГрузополучательДом);
							СписокЗначенийАдрРФ.Добавить("Корпус"		, СтрокаШапкиДокумента.ГрузополучательКорпус);
							СписокЗначенийАдрРФ.Добавить("Кварт"		, СтрокаШапкиДокумента.ГрузополучательКварт);
							
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.ГрузПолуч.Адрес"
			    	    	//-АдрРФ
							
			    		СтруктураГрузПолуч.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.ГрузПолуч"
  	    	     		//-Адрес
						
					СтруктураСвСчФакт.Вставить("ГрузПолуч", СтруктураГрузПолуч);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-ГрузПолуч					
					
					//+ДокПодтвОтгрНом  
			    	СтруктураДокПодтвОтгрНом = Новый Структура;
					СписокЗначенийДокПодтвОтгрНом = Новый СписокЗначений;
	    			СписокЗначенийДокПодтвОтгрНом.Добавить("РеквНаимДок"	, СтрокаШапкиДокумента.РеквНаимДок);
				    СписокЗначенийДокПодтвОтгрНом.Добавить("РеквНомерДок"	, СтрокаШапкиДокумента.РеквНомерДок);
				    СписокЗначенийДокПодтвОтгрНом.Добавить("РеквДатаДок"	, СтрокаШапкиДокумента.РеквДатаДок);
                    СтруктураДокПодтвОтгрНом.Вставить("ДокПодтвОтгрНом",	СписокЗначенийДокПодтвОтгрНом);
					СтруктураСвСчФакт.Вставить("ДокПодтвОтгрНом", СтруктураДокПодтвОтгрНом);//Вложенность "Файл.Документ.СвСчФакт"
                    //-ДокПодтвОтгрНом					
					
					//+СвПокуп  
			    	СтруктураСвПокуп = Новый Структура;
					
						//+ИдСв
			    		СтруктураИдСв = Новый Структура;
						
						Если СтрокаШапкиДокумента.ПокТипОрганизации = "ЮЛ" Тогда
							
							//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг"	, СтрокаШапкиДокумента.ПокНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПокИННЮЛ);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"		, СтрокаШапкиДокумента.ПокКПП);
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.СвПокуп.ИдСв"
			    	    	//-СвЮЛУч
							
						ИначеЕсли СтрокаШапкиДокумента.ПокТипОрганизации = "ИП" Тогда
							
							//+СвИП
							СтруктураСвИП = Новый Структура;
							СписокЗначенийСвИП = Новый СписокЗначений;
							СписокЗначенийСвИП.Добавить("ИННФЛ"	, СтрокаШапкиДокумента.ПокИННФЛ);
							СтруктураСвИП.Вставить("СвИП", СписокЗначенийСвИП);
							
								//+ФИО
								СтруктураФИО= Новый Структура;
								СписокЗначенийФИО = Новый СписокЗначений;
								СписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПокФамилияИП);
				    			СписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПокИмяИП);
								СписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПокОтчествоИП);
								СтруктураСвИП.Вставить("ФИО", СтруктураФИО); //Вложенность "Файл.Документ.СвСчФакт.СвПокуп.ИдСв.СвИП"
							    //-ФИО
								
							СтруктураИдСв.Вставить("СвИП", СтруктураСвИП);//Вложенность "Файл.Документ.СвСчФакт.СвПокуп.ИдСв"
							//-СвИП
							
						КонецЕсли;
						
			    		СтруктураСвПокуп.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.СвПокуп"
  	    	     		//-ИдСв
						
						//+Адрес
			    		СтруктураАдрес = Новый Структура;
						
							//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"		, СтрокаШапкиДокумента.ПокИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион"	, СтрокаШапкиДокумента.ПокКодРегион);
							СписокЗначенийАдрРФ.Добавить("НаимРегион"	, СтрокаШапкиДокумента.ПокНаимРегион);
							СписокЗначенийАдрРФ.Добавить("Район"		, СтрокаШапкиДокумента.ПокРайон);
			    			СписокЗначенийАдрРФ.Добавить("Город"		, СтрокаШапкиДокумента.ПокГород);
							СписокЗначенийАдрРФ.Добавить("НаселПункт"	, СтрокаШапкиДокумента.ПокНаселПункт);
			    			СписокЗначенийАдрРФ.Добавить("Улица"		, СтрокаШапкиДокумента.ПокУлица);
							СписокЗначенийАдрРФ.Добавить("Дом"			, СтрокаШапкиДокумента.ПокДом);
							СписокЗначенийАдрРФ.Добавить("Корпус"		, СтрокаШапкиДокумента.ПокКорпус);
							СписокЗначенийАдрРФ.Добавить("Кварт"		, СтрокаШапкиДокумента.ПокКварт);
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.СвПокуп.Адрес"
			    	    	//-АдрРФ
							
			    		СтруктураСвПокуп.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.СвПокуп"
  	    	     		//-Адрес
						
					СтруктураСвСчФакт.Вставить("СвПокуп", СтруктураСвПокуп);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-СвПокуп					
					
					//+ДенИзм  
			    	СтруктураДенИзм = Новый Структура;
					СписокЗначенийДенИзм = Новый СписокЗначений;
	    			СписокЗначенийДенИзм.Добавить("КодОКВ"	, СтрокаШапкиДокумента.КодОКВ);
				    СписокЗначенийДенИзм.Добавить("НаимОКВ"	, СтрокаШапкиДокумента.НаимОКВ);
                    СтруктураДенИзм.Вставить("ДенИзм",	СписокЗначенийДенИзм); //Вложенность "Файл.Документ.СвСчФакт.ДенИзм"
					СтруктураСвСчФакт.Вставить("ДенИзм", СтруктураДенИзм);//Вложенность "Файл.Документ.СвСчФакт"
                    //-ДенИзм					
					
					//+ИнфПолФХЖ1
	    	        СтруктураИнфПолФХЖ1 = Новый Структура;
	    	        	СтруктураТекстИнф = Новый Структура("ТекстИнф", СтрокаШапкиДокумента.ИнфТекст);
	    	        	СтруктураИнфПолФХЖ1.Вставить("ТекстИнф", СтруктураТекстИнф); 		    	
	    	        СтруктураСвСчФакт.Вставить("ИнфПолФХЖ1", СтруктураИнфПолФХЖ1);//Вложенность "Файл.Документ.СвСчФакт"
	    	        //-ИнфПолФХЖ1
					
	    	    СтруктураДокумент.Вставить("СвСчФакт", СтруктураСвСчФакт);//Вложенность "Файл.Документ"
    	        ///////////////////////////////////////////-СвСчФакт////////////////////////////////////////////////////
    	        
    	        ///////////////////////////////////////////+ТаблСчФакт//////////////////////////////////////////////////
    	        СтруктураТаблСчФакт = Новый Структура;	    	        
    	        
    	        ОтборСтрокНоменклатур = Новый Структура;
				ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
				СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);
				
					//+СведТов
					МассивСведТов = Новый Массив;	        			       			
					
					Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
						
						СтруктураСведТов = Новый Структура;					
						СписокЗначенийСведТов = Новый СписокЗначений;
	    	            СписокЗначенийСведТов.Добавить("НомСтр"		, СтрокаНоменклатурыДокумента.НомСтр);
	    	            СписокЗначенийСведТов.Добавить("НаимТов"	, СтрокаНоменклатурыДокумента.НаимТов);
	    	            СписокЗначенийСведТов.Добавить("ОКЕИ_Тов"	, СтрокаНоменклатурыДокумента.ОКЕИ_Тов);
						СписокЗначенийСведТов.Добавить("НаимЕдИзм"	, СтрокаНоменклатурыДокумента.НаимЕдИзм);
	    	            СписокЗначенийСведТов.Добавить("КолТов"		, СтрокаНоменклатурыДокумента.КолТов);
	    	            СписокЗначенийСведТов.Добавить("ЦенаТов"	, СтрокаНоменклатурыДокумента.ЦенаТов);
	    	            СписокЗначенийСведТов.Добавить("НалСт"		, СтрокаНоменклатурыДокумента.НалСт);
	    	            СписокЗначенийСведТов.Добавить("СтТовБезНДС", СтрокаНоменклатурыДокумента.СтТовБезНДС);
	    	            СписокЗначенийСведТов.Добавить("СтТовУчНал"	, СтрокаНоменклатурыДокумента.СтТовУчНал);
	    	            СтруктураСведТов.Вставить("СведТов",СписокЗначенийСведТов);
	    	            
	    	            //+ДопСведТов
						СтруктураДопСведТов = Новый Структура;
						СписокЗначенийСведТов = Новый СписокЗначений;
						СписокЗначенийСведТов.Добавить("ПрТовРаб"	, СтрокаНоменклатурыДокумента.ПрТовРаб);
						СписокЗначенийСведТов.Добавить("КодТов"		, СтрокаНоменклатурыДокумента.КодТов);
						СписокЗначенийСведТов.Добавить("ГТИН"		, СтрокаНоменклатурыДокумента.ГТИН);
						СтруктураДопСведТов.Вставить("ДопСведТов" , СписокЗначенийСведТов);
						
						//+НомСредИдентТов
						Если СтрокаНоменклатурыДокумента.ТоварМаркируемый Тогда	
							
							МассивНомСредИдентТов = Новый Массив;						
							
								Для Каждого СтруктураКодов Из СтрокаНоменклатурыДокумента.НомСредИдентТов Цикл						
									
									СтруктураНомСредИдентТов 		= Новый Структура;
									СписокЗначенийНомСредИдентТов 	= Новый СписокЗначений;
									МассивИменПодчиненныхЭлементов 	= Новый Массив;
									
									Для Каждого ЭлементСтруктурыКодов Из СтруктураКодов Цикл
									
										Если ТипЗнч(ЭлементСтруктурыКодов.Значение) &lt;&gt; Тип("Массив") и ЗначениеЗаполнено(ЭлементСтруктурыКодов.Значение) Тогда										
											СписокЗначенийНомСредИдентТов.Добавить(ЭлементСтруктурыКодов.Ключ, ЭлементСтруктурыКодов.Значение);
										КонецЕсли;
										
										Если ТипЗнч(ЭлементСтруктурыКодов.Значение) = Тип("Массив") и ЭлементСтруктурыКодов.Значение.Количество() Тогда
								            МассивИменПодчиненныхЭлементов.Добавить(ЭлементСтруктурыКодов.Ключ);										
										КонецЕсли;										
									
									КонецЦикла;
									
									Если СписокЗначенийНомСредИдентТов.Количество() Тогда										
										СтруктураНомСредИдентТов.Вставить("НомСредИдентТов", СписокЗначенийНомСредИдентТов);
									КонецЕсли;
									
									Если МассивИменПодчиненныхЭлементов.Количество() Тогда																			    
									    
									    Для каждого ИмяЭлемента Из МассивИменПодчиненныхЭлементов Цикл
									    	СтруктураНомСредИдентТов.Вставить(ИмяЭлемента, СтруктураКодов[ИмяЭлемента]);
									    КонецЦикла;
									    
									КонецЕсли;										
									
									Если СтруктураНомСредИдентТов.Количество() Тогда										
										МассивНомСредИдентТов.Добавить(СтруктураНомСредИдентТов);
									КонецЕсли;
																
								КонецЦикла;
								
							СтруктураДопСведТов.Вставить("НомСредИдентТов", МассивНомСредИдентТов);	//Вложенность "Файл.Документ.ТаблСчФакт.СведТов.ДопСведТов"
							
						КонецЕсли;
						//-НомСредИдентТов
						
						СтруктураСведТов.Вставить("ДопСведТов",СтруктураДопСведТов); //Вложенность "Файл.Документ.ТаблСчФакт.СведТов"
						//-ДопСведТов
						 
	    	            //+Акциз
	    	            СтруктураАкциз = Новый Структура;
	    	            Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.СумАкциз) Тогда
	    	                СтруктураАкциз.Вставить("СумАкциз", СтрокаНоменклатурыДокумента.СумАкциз);
	    	            Иначе
	    	            	СтруктураАкциз.Вставить("БезАкциз", СтрокаНоменклатурыДокумента.АкцизБезАкциз);
						КонецЕсли;					    	          
						СтруктураСведТов.Вставить("Акциз",СтруктураАкциз); //Вложенность "Файл.Документ.ТаблСчФакт.СведТов"
						//-Акциз
						
						//+СумНал
						СтруктураСумНал = Новый Структура;
						Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.СумНал) Тогда
							СтруктураСумНал.Вставить("СумНал", СтрокаНоменклатурыДокумента.СумНал);
						Иначе
							СтруктураСумНал.Вставить("БезНДС", СтрокаНоменклатурыДокумента.СумНалБезНДС);
						КонецЕсли;					    	          
						СтруктураСведТов.Вставить("СумНал",СтруктураСумНал); //Вложенность "Файл.Документ.ТаблСчФакт.СведТов"
						//-СумНал
						
						//+ИнфПолФХЖ2
						Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.ИнфПолСтр) Тогда
							СтруктураИнфПолФХЖ2 = Новый Структура("ИнфПолФХЖ2", СтрокаНоменклатурыДокумента.ИнфПолСтр); 		    	
							СтруктураСведТов.Вставить("ИнфПолФХЖ2", СтруктураИнфПолФХЖ2); //Вложенность "Файл.Документ.ТаблСчФакт.СведТов"
						КонецЕсли;
		    	        //-ИнфПолФХЖ2
						
	    	            МассивСведТов.Добавить(СтруктураСведТов);
						
	      	       	КонецЦикла;     	        
					
					СтруктураТаблСчФакт.Вставить("СведТов", МассивСведТов);
	    	        //-СведТов 
					
					//+ВсегоОпл
	    	        СтруктураВсегоОпл = Новый Структура;					
					СписокЗначенийВсегоОпл = Новый СписокЗначений;
    	            СписокЗначенийВсегоОпл.Добавить("СтТовБезНДСВсего"	, СтрокаШапкиДокумента.СтТовБезНДСВсего);
    	            СписокЗначенийВсегоОпл.Добавить("СтТовУчНалВсего"	, СтрокаШапкиДокумента.СтТовУчНалВсего);
					
					СтруктураВсегоОпл.Вставить("ВсегоОпл",СписокЗначенийВсегоОпл); 
					
						//+СумНалВсего
    	            	СтруктураСумНалВсего = Новый Структура;
						
						Если СтрокаШапкиДокумента.БезНДС = Неопределено Тогда
    	            		СтруктураСумНалВсего.Вставить("СумНал", СтрокаШапкиДокумента.СумНал);
						Иначе
							СтруктураСумНалВсего.Вставить("БезНДС", СтрокаШапкиДокумента.БезНДС);
						КонецЕсли;
						
    	            	СтруктураВсегоОпл.Вставить("СумНалВсего",СтруктураСумНалВсего);
    	                //-СумНалВсего
						
    	            СтруктураТаблСчФакт.Вставить("ВсегоОпл",СтруктураВсегоОпл); //Вложенность "Файл.Документ.ТаблСчФакт"
	    	        //-ВсегоОпл
					
				СтруктураДокумент.Вставить("ТаблСчФакт", СтруктураТаблСчФакт);//Вложенность "Файл.Документ"
				////////////////////////////////////////////////-ТаблСчФакт///////////////////////////////////////////////////
    	        
    	        ////////////////////////////////////////////////+СвПродПер////////////////////////////////////////////////////
    	        СтруктураСвПродПер = Новый Структура;
				
					//+СвПер
    	        	СтруктураСвПер = Новый Структура;	
    	        	СписокЗначенийСвПер = Новый СписокЗначений;
		    		СписокЗначенийСвПер.Добавить("СодОпер"	, СтрокаШапкиДокумента.СодОпер);
		    		СписокЗначенийСвПер.Добавить("ДатаПер"	, СтрокаШапкиДокумента.ДатаПер);
		   	 		СтруктураСвПер.Вставить("СвПер", СписокЗначенийСвПер); 
						
						Если СтрокаШапкиДокумента.ОснПерРеквНаимДок &lt;&gt; "" Тогда 
							
							//+ОснПер
							СтруктураОснПер = Новый Структура;
							СписокЗначенийОснПер = Новый СписокЗначений;
			    			СписокЗначенийОснПер.Добавить("РеквНаимДок"		, СтрокаШапкиДокумента.ОснПерРеквНаимДок);
			    			СписокЗначенийОснПер.Добавить("РеквНомерДок"	, СтрокаШапкиДокумента.ОснПерРеквНомерДок);
			    			СписокЗначенийОснПер.Добавить("РеквДатаДок"		, СтрокаШапкиДокумента.ОснПерРеквДатаДок);			    			
						
							СтруктураОснПер.Вставить("ОснПер", СписокЗначенийОснПер);
							СтруктураСвПер.Вставить("ОснПер", СтруктураОснПер);//Вложенность "Файл.Документ.СвПродПер.СвПер"
							//-ОснПер
							
						Иначе
						    СтруктураСвПер.Вставить("БезДокОснПер", "1");
						КонецЕсли;
		   	 		     
		    		СтруктураСвПродПер.Вставить("СвПер", СтруктураСвПер);//Вложенность "Файл.Документ.СвПродПер"
		    		//-СвПер
					
    	        СтруктураДокумент.Вставить("СвПродПер", СтруктураСвПродПер);//Вложенность "Файл.Документ"
    	        ////////////////////////////////////////////////-СвПродПер////////////////////////////////////////////////////
    	        
    	        ////////////////////////////////////////////////+Подписант////////////////////////////////////////////////////
    	        СтруктураПодписант = Новый Структура;
    	        CписокЗначенийПодписант = Новый СписокЗначений;
    			CписокЗначенийПодписант.Добавить("Должн"			, СтрокаШапкиДокумента.ПодписантДолжность);
    			CписокЗначенийПодписант.Добавить("СпосПодтПолном"	, СтрокаШапкиДокумента.СпосПодтПолном);
    			
   	 			СтруктураПодписант.Вставить("Подписант", CписокЗначенийПодписант);
				
					СтруктураФИО = Новый Структура;
	   	 			CписокЗначенийФИО = Новый СписокЗначений;
	    			CписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПодписантФамилия);
	    			CписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПодписантИмя);
	    			CписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПодписантОтчество);
					
					СтруктураФИО.Вставить("ФИО", CписокЗначенийФИО);
				СтруктураПодписант.Вставить("ФИО", СтруктураФИО);
				
				Если СтрокаШапкиДокумента.СпосПодтПолном = "3" Тогда
					
					СтруктураСвДоверЭл = Новый Структура;
	   	 			CписокЗначенийСвДоверЭл = Новый СписокЗначений;
	    			CписокЗначенийСвДоверЭл.Добавить("НомДовер"			, СтрокаШапкиДокумента.НомДовер);
	    			CписокЗначенийСвДоверЭл.Добавить("ДатаВыдДовер"		, СтрокаШапкиДокумента.ДатаВыдДовер);
	    			CписокЗначенийСвДоверЭл.Добавить("ВнНомДовер"		, СтрокаШапкиДокумента.ВнНомДовер);
					CписокЗначенийСвДоверЭл.Добавить("ДатаВнРегДовер"	, СтрокаШапкиДокумента.ДатаВнРегДовер);
					CписокЗначенийСвДоверЭл.Добавить("ИдСистХран"		, СтрокаШапкиДокумента.ИдСистХран);
					CписокЗначенийСвДоверЭл.Добавить("УРЛСист"			, СтрокаШапкиДокумента.УРЛСист);
					
						СтруктураСвДоверЭл.Вставить("СвДоверЭл", CписокЗначенийСвДоверЭл);
					
					СтруктураПодписант.Вставить("СвДоверЭл", СтруктураСвДоверЭл);	
					
				КонецЕсли;
				
				СтруктураДокумент.Вставить("Подписант", СтруктураПодписант);//Вложенность "Файл.Документ"
    	        ///////////////////////////////////////////////-Подписант////////////////////////////////////////////////////
				
	    	СтруктураФайл.Вставить("Документ", СтруктураДокумент);//Вложенность "Файл"
	    	//-Документ
			
    	СтруктураДок.Вставить("Файл", СтруктураФайл);//Верхний Уровень
    	//-Файл
    				
	XMLДокумент        	= Новый ЗаписьXML;		
	ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("WINDOWS-1251", "1.0", Истина, Ложь, Символы.Таб); 
	XMLДокумент.УстановитьСтроку("WINDOWS-1251");
	XMLДокумент.ЗаписатьОбъявлениеXML();
	
	Для каждого СтрокаЭлемента Из СтруктураДок Цикл
		ЗаписатьБлоки(XMLДокумент, СтрокаЭлемента, ОбязательныеРеквизиты, ТекстОшибкиПроверкиОбязательныхПолей);
	КонецЦикла;	

	СтрокаXML = XMLДокумент.Закрыть(); 
			
	Если ЗначениеЗаполнено(ТекстОшибкиПроверкиОбязательныхПолей) Тогда
	
		ТекстЛогаСобытий = ТекстОшибкиПроверкиОбязательныхПолей + Символы.ПС + "Документ был пропущен.";
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        Продолжить;	
	Иначе 
	
		СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
		 		
		СтруктураФайлаДанных = Новый Структура;
		СтруктураФайлаДанных.Вставить("ВидДокумента"					, СтрокаШапкиДокумента.ВидДокумента);
		СтруктураФайлаДанных.Вставить("Документ"						, СтрокаШапкиДокумента.Ссылка);
		СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"			, СтрокаШапкиДокумента.ИдентификаторЦепочки);
		СтруктураФайлаДанных.Вставить("Идентификатор"					, СтрокаШапкиДокумента.ИдентификаторЭлДокумента);
		СтруктураФайлаДанных.Вставить("ИмяФайлаXML"						, СтрокаШапкиДокумента.ФайлИмя);
		СтруктураФайлаДанных.Вставить("КодировкаФайла"					, "WINDOWS-1251");
		СтруктураФайлаДанных.Вставить("Организация"						, СтрокаШапкиДокумента.Организация);
		СтруктураФайлаДанных.Вставить("Отправлен"						, НЕОПРЕДЕЛЕНО);		
		СтруктураФайлаДанных.Вставить("Статус"							, СтрокаШапкиДокумента.Статус);
		СтруктураФайлаДанных.Вставить("СтрокаXML"						, СтрокаXML);
		СтруктураФайлаДанных.Вставить("СтруктураДокумента"				, СтруктураДляСовместимости);
		СтруктураФайлаДанных.Вставить("ТипФайла"						, СтрокаШапкиДокумента.ТипФайла); 
		СтруктураФайлаДанных.Вставить("СертификатНаСервере"     		, СтрокаШапкиДокумента.СертификатНаСервере);
		СтруктураФайлаДанных.Вставить("ДанныеСертификатаЭКОМ"			, СтрокаШапкиДокумента.ОрганизацияДанныеСертификата);
		
		Если ИспользованиеМЧД Тогда
			СтруктураФайлаДанных.Вставить("СтрокаМЧД", СтрЗаменить(СтрокаШапкиДокумента.СтрокаМЧД, "&amp;GUID", СтрЗаменить(СтрокаШапкиДокумента.ИдентификаторЭлДокумента, "-", "")));
		КонецЕсли;
		
		МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
	КонецЕсли;
КонецЦикла;

//Возврат РезультатШапкаПодвалУПД;	//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Если НЕ ВызовМастерКнопкойЮЗД Тогда
	Выполнить("Возврат МассивСтруктурИсходящих");		
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Исходящий УПД 5.02</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">9</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Исходящий УПД 5.02</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ИсходящийУПД_5_02</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПередаватьТекстПричины</value>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>ON_NSCHFDOPPR_01_Исходящий; ON_NSCHFDOPPR_01_Испр_Исходящий;</presentation>
				<id xsi:type="xs:decimal">7</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>СчетФактура_Входящий</presentation>
				<id xsi:type="xs:decimal">8</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Да</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">9</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">ИсходящийУПД_5_02</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string"/>
				<presentation>ТекстЗапроса</presentation>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
	</row>
</ValueTree>