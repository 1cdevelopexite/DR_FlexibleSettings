<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий DESADV (подтверждение отгрузки)</Value>
		<Value xsi:type="xs:string">	 	 	 
////////////////++ШАПКА++/////////////////////////////////////
Запрос = Новый Запрос;
Запрос.Текст =  "ВЫБРАТЬ
                |	DR_События_Накладная.Документ КАК Накладаная,
                |	ВЫРАЗИТЬ(DR_События_Накладная.Документ КАК Документ.РеализацияТоваровУслуг).Номер КАК НакладнаяНомер,
                |	ВЫРАЗИТЬ(DR_События_Накладная.Документ КАК Документ.РеализацияТоваровУслуг).Дата КАК НакладнаяДата,
                |	DR_События_Накладная.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                |	ВЫРАЗИТЬ(DR_События_Заказ.Документ КАК Документ.ЗаказКлиента) КАК Заказ,
                |	ВЫРАЗИТЬ(DR_События_ORDER.Документ КАК Документ.DR_Документ) КАК ORDER
                |ПОМЕСТИТЬ ЦепочкаДокументовОснования
                |ИЗ
                |	РегистрСведений.DR_События КАК DR_События_Накладная
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_Заказ
                |		ПО DR_События_Накладная.ИдентификаторЦепочки = DR_События_Заказ.ИдентификаторЦепочки
                |			И (DR_События_Заказ.ВидДокумента = ""Заказ_Входящий"")
                |			И DR_События_Накладная.ИдентификаторОснования = DR_События_Заказ.Идентификатор
                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_ORDER
                |		ПО DR_События_Накладная.ИдентификаторЦепочки = DR_События_ORDER.ИдентификаторЦепочки
                |			И (DR_События_ORDER.ВидДокумента = ""ORDER_Входящий"")
                |			И (DR_События_Заказ.ИдентификаторОснования = DR_События_ORDER.Идентификатор)
                |			И (ВЫРАЗИТЬ(DR_События_ORDER.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
                |ГДЕ
                |	DR_События_Накладная.Документ В(&amp;Документ)
                |	И DR_События_Накладная.Документ ССЫЛКА Документ.РеализацияТоваровУслуг
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ЦепочкаДокументов.Накладаная КАК Накладаная,
                |	ЦепочкаДокументов.НакладнаяНомер КАК НакладнаяНомер,
                |	ЦепочкаДокументов.НакладнаяДата КАК НакладнаяДата,
                |	DR_Документ.Ссылка КАК ORDER,
                |	ВЫБОР
                |		КОГДА CAMPAIGNNUMBER.Значение ЕСТЬ NULL
                |			ТОГДА CAMPAIGNINFO.ХранилищеЗначения
                |		ИНАЧЕ CAMPAIGNNUMBER.Значение
                |	КОНЕЦ КАК ДанныеДоговора,
                |	DR_ЗаказНомер.Значение КАК ORDERNUMBER,
                |	DR_ЗаказДата.Значение КАК ORDERDATE, 
                |	DR_SUPPLIER.Значение КАК xmlОрганизация,
                |	DR_BUYER.Значение КАК xmlКонтрагент,
                |	DR_DELIVERYPLACE.Значение КАК xmlТочкаДоставки,
                |	DR_Организация.Значение КАК Организация,
                |	DR_Контрагент.Значение КАК Контрагент,
                |	DR_Валюта.Значение КАК xmlВалюта,
                |	POSITION.ХранилищеЗначения КАК POSITION,
                |	FRESH.ХранилищеЗначения КАК FRESH,
                |	ЦепочкаДокументов.Заказ КАК Заказ1С,
                |	ЕСТЬNULL(ЦепочкаДокументов.ИдентификаторЦепочки, """") КАК ИдентификаторЦепочки
                |ПОМЕСТИТЬ ВТ_ЦепочкаДокументов
                |ИЗ
                |	ЦепочкаДокументовОснования КАК ЦепочкаДокументов
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
                |		ПО ЦепочкаДокументов.ORDER = DR_Документ.Ссылка
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК CAMPAIGNINFO
                |		ПО (DR_Документ.Ссылка = CAMPAIGNINFO.Ссылка)
                |			И (CAMPAIGNINFO.Реквизит = ""CAMPAIGNINFO"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_Валюта
                |		ПО (DR_Документ.Ссылка = DR_Валюта.Ссылка)
                |			И (DR_Валюта.Реквизит = ""Валюта"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ЗаказНомер
                |		ПО (DR_Документ.Ссылка = DR_ЗаказНомер.Ссылка)
                |			И (DR_ЗаказНомер.Реквизит = ""NUMBER"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ЗаказДата
                |		ПО (DR_Документ.Ссылка = DR_ЗаказДата.Ссылка)
                |			И (DR_ЗаказДата.Реквизит = ""ДатаЭлектронногоДокумента"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_Организация
                |		ПО (DR_Документ.Ссылка = DR_Организация.Ссылка)
                |			И (DR_Организация.Реквизит = ""Организация"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_Контрагент
                |		ПО (DR_Документ.Ссылка = DR_Контрагент.Ссылка)
                |			И (DR_Контрагент.Реквизит = ""Контрагент"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_SUPPLIER
                |		ПО (DR_Документ.Ссылка = DR_SUPPLIER.Ссылка)
                |			И (DR_SUPPLIER.Реквизит = ""SUPPLIER"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_BUYER
                |		ПО (DR_Документ.Ссылка = DR_BUYER.Ссылка)
                |			И (DR_BUYER.Реквизит = ""BUYER"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_DELIVERYPLACE
                |		ПО (DR_Документ.Ссылка = DR_DELIVERYPLACE.Ссылка)
                |			И (DR_DELIVERYPLACE.Реквизит = ""DELIVERYPLACE"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК CAMPAIGNNUMBER
                |		ПО (DR_Документ.Ссылка = CAMPAIGNNUMBER.Ссылка)
                |			И (CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNNUMBER"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК POSITION
                |		ПО (DR_Документ.Ссылка = POSITION.Ссылка)
                |			И (POSITION.Реквизит = ""POSITION"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК FRESH
                |		ПО (DR_Документ.Ссылка = FRESH.Ссылка)
                |			И (FRESH.Реквизит = ""FRESH"")
                |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ПричинаОтказа
                |		ПО (DR_Документ.Ссылка = DR_ПричинаОтказа.Ссылка)
                |			И (DR_ПричинаОтказа.Реквизит = ""POSITOIN"")
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	ВТ_ЦепочкаДокументов.Накладаная КАК Ссылка,
                |	ВТ_ЦепочкаДокументов.НакладнаяНомер КАК Номер,
                |	ВТ_ЦепочкаДокументов.НакладнаяНомер КАК NUMBER,
                |	ВТ_ЦепочкаДокументов.НакладнаяНомер КАК DELIVERYNOTENUMBER,
                |	ВТ_ЦепочкаДокументов.НакладнаяНомер КАК WAYBILLNUMBER,
                |	ВТ_ЦепочкаДокументов.НакладнаяДата КАК DATE_Знач,
                |	ВТ_ЦепочкаДокументов.НакладнаяДата КАК Дата,
                |	ВТ_ЦепочкаДокументов.FRESH КАК FRESH,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК DATE,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК DELIVERYDATE,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК DELIVERYNOTEDATE,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК WAYBILLDATE,
                |	ВТ_ЦепочкаДокументов.ORDERNUMBER КАК ORDERNUMBER,
                |	ВТ_ЦепочкаДокументов.ORDERNUMBER КАК ЗаказНомер,
                |	ВТ_ЦепочкаДокументов.ORDERDATE КАК ЗаказДата,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ORDERDATE,
                |	"""" КАК CAMPAIGNNUMBER,
                |	ВТ_ЦепочкаДокументов.ДанныеДоговора КАК ДанныеДоговора,
                |	ВТ_ЦепочкаДокументов.xmlОрганизация КАК SUPPLIER,
                |	ВТ_ЦепочкаДокументов.xmlОрганизация КАК SENDER,
                |	ВТ_ЦепочкаДокументов.xmlКонтрагент КАК BUYER,
                |	ВТ_ЦепочкаДокументов.xmlКонтрагент КАК RECIPIENT,
                |	ВТ_ЦепочкаДокументов.xmlТочкаДоставки КАК DELIVERYPLACE,
                |	""O"" КАК DOCTYPE,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК EDIMESSAGE,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК EDIINTERCHANGEID,
                |	ВТ_ЦепочкаДокументов.Организация КАК Организация,
                |	ВТ_ЦепочкаДокументов.Контрагент КАК Контрагент,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК ФайлИмя,
                |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК Идентификатор,
                |	""Отправлен"" КАК Статус,
                |	ВТ_ЦепочкаДокументов.ORDER КАК ЭлектронныйДокумент,
                |	""DESADV"" КАК ВидДокумента,
                |	""1"" КАК HIERARCHICALID,
                |	DR_События_ORDER.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
                |	ВТ_ЦепочкаДокументов.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                |	ВТ_ЦепочкаДокументов.POSITION КАК POSITION
                |ИЗ
                |	ВТ_ЦепочкаДокументов КАК ВТ_ЦепочкаДокументов
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_ORDER
                |		ПО ВТ_ЦепочкаДокументов.ORDER = DR_События_ORDER.Документ"              ;
Запрос.УстановитьПараметр("Документ", Источник);
РезультатЗапроса = Запрос.Выполнить(); 
Результат = РезультатЗапроса.Выгрузить();


EDIINTERCHANGEID = 0;

СтрокиДляУдаления     = Новый Массив;
ДокументРеализации     = Неопределено;

ДатуВСтроку = Новый Соответствие;
ДатуВСтроку.Вставить("DATE", "Строка.DATE_Знач");
ДатуВСтроку.Вставить("DELIVERYDATE", "Строка.DATE_Знач");
ДатуВСтроку.Вставить("DELIVERYNOTEDATE", "Строка.DATE_Знач");
ДатуВСтроку.Вставить("WAYBILLDATE", "Строка.DATE_Знач");
ДатуВСтроку.Вставить("ORDERDATE", "Строка.ЗаказДата"); 

ДанныеORDER = новый ТаблицаЗначений;
ДанныеORDER.Колонки.Добавить("ЗаказКлиента", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
ДанныеORDER.Колонки.Добавить("ORDER", Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ДанныеORDER.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеORDER.Колонки.Добавить("КоличествоЗаказанное", Новый ОписаниеТипов("Число"));   

КвалификаторСтроки = Новый КвалификаторыСтроки(250,ДопустимаяДлина.Переменная);
ДанныеТЧНоменклатурORDER = новый ТаблицаЗначений;
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ORDER", 						Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НомерСтроки", 				Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Цена", 						Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("СтавкаНДС", 					Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("СуммаНДС", 					Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Накладная", 						Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НоменклатураКод", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("xmlЕдиницаИзмерения", 		Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоЗаказанное", 		Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоПоставляемое", 	Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ОписаниеПродукта", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НомерПродукта", 				Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НомерПродуктаПокупателя", 	Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КалибрУпаковки", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ТипФасовки", 				Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоВФасовке", 		Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("БазоваяЕдиницаТовара", 		Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ПричинаОтказаТЧ", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));



Для Каждого Строка Из Результат Цикл 
	
	Данные_POSITION = Строка.POSITION.Получить(); 
	
	Для Каждого СтрокаНоменклатуры Из Данные_POSITION Цикл
		НоваяСтрокаORDER 					  = ДанныеORDER.Добавить();
		НоваяСтрокаORDER.ЗаказКлиента   	  = Строка.Ссылка;
 		НоваяСтрокаORDER.ORDER 				  = Строка.ЭлектронныйДокумент;
		НоваяСтрокаORDER.Номенклатура 		  = СтрокаНоменклатуры.Номенклатура;
		НоваяСтрокаORDER.КоличествоЗаказанное = СтрокаНоменклатуры.ORDEREDQUANTITY; 
		
		НоваяСтрокаНоменклатуры 						= ДанныеТЧНоменклатурORDER.Добавить();
		НоваяСтрокаНоменклатуры.ORDER                   = Строка.ЭлектронныйДокумент;
		НоваяСтрокаНоменклатуры.НомерСтроки             = СтрокаНоменклатуры.POSITIONNUMBER;
		НоваяСтрокаНоменклатуры.Цена                    = СтрокаНоменклатуры.ORDERPRICE;
		НоваяСтрокаНоменклатуры.СтавкаНДС               = СтрокаНоменклатуры.VAT;
		НоваяСтрокаНоменклатуры.СуммаНДС                = СтрокаНоменклатуры.PRICEWITHVAT;
		НоваяСтрокаНоменклатуры.Накладная                   = Строка.Ссылка;
		НоваяСтрокаНоменклатуры.Номенклатура            = СтрокаНоменклатуры.Номенклатура;
		НоваяСтрокаНоменклатуры.НоменклатураКод         = СтрокаНоменклатуры.Номенклатура.Код;
		НоваяСтрокаНоменклатуры.xmlЕдиницаИзмерения     = СтрокаНоменклатуры.ORDERUNIT;
		НоваяСтрокаНоменклатуры.КоличествоЗаказанное    = СтрокаНоменклатуры.ORDEREDQUANTITY;
		НоваяСтрокаНоменклатуры.КоличествоПоставляемое  = СтрокаНоменклатуры.ORDEREDQUANTITY;
		НоваяСтрокаНоменклатуры.ОписаниеПродукта        = СтрокаНоменклатуры.DESCRIPTION;
		НоваяСтрокаНоменклатуры.НомерПродукта           = СтрокаНоменклатуры.PRODUCT;
		НоваяСтрокаНоменклатуры.НомерПродуктаПокупателя = СтрокаНоменклатуры.PRODUCTIDBUYER;
		НоваяСтрокаНоменклатуры.БазоваяЕдиницаТовара    = СтрокаНоменклатуры.ЕдиницаИзмерения;
					
	КонецЦикла;

	

    Если ДокументРеализации = Строка.Ссылка Тогда
        СтрокиДляУдаления.Добавить(Строка);
        Продолжить;
    КонецЕсли;
    ДокументРеализации = Строка.Ссылка;

     // Преобразование даты в строку и заполнение значения.
    Для Каждого ЗаписьДатуВСтроку Из ДатуВСтроку Цикл
        Строка[ЗаписьДатуВСтроку.Ключ] = Формат(Вычислить(ЗаписьДатуВСтроку.Значение), "ДФ=""гггг-ММ-дд""");
    КонецЦикла;

    EDIINTERCHANGEID = НовыйНомерТранзакции(EDIINTERCHANGEID);
    Строка.EDIINTERCHANGEID = Формат(EDIINTERCHANGEID, "ЧГ=0");

    // EDIMESSAGE.
    ГСЧ                   = Новый ГенераторСлучайныхЧисел;
    СлучЧисло             = ГСЧ.СлучайноеЧисло(100, 999);
    Строка.EDIMESSAGE       = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс000") + СлучЧисло + "-OUT-" + Строка.EDIINTERCHANGEID;

    Строка.ФайлИмя           = Строка.ВидДокумента + "_" + Строка.EDIMESSAGE + ".xml";
    Строка.Идентификатор     = Строка.ВидДокумента + "_" + Строка.EDIMESSAGE;

   
    // СокрЛП для всех строк.
    Для Каждого Колонка Из Результат.Колонки Цикл
        Если ТипЗнч(Строка[Колонка.Имя]) = Тип("Строка") Тогда
            Строка[Колонка.Имя] = СокрЛП(Строка[Колонка.Имя]);
        КонецЕсли;
    КонецЦикла;

КонецЦикла;

Для Каждого Строка Из СтрокиДляУдаления Цикл
    Результат.Удалить(Строка);
КонецЦикла;
////////////////--ШАПКА--/////////////////////////////////////
 
 
////////////////++ТАБЛИЦА++///////////////////////////////////   
ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = 
"ВЫБРАТЬ
|	DR_События_ORDER.Документ КАК ORDER,
|	DR_События_Накладная.Документ КАК Накладная
|ПОМЕСТИТЬ ВТ_ЦепочкаДокументов
|ИЗ
|	РегистрСведений.DR_События КАК DR_События_Накладная
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_ORDER
|		ПО (DR_События_Накладная.ИдентификаторЦепочки = DR_События_ORDER.ИдентификаторЦепочки)
|			И (ВЫРАЗИТЬ(DR_События_ORDER.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
|ГДЕ
|	DR_События_ORDER.ВидДокумента = ""ORDER_Входящий""
|	И DR_События_Накладная.Документ В(&amp;Документ)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ДанныеТЧНоменклатурORDER.ORDER КАК ORDER,
|	ДанныеТЧНоменклатурORDER.НомерСтроки КАК НомерСтроки,
|	ДанныеТЧНоменклатурORDER.Цена КАК Цена,
|	ДанныеТЧНоменклатурORDER.СтавкаНДС КАК СтавкаНДС,
|	ДанныеТЧНоменклатурORDER.СуммаНДС КАК СуммаНДС,
|	ДанныеТЧНоменклатурORDER.Накладная КАК Накладная,
|	ВЫРАЗИТЬ(ДанныеТЧНоменклатурORDER.Накладная КАК Документ.РеализацияТоваровУслуг).Контрагент КАК Контрагент,
|	ДанныеТЧНоменклатурORDER.Номенклатура КАК Номенклатура,
|	ДанныеТЧНоменклатурORDER.НоменклатураКод КАК НоменклатураКод,
|	ДанныеТЧНоменклатурORDER.xmlЕдиницаИзмерения КАК xmlЕдиницаИзмерения,
|	ДанныеТЧНоменклатурORDER.КоличествоЗаказанное КАК КоличествоЗаказанное,
|	ДанныеТЧНоменклатурORDER.КоличествоПоставляемое КАК КоличествоПоставляемое,
|	ДанныеТЧНоменклатурORDER.ОписаниеПродукта КАК ОписаниеПродукта,
|	ДанныеТЧНоменклатурORDER.НомерПродукта КАК НомерПродукта,
|	ДанныеТЧНоменклатурORDER.НомерПродуктаПокупателя КАК НомерПродуктаПокупателя,
|	ДанныеТЧНоменклатурORDER.КалибрУпаковки КАК КалибрУпаковки,
|	ДанныеТЧНоменклатурORDER.ТипФасовки КАК ТипФасовки,
|	ДанныеТЧНоменклатурORDER.КоличествоВФасовке КАК КоличествоВФасовке,
|	ДанныеТЧНоменклатурORDER.БазоваяЕдиницаТовара КАК БазоваяЕдиницаТовара,
|	ДанныеТЧНоменклатурORDER.ПричинаОтказаТЧ КАК ПричинаОтказаТЧ
|ПОМЕСТИТЬ ВТ_НоменклатураORDER
|ИЗ
|	&amp;ДанныеТЧНоменклатурORDER КАК ДанныеТЧНоменклатурORDER
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ВТ_ЦепочкаДокументов.Накладная КАК Ссылка,
|	ВТ_ЦепочкаДокументов.Накладная КАК Накладная,
|	ДокументыТЧ_Товары.НомерСтроки КАК НомерСтроки,
|	ДокументыТЧ_Товары.Номенклатура КАК Номенклатура,
|	ДокументыТЧ_Товары.НоменклатураКод КАК PRODUCTIDSUPPLIER,
|	ВТ_ЦепочкаДокументов.Накладная.ЦенаВключаетНДС КАК СуммаВключаетНДС,
|	ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК ШтрихКодНоменклатурыКонтрагента,
|	ДокументыТЧ_Товары.СтавкаНДС КАК СтавкаНДС,
|	ДокументыТЧ_Товары.Цена КАК Цена,
|	ДокументыТЧ_Товары.Цена * ДокументыТЧ_Товары.КоличествоЗаказанное КАК Сумма,
|	ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК PRODUCT,
|	ВЫБОР
|		КОГДА НЕ ЭКОМ_НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента = """"
|			ТОГДА ЭКОМ_НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента
|		КОГДА НЕ ЭКОМ_НоменклатураКонтрагентов.КодНоменклатурыКонтрагента = """"
|			ТОГДА ЭКОМ_НоменклатураКонтрагентов.КодНоменклатурыКонтрагента
|		ИНАЧЕ """"
|	КОНЕЦ КАК PRODUCTIDBUYER,
|	ПРЕДСТАВЛЕНИЕ(ДокументыТЧ_Товары.Номенклатура) КАК DESCRIPTION,
|	ДокументыТЧ_Товары.КоличествоЗаказанное КАК КоличесвоЗаказанное,
|	ДокументыТЧ_Товары.xmlЕдиницаИзмерения КАК ORDERUNIT,
|	ДокументыТЧ_Товары.xmlЕдиницаИзмерения КАК DELIVEREDUNIT,
|	ДокументыТЧ_Товары.КалибрУпаковки КАК КалибрУпаковки,
|	ДокументыТЧ_Товары.ТипФасовки КАК ТипФасовки,
|	ДокументыТЧ_Товары.КоличествоВФасовке КАК КоличествоВФасовке,
|	ДокументыТЧ_Товары.БазоваяЕдиницаТовара КАК БазоваяЕдиницаТовара
|ПОМЕСТИТЬ втЭКОМ
|ИЗ
|	ВТ_ЦепочкаДокументов КАК ВТ_ЦепочкаДокументов
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураORDER КАК ДокументыТЧ_Товары
|		ПО ВТ_ЦепочкаДокументов.Накладная = ДокументыТЧ_Товары.Накладная
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
|		ПО (ДокументыТЧ_Товары.Номенклатура = ЭКОМ_НоменклатураКонтрагентов.Номенклатура)
|			И ВТ_ЦепочкаДокументов.Накладная.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
|	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
|	РеализацияТоваровУслугТовары.КоличествоУпаковок КАК КоличествоПоставляемое,
|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
|	РеализацияТоваровУслугТовары.Цена КАК Цена,
|	РеализацияТоваровУслугТовары.Сумма КАК Сумма
|ПОМЕСТИТЬ втРеализация
|ИЗ
|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
|ГДЕ
|	РеализацияТоваровУслугТовары.Ссылка В(&amp;Документ)
|	И РеализацияТоваровУслугТовары.Номенклатура &lt;&gt; &amp;ВидТара
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	втЭКОМ.Ссылка КАК Ссылка,
|	втЭКОМ.НомерСтроки КАК НомерСтроки,
|	втЭКОМ.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER,
|	ЕСТЬNULL(втРеализация.КоличествоПоставляемое, 0) КАК КоличествоПоставляемое,
|	втЭКОМ.КоличесвоЗаказанное КАК КоличесвоЗаказанное,
|	втЭКОМ.ORDERUNIT КАК ORDERUNIT,
|	втЭКОМ.DELIVEREDUNIT КАК DELIVEREDUNIT,
|	втЭКОМ.СуммаВключаетНДС КАК СуммаВключаетНДС,
|	втЭКОМ.Номенклатура КАК Номенклатура,
|	втЭКОМ.ШтрихКодНоменклатурыКонтрагента КАК ШтрихКодНоменклатурыКонтрагента,
|	ЕСТЬNULL(втРеализация.СтавкаНДС, втЭКОМ.СтавкаНДС) КАК СтавкаНДС,
|	ЕСТЬNULL(втРеализация.Цена, втЭКОМ.Цена) КАК Цена,
|	ЕСТЬNULL(втРеализация.Сумма, втЭКОМ.Сумма) КАК Сумма,
|	втЭКОМ.PRODUCT КАК PRODUCT,
|	втЭКОМ.PRODUCTIDBUYER КАК PRODUCTIDBUYER,
|	втЭКОМ.DESCRIPTION КАК DESCRIPTION,
|	втЭКОМ.ТипФасовки КАК ТипФасовки,
|	втЭКОМ.КалибрУпаковки КАК КалибрУпаковки,
|	втЭКОМ.КоличествоВФасовке КАК КоличествоВФасовке,
|	втЭКОМ.БазоваяЕдиницаТовара КАК БазоваяЕдиницаТовара
|ИЗ
|	втЭКОМ КАК втЭКОМ
|		ЛЕВОЕ СОЕДИНЕНИЕ втРеализация КАК втРеализация
|		ПО втЭКОМ.Номенклатура = втРеализация.Номенклатура
|			И втЭКОМ.Накладная = втРеализация.Ссылка
|ГДЕ
|	втРеализация.КоличествоПоставляемое &gt; 0";
ЗапросНоменклатур.УстановитьПараметр("Документ", Источник);
ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурORDER", ДанныеТЧНоменклатурORDER);
ЗапросНоменклатур.УстановитьПараметр("ВидТара", Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Тара"));

РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить();
РезультатНоменклатур = РезультатЗапросаНоменклатур.Выгрузить();

РезультатНоменклатур.Колонки.Добавить("POSITIONNUMBER");
РезультатНоменклатур.Колонки.Добавить("ORDEREDQUANTITY");
РезультатНоменклатур.Колонки.Добавить("DELIVEREDQUANTITY");
РезультатНоменклатур.Колонки.Добавить("PRICE");
РезультатНоменклатур.Колонки.Добавить("PRICEWITHVAT");
РезультатНоменклатур.Колонки.Добавить("AMOUNT");
РезультатНоменклатур.Колонки.Добавить("AMOUNTWITHVAT");
РезультатНоменклатур.Колонки.Добавить("TAXRATE");
РезультатНоменклатур.Колонки.Добавить("CALIBRE",         Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PACKINGTYPE",     Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PACKINGQUANTITY", Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PACKINGUNIT",     Новый ОписаниеТипов("Строка"));

// Список для преобразования числа в строку: Значение – реквизит в результате; Представление - путь, где хранится число;
// Пометка при Истина усекает число до целых, а Ложь - 2 знака в дробной части
ЧислоВСтроку = Новый СписокЗначений;
ЧислоВСтроку.Добавить("POSITIONNUMBER", "СтрокаНоменклатуры.НомерСтроки", Истина);
ЧислоВСтроку.Добавить("PRICE", "ЦенаБезНДС");
ЧислоВСтроку.Добавить("PRICEWITHVAT", "Цена_с_НДС");
ЧислоВСтроку.Добавить("AMOUNT", "СуммаБезНДС");
ЧислоВСтроку.Добавить("AMOUNTWITHVAT", "Сумма_с_НДС");
ЧислоВСтроку.Добавить("TAXRATE", "СтавкаНДС", Истина);

Для Каждого СтрокаНоменклатуры Из РезультатНоменклатур Цикл
	
	Если ТипЗнч(СтрокаНоменклатуры.СтавкаНДС) = Тип("Число") Тогда
		СтавкаНДС = СтрокаНоменклатуры.СтавкаНДС;
	Иначе
    	СтавкаНДС = СтавкаНДСЧислом(СтрокаНоменклатуры.СтавкаНДС);
	КонецЕсли;
	
    Если СтрокаНоменклатуры.СуммаВключаетНДС Тогда
        Цена_с_НДС	= СтрокаНоменклатуры.Цена;
        ЦенаБезНДС	= СтрокаНоменклатуры.Цена/((100 + СтавкаНДС)/100);
        Сумма_с_НДС = СтрокаНоменклатуры.Сумма;
        СуммаБезНДС = СтрокаНоменклатуры.Сумма/((100 + СтавкаНДС)/100);
    Иначе    
        ЦенаБезНДС	= СтрокаНоменклатуры.Цена;
        Цена_с_НДС	= СтрокаНоменклатуры.Цена * ((100 + СтавкаНДС)/100);
        СуммаБезНДС = СтрокаНоменклатуры.Сумма;
        Сумма_с_НДС = СтрокаНоменклатуры.Сумма * ((100 + СтавкаНДС)/100);
    КонецЕсли;

    // Преобразование числа в строку и заполнение значения.
    Для Каждого ЗаписьЧислоВСтроку Из ЧислоВСтроку Цикл
        ЗначениеЧисла = Вычислить(ЗаписьЧислоВСтроку.Представление);
        ЗначениеСтрокой = Окр(ЗначениеЧисла, ?(ЗаписьЧислоВСтроку.Пометка, 0, 2));
        Если НЕ ЗаписьЧислоВСтроку.Пометка Тогда
            ЗначениеСтрокой = Формат(ЗначениеСтрокой, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
        КонецЕсли;
        СтрокаНоменклатуры[ЗаписьЧислоВСтроку.Значение] = ЗначениеСтрокой;
    КонецЦикла;
    
    СтрокаНоменклатуры.CALIBRE          = СтрокаНоменклатуры.КалибрУпаковки;
	СтрокаНоменклатуры.PACKINGTYPE      = СтрокаНоменклатуры.ТипФасовки;
	СтрокаНоменклатуры.PACKINGQUANTITY  = Формат(СтрокаНоменклатуры.КоличествоВФасовке, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	СтрокаНоменклатуры.PACKINGUNIT      = СтрокаНоменклатуры.БазоваяЕдиницаТовара;	
	
	СтрокаНоменклатуры.ORDEREDQUANTITY   = Формат(СтрокаНоменклатуры.КоличесвоЗаказанное, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");
	СтрокаНоменклатуры.DELIVEREDQUANTITY = Формат(СтрокаНоменклатуры.КоличествоПоставляемое, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");

КонецЦикла;

////////////////--ТАБЛИЦА--///////////////////////////////////


//////////////////++СОЗДАНИЕ_XML++/////////////////////////////////// 
//Проверка наличия обязательных полей
ТекстСообщенияПроверкиНаличияОбязательныхПолей = "";
ПродолжитьОбработку = Истина;

ОбязательныеКолонки = Новый СписокЗначений;

//DESADV
ОбязательныеКолонки.Добавить("Результат.NUMBER"				,"DESADV.NUMBER");
ОбязательныеКолонки.Добавить("Результат.DATE"				,"DESADV.DATE");
ОбязательныеКолонки.Добавить("Результат.DELIVERYDATE"		,"DESADV.DELIVERYDATE");
ОбязательныеКолонки.Добавить("Результат.ORDERNUMBER"		,"DESADV.ORDERNUMBER");
ОбязательныеКолонки.Добавить("Результат.ORDERDATE"			,"DESADV.ORDERDATE");
ОбязательныеКолонки.Добавить("Результат.DELIVERYNOTENUMBER"	,"DESADV.DELIVERYNOTENUMBER");
ОбязательныеКолонки.Добавить("Результат.WAYBILLNUMBER"		,"DESADV.WAYBILLNUMBER");
ОбязательныеКолонки.Добавить("Результат.WAYBILLDATE"		,"DESADV.WAYBILLDATE");
  
//HEAD
ОбязательныеКолонки.Добавить("Результат.SUPPLIER"			,"DESADV.HEAD.SUPPLIER");
ОбязательныеКолонки.Добавить("Результат.BUYER"				,"DESADV.HEAD.BUYER");
ОбязательныеКолонки.Добавить("Результат.RECIPIENT"			,"DESADV.HEAD.RECIPIENT");
ОбязательныеКолонки.Добавить("Результат.DELIVERYPLACE"		,"DESADV.HEAD.DELIVERYPLACE");
ОбязательныеКолонки.Добавить("Результат.SENDER"				,"DESADV.HEAD.SENDER");
	
//PACKINGSEQUENCE
ОбязательныеКолонки.Добавить("Результат.HIERARCHICALID"		,"DESADV.HEAD.PACKINGSEQUENCE.HIERARCHICALID");
//POSITION
ОбязательныеКолонки.Добавить("РезультатНоменклатур.POSITIONNUMBER"		,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.POSITIONNUMBER");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRODUCT"				,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.PRODUCT");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRODUCTIDBUYER"		,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.PRODUCTIDBUYER");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.DELIVEREDQUANTITY"	,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.DELIVEREDQUANTITY");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.ORDEREDQUANTITY"		,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.ORDEREDQUANTITY");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.ORDERUNIT"			,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.ORDERUNIT");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRICE"				,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.PRICE");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRICEWITHVAT"		,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.PRICEWITHVAT");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.TAXRATE"				,"DESADV.HEAD.PACKINGSEQUENCE.POSITION.TAXRATE");
	

Для каждого ОбязательнаяКолонка из ОбязательныеКолонки Цикл 

    Массив = СтрРазделить(ОбязательнаяКолонка.Значение, ".");   
    НайтиКолонкуВТЗ = Вычислить(Массив[0] + ".Колонки.Найти(""" + Массив[1] + """)"); 
    
	Если НайтиКолонкуВТЗ = Неопределено Тогда
	
		ТекстСообщенияПроверкиНаличияОбязательныхПолей = ?(ТекстСообщенияПроверкиНаличияОбязательныхПолей = "" ,"В сформированных таблицах отсутствуют данные для заполнения обязательного поля """ + ОбязательнаяКолонка.Представление + """.", ТекстСообщенияПроверкиНаличияОбязательныхПолей + Символы.ПС + "В сформированных таблицах отсутствуют данные для заполнения обязательного поля """ + ОбязательнаяКолонка.Представление + """."); 
	    ПродолжитьОбработку = Ложь;
	КонецЕсли

КонецЦикла;

Если ТекстСообщенияПроверкиНаличияОбязательныхПолей &lt;&gt; "" Тогда
	ТекстСообщенияПроверкиНаличияОбязательныхПолей = ТекстСообщенияПроверкиНаличияОбязательныхПолей + Символы.ПС + "Исходящие документы не будут отправлены." 
КонецЕсли;
//Проверка наличия не обязательных полей

МассивСтруктурИсходящих = Новый Массив;

Если ПродолжитьОбработку Тогда  
	
	СписокDESADV = Новый СписокЗначений;	
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "NUMBER"					, Истина);					
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "DATE"					, Истина);				
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "DELIVERYDATE"			, Истина);   							
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "ORDERNUMBER"				, Истина);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "ORDERDATE"				, Истина);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "DELIVERYNOTENUMBER"		, Истина);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "WAYBILLNUMBER"			, Истина);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "WAYBILLDATE"				, Истина);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "DOCTYPE"					, Ложь);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "DELIVERYNOTEDATE"		, Ложь);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "CAMPAIGNNUMBER"			, Ложь);
	СписокDESADV.Добавить("СтрокаШапкиДокумента"	, "FRESH"					, Ложь); 
	 
	
	СписокHEAD = Новый СписокЗначений;	
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SUPPLIER"				, Истина);
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "BUYER"					, Истина);					
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "DELIVERYPLACE"			, Истина);   							
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SENDER"					, Истина);
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "RECIPIENT"				, Истина);				
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "EDIINTERCHANGEID"		, Ложь);
	
	СписокPACKINGSEQUENCE = Новый СписокЗначений;	
	СписокPACKINGSEQUENCE.Добавить("СтрокаШапкиДокумента"	, "HIERARCHICALID"	, Истина);	
		
	CписокPOSITION = Новый СписокЗначений;	
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "POSITIONNUMBER"			, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCT"				, Истина);					
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDBUYER"			, Истина);   							
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "DELIVEREDQUANTITY"		, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDEREDQUANTITY"		, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDERUNIT"				, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICE"					, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICEWITHVAT"			, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "TAXRATE"				, Истина);	
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDSUPPLIER"		, Ложь);				
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "DELIVEREDUNIT"			, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "CALIBRE"				, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "AMOUNT"					, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "AMOUNTWITHVAT"			, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "DESCRIPTION"			, Ложь); 
	    
	CписокPACKING = Новый СписокЗначений;	
	CписокPACKING.Добавить("СтрокаНоменклатурыДокумента", "PACKINGTYPE"			, Ложь);
	CписокPACKING.Добавить("СтрокаНоменклатурыДокумента", "PACKINGQUANTITY"		, Ложь);					
	CписокPACKING.Добавить("СтрокаНоменклатурыДокумента", "PACKINGUNIT"			, Ложь); 
			
	
	Для каждого СтрокаШапкиДокумента из Результат Цикл

		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";  
	    				
		XMLДокумент        	= Новый ЗаписьXML;		
		ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб); 
		XMLДокумент.УстановитьСтроку("UTF-8");
		XMLДокумент.ЗаписатьОбъявлениеXML();
		
		
			
		XMLДокумент.ЗаписатьНачалоЭлемента("DESADV");
	    
		Для Каждого ЭлементDESADV из СписокDESADV Цикл
		
			СтрокаТЗ = Вычислить(ЭлементDESADV.Значение);
			ИмяРеквизита = ЭлементDESADV.Представление;
			ОбязательноеПоле = ЭлементDESADV.Пометка;
			Вложенность = "DESADV."; 
		
			Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
				Если ОбязательноеПоле Тогда 
					ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
		            ПродолжитьОбработкуДокумента = Ложь;
				КонецЕсли;
				Продолжить;  
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
				ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
			Иначе
				Если ОбязательноеПоле Тогда 
		    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt;; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
            		ПродолжитьОбработкуДокумента = Ложь;
            	КонецЕсли;
			КонецЕсли;  
		КонецЦикла;
			
			XMLДокумент.ЗаписатьНачалоЭлемента("HEAD");
			    
				Для Каждого ЭлементHEAD из СписокHEAD Цикл
				
					СтрокаТЗ = Вычислить(ЭлементHEAD.Значение);
					ИмяРеквизита = ЭлементHEAD.Представление;
					ОбязательноеПоле = ЭлементHEAD.Пометка;
					Вложенность = "DESADV.HEAD."; 
				
									
					Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
						Если ОбязательноеПоле Тогда 
							ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
		            		ПродолжитьОбработкуДокумента = Ложь;
						КонецЕсли;
						Продолжить;  
					КонецЕсли;				
					 
					
					Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
						ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
					Иначе
						Если ОбязательноеПоле Тогда 
				    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
		            		ПродолжитьОбработкуДокумента = Ложь;
		            	КонецЕсли;
					КонецЕсли;
                         
				КонецЦикла;
					
	 			XMLДокумент.ЗаписатьНачалоЭлемента("PACKINGSEQUENCE"); 
	 			
			 		Для Каждого ЭлементPACKINGSEQUENCE из СписокPACKINGSEQUENCE Цикл
					
						СтрокаТЗ = Вычислить(ЭлементPACKINGSEQUENCE.Значение);
						ИмяРеквизита = ЭлементPACKINGSEQUENCE.Представление;
						ОбязательноеПоле = ЭлементPACKINGSEQUENCE.Пометка;
						Вложенность = "DESADV.HEAD.PACKINGSEQUENCE."; 
					
						Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
							Если ОбязательноеПоле Тогда 
								ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
	            				ПродолжитьОбработкуДокумента = Ложь;
							КонецЕсли;
							Продолжить;  
						КонецЕсли; 
						
						Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
							ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
						Иначе
							Если ОбязательноеПоле Тогда 
					    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
			            		ПродолжитьОбработкуДокумента = Ложь;
			            	КонецЕсли;
						КонецЕсли;

					КонецЦикла;
 		
	        		
	        		ОтборСтрокНоменклатур = Новый Структура;
    				ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
    				СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);	        			
	        			
	        		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
	        			    
	        		    XMLДокумент.ЗаписатьНачалоЭлемента("POSITION");
	        		    
			        		Для Каждого ЭлементPOSITION из CписокPOSITION Цикл
							
								СтрокаТЗ = Вычислить(ЭлементPOSITION.Значение);
								ИмяРеквизита = ЭлементPOSITION.Представление;
								ОбязательноеПоле = ЭлементPOSITION.Пометка;
								Вложенность = "DESADV.HEAD.PACKINGSEQUENCE.POSITION."; 
							
								Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
									Если ОбязательноеПоле Тогда 
										ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
	            						ПродолжитьОбработкуДокумента = Ложь;
									КонецЕсли;
									Продолжить;  
								КонецЕсли;
								
								Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
									ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
								Иначе
									Если ОбязательноеПоле Тогда 
							    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
					            		ПродолжитьОбработкуДокумента = Ложь;
					            	КонецЕсли;
								КонецЕсли;

							КонецЦикла;

 	        				////необязательные вложенные 		        				
	        				Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.PACKINGTYPE) Тогда	
		        				XMLДокумент.ЗаписатьНачалоЭлемента("PACKING");
		        				
			        				Для Каждого ЭлементPACKING из CписокPACKING Цикл
									
										СтрокаТЗ = Вычислить(ЭлементPACKING.Значение);
										ИмяРеквизита = ЭлементPACKING.Представление;
										ОбязательноеПоле = ЭлементPACKING.Пометка;
										Вложенность = "DESADV.HEAD.PACKINGSEQUENCE.POSITION.PACKING."; 
									
										Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
											Если ОбязательноеПоле Тогда 
												ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
	            								ПродолжитьОбработкуДокумента = Ложь;
											КонецЕсли;
											Продолжить;  
										КонецЕсли;
										
										Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
											ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
										Иначе
											Если ОбязательноеПоле Тогда 
									    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
							            		ПродолжитьОбработкуДокумента = Ложь;
							            	КонецЕсли;
										КонецЕсли;

									КонецЦикла;
		        					
		        				XMLДокумент.ЗаписатьКонецЭлемента();
		        				
	        				КонецЕсли;
	        					
	        			XMLДокумент.ЗаписатьКонецЭлемента(); 
	        				
	        		КонецЦикла;
	        			 
	    		XMLДокумент.ЗаписатьКонецЭлемента();
		    		     
			XMLДокумент.ЗаписатьКонецЭлемента();
				
		XMLДокумент.ЗаписатьКонецЭлемента();

		СтрокаXML = XMLДокумент.Закрыть(); 
		
		
		Если ЗначениеЗаполнено(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей) Тогда
			ТекстЛогаСобытий = ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + "Документ пропущен и отправлен не будет.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		    Продолжить;
		КонецЕсли;
			
		
		
		СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
		 
		СтруктураДляСовместимости.СтрокаXML = СтрокаXML;
		СтруктураДляСовместимости.Отказ = Ложь;
		СтруктураДляСовместимости.ВидДокумента = "DESADV_Исходящий";
		СтруктураДляСовместимости.ЗаказДата = СтрокаШапкиДокумента.ЗаказДата;
		СтруктураДляСовместимости.ЗаказНомер = СтрокаШапкиДокумента.ЗаказНомер;
		СтруктураДляСовместимости.Идентификатор = СтрокаШапкиДокумента.Идентификатор;
		СтруктураДляСовместимости.Контрагент = СтрокаШапкиДокумента.Контрагент;
		СтруктураДляСовместимости.Номер = СтрокаШапкиДокумента.Номер;
		СтруктураДляСовместимости.Организация = СтрокаШапкиДокумента.Организация;
		СтруктураДляСовместимости.Ссылка = СтрокаШапкиДокумента.Ссылка;
		СтруктураДляСовместимости.Статус = СтрокаШапкиДокумента.Статус;
		СтруктураДляСовместимости.ФайлИмя = СтрокаШапкиДокумента.ФайлИмя;
		СтруктураДляСовместимости.ЭлектронныйДокумент = СтрокаШапкиДокумента.Ссылка;
		СтруктураДляСовместимости.ИдентификаторЦепочки = СтрокаШапкиДокумента.ИдентификаторЦепочки;
		
		СтруктураФайлаДанных = Новый Структура;
		СтруктураФайлаДанных.Вставить("ВидДокумента"			, "DESADV_Исходящий");
		СтруктураФайлаДанных.Вставить("ДатаДокумента"			, СтрокаШапкиДокумента.Дата);
		СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
		СтруктураФайлаДанных.Вставить("ЗаказДата"				, СтрокаШапкиДокумента.ЗаказДата);
		СтруктураФайлаДанных.Вставить("ЗаказНомер"				, СтрокаШапкиДокумента.ЗаказНомер);
		СтруктураФайлаДанных.Вставить("ИдентификаторИспр"		, "");
		СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
		СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
		СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "UTF-8");
		СтруктураФайлаДанных.Вставить("Контрагент"				, СтрокаШапкиДокумента.Контрагент);
		СтруктураФайлаДанных.Вставить("НомерДокумента"			, СтрокаШапкиДокумента.Номер);
		СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
		СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
		СтруктураФайлаДанных.Вставить("Сообщение"				, "");
		СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
		СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
		СтруктураФайлаДанных.Вставить("СтруктураДокумента"		, СтруктураДляСовместимости);
		СтруктураФайлаДанных.Вставить("ТипФайла"				, СтрокаШапкиДокумента.ВидДокумента);

		МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
	КонецЦикла;
Иначе 
    ТекстЛогаСобытий = ТекстСообщенияПроверкиНаличияОбязательныхПолей;
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, Перечисления.ЭКОМ_УровниЛогирования.Ошибка, ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	
КонецЕсли;

//Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Возврат МассивСтруктурИсходящих; 
</Value>
		<Value xsi:type="xs:string"></Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Уведомление об отгрузке (DESADV)</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">6</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокНакладныеИсходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Уведомление об отгрузке (DESADV)</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>DESADV_Исходящий</presentation>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>Накладная_Исходящая</presentation>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Нет</presentation>
				<id xsi:type="xs:decimal">6</id>
			</item>
		</Value>
	</row>
</ValueTree>