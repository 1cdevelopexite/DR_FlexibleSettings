<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Атрибуты</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДанныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДоступныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Связи</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Обязательный</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий ORDER</Value>
		<Value xsi:type="xs:string">////////////////++ШАПКА++/////////////////////////////////////
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |    Заказ.Ссылка КАК Ссылка,
               |    Заказ.Номер КАК Номер,
               |    Заказ.Дата КАК Дата,
               |    Заказ.Номер КАК ЗаказНомер,
               |    Заказ.Дата КАК ЗаказДата,
               |    Заказ.Контрагент КАК Контрагент,
               |    Заказ.Организация КАК Организация,
               |    ВЫБОР
               |        КОГДА Заказ.ПоступлениеОднойДатой = ИСТИНА
               |                И НЕ Заказ.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
               |            ТОГДА Заказ.ДатаПоступления
               |        КОГДА НЕ Заказ.ЖелаемаяДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
               |            ТОГДА Заказ.ЖелаемаяДатаПоступления
               |        ИНАЧЕ Заказ.Дата
               |    КОНЕЦ КАК ДатаПоступления,
               |    DR_GLN_Контрагент.GLN КАК SUPPLIER,
               |    DR_GLN_Организация.GLN КАК BUYER,
               |    DR_ТочкиДоставки.GLN КАК DELIVERYPLACE,
               |    DR_GLN_Организация.GLN КАК INVOICEPARTNER,
               |    DR_GLN_Организация.GLN КАК SENDER,
               |    DR_GLN_Контрагент.GLN КАК RECIPIENT,
               |    ""Отправлен"" КАК Статус,
               |    ""ORDER_Исходящий"" КАК ВидДокумента,
               |    ""ORDER"" КАК ТипДокумента,
               |    ""220"" КАК DOCUMENTNAME,
               |    ""RUB"" КАК CURRENCY,
               |    Заказ.Договор.Дата КАК ДатаДоговора,
               |    Заказ.Договор.Номер КАК CAMPAIGNNUMBER,
               |    ""O"" КАК DOCTYPE
               |ИЗ
               |    Документ.ЗаказПоставщику КАК Заказ
               |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Контрагент
               |        ПО Заказ.Контрагент = DR_GLN_Контрагент.Объект
               |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Организация
               |        ПО Заказ.Организация = DR_GLN_Организация.Объект
               |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК DR_ТочкиДоставки
               |        ПО Заказ.Склад = DR_ТочкиДоставки.Объект
               |ГДЕ
               |    Заказ.Ссылка В(&amp;Документ)";

Запрос.УстановитьПараметр("Документ", Источник);
РезультатЗапроса = Запрос.Выполнить(); 
Результат = РезультатЗапроса.Выгрузить();

Результат.Колонки.Добавить("DATE", 					Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("NUMBER", 				Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("TIME",					Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("DELIVERYDATE", 			Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("CAMPAIGNDATE", 			Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("EDIINTERCHANGEID", 		Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("EDIMESSAGE", 			Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("ФайлИмя", 				Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("Идентификатор", 		Новый ОписаниеТипов("Строка"));  
Результат.Колонки.Добавить("ИдентификаторЦепочки", 	Новый ОписаниеТипов("Строка"));

EDIINTERCHANGEID = 0;

Для Каждого Строка Из Результат Цикл

    EDIINTERCHANGEID = НовыйНомерТранзакции(EDIINTERCHANGEID);

    Строка.NUMBER				= СокрЛП(Строка.Номер);
    Строка.DATE					= Формат(Строка.Дата, "ДФ=yyyy-MM-dd");
    Строка.TIME					= Формат(Строка.Дата, "ДФ=HH:mm");
    Строка.DELIVERYDATE			= Формат(Строка.ДатаПоступления, "ДФ=yyyy-MM-dd");
    Строка.CAMPAIGNDATE			= Формат(Строка.ДатаДоговора, "ДФ=yyyy-MM-dd");
    Строка.EDIINTERCHANGEID 	= Формат(EDIINTERCHANGEID, "ЧГ=0");
    Строка.EDIMESSAGE			= Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс000") + "-OUT-" + Строка.EDIINTERCHANGEID;
    Строка.ФайлИмя				= Строка.ТипДокумента + "_" + Строка.EDIMESSAGE + ".xml";
    Строка.Идентификатор		= Строка.ТипДокумента + "_" + Строка.EDIMESSAGE;   
    Строка.ИдентификаторЦепочки = Строка.Ссылка.УникальныйИдентификатор();

КонецЦикла;

////////////////--ШАПКА--/////////////////////////////////////

////////////////++ТАБЛИЦА++///////////////////////////////////
ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
               |    Заказ.Ссылка КАК Ссылка,
               |    ЗаказТовары.НомерСтроки КАК POSITIONNUMBER,
               |    ЗаказТовары.Номенклатура.Код КАК Артикул,
               |    ЗаказТовары.Количество КАК Количество,
               |    ВЫБОР
               |        КОГДА ЗаказТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение = """"
               |            ТОГДА ""PCE""
               |        ИНАЧЕ ЗаказТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
               |    КОНЕЦ КАК ORDERUNIT,
               |    ЗаказТовары.Цена КАК Цена,
               |    ВЫБОР
               |        КОГДА ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
               |                ИЛИ ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
               |            ТОГДА 10
               |        КОГДА ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
               |                ИЛИ ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
               |            ТОГДА 18
               |        КОГДА ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
               |                ИЛИ ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
               |            ТОГДА 20
               |        ИНАЧЕ 0
               |    КОНЕЦ КАК СтавкаНДС,
               |    ЗаказТовары.Номенклатура.Наименование КАК DESCRIPTION,
               |    МаксимальныйШтриКод.Штрихкод КАК ШтрихКод,
               |    """" КАК Вес,
               |    Заказ.ЦенаВключаетНДС КАК СуммаВключаетНДС,
               |    ЗаказТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
               |    Заказ.Представление КАК Представление
               |ИЗ
               |    Документ.ЗаказПоставщику КАК Заказ
               |        ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
               |            ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |                МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
               |                ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
               |            ИЗ
               |                Документ.ЗаказПоставщику КАК ЗаказШтрихКод
               |                    ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТоварыШтрихКод
               |                        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
               |                        ПО ЗаказТоварыШтрихКод.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
               |                    ПО ЗаказШтрихКод.Ссылка = ЗаказТоварыШтрихКод.Ссылка
               |            ГДЕ
               |                ЗаказШтрихКод.Ссылка В(&amp;Документ)
               |            
               |            СГРУППИРОВАТЬ ПО
               |                ШтрихкодыНоменклатуры.Номенклатура) КАК МаксимальныйШтриКод
               |            ПО ЗаказТовары.Номенклатура = МаксимальныйШтриКод.Номенклатура
               |        ПО Заказ.Ссылка = ЗаказТовары.Ссылка
               |ГДЕ
               |    ЗаказТовары.Ссылка В(&amp;Документ)
               |
               |УПОРЯДОЧИТЬ ПО
               |    POSITIONNUMBER";
ЗапросНоменклатур.УстановитьПараметр("Документ", Источник);
РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить(); 
РезультатНоменклатур = РезультатЗапросаНоменклатур.Выгрузить();

РезультатНоменклатур.Колонки.Добавить("PRODUCT"        , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRODUCTIDBUYER" , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("ORDEREDQUANTITY", Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("ORDERPRICE"     , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRICEWITHVAT"   , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("VAT"            , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("Отказ"          , Новый ОписаниеТипов("Булево"));


Для Каждого СтрокаНоменклатур Из РезультатНоменклатур Цикл
    СтрокаНоменклатур.Отказ = Ложь;
    Если ПустаяСтрока(СтрокаНоменклатур.Штрихкод) Тогда
                
        ТекстЛогаСобытий = "По документу - " + СтрокаНоменклатур.Представление + " в табличной части, в строке " +  СтрокаНоменклатур.POSITIONNUMBER +" у номенклатуры " + СтрокаНоменклатур.НоменклатураНаименование + " не заполнен штрихкод";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
  
        СтрокаНоменклатур.Отказ = Истина;
    КонецЕсли;

    Если СтрокаНоменклатур.СуммаВключаетНДС Тогда
         Цена     = Окр(СтрокаНоменклатур.Цена - (СтрокаНоменклатур.Цена * СтрокаНоменклатур.СтавкаНДС/(100 + СтрокаНоменклатур.СтавкаНДС)), 2);
         ЦенаСНДС = СтрокаНоменклатур.Цена;
    Иначе
         Цена     = СтрокаНоменклатур.Цена;
         ЦенаСНДС = Окр(СтрокаНоменклатур.Цена + (СтрокаНоменклатур.Цена * СтрокаНоменклатур.СтавкаНДС/100), 2);
    КонецЕсли;

    СтрокаНоменклатур.ORDERPRICE   		= Формат(Цена, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
    СтрокаНоменклатур.PRICEWITHVAT 		= Формат(ЦенаСНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
    СтрокаНоменклатур.PRODUCT 			= СокрЛП(СтрокаНоменклатур.Штрихкод);
    СтрокаНоменклатур.PRODUCTIDBUYER 	= СокрЛП(СтрокаНоменклатур.Артикул);
    СтрокаНоменклатур.ORDEREDQUANTITY 	= Формат(СтрокаНоменклатур.Количество, "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0");
    СтрокаНоменклатур.VAT 				= Формат(СтрокаНоменклатур.СтавкаНДС, "ЧДЦ=; ЧГ=0");

КонецЦикла;    

////////////////--ТАБЛИЦА--///////////////////////////////////


//////////////////++СОЗДАНИЕ_XML++/////////////////////////////////// 

МассивСтруктурИсходящих = Новый Массив;

СписокORDER = Новый СписокЗначений;	
СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DOCUMENTNAME"		, Истина);					
СписокORDER.Добавить("СтрокаШапкиДокумента"	, "NUMBER"				, Истина);				
СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DATE"				, Истина);
СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DELIVERYDATE"		, Истина);
СписокORDER.Добавить("СтрокаШапкиДокумента"	, "CURRENCY"			, Ложь);   							
СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DOCTYPE"				, Ложь);

СписокCAMPAIGNINFO = Новый СписокЗначений;	
СписокCAMPAIGNINFO.Добавить("СтрокаШапкиДокумента"	, "CAMPAIGNNUMBER"	, Ложь);
СписокCAMPAIGNINFO.Добавить("СтрокаШапкиДокумента"	, "CAMPAIGNDATE"	, Ложь); 

СписокHEAD = Новый СписокЗначений;	
СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SUPPLIER"				, Истина);
СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "BUYER"					, Истина);					
СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "DELIVERYPLACE"			, Истина);   							
СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SENDER"					, Истина);
СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "RECIPIENT"				, Истина);				
СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "EDIINTERCHANGEID"		, Ложь);
СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "INVOICEPARTNER"			, Ложь);
		
CписокPOSITION = Новый СписокЗначений;	
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "POSITIONNUMBER"		, Истина);
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCT"			, Истина);					
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDBUYER"		, Истина);
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDEREDQUANTITY"	, Истина);
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDERUNIT"			, Истина);
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDERPRICE"			, Истина);   							
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICEWITHVAT"		, Ложь);
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "VAT"				, Ложь);
CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "DESCRIPTION"		, Ложь);
			
//Основной цикл
Для каждого СтрокаШапкиДокумента из Результат Цикл

	ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";  
    				
	XMLДокумент        	= Новый ЗаписьXML;		
	ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб); 
	XMLДокумент.УстановитьСтроку("UTF-8");
	XMLДокумент.ЗаписатьОбъявлениеXML();
				
	XMLДокумент.ЗаписатьНачалоЭлемента("ORDER");
    
	Для Каждого ЭлементORDER из СписокORDER Цикл
	
		СтрокаТЗ = Вычислить(ЭлементORDER.Значение);
		ИмяРеквизита = ЭлементORDER.Представление;
		ОбязательноеПоле = ЭлементORDER.Пометка;
		Вложенность = "ORDER."; 
	
		Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
			ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
		Иначе
			Если ОбязательноеПоле Тогда 
	    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
        	КонецЕсли;
		КонецЕсли;  
	КонецЦикла;
	
	XMLДокумент.ЗаписатьНачалоЭлемента("CAMPAIGNINFO");
		    
		Для Каждого ЭлементCAMPAIGNINFO из СписокCAMPAIGNINFO Цикл
		
			СтрокаТЗ = Вычислить(ЭлементCAMPAIGNINFO.Значение);
			ИмяРеквизита = ЭлементCAMPAIGNINFO.Представление;
			ОбязательноеПоле = ЭлементCAMPAIGNINFO.Пометка;
			Вложенность = "ORDER.HEAD.CAMPAIGNINFO."; 
			
			Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
				ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
			Иначе
				Если ОбязательноеПоле Тогда 
		    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
            	КонецЕсли;
			КонецЕсли;
                 
		КонецЦикла;

	XMLДокумент.ЗаписатьКонецЭлемента();
	
		XMLДокумент.ЗаписатьНачалоЭлемента("HEAD");
		    
			Для Каждого ЭлементHEAD из СписокHEAD Цикл
			
				СтрокаТЗ = Вычислить(ЭлементHEAD.Значение);
				ИмяРеквизита = ЭлементHEAD.Представление;
				ОбязательноеПоле = ЭлементHEAD.Пометка;
				Вложенность = "ORDER.HEAD."; 
			
				Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
					ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
				Иначе
					Если ОбязательноеПоле Тогда 
			    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
	            	КонецЕсли;
				КонецЕсли;
                     
			КонецЦикла;
					 		
    		ОтборСтрокНоменклатур = Новый Структура;
			ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
			СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);	        			
    			
    		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
    			    
    		    XMLДокумент.ЗаписатьНачалоЭлемента("POSITION");
    		    
	        		Для Каждого ЭлементPOSITION из CписокPOSITION Цикл
					
						СтрокаТЗ = Вычислить(ЭлементPOSITION.Значение);
						ИмяРеквизита = ЭлементPOSITION.Представление;
						ОбязательноеПоле = ЭлементPOSITION.Пометка;
						Вложенность = "ORDER.HEAD.POSITION."; 
												
						Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
							ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
						Иначе
							Если ОбязательноеПоле Тогда 
					    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
			            	КонецЕсли;
						КонецЕсли;

					КонецЦикла;
    					
    			XMLДокумент.ЗаписатьКонецЭлемента(); 
    				
    		КонецЦикла;
    		     
		XMLДокумент.ЗаписатьКонецЭлемента();
			
	XMLДокумент.ЗаписатьКонецЭлемента();

	СтрокаXML = XMLДокумент.Закрыть(); 
	
	
	Если ЗначениеЗаполнено(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей) Тогда
		ТекстЛогаСобытий = ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + "Документ пропущен и отправлен не будет.";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
	    Продолжить;
	КонецЕсли;

	СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
	 
	СтруктураДляСовместимости.СтрокаXML = СтрокаXML;
	СтруктураДляСовместимости.Отказ = Ложь;
	СтруктураДляСовместимости.ВидДокумента = "ORDER_Исходящий";
	СтруктураДляСовместимости.ЗаказДата = СтрокаШапкиДокумента.ЗаказДата;
	СтруктураДляСовместимости.ЗаказНомер = СтрокаШапкиДокумента.ЗаказНомер;
	СтруктураДляСовместимости.Идентификатор = СтрокаШапкиДокумента.Идентификатор;
	СтруктураДляСовместимости.Контрагент = СтрокаШапкиДокумента.Контрагент;
	СтруктураДляСовместимости.Номер = СтрокаШапкиДокумента.Номер;
	СтруктураДляСовместимости.Организация = СтрокаШапкиДокумента.Организация;
	СтруктураДляСовместимости.Ссылка = СтрокаШапкиДокумента.Ссылка;
	СтруктураДляСовместимости.Статус = СтрокаШапкиДокумента.Статус;
	СтруктураДляСовместимости.ФайлИмя = СтрокаШапкиДокумента.ФайлИмя;
	СтруктураДляСовместимости.ЭлектронныйДокумент = СтрокаШапкиДокумента.Ссылка;
	СтруктураДляСовместимости.ИдентификаторЦепочки = СтрокаШапкиДокумента.ИдентификаторЦепочки;
	
	СтруктураФайлаДанных = Новый Структура;
	СтруктураФайлаДанных.Вставить("ВидДокумента"			, "ORDER_Исходящий");
	СтруктураФайлаДанных.Вставить("ДатаДокумента"			, СтрокаШапкиДокумента.Дата);
	СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
	СтруктураФайлаДанных.Вставить("ЗаказДата"				, СтрокаШапкиДокумента.ЗаказДата);
	СтруктураФайлаДанных.Вставить("ЗаказНомер"				, СтрокаШапкиДокумента.ЗаказНомер);
	СтруктураФайлаДанных.Вставить("ИдентификаторИспр"		, "");
	СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
	СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
	СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "UTF-8");
	СтруктураФайлаДанных.Вставить("Контрагент"				, СтрокаШапкиДокумента.Контрагент);
	СтруктураФайлаДанных.Вставить("НомерДокумента"			, СтрокаШапкиДокумента.Номер);
	СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
	СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
	СтруктураФайлаДанных.Вставить("Сообщение"				, "");
	СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
	СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
	СтруктураФайлаДанных.Вставить("СтруктураДокумента"		, СтруктураДляСовместимости);
	СтруктураФайлаДанных.Вставить("ТипФайла"				, СтрокаШапкиДокумента.ВидДокумента);

	МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
КонецЦикла;

//Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Возврат МассивСтруктурИсходящих;</Value>
		<Value xsi:type="xs:string">////////////////++ШАПКА++/////////////////////////////////////
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |    Заказ.Ссылка КАК Ссылка,
               |    Заказ.Номер КАК Номер,
               |    Заказ.Дата КАК Дата,
               |    Заказ.Номер КАК ЗаказНомер,
               |    Заказ.Дата КАК ЗаказДата,
               |    Заказ.Контрагент КАК Контрагент,
               |    Заказ.Организация КАК Организация,
               |    ВЫБОР
               |        КОГДА Заказ.ПоступлениеОднойДатой = ИСТИНА
               |                И НЕ Заказ.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
               |            ТОГДА Заказ.ДатаПоступления
               |        КОГДА НЕ Заказ.ЖелаемаяДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
               |            ТОГДА Заказ.ЖелаемаяДатаПоступления
               |        ИНАЧЕ Заказ.Дата
               |    КОНЕЦ КАК ДатаПоступления,
               |    DR_GLN_Контрагент.GLN КАК SUPPLIER,
               |    DR_GLN_Организация.GLN КАК BUYER,
               |    DR_ТочкиДоставки.GLN КАК DELIVERYPLACE,
               |    DR_GLN_Организация.GLN КАК INVOICEPARTNER,
               |    DR_GLN_Организация.GLN КАК SENDER,
               |    DR_GLN_Контрагент.GLN КАК RECIPIENT,
               |    ""Отправлен"" КАК Статус,
               |    ""ORDER_Исходящий"" КАК ВидДокумента,
               |    ""ORDER"" КАК ТипДокумента,
               |    ""220"" КАК DOCUMENTNAME,
               |    ""RUB"" КАК CURRENCY,
               |    Заказ.Договор.Дата КАК ДатаДоговора,
               |    Заказ.Договор.Номер КАК CAMPAIGNNUMBER,
               |    ""O"" КАК DOCTYPE
               |ИЗ
               |    Документ.ЗаказПоставщику КАК Заказ
               |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Контрагент
               |        ПО Заказ.Контрагент = DR_GLN_Контрагент.Объект
               |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Организация
               |        ПО Заказ.Организация = DR_GLN_Организация.Объект
               |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК DR_ТочкиДоставки
               |        ПО Заказ.Склад = DR_ТочкиДоставки.Объект
               |ГДЕ
               |    Заказ.Ссылка В(&amp;Документ)";

Запрос.УстановитьПараметр("Документ", Источник);
РезультатЗапроса = Запрос.Выполнить(); 
Результат = РезультатЗапроса.Выгрузить();

Результат.Колонки.Добавить("DATE", 					Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("NUMBER", 				Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("TIME",					Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("DELIVERYDATE", 			Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("CAMPAIGNDATE", 			Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("EDIINTERCHANGEID", 		Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("EDIMESSAGE", 			Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("ФайлИмя", 				Новый ОписаниеТипов("Строка"));
Результат.Колонки.Добавить("Идентификатор", 		Новый ОписаниеТипов("Строка"));  
Результат.Колонки.Добавить("ИдентификаторЦепочки", 	Новый ОписаниеТипов("Строка"));

EDIINTERCHANGEID = 0;

Для Каждого Строка Из Результат Цикл

    EDIINTERCHANGEID = НовыйНомерТранзакции(EDIINTERCHANGEID);

    Строка.NUMBER				= СокрЛП(Строка.Номер);
    Строка.DATE					= Формат(Строка.Дата, "ДФ=yyyy-MM-dd");
    Строка.TIME					= Формат(Строка.Дата, "ДФ=HH:mm");
    Строка.DELIVERYDATE			= Формат(Строка.ДатаПоступления, "ДФ=yyyy-MM-dd");
    Строка.CAMPAIGNDATE			= Формат(Строка.ДатаДоговора, "ДФ=yyyy-MM-dd");
    Строка.EDIINTERCHANGEID 	= Формат(EDIINTERCHANGEID, "ЧГ=0");
    Строка.EDIMESSAGE			= Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс000") + "-OUT-" + Строка.EDIINTERCHANGEID;
    Строка.ФайлИмя				= Строка.ТипДокумента + "_" + Строка.EDIMESSAGE + ".xml";
    Строка.Идентификатор		= Строка.ТипДокумента + "_" + Строка.EDIMESSAGE;   
    Строка.ИдентификаторЦепочки = Строка.Ссылка.УникальныйИдентификатор();

КонецЦикла;

////////////////--ШАПКА--/////////////////////////////////////

////////////////++ТАБЛИЦА++///////////////////////////////////
ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
               |    Заказ.Ссылка КАК Ссылка,
               |    ЗаказТовары.НомерСтроки КАК POSITIONNUMBER,
               |    ЗаказТовары.Номенклатура.Код КАК Артикул,
               |    ЗаказТовары.Количество КАК Количество,
               |    ВЫБОР
               |        КОГДА ЗаказТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение = """"
               |            ТОГДА ""PCE""
               |        ИНАЧЕ ЗаказТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение
               |    КОНЕЦ КАК ORDERUNIT,
               |    ЗаказТовары.Цена КАК Цена,
               |    ВЫБОР
               |        КОГДА ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
               |                ИЛИ ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
               |            ТОГДА 10
               |        КОГДА ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
               |                ИЛИ ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
               |            ТОГДА 18
               |        КОГДА ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20)
               |                ИЛИ ЗаказТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120)
               |            ТОГДА 20
               |        ИНАЧЕ 0
               |    КОНЕЦ КАК СтавкаНДС,
               |    ЗаказТовары.Номенклатура.Наименование КАК DESCRIPTION,
               |    МаксимальныйШтриКод.Штрихкод КАК ШтрихКод,
               |    """" КАК Вес,
               |    Заказ.ЦенаВключаетНДС КАК СуммаВключаетНДС,
               |    ЗаказТовары.Номенклатура.Наименование КАК НоменклатураНаименование,
               |    Заказ.Представление КАК Представление
               |ИЗ
               |    Документ.ЗаказПоставщику КАК Заказ
               |        ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
               |            ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |                МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
               |                ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
               |            ИЗ
               |                Документ.ЗаказПоставщику КАК ЗаказШтрихКод
               |                    ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТоварыШтрихКод
               |                        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
               |                        ПО ЗаказТоварыШтрихКод.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
               |                    ПО ЗаказШтрихКод.Ссылка = ЗаказТоварыШтрихКод.Ссылка
               |            ГДЕ
               |                ЗаказШтрихКод.Ссылка В(&amp;Документ)
               |            
               |            СГРУППИРОВАТЬ ПО
               |                ШтрихкодыНоменклатуры.Номенклатура) КАК МаксимальныйШтриКод
               |            ПО ЗаказТовары.Номенклатура = МаксимальныйШтриКод.Номенклатура
               |        ПО Заказ.Ссылка = ЗаказТовары.Ссылка
               |ГДЕ
               |    ЗаказТовары.Ссылка В(&amp;Документ)
               |
               |УПОРЯДОЧИТЬ ПО
               |    POSITIONNUMBER";
ЗапросНоменклатур.УстановитьПараметр("Документ", Источник);
РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить(); 
РезультатНоменклатур = РезультатЗапросаНоменклатур.Выгрузить();

РезультатНоменклатур.Колонки.Добавить("PRODUCT"        , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRODUCTIDBUYER" , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("ORDEREDQUANTITY", Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("ORDERPRICE"     , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRICEWITHVAT"   , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("VAT"            , Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("Отказ"          , Новый ОписаниеТипов("Булево"));


Для Каждого СтрокаНоменклатур Из РезультатНоменклатур Цикл
    СтрокаНоменклатур.Отказ = Ложь;
    Если ПустаяСтрока(СтрокаНоменклатур.Штрихкод) Тогда
                
        ТекстЛогаСобытий = "По документу - " + СтрокаНоменклатур.Представление + " в табличной части, в строке " +  СтрокаНоменклатур.POSITIONNUMBER +" у номенклатуры " + СтрокаНоменклатур.НоменклатураНаименование + " не заполнен штрихкод";
		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
  
        СтрокаНоменклатур.Отказ = Истина;
    КонецЕсли;

    Если СтрокаНоменклатур.СуммаВключаетНДС Тогда
         Цена     = Окр(СтрокаНоменклатур.Цена - (СтрокаНоменклатур.Цена * СтрокаНоменклатур.СтавкаНДС/(100 + СтрокаНоменклатур.СтавкаНДС)), 2);
         ЦенаСНДС = СтрокаНоменклатур.Цена;
    Иначе
         Цена     = СтрокаНоменклатур.Цена;
         ЦенаСНДС = Окр(СтрокаНоменклатур.Цена + (СтрокаНоменклатур.Цена * СтрокаНоменклатур.СтавкаНДС/100), 2);
    КонецЕсли;

    СтрокаНоменклатур.ORDERPRICE   		= Формат(Цена, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
    СтрокаНоменклатур.PRICEWITHVAT 		= Формат(ЦенаСНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
    СтрокаНоменклатур.PRODUCT 			= СокрЛП(СтрокаНоменклатур.Штрихкод);
    СтрокаНоменклатур.PRODUCTIDBUYER 	= СокрЛП(СтрокаНоменклатур.Артикул);
    СтрокаНоменклатур.ORDEREDQUANTITY 	= Формат(СтрокаНоменклатур.Количество, "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0");
    СтрокаНоменклатур.VAT 				= Формат(СтрокаНоменклатур.СтавкаНДС, "ЧДЦ=; ЧГ=0");

КонецЦикла;    

////////////////--ТАБЛИЦА--///////////////////////////////////


//////////////////++СОЗДАНИЕ_XML++/////////////////////////////////// 
//Проверка наличия обязательных полей
ТекстСообщенияПроверкиНаличияОбязательныхПолей = "";
ПродолжитьОбработку = Истина;

ОбязательныеКолонки = Новый СписокЗначений;

//ORDER
ОбязательныеКолонки.Добавить("Результат.NUMBER"				,"ORDER.NUMBER");
ОбязательныеКолонки.Добавить("Результат.DATE"				,"ORDER.DATE");
ОбязательныеКолонки.Добавить("Результат.DOCUMENTNAME"		,"ORDER.DOCUMENTNAME");
ОбязательныеКолонки.Добавить("Результат.DELIVERYDATE"		,"ORDER.DELIVERYDATE");
  
//HEAD
ОбязательныеКолонки.Добавить("Результат.SUPPLIER"			,"ORDER.HEAD.SUPPLIER");
ОбязательныеКолонки.Добавить("Результат.BUYER"				,"ORDER.HEAD.BUYER");
ОбязательныеКолонки.Добавить("Результат.RECIPIENT"			,"ORDER.HEAD.RECIPIENT");
ОбязательныеКолонки.Добавить("Результат.DELIVERYPLACE"		,"ORDER.HEAD.DELIVERYPLACE");
ОбязательныеКолонки.Добавить("Результат.SENDER"				,"ORDER.HEAD.SENDER");
	
//POSITION
ОбязательныеКолонки.Добавить("РезультатНоменклатур.POSITIONNUMBER"		,"ORDER.HEAD.POSITION.POSITIONNUMBER");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRODUCT"				,"ORDER.HEAD.POSITION.PRODUCT");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRODUCTIDBUYER"		,"ORDER.HEAD.POSITION.PRODUCTIDBUYER");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.ORDEREDQUANTITY"		,"ORDER.HEAD.POSITION.ORDEREDQUANTITY");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.ORDERUNIT"			,"ORDER.HEAD.POSITION.ORDERUNIT");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.ORDERPRICE"			,"ORDER.HEAD.POSITION.ORDERPRICE");
	

Для каждого ОбязательнаяКолонка из ОбязательныеКолонки Цикл 

    Массив = СтрРазделить(ОбязательнаяКолонка.Значение, ".");   
    НайтиКолонкуВТЗ = Вычислить(Массив[0] + ".Колонки.Найти(""" + Массив[1] + """)"); 
    
	Если НайтиКолонкуВТЗ = Неопределено Тогда
	
		ТекстСообщенияПроверкиНаличияОбязательныхПолей = ?(ТекстСообщенияПроверкиНаличияОбязательныхПолей = "" ,"В сформированных таблицах отсутствуют данные для заполнения обязательного поля """ + ОбязательнаяКолонка.Представление + """.", ТекстСообщенияПроверкиНаличияОбязательныхПолей + Символы.ПС + "В сформированных таблицах отсутствуют данные для заполнения обязательного поля """ + ОбязательнаяКолонка.Представление + """."); 
	    ПродолжитьОбработку = Ложь;
	КонецЕсли

КонецЦикла;

Если ТекстСообщенияПроверкиНаличияОбязательныхПолей &lt;&gt; "" Тогда
	ТекстСообщенияПроверкиНаличияОбязательныхПолей = ТекстСообщенияПроверкиНаличияОбязательныхПолей + Символы.ПС + "Исходящие документы не будут отправлены." 
КонецЕсли;
//Проверка наличия не обязательных полей

МассивСтруктурИсходящих = Новый Массив;

Если ПродолжитьОбработку Тогда  
	
	СписокORDER = Новый СписокЗначений;	
	СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DOCUMENTNAME"		, Истина);					
	СписокORDER.Добавить("СтрокаШапкиДокумента"	, "NUMBER"				, Истина);				
	СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DATE"				, Истина);
	СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DELIVERYDATE"		, Истина);
	СписокORDER.Добавить("СтрокаШапкиДокумента"	, "CURRENCY"			, Ложь);   							
	СписокORDER.Добавить("СтрокаШапкиДокумента"	, "DOCTYPE"				, Ложь);
	
	СписокCAMPAIGNINFO = Новый СписокЗначений;	
	СписокCAMPAIGNINFO.Добавить("СтрокаШапкиДокумента"	, "CAMPAIGNNUMBER"	, Ложь);
	СписокCAMPAIGNINFO.Добавить("СтрокаШапкиДокумента"	, "CAMPAIGNDATE"	, Ложь); 
	
	СписокHEAD = Новый СписокЗначений;	
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SUPPLIER"				, Истина);
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "BUYER"					, Истина);					
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "DELIVERYPLACE"			, Истина);   							
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SENDER"					, Истина);
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "RECIPIENT"				, Истина);				
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "EDIINTERCHANGEID"		, Ложь);
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "INVOICEPARTNER"			, Ложь);
			
	CписокPOSITION = Новый СписокЗначений;	
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "POSITIONNUMBER"		, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCT"			, Истина);					
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDBUYER"		, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDEREDQUANTITY"	, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDERUNIT"			, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDERPRICE"			, Истина);   							
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICEWITHVAT"		, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "VAT"				, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "DESCRIPTION"		, Ложь);
				
	
	Для каждого СтрокаШапкиДокумента из Результат Цикл

		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";  
	    				
		XMLДокумент        	= Новый ЗаписьXML;		
		ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб); 
		XMLДокумент.УстановитьСтроку("UTF-8");
		XMLДокумент.ЗаписатьОбъявлениеXML();
		
		
			
		XMLДокумент.ЗаписатьНачалоЭлемента("ORDER");
	    
		Для Каждого ЭлементORDER из СписокORDER Цикл
		
			СтрокаТЗ = Вычислить(ЭлементORDER.Значение);
			ИмяРеквизита = ЭлементORDER.Представление;
			ОбязательноеПоле = ЭлементORDER.Пометка;
			Вложенность = "ORDER."; 
		
			Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
				Если ОбязательноеПоле Тогда 
					ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
		            ПродолжитьОбработкуДокумента = Ложь;
				КонецЕсли;
				Продолжить;  
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
				ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
			Иначе
				Если ОбязательноеПоле Тогда 
		    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
            		ПродолжитьОбработкуДокумента = Ложь;
            	КонецЕсли;
			КонецЕсли;  
		КонецЦикла;
		
		XMLДокумент.ЗаписатьНачалоЭлемента("CAMPAIGNINFO");
			    
			Для Каждого ЭлементCAMPAIGNINFO из СписокCAMPAIGNINFO Цикл
			
				СтрокаТЗ = Вычислить(ЭлементCAMPAIGNINFO.Значение);
				ИмяРеквизита = ЭлементCAMPAIGNINFO.Представление;
				ОбязательноеПоле = ЭлементCAMPAIGNINFO.Пометка;
				Вложенность = "ORDER.HEAD.CAMPAIGNINFO."; 
			
								
				Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
					Если ОбязательноеПоле Тогда 
						ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
	            		ПродолжитьОбработкуДокумента = Ложь;
					КонецЕсли;
					Продолжить;  
				КонецЕсли;				
				 
				
				Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
					ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
				Иначе
					Если ОбязательноеПоле Тогда 
			    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
	            		ПродолжитьОбработкуДокумента = Ложь;
	            	КонецЕсли;
				КонецЕсли;
                     
			КонецЦикла;

		XMLДокумент.ЗаписатьКонецЭлемента();
		
			XMLДокумент.ЗаписатьНачалоЭлемента("HEAD");
			    
				Для Каждого ЭлементHEAD из СписокHEAD Цикл
				
					СтрокаТЗ = Вычислить(ЭлементHEAD.Значение);
					ИмяРеквизита = ЭлементHEAD.Представление;
					ОбязательноеПоле = ЭлементHEAD.Пометка;
					Вложенность = "ORDER.HEAD."; 
				
									
					Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
						Если ОбязательноеПоле Тогда 
							ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
		            		ПродолжитьОбработкуДокумента = Ложь;
						КонецЕсли;
						Продолжить;  
					КонецЕсли;				
					 
					
					Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
						ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
					Иначе
						Если ОбязательноеПоле Тогда 
				    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
		            		ПродолжитьОбработкуДокумента = Ложь;
		            	КонецЕсли;
					КонецЕсли;
                         
				КонецЦикла;
						 		
        		
        		ОтборСтрокНоменклатур = Новый Структура;
				ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
				СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);	        			
        			
        		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
        			    
        		    XMLДокумент.ЗаписатьНачалоЭлемента("POSITION");
        		    
		        		Для Каждого ЭлементPOSITION из CписокPOSITION Цикл
						
							СтрокаТЗ = Вычислить(ЭлементPOSITION.Значение);
							ИмяРеквизита = ЭлементPOSITION.Представление;
							ОбязательноеПоле = ЭлементPOSITION.Пометка;
							Вложенность = "ORDER.HEAD.POSITION."; 
						
							Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
								Если ОбязательноеПоле Тогда 
									ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
            						ПродолжитьОбработкуДокумента = Ложь;
								КонецЕсли;
								Продолжить;  
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
								ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
							Иначе
								Если ОбязательноеПоле Тогда 
						    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
				            		ПродолжитьОбработкуДокумента = Ложь;
				            	КонецЕсли;
							КонецЕсли;

						КонецЦикла;
        					
        			XMLДокумент.ЗаписатьКонецЭлемента(); 
        				
        		КонецЦикла;
	    		     
			XMLДокумент.ЗаписатьКонецЭлемента();
				
		XMLДокумент.ЗаписатьКонецЭлемента();

		СтрокаXML = XMLДокумент.Закрыть(); 
		
		
		Если ЗначениеЗаполнено(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей) Тогда
			ТекстЛогаСобытий = ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + "Документ пропущен и отправлен не будет.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		    Продолжить;
		КонецЕсли;
			
		
		
		СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
		 
		СтруктураДляСовместимости.СтрокаXML = СтрокаXML;
		СтруктураДляСовместимости.Отказ = Ложь;
		СтруктураДляСовместимости.ВидДокумента = "ORDER_Исходящий";
		СтруктураДляСовместимости.ЗаказДата = СтрокаШапкиДокумента.ЗаказДата;
		СтруктураДляСовместимости.ЗаказНомер = СтрокаШапкиДокумента.ЗаказНомер;
		СтруктураДляСовместимости.Идентификатор = СтрокаШапкиДокумента.Идентификатор;
		СтруктураДляСовместимости.Контрагент = СтрокаШапкиДокумента.Контрагент;
		СтруктураДляСовместимости.Номер = СтрокаШапкиДокумента.Номер;
		СтруктураДляСовместимости.Организация = СтрокаШапкиДокумента.Организация;
		СтруктураДляСовместимости.Ссылка = СтрокаШапкиДокумента.Ссылка;
		СтруктураДляСовместимости.Статус = СтрокаШапкиДокумента.Статус;
		СтруктураДляСовместимости.ФайлИмя = СтрокаШапкиДокумента.ФайлИмя;
		СтруктураДляСовместимости.ЭлектронныйДокумент = СтрокаШапкиДокумента.Ссылка;
		СтруктураДляСовместимости.ИдентификаторЦепочки = СтрокаШапкиДокумента.ИдентификаторЦепочки;
		
		СтруктураФайлаДанных = Новый Структура;
		СтруктураФайлаДанных.Вставить("ВидДокумента"			, "ORDER_Исходящий");
		СтруктураФайлаДанных.Вставить("ДатаДокумента"			, СтрокаШапкиДокумента.Дата);
		СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
		СтруктураФайлаДанных.Вставить("ЗаказДата"				, СтрокаШапкиДокумента.ЗаказДата);
		СтруктураФайлаДанных.Вставить("ЗаказНомер"				, СтрокаШапкиДокумента.ЗаказНомер);
		СтруктураФайлаДанных.Вставить("ИдентификаторИспр"		, "");
		СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
		СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
		СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "UTF-8");
		СтруктураФайлаДанных.Вставить("Контрагент"				, СтрокаШапкиДокумента.Контрагент);
		СтруктураФайлаДанных.Вставить("НомерДокумента"			, СтрокаШапкиДокумента.Номер);
		СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
		СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
		СтруктураФайлаДанных.Вставить("Сообщение"				, "");
		СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
		СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
		СтруктураФайлаДанных.Вставить("СтруктураДокумента"		, СтруктураДляСовместимости);
		СтруктураФайлаДанных.Вставить("ТипФайла"				, СтрокаШапкиДокумента.ВидДокумента);

		МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
	КонецЦикла;
Иначе 
    ТекстЛогаСобытий = ТекстСообщенияПроверкиНаличияОбязательныхПолей;
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	
КонецЕсли;

//Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Возврат МассивСтруктурИсходящих;
</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Исходящий ORDER</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">8</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<presentation>СписокЗаказыИсходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Исходящий ORDER</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПередаватьТекстПричины</value>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>ORDER_Исходящий</presentation>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>Заказ_Исходящий</presentation>
				<id xsi:type="xs:decimal">7</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Нет</presentation>
				<id xsi:type="xs:decimal">8</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueTable">
			<column>
				<Name xsi:type="xs:string">Реквизит1</Name>
				<ValueType>
					<Type>xs:string</Type>
					<StringQualifiers>
						<Length>0</Length>
						<AllowedLength>Variable</AllowedLength>
					</StringQualifiers>
				</ValueType>
			</column>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:boolean">false</Value>
		<Value xsi:type="xs:string"/>
	</row>
</ValueTree>