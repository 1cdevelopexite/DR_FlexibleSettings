<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Атрибуты</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДанныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДоступныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Связи</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Обязательный</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий ORDRSP (подтверждение заказа)</Value>
		<Value xsi:type="xs:string">	 
#Область ШАПКА_Заполнение
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	DR_События_ORDER.Документ КАК ORDER,
               |	DR_События_Заказ.Документ КАК Заказ,
               |	DR_События_ORDER.ИдентификаторЦепочки КАК ИдентификаторЦепочки
               |ПОМЕСТИТЬ ВТ_ЦепочкаДокументов
               |ИЗ
               |	РегистрСведений.DR_События КАК DR_События_Заказ
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_ORDER
               |		ПО DR_События_Заказ.ИдентификаторЦепочки = DR_События_ORDER.ИдентификаторЦепочки
               |			И (DR_События_ORDER.ВидДокумента = ""ORDER_Входящий"")
               |			И DR_События_Заказ.ИдентификаторОснования = DR_События_ORDER.Идентификатор
               |			И (ВЫРАЗИТЬ(DR_События_ORDER.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
               |ГДЕ
               |	DR_События_Заказ.Документ В(&amp;Документ)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	DR_ЗаказНомер.Значение КАК ЗаказНомер,
               |	DR_ЗаказДата.Значение КАК ЗаказДата,
               |	DR_Валюта.Значение КАК xmlВалюта,
               |	POSITION.ХранилищеЗначения КАК POSITION,
               |	ВЫБОР
               |		КОГДА CAMPAIGNNUMBER.Значение ЕСТЬ NULL
               |			ТОГДА CAMPAIGNINFO.ХранилищеЗначения
               |		ИНАЧЕ CAMPAIGNNUMBER.Значение
               |	КОНЕЦ КАК ДанныеДоговора,
               |	ЕСТЬNULL(DR_ПричинаОтказа.Значение, """") КАК ПричинаОтказа,
               |	DR_Документ.Ссылка КАК Ссылка,
               |	ВТ_ЦепочкаДокументов.Заказ КАК Заказ1С,
               |	ЕСТЬNULL(ВТ_ЦепочкаДокументов.ИдентификаторЦепочки, """") КАК ИдентификаторЦепочки
               |ПОМЕСТИТЬ ДанныеORDER
               |ИЗ
               |	ВТ_ЦепочкаДокументов КАК ВТ_ЦепочкаДокументов
               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
               |		ПО ВТ_ЦепочкаДокументов.ORDER = DR_Документ.Ссылка
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК CAMPAIGNINFO
               |		ПО (DR_Документ.Ссылка = CAMPAIGNINFO.Ссылка)
               |			И (CAMPAIGNINFO.Реквизит = ""CAMPAIGNINFO"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_Валюта
               |		ПО (DR_Документ.Ссылка = DR_Валюта.Ссылка)
               |			И (DR_Валюта.Реквизит = ""Валюта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ЗаказНомер
               |		ПО (DR_Документ.Ссылка = DR_ЗаказНомер.Ссылка)
               |			И (DR_ЗаказНомер.Реквизит = ""NUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ЗаказДата
               |		ПО (DR_Документ.Ссылка = DR_ЗаказДата.Ссылка)
               |			И (DR_ЗаказДата.Реквизит = ""ДатаЭлектронногоДокумента"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК CAMPAIGNNUMBER
               |		ПО (DR_Документ.Ссылка = CAMPAIGNNUMBER.Ссылка)
               |			И (CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNNUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК POSITION
               |		ПО (DR_Документ.Ссылка = POSITION.Ссылка)
               |			И (POSITION.Реквизит = ""POSITION"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ПричинаОтказа
               |		ПО (DR_Документ.Ссылка = DR_ПричинаОтказа.Ссылка)
               |			И (DR_ПричинаОтказа.Реквизит = ""POSITOIN"")
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ЗаказКлиента.Ссылка КАК Ссылка,
               |	ЗаказКлиента.Номер КАК NUMBER,
               |	ЗаказКлиента.Дата КАК Дата,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК DATE,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК TIME,
               |	ДанныеORDER.ЗаказНомер КАК ORDERNUMBER,
               |	ДанныеORDER.ЗаказДата КАК ДатаЗаказа,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК ORDERDATE,
               |	ЗаказКлиента.ДатаОтгрузки КАК ДатаОтгрузки,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК DELIVERYDATE,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК DELIVERYTIME,
               |	""29"" КАК ACTION,
               |	ДанныеORDER.xmlВалюта КАК CURRENCY,
               |	ЗаказКлиента.Комментарий КАК INFO,
               |	GLN_Контрагент.GLN КАК BUYER,
               |	GLN_Организация.GLN КАК SUPPLIER,
               |	GLN_Организация.GLN КАК SENDER,
               |	GLN_Контрагент.GLN КАК RECIPIENT,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК EDIMESSAGE,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК EDIINTERCHANGEID,
               |	ДанныеORDER.POSITION КАК POSITION,
               |	ДанныеORDER.ДанныеДоговора КАК ДанныеДоговора,
               |	ДанныеORDER.ЗаказДата КАК ЗаказДата,
               |	ДанныеORDER.ЗаказНомер КАК ЗаказНомер,
               |	ЗаказКлиента.Номер КАК Номер,
               |	ЗаказКлиента.Контрагент КАК Контрагент,
               |	ЗаказКлиента.Организация КАК Организация,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК ФайлИмя,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК Идентификатор,
               |	""Отправлен"" КАК Статус,
               |	ДанныеORDER.Ссылка КАК ЭлектронныйДокумент,
               |	""ORDRSP"" КАК ВидДокумента,
               |	ЭКОМ_ТочкиДоставки.GLN КАК DELIVERYPLACE,
               |	""O"" КАК DOCTYPE,
               |	ВходящиеORDER_События.ДополнительнаяИнформация КАК ДополнительнаяИнформацияORDER,
               |	ЕСТЬNULL(ДанныеORDER.ПричинаОтказа, """") КАК REASONDECREACEQUANTITYALL,
               |	ЕСТЬNULL(ДанныеORDER.ИдентификаторЦепочки, """") КАК ИдентификаторЦепочки
               |ИЗ
               |	Документ.ЗаказКлиента КАК ЗаказКлиента
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК GLN_Контрагент
               |		ПО ЗаказКлиента.Контрагент = GLN_Контрагент.Объект
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК GLN_Организация
               |		ПО ЗаказКлиента.Организация = GLN_Организация.Объект
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ЭКОМ_ТочкиДоставки
               |		ПО (ЗаказКлиента.Партнер = ЭКОМ_ТочкиДоставки.Объект
               |				ИЛИ ЗаказКлиента.Контрагент = ЭКОМ_ТочкиДоставки.Объект
               |				ИЛИ ЗаказКлиента.Грузополучатель = ЭКОМ_ТочкиДоставки.Объект)
               |		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеORDER КАК ДанныеORDER
               |		ПО ЗаказКлиента.Ссылка = ДанныеORDER.Заказ1С
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК ВходящиеORDER_События
               |		ПО ЗаказКлиента.Ссылка = ВходящиеORDER_События.Документ
               |			И (ВходящиеORDER_События.ВидДокумента = ""ORDER_Входящий"")
               |ГДЕ
               |	ЗаказКлиента.Ссылка В(&amp;Документ)
               |
               |УПОРЯДОЧИТЬ ПО
               |	Ссылка"; 

Запрос.УстановитьПараметр("Документ", Источник);
РезультатЗапроса = Запрос.Выполнить(); 
Результат = РезультатЗапроса.Выгрузить();
Результат.Колонки.Добавить("FRESH", Новый ОписаниеТипов("Строка")); 

ДанныеORDER = новый ТаблицаЗначений;
ДанныеORDER.Колонки.Добавить("ЗаказКлиента", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
ДанныеORDER.Колонки.Добавить("ORDER", Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ДанныеORDER.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеORDER.Колонки.Добавить("КоличествоЗаказанное", Новый ОписаниеТипов("Число"));   

КвалификаторСтроки = Новый КвалификаторыСтроки(250,ДопустимаяДлина.Фиксированная);
ДанныеТЧНоменклатурORDER = новый ТаблицаЗначений;
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ORDER", 						Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НомерСтроки", 				Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Цена", 						Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("СтавкаНДС", 					Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("СуммаНДС", 					Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Заказ", 						Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НоменклатураКод", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("xmlЕдиницаИзмерения", 		Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоЗаказанное", 		Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоПоставляемое", 	Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ОписаниеПродукта", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НомерПродукта", 				Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("НомерПродуктаПокупателя", 	Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КалибрУпаковки", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ТипФасовки", 				Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоВФасовке", 		Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("БазоваяЕдиницаТовара", 		Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ПричинаОтказаТЧ", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));



Для Каждого Строка Из Результат Цикл
	
	Данные_POSITION = Строка.POSITION.Получить(); 
	
	Для Каждого СтрокаНоменклатуры Из Данные_POSITION Цикл
		НоваяСтрокаORDER 					  = ДанныеORDER.Добавить();
		НоваяСтрокаORDER.ЗаказКлиента   	  = Строка.Ссылка;
 		НоваяСтрокаORDER.ORDER 				  = Строка.ЭлектронныйДокумент;
		НоваяСтрокаORDER.Номенклатура 		  = СтрокаНоменклатуры.Номенклатура;
		НоваяСтрокаORDER.КоличествоЗаказанное = СтрокаНоменклатуры.ORDEREDQUANTITY; 
		
		НоваяСтрокаНоменклатуры 						= ДанныеТЧНоменклатурORDER.Добавить();
		НоваяСтрокаНоменклатуры.ORDER                   = Строка.ЭлектронныйДокумент;
		НоваяСтрокаНоменклатуры.НомерСтроки             = СтрокаНоменклатуры.POSITIONNUMBER;
		НоваяСтрокаНоменклатуры.Цена                    = СтрокаНоменклатуры.ORDERPRICE;
		НоваяСтрокаНоменклатуры.СтавкаНДС               = СтрокаНоменклатуры.VAT;
		НоваяСтрокаНоменклатуры.СуммаНДС                = СтрокаНоменклатуры.PRICEWITHVAT;
		НоваяСтрокаНоменклатуры.Заказ                   = Строка.Ссылка;
		НоваяСтрокаНоменклатуры.Номенклатура            = СтрокаНоменклатуры.Номенклатура;
		НоваяСтрокаНоменклатуры.НоменклатураКод         = СтрокаНоменклатуры.Номенклатура.Код;
		НоваяСтрокаНоменклатуры.xmlЕдиницаИзмерения     = СтрокаНоменклатуры.ORDERUNIT;
		НоваяСтрокаНоменклатуры.КоличествоЗаказанное    = СтрокаНоменклатуры.ORDEREDQUANTITY;
		НоваяСтрокаНоменклатуры.КоличествоПоставляемое  = СтрокаНоменклатуры.ORDEREDQUANTITY;
		НоваяСтрокаНоменклатуры.ОписаниеПродукта        = СтрокаНоменклатуры.DESCRIPTION;
		НоваяСтрокаНоменклатуры.НомерПродукта           = СтрокаНоменклатуры.PRODUCT;
		НоваяСтрокаНоменклатуры.НомерПродуктаПокупателя = СтрокаНоменклатуры.PRODUCTIDBUYER;
		НоваяСтрокаНоменклатуры.БазоваяЕдиницаТовара    = СтрокаНоменклатуры.ЕдиницаИзмерения;
					
	КонецЦикла;
	
КонецЦикла;


ЗапросТабЧасть = Новый Запрос;               
ЗапросТабЧасть.Текст = "ВЫБРАТЬ
                       |	DR_События_ORDER.Документ КАК ORDER,
                       |	DR_События_Заказ.Документ КАК Заказ
                       |ПОМЕСТИТЬ ВТ_ЦепочкаДокументов
                       |ИЗ
                       |	РегистрСведений.DR_События КАК DR_События_Заказ
                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_ORDER
                       |		ПО DR_События_Заказ.ИдентификаторЦепочки = DR_События_ORDER.ИдентификаторЦепочки
                       |			И (DR_События_ORDER.ВидДокумента = ""ORDER_Входящий"")
                       |			И DR_События_Заказ.ИдентификаторОснования = DR_События_ORDER.Идентификатор
                       |			И (ВЫРАЗИТЬ(DR_События_ORDER.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
                       |ГДЕ
                       |	DR_События_Заказ.Документ В(&amp;Документ)
                       |;
                       |
                       |////////////////////////////////////////////////////////////////////////////////
                       |ВЫБРАТЬ
                       |	ДанныеORDER.ЗаказКлиента КАК Заказ1С,
                       |	ДанныеORDER.ORDER КАК ORDER,
                       |	ДанныеORDER.Номенклатура КАК Номенклатура,
                       |	ДанныеORDER.КоличествоЗаказанное КАК КоличествоЗаказанное
                       |ПОМЕСТИТЬ ВТ_ДанныеORDER
                       |ИЗ
                       |	&amp;ДанныеORDER КАК ДанныеORDER
                       |;
                       |
                       |////////////////////////////////////////////////////////////////////////////////
                       |ВЫБРАТЬ
                       |	ВТ_ДанныеORDER.Заказ1С КАК ЗаказКлиента,
                       |	МИНИМУМ(ЕСТЬNULL(ЗаказКлиентаТовары.Отменено, ЛОЖЬ)) КАК Отменено,
                       |	ВТ_ДанныеORDER.Номенклатура КАК Номенклатура,
                       |	СУММА(ЕСТЬNULL(ЗаказКлиентаТовары.Количество, 0)) КАК КоличествоПоставляемое,
                       |	СУММА(ЕСТЬNULL(ВТ_ДанныеORDER.КоличествоЗаказанное, 0)) КАК КоличествоЗаказанное
                       |ПОМЕСТИТЬ СгруппированныеТовары
                       |ИЗ
                       |	ВТ_ДанныеORDER КАК ВТ_ДанныеORDER
                       |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
                       |		ПО ВТ_ДанныеORDER.Заказ1С = ЗаказКлиентаТовары.Ссылка
                       |			И ВТ_ДанныеORDER.Номенклатура = ЗаказКлиентаТовары.Номенклатура
                       |
                       |СГРУППИРОВАТЬ ПО
                       |	ВТ_ДанныеORDER.Заказ1С,
                       |	ВТ_ДанныеORDER.Номенклатура
                       |;
                       |
                       |////////////////////////////////////////////////////////////////////////////////
                       |ВЫБРАТЬ
                       |	СгруппированныеТовары.ЗаказКлиента КАК ЗаказКлиента,
                       |	МИНИМУМ(СгруппированныеТовары.Отменено) КАК Отменено,
                       |	МАКСИМУМ(ВЫБОР
                       |			КОГДА СгруппированныеТовары.КоличествоЗаказанное &lt;&gt; СгруппированныеТовары.КоличествоПоставляемое
                       |					ИЛИ СгруппированныеТовары.Отменено
                       |				ТОГДА ИСТИНА
                       |			ИНАЧЕ ЛОЖЬ
                       |		КОНЕЦ) КАК ЕстьРасхождения
                       |ИЗ
                       |	СгруппированныеТовары КАК СгруппированныеТовары
                       |
                       |СГРУППИРОВАТЬ ПО
                       |	СгруппированныеТовары.ЗаказКлиента";    

ЗапросТабЧасть.УстановитьПараметр("Документ", Источник);
ЗапросТабЧасть.УстановитьПараметр("ДанныеORDER", ДанныеORDER);
РезультатЗапроса		= ЗапросТабЧасть.Выполнить();
ДокументыТабличнаяЧасть = РезультатЗапроса.Выгрузить();
ДокументыТабличнаяЧасть.Индексы.Добавить("ЗаказКлиента");

EDIINTERCHANGEID = 0;
Удалить = Новый Массив;
ТекущийЗаказ = Неопределено;
Для Каждого Строка Из Результат Цикл

	Если ТекущийЗаказ = Строка.Ссылка Тогда
		Удалить.Добавить(Строка); // Сохраняем для дальнейшего удаления строку ТЗ, так как это задублированный заказ
		Продолжить;
	Иначе
		ТекущийЗаказ = Строка.Ссылка;
	КонецЕсли;
	
    EDIINTERCHANGEID = НовыйНомерТранзакции(EDIINTERCHANGEID);   

	НайденнаяСтрока = ДокументыТабличнаяЧасть.Найти(Строка.Ссылка, "ЗаказКлиента");
	Если Не НайденнаяСтрока = Неопределено Тогда
		Если НайденнаяСтрока.Отменено Тогда
			Строка.ACTION = "27"; // Поставка отменена
		ИначеЕсли НайденнаяСтрока.ЕстьРасхождения Тогда
			Строка.ACTION = "4"; // Есть расхождения
		КонецЕсли;
	КонецЕсли;        	

	FRESH = "0";  // 1 - Да 0 - Нет
	Если ТипЗнч(Строка.ДополнительнаяИнформацияORDER) = Тип("ХранилищеЗначения")  Тогда
		ДополнительнаяИнформация = Строка.ДополнительнаяИнформацияORDER.Получить();
		Если ТипЗнч(ДополнительнаяИнформация) = Тип("Структура") И ДополнительнаяИнформация.Свойство("СтруктураФайла") И ДополнительнаяИнформация.СтруктураФайла.Свойство("FRESH") Тогда 		
			FRESH = ДополнительнаяИнформация.СтруктураФайла.FRESH;
		КонецЕсли;  				
	КонецЕсли; 
	Строка.FRESH = FRESH;  

    Строка.DATE             = Формат(Строка.Дата, "ДФ=yyyy-MM-dd");
    Строка.TIME             = Формат(Строка.Дата, "ДФ=HH:mm");
    Строка.ORDERDATE        = Формат(Строка.ДатаЗаказа, "ДФ=yyyy-MM-dd");
    Строка.DELIVERYDATE     = Формат(Строка.ДатаОтгрузки, "ДФ=yyyy-MM-dd");
    Строка.DELIVERYTIME     = Формат(Строка.ДатаОтгрузки, "ДФ=HH:mm");
    Строка.EDIINTERCHANGEID = Формат(EDIINTERCHANGEID, "ЧГ=0");
    Строка.EDIMESSAGE       = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс000") + "-OUT-" + Строка.EDIINTERCHANGEID;
    Строка.ФайлИмя          = "ORDRSP" + "_" + Строка.EDIMESSAGE + ".xml";
    Строка.Идентификатор    = "ORDRSP" + "_" + Строка.EDIMESSAGE; 
    
    Если ТипЗнч(Строка.CURRENCY) = Тип("СправочникСсылка.Валюты") Тогда  
		Строка.CURRENCY = Строка.CURRENCY.Наименование;
	Иначе
		Строка.CURRENCY = Строка(Строка.CURRENCY);
	КонецЕсли;

КонецЦикла;

Для Каждого Строка Из Удалить Цикл
	Результат.Удалить(Строка);
КонецЦикла;
#КонецОбласти
 
#Область ТАБЛИЦА_Заполнение   
ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
                          |	DR_События_ORDER.Документ КАК ORDER,
                          |	DR_События_Заказ.Документ КАК Заказ
                          |ПОМЕСТИТЬ ВТ_ЦепочкаДокументов
                          |ИЗ
                          |	РегистрСведений.DR_События КАК DR_События_Заказ
                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_ORDER
                          |		ПО DR_События_Заказ.ИдентификаторЦепочки = DR_События_ORDER.ИдентификаторЦепочки
                          |			И (DR_События_ORDER.ВидДокумента = ""ORDER_Входящий"")
                          |			И DR_События_Заказ.ИдентификаторОснования = DR_События_ORDER.Идентификатор
                          |			И (ВЫРАЗИТЬ(DR_События_ORDER.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
                          |ГДЕ
                          |	DR_События_Заказ.Документ В(&amp;Документ)
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ РАЗЛИЧНЫЕ
                          |	ДанныеТЧНоменклатурORDER.ORDER КАК ORDER,
                          |	ДанныеТЧНоменклатурORDER.НомерСтроки КАК НомерСтроки,
                          |	ДанныеТЧНоменклатурORDER.Цена КАК Цена,
                          |	ДанныеТЧНоменклатурORDER.СтавкаНДС КАК СтавкаНДС,
                          |	ДанныеТЧНоменклатурORDER.СуммаНДС КАК СуммаНДС,
                          |	ДанныеТЧНоменклатурORDER.Заказ КАК Заказ,
                          |	ДанныеТЧНоменклатурORDER.Номенклатура КАК Номенклатура,
                          |	ДанныеТЧНоменклатурORDER.НоменклатураКод КАК НоменклатураКод,
                          |	ДанныеТЧНоменклатурORDER.xmlЕдиницаИзмерения КАК xmlЕдиницаИзмерения,
                          |	ДанныеТЧНоменклатурORDER.КоличествоЗаказанное КАК КоличествоЗаказанное,
                          |	ДанныеТЧНоменклатурORDER.КоличествоПоставляемое КАК КоличествоПоставляемое,
                          |	ДанныеТЧНоменклатурORDER.ОписаниеПродукта КАК ОписаниеПродукта,
                          |	ДанныеТЧНоменклатурORDER.НомерПродукта КАК НомерПродукта,
                          |	ДанныеТЧНоменклатурORDER.НомерПродуктаПокупателя КАК НомерПродуктаПокупателя,
                          |	ДанныеТЧНоменклатурORDER.КалибрУпаковки КАК КалибрУпаковки,
                          |	ДанныеТЧНоменклатурORDER.ТипФасовки КАК ТипФасовки,
                          |	ДанныеТЧНоменклатурORDER.КоличествоВФасовке КАК КоличествоВФасовке,
                          |	ДанныеТЧНоменклатурORDER.БазоваяЕдиницаТовара КАК БазоваяЕдиницаТовара,
                          |	ДанныеТЧНоменклатурORDER.ПричинаОтказаТЧ КАК ПричинаОтказаТЧ
                          |ПОМЕСТИТЬ ВТ_НоменклатураORDER
                          |ИЗ
                          |	&amp;ДанныеТЧНоменклатурORDER КАК ДанныеТЧНоменклатурORDER
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ РАЗЛИЧНЫЕ
                          |	ЗаказТовары.Ссылка КАК Заказ,
                          |	ЗаказТовары.НомерСтроки КАК НомерСтроки,
                          |	ВЫРАЗИТЬ(ЭКОМ_НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента КАК СТРОКА(300)) КАК DESCRIPTION,
                          |	ЗаказТовары.Цена КАК Цена,
                          |	ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
                          |	ЗаказТовары.СуммаНДС КАК СуммаНДС,
                          |	ЗаказТовары.Ссылка.ЦенаВключаетНДС КАК СуммаВключаетНДС,
                          |	ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК Штрихкод,
                          |	ВТ_ЦепочкаДокументов.ORDER КАК ORDER,
                          |	ЕСТЬNULL(ЗаказТовары.Количество, 0) КАК Количество,
                          |	ЗаказТовары.Номенклатура КАК Номенклатура,
                          |	ЗаказТовары.Номенклатура.Код КАК НоменклатураКод,
                          |	ЭКОМ_НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК АртикулНоменклатурыКонтрагента,
                          |	ЭКОМ_НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента
                          |ПОМЕСТИТЬ ВТ_НоменклатураЗаказ
                          |ИЗ
                          |	ВТ_ЦепочкаДокументов КАК ВТ_ЦепочкаДокументов
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
                          |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
                          |			ПО ЗаказТовары.Номенклатура = ЭКОМ_НоменклатураКонтрагентов.Номенклатура
                          |				И ЗаказТовары.Ссылка.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
                          |		ПО ВТ_ЦепочкаДокументов.Заказ = ЗаказТовары.Ссылка
                          |ГДЕ
                          |	ЗаказТовары.Отменено = ЛОЖЬ
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ТоварыORDER.Заказ КАК Ссылка,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК POSITIONNUMBER,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ORDEREDQUANTITY,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(100)) КАК ACCEPTEDQUANTITY,
                          |	ТоварыORDER.НомерСтроки КАК НомерСтроки,
                          |	ТоварыORDER.ОписаниеПродукта КАК DESCRIPTION,
                          |	ТоварыORDER.xmlЕдиницаИзмерения КАК ORDRSPUNIT,
                          |	ЕСТЬNULL(ТоварыИзЗаказа.Цена, 0) КАК Цена,
                          |	ВЫБОР
                          |		КОГДА ТоварыИзЗаказа.Количество = ТоварыORDER.КоличествоЗаказанное
                          |			ТОГДА ""1""
                          |		КОГДА ТоварыИзЗаказа.Количество = 0
                          |				ИЛИ ТоварыИзЗаказа.Количество ЕСТЬ NULL
                          |			ТОГДА ""3""
                          |		ИНАЧЕ ""2""
                          |	КОНЕЦ КАК PRODUCTTYPE,
                          |	ВЫБОР
                          |		КОГДА ТоварыИзЗаказа.Количество = ТоварыORDER.КоличествоЗаказанное
                          |			ТОГДА ""Товар будет поставлен без изменений""
                          |		КОГДА ТоварыИзЗаказа.Количество = 0
                          |				ИЛИ ТоварыИзЗаказа.Количество ЕСТЬ NULL
                          |			ТОГДА ""Отказано в поставке""
                          |		ИНАЧЕ ""Изменение заказанного количества.""
                          |	КОНЕЦ КАК Комментарий,
                          |	ТоварыORDER.КоличествоЗаказанное КАК КоличествоЗаказанное,
                          |	ЕСТЬNULL(ТоварыИзЗаказа.СтавкаНДС, 0) КАК СтавкаНДС,
                          |	ЕСТЬNULL(ТоварыИзЗаказа.СуммаНДС, 0) КАК СуммаНДС,
                          |	ЕСТЬNULL(ТоварыИзЗаказа.СуммаВключаетНДС, ЛОЖЬ) КАК СуммаВключаетНДС,
                          |	ЕСТЬNULL(ТоварыИзЗаказа.Количество, 0) КАК КоличествоПоставляемое,
                          |	ТоварыORDER.НомерПродукта КАК Штрихкод,
                          |	ЕСТЬNULL(ТоварыИзЗаказа.НоменклатураКод, ТоварыORDER.НоменклатураКод) КАК НоменклатураКод,
                          |	ТоварыORDER.НомерПродуктаПокупателя КАК КодНоменклатурыКонтрагента,
                          |	ТоварыORDER.КалибрУпаковки КАК КалибрУпаковки,
                          |	ВЫБОР
                          |		КОГДА НЕ ЕСТЬNULL(ТоварыИзЗаказа.АртикулНоменклатурыКонтрагента, """") = """"
                          |			ТОГДА ТоварыИзЗаказа.АртикулНоменклатурыКонтрагента
                          |		КОГДА НЕ ЕСТЬNULL(ТоварыИзЗаказа.КодНоменклатурыКонтрагента, """") = """"
                          |			ТОГДА ТоварыИзЗаказа.КодНоменклатурыКонтрагента
                          |		ИНАЧЕ ТоварыИзЗаказа.Номенклатура.Артикул
                          |	КОНЕЦ КАК Артикул,
                          |	ТоварыORDER.ТипФасовки КАК ТипФасовки,
                          |	ТоварыORDER.КоличествоВФасовке КАК КоличествоВФасовке,
                          |	ТоварыORDER.БазоваяЕдиницаТовара КАК БазоваяЕдиницаТовара,
                          |	ТоварыORDER.ПричинаОтказаТЧ КАК REASONDECREACEQUANTITY
                          |ИЗ
                          |	ВТ_НоменклатураORDER КАК ТоварыORDER
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураЗаказ КАК ТоварыИзЗаказа
                          |		ПО (ТоварыИзЗаказа.Номенклатура = ТоварыORDER.Номенклатура)
                          |			И ТоварыORDER.Заказ = ТоварыИзЗаказа.Заказ
                          |
                          |УПОРЯДОЧИТЬ ПО
                          |	НомерСтроки";
ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурORDER", ДанныеТЧНоменклатурORDER);
ЗапросНоменклатур.УстановитьПараметр("Документ", Источник);
РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить();
РезультатНоменклатур = РезультатЗапросаНоменклатур.Выгрузить();

РезультатНоменклатур.Колонки.Добавить("PRODUCT", 		Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRODUCTIDBUYER", Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRODUCTIDSUPPLIER", Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRICE", 			Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PRICEWITHVAT",	Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("VAT", 			Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("INFO", 			Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("CALIBRE",         Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PACKINGTYPE",     Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PACKINGQUANTITY", Новый ОписаниеТипов("Строка"));
РезультатНоменклатур.Колонки.Добавить("PACKINGUNIT",     Новый ОписаниеТипов("Строка"));

// Список для преобразования числа в строку: Значение – реквизит в результате; Представление - путь, где хранится число;
// Пометка при Истина усекает число до целых, а Ложь - 2 знака в дробной части
ЧислоВСтроку = Новый СписокЗначений;
ЧислоВСтроку.Добавить("POSITIONNUMBER", "СтрокаНоменклатуры.НомерСтроки", Истина);
ЧислоВСтроку.Добавить("PRICE", "ЦенаБезНДС");
ЧислоВСтроку.Добавить("PRICEWITHVAT", "Цена_с_НДС");
ЧислоВСтроку.Добавить("VAT", "СтавкаНДС", Истина);

Для Каждого СтрокаНоменклатуры Из РезультатНоменклатур Цикл

    СтавкаНДС = СтавкаНДСЧислом(СтрокаНоменклатуры.СтавкаНДС);  
    Если СтрокаНоменклатуры.СуммаВключаетНДС Тогда
        Цена_с_НДС = СтрокаНоменклатуры.Цена;
        ЦенаБезНДС = СтрокаНоменклатуры.Цена / ((100 + СтавкаНДС) / 100);
    Иначе    
        ЦенаБезНДС = СтрокаНоменклатуры.Цена;
        Цена_с_НДС = СтрокаНоменклатуры.Цена * ((100 + СтавкаНДС) / 100);
    КонецЕсли;

    СтрокаНоменклатуры.PRODUCT = СтрокаНоменклатуры.Штрихкод;
    СтрокаНоменклатуры.PRODUCTIDBUYER = СтрокаНоменклатуры.Артикул; 
    СтрокаНоменклатуры.PRODUCTIDSUPPLIER = СтрокаНоменклатуры.НоменклатураКод;
    СтрокаНоменклатуры.INFO = "Сумма НДС = " + Формат(СтрокаНоменклатуры.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ=0");

    // Преобразование числа в строку и заполнение значения.
    Для Каждого ЗаписьЧислоВСтроку Из ЧислоВСтроку Цикл
        ЗначениеЧисла = Вычислить(ЗаписьЧислоВСтроку.Представление);
        ЗначениеСтрокой = Окр(ЗначениеЧисла, ?(ЗаписьЧислоВСтроку.Пометка, 0, 2));
        Если НЕ ЗаписьЧислоВСтроку.Пометка Тогда
            ЗначениеСтрокой = Формат(ЗначениеСтрокой, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
        КонецЕсли;
        СтрокаНоменклатуры[ЗаписьЧислоВСтроку.Значение] = ЗначениеСтрокой;
    КонецЦикла;
    
    СтрокаНоменклатуры.CALIBRE          	= СтрокаНоменклатуры.КалибрУпаковки;
	СтрокаНоменклатуры.PACKINGTYPE  = СтрокаНоменклатуры.ТипФасовки;
	СтрокаНоменклатуры.PACKINGQUANTITY  	= Формат(СтрокаНоменклатуры.КоличествоВФасовке, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	СтрокаНоменклатуры.PACKINGUNIT      	= СтрокаНоменклатуры.БазоваяЕдиницаТовара;	
	
	СтрокаНоменклатуры.ORDEREDQUANTITY  = Формат(СтрокаНоменклатуры.КоличествоЗаказанное, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");
	СтрокаНоменклатуры.ACCEPTEDQUANTITY = Формат(СтрокаНоменклатуры.КоличествоПоставляемое, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");

КонецЦикла;
#КонецОбласти

#Область СОЗДАНИЕ_XML 
//Проверка наличия обязательных полей
ТекстСообщенияПроверкиНаличияОбязательныхПолей = "";
ПродолжитьОбработку = Истина;

ОбязательныеКолонки = Новый СписокЗначений;

//ORDRSP
ОбязательныеКолонки.Добавить("Результат.NUMBER"				,"ORDRSP.NUMBER");
ОбязательныеКолонки.Добавить("Результат.DATE"				,"ORDRSP.DATE");
ОбязательныеКолонки.Добавить("Результат.ORDERNUMBER"		,"ORDRSP.ORDERNUMBER");
ОбязательныеКолонки.Добавить("Результат.ORDERDATE"			,"ORDRSP.ORDERDATE");
  
//HEAD
ОбязательныеКолонки.Добавить("Результат.SUPPLIER"			,"ORDRSP.HEAD.SUPPLIER");
ОбязательныеКолонки.Добавить("Результат.BUYER"				,"ORDRSP.HEAD.BUYER");
ОбязательныеКолонки.Добавить("Результат.RECIPIENT"			,"ORDRSP.HEAD.RECIPIENT");
ОбязательныеКолонки.Добавить("Результат.DELIVERYPLACE"		,"ORDRSP.HEAD.DELIVERYPLACE");
ОбязательныеКолонки.Добавить("Результат.SENDER"				,"ORDRSP.HEAD.SENDER");
	
//POSITION
ОбязательныеКолонки.Добавить("РезультатНоменклатур.POSITIONNUMBER"		,"ORDRSP.HEAD.POSITION.POSITIONNUMBER");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRODUCT"				,"ORDRSP.HEAD.POSITION.PRODUCT");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.PRICE"				,"ORDRSP.HEAD.POSITION.PRICE");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.ORDEREDQUANTITY"		,"ORDRSP.HEAD.POSITION.ORDEREDQUANTITY");
ОбязательныеКолонки.Добавить("РезультатНоменклатур.ACCEPTEDQUANTITY"	,"ORDRSP.HEAD.POSITION.ACCEPTEDQUANTITY");
	

Для каждого ОбязательнаяКолонка из ОбязательныеКолонки Цикл 

    Массив = СтрРазделить(ОбязательнаяКолонка.Значение, ".");   
    НайтиКолонкуВТЗ = Вычислить(Массив[0] + ".Колонки.Найти(""" + Массив[1] + """)"); 
    
	Если НайтиКолонкуВТЗ = Неопределено Тогда
	
		ТекстСообщенияПроверкиНаличияОбязательныхПолей = ?(ТекстСообщенияПроверкиНаличияОбязательныхПолей = "" ,"В сформированных таблицах отсутствуют данные для заполнения обязательного поля """ + ОбязательнаяКолонка.Представление + """.", ТекстСообщенияПроверкиНаличияОбязательныхПолей + Символы.ПС + "В сформированных таблицах отсутствуют данные для заполнения обязательного поля """ + ОбязательнаяКолонка.Представление + """."); 
	    ПродолжитьОбработку = Ложь;
	КонецЕсли

КонецЦикла;

Если ТекстСообщенияПроверкиНаличияОбязательныхПолей &lt;&gt; "" Тогда
	ТекстСообщенияПроверкиНаличияОбязательныхПолей = ТекстСообщенияПроверкиНаличияОбязательныхПолей + Символы.ПС + "Исходящие документы не будут отправлены." 
КонецЕсли;
//Проверка наличия не обязательных полей

МассивСтруктурИсходящих = Новый Массив;

Если ПродолжитьОбработку Тогда  
	
	СписокORDRSP = Новый СписокЗначений;	
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "NUMBER"						, Истина);					
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "DATE"						, Истина);				
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "ORDERNUMBER"					, Истина);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "ORDERDATE"					, Истина);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "TIME"						, Ложь);   							
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "DELIVERYDATE"				, Ложь);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "DELIVERYTIME"				, Ложь);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "CAMPAIGNNUMBER"				, Ложь);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "DOCTYPE"						, Ложь);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "FRESH"						, Ложь);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "CURRENCY"					, Ложь);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "REASONDECREACEQUANTITYALL"	, Ложь);
	СписокORDRSP.Добавить("СтрокаШапкиДокумента"	, "ACTION"						, Ложь); 
	 
	
	СписокHEAD = Новый СписокЗначений;	
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SUPPLIER"				, Истина);
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "BUYER"					, Истина);					
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "DELIVERYPLACE"			, Истина);   							
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SENDER"					, Истина);
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "RECIPIENT"				, Истина);				
	СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "EDIINTERCHANGEID"		, Ложь);
			
	CписокPOSITION = Новый СписокЗначений;	
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "POSITIONNUMBER"			, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCT"				, Истина);					
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICE"					, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDEREDQUANTITY"		, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ACCEPTEDQUANTITY"		, Истина);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDBUYER"			, Ложь);   							
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDSUPPLIER"		, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDRSPUNIT"				, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "DESCRIPTION"			, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICEWITHVAT"			, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "VAT"					, Ложь);	
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTTYPE"			, Ложь);				
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "REASONDECREACEQUANTITY"	, Ложь);
	CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "CALIBRE"				, Ложь); 
	    
	CписокPACKING = Новый СписокЗначений;	
	CписокPACKING.Добавить("СтрокаНоменклатурыДокумента", "PACKINGTYPE"			, Ложь);
	CписокPACKING.Добавить("СтрокаНоменклатурыДокумента", "PACKINGQUANTITY"		, Ложь);					
	CписокPACKING.Добавить("СтрокаНоменклатурыДокумента", "PACKINGUNIT"			, Ложь); 
			
	
	Для каждого СтрокаШапкиДокумента из Результат Цикл

		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";  
	    				
		XMLДокумент        	= Новый ЗаписьXML;		
		ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб); 
		XMLДокумент.УстановитьСтроку("UTF-8");
		XMLДокумент.ЗаписатьОбъявлениеXML();
		
		
			
		XMLДокумент.ЗаписатьНачалоЭлемента("ORDRSP");
	    
		Для Каждого ЭлементORDRSP из СписокORDRSP Цикл
		
			СтрокаТЗ = Вычислить(ЭлементORDRSP.Значение);
			ИмяРеквизита = ЭлементORDRSP.Представление;
			ОбязательноеПоле = ЭлементORDRSP.Пометка;
			Вложенность = "ORDRSP."; 
		
			Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
				Если ОбязательноеПоле Тогда 
					ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
		            ПродолжитьОбработкуДокумента = Ложь;
				КонецЕсли;
				Продолжить;  
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
				ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
			Иначе
				Если ОбязательноеПоле Тогда 
		    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
            		ПродолжитьОбработкуДокумента = Ложь;
            	КонецЕсли;
			КонецЕсли;  
		КонецЦикла;
			
			XMLДокумент.ЗаписатьНачалоЭлемента("HEAD");
			    
				Для Каждого ЭлементHEAD из СписокHEAD Цикл
				
					СтрокаТЗ = Вычислить(ЭлементHEAD.Значение);
					ИмяРеквизита = ЭлементHEAD.Представление;
					ОбязательноеПоле = ЭлементHEAD.Пометка;
					Вложенность = "ORDRSP.HEAD."; 
				
									
					Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
						Если ОбязательноеПоле Тогда 
							ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
		            		ПродолжитьОбработкуДокумента = Ложь;
						КонецЕсли;
						Продолжить;  
					КонецЕсли;				
					 
					
					Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
						ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
					Иначе
						Если ОбязательноеПоле Тогда 
				    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
		            		ПродолжитьОбработкуДокумента = Ложь;
		            	КонецЕсли;
					КонецЕсли;
                         
				КонецЦикла;
						 		
        		
        		ОтборСтрокНоменклатур = Новый Структура;
				ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
				СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);	        			
        			
        		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
        			    
        		    XMLДокумент.ЗаписатьНачалоЭлемента("POSITION");
        		    
		        		Для Каждого ЭлементPOSITION из CписокPOSITION Цикл
						
							СтрокаТЗ = Вычислить(ЭлементPOSITION.Значение);
							ИмяРеквизита = ЭлементPOSITION.Представление;
							ОбязательноеПоле = ЭлементPOSITION.Пометка;
							Вложенность = "ORDRSP.HEAD.POSITION."; 
						
							Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
								Если ОбязательноеПоле Тогда 
									ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
            						ПродолжитьОбработкуДокумента = Ложь;
								КонецЕсли;
								Продолжить;  
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
								ЗаписатьXML(XMLДокумент, 	СокрЛП(СтрокаТЗ[ИмяРеквизита])		, ИмяРеквизита);
							Иначе
								Если ОбязательноеПоле Тогда 
						    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
				            		ПродолжитьОбработкуДокумента = Ложь;
				            	КонецЕсли;
							КонецЕсли;

						КонецЦикла;

         				////необязательные вложенные 		        				
        				Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.PACKINGTYPE) Тогда	
	        				XMLДокумент.ЗаписатьНачалоЭлемента("PACKING");
	        				
		        				Для Каждого ЭлементPACKING из CписокPACKING Цикл
								
									СтрокаТЗ = Вычислить(ЭлементPACKING.Значение);
									ИмяРеквизита = ЭлементPACKING.Представление;
									ОбязательноеПоле = ЭлементPACKING.Пометка;
									Вложенность = "ORDRSP.HEAD.PACKINGSEQUENCE.POSITION.PACKING."; 
								
									Если СтрокаТЗ.Владелец().Колонки.Найти(ИмяРеквизита) = Неопределено Тогда
										Если ОбязательноеПоле Тогда 
											ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +""".", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - в таблице отсутствует обязательный реквизит """+ ИмяРеквизита +"""."); 
            								ПродолжитьОбработкуДокумента = Ложь;
										КонецЕсли;
										Продолжить;  
									КонецЕсли;
									
									Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
										ЗаписатьXML(XMLДокумент, 	СокрЛП(СтрокаТЗ[ИмяРеквизита])		, ИмяРеквизита);
									Иначе
										Если ОбязательноеПоле Тогда 
								    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + Вложенность + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
						            		ПродолжитьОбработкуДокумента = Ложь;
						            	КонецЕсли;
									КонецЕсли;

								КонецЦикла;
	        					
	        				XMLДокумент.ЗаписатьКонецЭлемента();
	        				
        				КонецЕсли;
        					
        			XMLДокумент.ЗаписатьКонецЭлемента(); 
        				
        		КонецЦикла;
	    		     
			XMLДокумент.ЗаписатьКонецЭлемента();
				
		XMLДокумент.ЗаписатьКонецЭлемента();

		СтрокаXML = XMLДокумент.Закрыть(); 
		
		
		Если ЗначениеЗаполнено(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей) Тогда
			ТекстЛогаСобытий = ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + "Документ пропущен и отправлен не будет.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
		    Продолжить;
		КонецЕсли;
			
		
		
		СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
		 
		СтруктураДляСовместимости.СтрокаXML = СтрокаXML;
		СтруктураДляСовместимости.Отказ = Ложь;
		СтруктураДляСовместимости.ВидДокумента = "ORDRSP_Исходящий";
		СтруктураДляСовместимости.ЗаказДата = СтрокаШапкиДокумента.ЗаказДата;
		СтруктураДляСовместимости.ЗаказНомер = СтрокаШапкиДокумента.ЗаказНомер;
		СтруктураДляСовместимости.Идентификатор = СтрокаШапкиДокумента.Идентификатор;
		СтруктураДляСовместимости.Контрагент = СтрокаШапкиДокумента.Контрагент;
		СтруктураДляСовместимости.Номер = СтрокаШапкиДокумента.Номер;
		СтруктураДляСовместимости.Организация = СтрокаШапкиДокумента.Организация;
		СтруктураДляСовместимости.Ссылка = СтрокаШапкиДокумента.Ссылка;
		СтруктураДляСовместимости.Статус = СтрокаШапкиДокумента.Статус;
		СтруктураДляСовместимости.ФайлИмя = СтрокаШапкиДокумента.ФайлИмя;
		СтруктураДляСовместимости.ЭлектронныйДокумент = СтрокаШапкиДокумента.Ссылка;
		СтруктураДляСовместимости.ИдентификаторЦепочки = СтрокаШапкиДокумента.ИдентификаторЦепочки;
		
		СтруктураФайлаДанных = Новый Структура;
		СтруктураФайлаДанных.Вставить("ВидДокумента"			, "ORDRSP_Исходящий");
		СтруктураФайлаДанных.Вставить("ДатаДокумента"			, СтрокаШапкиДокумента.Дата);
		СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
		СтруктураФайлаДанных.Вставить("ЗаказДата"				, СтрокаШапкиДокумента.ЗаказДата);
		СтруктураФайлаДанных.Вставить("ЗаказНомер"				, СтрокаШапкиДокумента.ЗаказНомер);
		СтруктураФайлаДанных.Вставить("ИдентификаторИспр"		, "");
		СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
		СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
		СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "UTF-8");
		СтруктураФайлаДанных.Вставить("Контрагент"				, СтрокаШапкиДокумента.Контрагент);
		СтруктураФайлаДанных.Вставить("НомерДокумента"			, СтрокаШапкиДокумента.Номер);
		СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
		СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
		СтруктураФайлаДанных.Вставить("Сообщение"				, "");
		СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
		СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
		СтруктураФайлаДанных.Вставить("СтруктураДокумента"		, СтруктураДляСовместимости);
		СтруктураФайлаДанных.Вставить("ТипФайла"				, СтрокаШапкиДокумента.ВидДокумента);

		МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
	КонецЦикла;
Иначе 
    ТекстЛогаСобытий = ТекстСообщенияПроверкиНаличияОбязательныхПолей;
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога); 
	
КонецЕсли;
#КонецОбласти

//Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Возврат МассивСтруктурИсходящих;

</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Исходящий ORDRSP (подтверждение заказа)</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">6</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокЗаказыВходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Исходящий ORDRSP (подтверждение заказа)</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>ORDRSP_Исходящий</presentation>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>Заказ_Входящий</presentation>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Нет</presentation>
				<id xsi:type="xs:decimal">6</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueTable">
			<column>
				<Name xsi:type="xs:string">Реквизит1</Name>
				<ValueType>
					<Type>xs:string</Type>
					<StringQualifiers>
						<Length>0</Length>
						<AllowedLength>Variable</AllowedLength>
					</StringQualifiers>
				</ValueType>
			</column>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:boolean">false</Value>
		<Value xsi:type="xs:string"/>
	</row>
</ValueTree>