<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Атрибуты</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДанныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДоступныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Связи</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Обязательный</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий УПД (универсальный передаточный документ)</Value>
		<Value xsi:type="xs:string">МассивСтруктурИсходящих = Новый Массив;

///МЧД
ЗапросМЧД = Новый Запрос;
ЗапросМЧД.Текст = ТекстЗапроса_МЧД_ПоОрганизациям();
ЗапросМЧД.УстановитьПараметр("ЭтоРегламентноеЗадание", ЭтоРегламентноеЗадание); 
ЗапросМЧД.УстановитьПараметр("Пользователь", НайтиТекущегоПользователя()); 
ЗапросМЧД.УстановитьПараметр("ТекущаяДата", ТекущаяДата()); 
ТаблицаМЧД = ЗапросМЧД.Выполнить().Выгрузить();

/////////////////++ШАПКА++/////////////////////////////////////                                                                            
Запрос = Новый Запрос;  
Запрос.Текст = "ВЫБРАТЬ
               |	МИНИМУМ(СчетФактураВыданныйТовары.ПредыдущийСчетФактура) КАК ИсходныйСчетФактура,
               |	СчетФактураВыданныйТовары.Ссылка КАК Ссылка
               |ПОМЕСТИТЬ ИсходныеСЧФ
               |ИЗ
               |	Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
               |ГДЕ
               |	СчетФактураВыданныйТовары.Ссылка В(&amp;Источник)
               |
               |СГРУППИРОВАТЬ ПО
               |	СчетФактураВыданныйТовары.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	СчетФактураВыданный.Ссылка КАК Ссылка,
               |	СчетФактураВыданный.Представление КАК ПредставлениеСЧФ,
               |	СчетФактураВыданный.Номер КАК НомерСЧФ,
               |	СчетФактураВыданный.Дата КАК ДатаСЧФ,
               |	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
               |	СчетФактураВыданный.ДокументОснование.Дата КАК ДокументОснованиеДата,
               |	СчетФактураВыданный.ДокументОснование.Номер КАК ДокументОснованиеНомер,
               |	СчетФактураВыданный.НомерИсправления КАК НомерИсправления,
               |	СчетФактураВыданный.Корректировочный КАК ЭтоКорректировка,
               |	СчетФактураВыданный.Исправление КАК ЭтоИсправление,
               |	"""" КАК ВидСчетаФактуры,
               |	СчетФактураВыданный.Организация КАК Организация,
               |	СчетФактураВыданный.Организация.Представление КАК ПредставлениеОрганизации,
               |	ВЫБОР
               |		КОГДА СчетФактураВыданный.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА СчетФактураВыданный.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ФЛ""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ КАК ОрганизацияЮрФизЛицо,
               |	СчетФактураВыданный.Организация.ИНН КАК ОрганизацияИНН,
               |	СчетФактураВыданный.Организация.КПП КАК ОрганизацияКПП,
               |	СчетФактураВыданный.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
               |	""ФамилияИП"" КАК ОрганизацияФамилияИП,
               |	""ИмяИП"" КАК ОрганизацияИмяИП,
               |	""ОтчествоИП"" КАК ОрганизацияОтчествоИП,
               |	СчетФактураВыданный.Контрагент КАК Контрагент,
               |	ВЫБОР
               |		КОГДА ТИПЗНАЧЕНИЯ(СчетФактураВыданный.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
               |			ТОГДА СчетФактураВыданный.ДокументОснование
               |		ИНАЧЕ СчетФактураВыданный.ДокументОснование.ДокументОснование
               |	КОНЕЦ КАК Накладная,
               |	ЕСТЬNULL(Источник_События.ИдентификаторЦепочки, """") КАК ИдентификаторЦепочки,
               |	ЕСТЬNULL(ИсходныеСЧФ.ИсходныйСчетФактура, СчетФактураВыданный.СчетФактураОснование) КАК ИсправляемыйСчетФактура,
               |	ЕСТЬNULL(ИсходныеСЧФ.ИсходныйСчетФактура.Дата, СчетФактураВыданный.СчетФактураОснование.Дата) КАК ИсправляемыйСчетФактураДата,
               |	МИНИМУМ(ЕСТЬNULL(СчфОтправленный_События.Идентификатор, """")) КАК ИдентификаторТекущегоСЧФ,
               |	МИНИМУМ(ЕСТЬNULL(ОснованиеСчфОтправленный_События.Идентификатор, """")) КАК ИдентификаторПредыдещейСЧФ,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК ТочкаДоставкиЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.НомерЗаказа, """") КАК НомерЗаказа,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоставки,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаЗаказа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаказа,
               |	DR_ЦепочкиДокументов.Контрагент.ИНН КАК КонтрагентИНН,
               |	DR_ЦепочкиДокументов.Контрагент.КПП КАК КонтрагентКПП,
               |	ВЫБОР
               |		КОГДА DR_ЦепочкиДокументов.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА DR_ЦепочкиДокументов.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ФЛ""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ КАК КонтрагентЮрФизЛицо,
               |	ВЫБОР
               |		КОГДА DR_ЦепочкиДокументов.ТочкаДоставки.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА DR_ЦепочкиДокументов.ТочкаДоставки.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ФЛ""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ КАК ТочкаДоставкиЮрФизЛицо,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.Контрагент.Наименование, """") КАК КонтрагентНаименованиеПолное,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки.Наименование, """") КАК ТочкаДоставкиНаименованиеПолное,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки.ИНН, """") КАК ТочкаДоставкиИНН,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки.КПП, """") КАК ТочкаДоставкиКПП
               |ПОМЕСТИТЬ Источник
               |ИЗ
               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Источник_События
               |		ПО СчетФактураВыданный.Ссылка = Источник_События.Документ
               |			И (Источник_События.ВидДокумента = ""СчетФактура_Исходящий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
               |		ПО (Источник_События.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК СчфОтправленный_События
               |		ПО СчетФактураВыданный.Ссылка = СчфОтправленный_События.Документ
               |			И (СчфОтправленный_События.ВидДокумента В (""ON_NSCHFDOPPR_01_Исходящий"", ""ON_KORSCHFDOPPR_01"", ""ON_NSCHFDOPPRMARK_01_Исходящий"", ""ON_NSCHFDOPPRPROS_01_Исходящий"", ""ON_KORSCHFDOPPR_01_Испр"", ""ON_NSCHFDOPPR_01_Испр_Исходящий"", ""ON_NSCHFDOPPRMARK_01_Испр_Исходящий"", ""ON_NSCHFDOPPRPROS_01_Испр_Исходящий""))
               |		ЛЕВОЕ СОЕДИНЕНИЕ ИсходныеСЧФ КАК ИсходныеСЧФ
               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК ОснованиеСчфОтправленный_События
               |			ПО ИсходныеСЧФ.ИсходныйСчетФактура = ОснованиеСчфОтправленный_События.Документ
               |				И (ОснованиеСчфОтправленный_События.ВидДокумента В (""ON_NSCHFDOPPR_01_Исходящий"", ""ON_KORSCHFDOPPR_01"", ""ON_NSCHFDOPPRMARK_01_Исходящий"", ""ON_NSCHFDOPPRPROS_01_Исходящий"", ""ON_KORSCHFDOPPR_01_Испр"", ""ON_NSCHFDOPPR_01_Испр_Исходящий"", ""ON_NSCHFDOPPRMARK_01_Испр_Исходящий"", ""ON_NSCHFDOPPRPROS_01_Испр_Исходящий""))
               |		ПО СчетФактураВыданный.Ссылка = ИсходныеСЧФ.Ссылка
               |ГДЕ
               |	СчетФактураВыданный.Ссылка В(&amp;Источник)
               |
               |СГРУППИРОВАТЬ ПО
               |	СчетФактураВыданный.Ссылка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.НомерЗаказа, """"),
               |	DR_ЦепочкиДокументов.Контрагент.КПП,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки.Наименование, """"),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаЗаказа, ДАТАВРЕМЯ(1, 1, 1)),
               |	DR_ЦепочкиДокументов.Контрагент.ИНН,
               |	ВЫБОР
               |		КОГДА DR_ЦепочкиДокументов.ТочкаДоставки.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА DR_ЦепочкиДокументов.ТочкаДоставки.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ФЛ""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ,
               |	ВЫБОР
               |		КОГДА DR_ЦепочкиДокументов.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА DR_ЦепочкиДокументов.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ФЛ""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.Контрагент.Наименование, """"),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки.ИНН, """"),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки.КПП, """"),
               |	СчетФактураВыданный.Номер,
               |	СчетФактураВыданный.Дата,
               |	СчетФактураВыданный.ДокументОснование,
               |	СчетФактураВыданный.ДокументОснование.Дата,
               |	СчетФактураВыданный.ДокументОснование.Номер,
               |	СчетФактураВыданный.НомерИсправления,
               |	СчетФактураВыданный.Корректировочный,
               |	СчетФактураВыданный.Исправление,
               |	СчетФактураВыданный.Организация,
               |	СчетФактураВыданный.Организация.Представление,
               |	ВЫБОР
               |		КОГДА СчетФактураВыданный.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА СчетФактураВыданный.Организация.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
               |			ТОГДА ""ФЛ""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ,
               |	СчетФактураВыданный.Организация.ИНН,
               |	СчетФактураВыданный.Организация.КПП,
               |	СчетФактураВыданный.Организация.НаименованиеПолное,
               |	СчетФактураВыданный.Контрагент,
               |	ВЫБОР
               |		КОГДА ТИПЗНАЧЕНИЯ(СчетФактураВыданный.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
               |			ТОГДА СчетФактураВыданный.ДокументОснование
               |		ИНАЧЕ СчетФактураВыданный.ДокументОснование.ДокументОснование
               |	КОНЕЦ,
               |	СчетФактураВыданный.Представление,
               |	ЕСТЬNULL(Источник_События.ИдентификаторЦепочки, """"),
               |	ЕСТЬNULL(ИсходныеСЧФ.ИсходныйСчетФактура, СчетФактураВыданный.СчетФактураОснование),
               |	ЕСТЬNULL(ИсходныеСЧФ.ИсходныйСчетФактура.Дата, СчетФактураВыданный.СчетФактураОснование.Дата)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	Источник.Ссылка КАК Ссылка,
               |	Источник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	Источник.ПредставлениеСЧФ КАК ПредставлениеСЧФ,
               |	Источник.НомерСЧФ КАК НомерСЧФ,
               |	Источник.ДатаСЧФ КАК ДатаСЧФ,
               |	Источник.ДокументОснование КАК ДокументОснование,
               |	Источник.ДокументОснованиеДата КАК ДокументОснованиеДата,
               |	Источник.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
               |	Источник.НомерИсправления КАК НомерИсправления,
               |	Источник.ЭтоКорректировка КАК ЭтоКорректировка,
               |	Источник.ЭтоИсправление КАК ЭтоИсправление,
               |	Источник.Организация КАК Организация,
               |	Источник.ПредставлениеОрганизации КАК ПредставлениеОрганизации,
               |	Источник.ОрганизацияЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
               |	Источник.ОрганизацияИНН КАК ОрганизацияИНН,
               |	Источник.ОрганизацияКПП КАК ОрганизацияКПП,
               |	Источник.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
               |	Источник.ОрганизацияФамилияИП КАК ОрганизацияФамилияИП,
               |	Источник.ОрганизацияИмяИП КАК ОрганизацияИмяИП,
               |	Источник.ОрганизацияОтчествоИП КАК ОрганизацияОтчествоИП,
               |	Источник.Контрагент КАК Контрагент,
               |	Источник.ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
               |	Источник.ИсправляемыйСчетФактураДата КАК ИсправляемыйСчетФактураДата,
               |	Источник.ИдентификаторПредыдещейСЧФ КАК ИдентификаторПредыдещейСЧФ,
               |	Источник.ИдентификаторТекущегоСЧФ КАК ИдентификаторТекущегоСЧФ,
               |	Источник.Накладная.ЗаказКлиента КАК Заказ,
               |	Источник.Накладная.ЗаказКлиента КАК ДокументЗаказа,
               |	Источник.ДатаЗаказа КАК ЗаказДата,
               |	Источник.НомерЗаказа КАК ЗаказНомер,
               |	Источник.ВидСчетаФактуры КАК ВидСчетаФактуры,
               |	ДанныеОрганизации.GLN КАК ОрганизацияGLN,
               |	ДанныеОрганизации.eXiteАдр_Город КАК ОрганизацияГород,
               |	ДанныеОрганизации.eXiteАдр_Индекс КАК ОрганизацияИндекс,
               |	ДанныеОрганизации.eXiteАдр_Дом КАК ОрганизацияДом,
               |	ДанныеОрганизации.eXiteАдр_КодРегиона КАК ОрганизацияКодРегиона,
               |	ДанныеОрганизации.eXiteАдр_Улица КАК ОрганизацияУлица,
               |	ДанныеОрганизации.eXiteАдр_Район КАК ОрганизацияРайон,
               |	ДанныеОрганизации.eXiteАдр_НаселПункт КАК ОрганизацияНаселенныйПункт,
               |	ДанныеОрганизации.eXiteАдр_Корпус КАК ОрганизацияКорпус,
               |	ДанныеОрганизации.eXiteАдр_Кварт КАК ОрганизацияКвартира,
               |	ДанныеОрганизации.Ид_ОЭД КАК ОрганизацияИдОЭД,
               |	ОрганизацияОператорИд.Значение КАК ОрганизацияОператорИд,
               |	ОрганизацияОператорИНН.Значение КАК ОрганизацияОператорИНН,
               |	ОрганизацияОператорКПП.Значение КАК ОрганизацияОператорКПП,
               |	ДанныеОрганизации.Партнер.Наименование КАК ОрганизацияОператорНаименование,
               |	ДанныеОрганизации.Объект.СвидетельствоСерияНомер КАК ОрганизацияСвидетельствоСерияНомер,
               |	ДанныеОрганизации.Объект.СвидетельствоДатаВыдачи КАК ОрганизацияСвидетельствоДатаВыдачи,
               |	ДанныеОрганизации.Объект.ОГРН КАК ОрганизацияОГРН,
               |	ДолжностьПодписанта.Значение КАК ДолжностьПодписанта,
               |	ФамилияПодписанта.Значение КАК ФамилияПодписанта,
               |	ИмяПодписанта.Значение КАК ИмяПодписанта,
               |	ОтчествоПодписанта.Значение КАК ОтчествоПодписанта,
               |	СертификатОбластьПолномочий.Значение КАК СертификатОбластьПолномочий,
               |	СертификатОснованиеПолномочий.Значение КАК СертификатОснованиеПолномочий,
               |	СертификатСтатусПодписанта.Значение КАК СертификатСтатусПодписанта,
               |	СертификатСертификатНаСервере.Значение КАК СертификатСертификатНаСервере,
               |	ДанныеОрганизации.Сертификат КАК ДанныеСертификатаЭКОМ,
               |	Источник.КонтрагентЦепочка КАК КонтрагентИзЗаказа,
               |	ДанныеКонтрагента.Объект.Представление КАК ПредставлениеКонтрагента,
               |	Источник.КонтрагентНаименованиеПолное КАК КонтрагентНаименованиеПолное,
               |	Источник.КонтрагентЮрФизЛицо КАК КонтрагентЮрФизЛицо,
               |	Источник.КонтрагентИНН КАК КонтрагентИНН,
               |	Источник.КонтрагентКПП КАК КонтрагентКПП,
               |	ДанныеКонтрагента.GLN КАК КонтрагентGLN,
               |	ДанныеКонтрагента.Контрагент_ФорматЭСФ КАК ФорматУПД,
               |	ДанныеКонтрагента.Ид_ОЭД КАК КонтрагентИдОЭД,
               |	КонтрагентОператорИд.Значение КАК КонтрагентОператорИд,
               |	КонтрагентОператорИНН.Значение КАК КонтрагентОператорИНН,
               |	КонтрагентОператорКПП.Значение КАК КонтрагентОператорКПП,
               |	ДанныеКонтрагента.Партнер.Наименование КАК КонтрагентОператорНаименование,
               |	ДанныеКонтрагента.eXiteАдр_Город КАК КонтрагентГород,
               |	ДанныеКонтрагента.eXiteАдр_Дом КАК КонтрагентДом,
               |	ДанныеКонтрагента.eXiteАдр_Индекс КАК КонтрагентИндекс,
               |	ДанныеКонтрагента.eXiteАдр_КодРегиона КАК КонтрагентКодРегиона,
               |	ДанныеКонтрагента.eXiteАдр_Улица КАК КонтрагентУлица,
               |	ДанныеКонтрагента.eXiteАдр_Район КАК КонтрагентРайон,
               |	ДанныеКонтрагента.eXiteАдр_НаселПункт КАК КонтрагентНаселенныйПункт,
               |	ДанныеКонтрагента.eXiteАдр_Корпус КАК КонтрагентКорпус,
               |	ДанныеКонтрагента.eXiteАдр_Кварт КАК КонтрагентКвартира,
               |	ДанныеКонтрагента.Контрагент_ЭСФБезИнфПоля КАК Контрагент_ЭСФБезИнфПоля,
               |	Источник.ТочкаДоставкиЦепочка КАК ТочкаДоставки,
               |	ДанныеТочкиДоставки.Объект.Представление КАК ПредставлениеТочкиДоставки,
               |	ДанныеТочкиДоставки.Наименование КАК ТочкаДоставкиНаименованиеИзРегистра,
               |	Источник.ТочкаДоставкиНаименованиеПолное КАК ТочкаДоставкиНаименованиеПолное,
               |	Источник.ТочкаДоставкиЮрФизЛицо КАК ТочкаДоставкиЮрФизЛицо,
               |	Источник.ТочкаДоставкиИНН КАК ТочкаДоставкиИНН,
               |	Источник.ТочкаДоставкиКПП КАК ТочкаДоставкиКПП,
               |	ДанныеТочкиДоставки.ИНН КАК ТочкаДоставкиИННИзРегистра,
               |	ДанныеТочкиДоставки.КПП КАК ТочкаДоставкиКППИзРегистра,
               |	ДанныеТочкиДоставки.Адр_Город КАК ТочкаДоставкиГород,
               |	ДанныеТочкиДоставки.Адр_Дом КАК ТочкаДоставкиДом,
               |	ДанныеТочкиДоставки.Адр_Индекс КАК ТочкаДоставкиИндекс,
               |	ДанныеТочкиДоставки.Адр_КодРегиона КАК ТочкаДоставкиКодРегиона,
               |	ДанныеТочкиДоставки.Адр_Улица КАК ТочкаДоставкиУлица,
               |	ДанныеТочкиДоставки.Адр_Район КАК ТочкаДоставкиРайон,
               |	ДанныеТочкиДоставки.Адр_НаселПункт КАК ТочкаДоставкиНаселенныйПункт,
               |	ДанныеТочкиДоставки.Адр_Корпус КАК ТочкаДоставкиКорпус,
               |	ДанныеТочкиДоставки.Адр_Кварт КАК ТочкаДоставкиКвартира,
               |	ДанныеТочкиДоставки.GLN КАК ТочкаДоставкиGLN,
               |	RECADV_События.Документ КАК DR_RECADV,
               |	RECADV_EDIINTERCHANGEID.Значение КАК RECADV_EDIINTERCHANGEID,
               |	RECADV_CAMPAIGNNUMBER.Значение КАК RECADV_CAMPAIGNNUMBER,
               |	RECADV_Номер.Значение КАК RECADV_Номер,
               |	RECADV_Дата.Значение КАК RECADV_Дата,
               |	RECADV_ORDERVID.Значение КАК RECADV_ORDERVID,
               |	RECADV_RECADVVID.Значение КАК RECADV_RECADVVID,
               |	ДатаПриемаТовара.Значение КАК ДатаПриемаТовара,
               |	ЛОЖЬ КАК ЭтоМаркируемыйЮЗД,
               |	ЛОЖЬ КАК ЭтоПрослеживаемыйЮЗД,
               |	РеализацияТЧ.СуммаСНДС КАК СуммаСНДС,
               |	РеализацияТЧ.СуммаНДС КАК СуммаНДС,
               |	РеализацияТЧ.Сумма КАК СуммаДокументаРеализации,
               |	ОрганизацииКонтактнаяИнформация.Значение КАК ИзБазыОрганизацияЗначениеАдреса,
               |	ОрганизацииКонтактнаяИнформация.Тип КАК ИзБазыОрганизацияТипАдреса,
               |	ПартнерыКонтактнаяИнформация.Значение КАК ИзБазыТочкаДоставкиЗначениеАдреса,
               |	ПартнерыКонтактнаяИнформация.Тип КАК ИзБазыТочкаДоставкиТипАдреса,
               |	КонтрагентыКонтактнаяИнформация.Значение КАК ИзБазыКонтрагентЗначениеАдреса,
               |	POSITION.ХранилищеЗначения КАК POSITION,
               |	ORDER_События.Документ КАК ORDER,
               |	КонтрагентыКонтактнаяИнформация.Тип КАК ИзБазыКонтрагентТипАдреса,
               |	ДанныеКонтрагента.ПоддерживаетМЧД КАК ОтправитьМЧД
               |ПОМЕСТИТЬ ВТОсновная
               |ИЗ
               |	Источник КАК Источник
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Накладная_События
               |		ПО Источник.Накладная = Накладная_События.Документ
               |			И (Накладная_События.ВидДокумента = ""Накладная_Исходящая"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК RECADV_События
               |		ПО (Накладная_События.Идентификатор = RECADV_События.ИдентификаторОснования)
               |			И (RECADV_События.ВидДокумента = ""RECADV_Входящий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_CAMPAIGNNUMBER
               |		ПО (RECADV_События.Документ = RECADV_CAMPAIGNNUMBER.Ссылка)
               |			И (RECADV_CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNINFO"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_EDIINTERCHANGEID
               |		ПО (RECADV_События.Документ = RECADV_EDIINTERCHANGEID.Ссылка)
               |			И (RECADV_EDIINTERCHANGEID.Реквизит = ""EDIINTERCHANGEID"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Номер
               |		ПО (RECADV_События.Документ = RECADV_Номер.Ссылка)
               |			И (RECADV_Номер.Реквизит = ""NUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Дата
               |		ПО (RECADV_События.Документ = RECADV_Дата.Ссылка)
               |			И (RECADV_Дата.Реквизит = ""ДатаФайла"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_ORDERVID
               |		ПО (RECADV_События.Документ = RECADV_ORDERVID.Ссылка)
               |			И (RECADV_ORDERVID.Реквизит = ""ORDERVID"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_RECADVVID
               |		ПО (RECADV_События.Документ = RECADV_RECADVVID.Ссылка)
               |			И (RECADV_RECADVVID.Реквизит = ""RECADVVID"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ДатаПриемаТовара
               |		ПО (RECADV_События.Документ = ДатаПриемаТовара.Ссылка)
               |			И (ДатаПриемаТовара.Реквизит = ""ДатаПриемки"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК ORDER_События
               |		ПО (Накладная_События.ИдентификаторЦепочки = ORDER_События.ИдентификаторЦепочки)
               |			И (ORDER_События.ВидДокумента = ""ORDER_Входящий"")
               |			И (ВЫРАЗИТЬ(ORDER_События.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК POSITION
               |		ПО (ORDER_События.Документ = POSITION.Ссылка)
               |			И (POSITION.Реквизит = ""POSITION"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ДанныеКонтрагента
               |		ПО Источник.КонтрагентЦепочка = ДанныеКонтрагента.Объект
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК КонтрагентОператорИд
               |		ПО (КонтрагентОператорИд.Ссылка = ДанныеКонтрагента.Партнер)
               |			И (КонтрагентОператорИд.Реквизит = ""Идентификатор"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК КонтрагентОператорИНН
               |		ПО (КонтрагентОператорИНН.Ссылка = ДанныеКонтрагента.Партнер)
               |			И (КонтрагентОператорИНН.Реквизит = ""ИНН"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК КонтрагентОператорКПП
               |		ПО (КонтрагентОператорКПП.Ссылка = ДанныеКонтрагента.Партнер)
               |			И (КонтрагентОператорКПП.Реквизит = ""КПП"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ДанныеОрганизации
               |		ПО Источник.ОрганизацияЦепочка = ДанныеОрганизации.Объект
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОрганизацияОператорИд
               |		ПО (ОрганизацияОператорИд.Ссылка = ДанныеОрганизации.Партнер)
               |			И (ОрганизацияОператорИд.Реквизит = ""Идентификатор"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОрганизацияОператорИНН
               |		ПО (ОрганизацияОператорИНН.Ссылка = ДанныеОрганизации.Партнер)
               |			И (ОрганизацияОператорИНН.Реквизит = ""ИНН"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОрганизацияОператорКПП
               |		ПО (ОрганизацияОператорКПП.Ссылка = ДанныеОрганизации.Партнер)
               |			И (ОрганизацияОператорКПП.Реквизит = ""КПП"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ДолжностьПодписанта
               |		ПО (ДолжностьПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ДолжностьПодписанта.Реквизит = ""ДолжностьПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ФамилияПодписанта
               |		ПО (ФамилияПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ФамилияПодписанта.Реквизит = ""ФамилияПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ИмяПодписанта
               |		ПО (ИмяПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ИмяПодписанта.Реквизит = ""ИмяПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОтчествоПодписанта
               |		ПО (ОтчествоПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ОтчествоПодписанта.Реквизит = ""ОтчествоПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатОбластьПолномочий
               |		ПО (СертификатОбластьПолномочий.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатОбластьПолномочий.Реквизит = ""ОбластьПолномочий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатОснованиеПолномочий
               |		ПО (СертификатОснованиеПолномочий.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатОснованиеПолномочий.Реквизит = ""ОснованиеПолномочий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатСтатусПодписанта
               |		ПО (СертификатСтатусПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатСтатусПодписанта.Реквизит = ""СтатусПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатСертификатНаСервере
               |		ПО (СертификатСертификатНаСервере.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатСертификатНаСервере.Реквизит = ""СертификатНаСервере"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ТочкиДоставки КАК ДанныеТочкиДоставки
               |		ПО Источник.ТочкаДоставкиЦепочка = ДанныеТочкиДоставки.Объект
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
               |		ПО Источник.ОрганизацияЦепочка = ОрганизацииКонтактнаяИнформация.Ссылка
               |			И (ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
               |			И (ОрганизацииКонтактнаяИнформация.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
               |		ПО Источник.КонтрагентЦепочка = КонтрагентыКонтактнаяИнформация.Ссылка
               |			И (КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
               |			И (КонтрагентыКонтактнаяИнформация.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента))
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
               |		ПО Источник.ТочкаДоставкиЦепочка = ПартнерыКонтактнаяИнформация.Ссылка
               |			И (ПартнерыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера))
               |			И (ПартнерыКонтактнаяИнформация.ВидДляСписка = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера))
               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
               |			СчетФактураВыданный.Ссылка КАК Ссылка,
               |			ВЫБОР
               |				КОГДА РеализацияТоваровУслугТовары.Ссылка.ЦенаВключаетНДС
               |					ТОГДА СУММА(РеализацияТоваровУслугТовары.Сумма) - СУММА(РеализацияТоваровУслугТовары.СуммаНДС)
               |				ИНАЧЕ СУММА(РеализацияТоваровУслугТовары.Сумма)
               |			КОНЕЦ КАК Сумма,
               |			СУММА(РеализацияТоваровУслугТовары.СуммаНДС) КАК СуммаНДС,
               |			СУММА(РеализацияТоваровУслугТовары.СуммаСНДС) КАК СуммаСНДС
               |		ИЗ
               |			Документ.СчетФактураВыданный КАК СчетФактураВыданный
               |				ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
               |				ПО ((ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.РеализацияТоваровУслуг)) = РеализацияТоваровУслугТовары.Ссылка)
               |		ГДЕ
               |			СчетФактураВыданный.Ссылка В(&amp;Источник)
               |		
               |		СГРУППИРОВАТЬ ПО
               |			СчетФактураВыданный.Ссылка,
               |			РеализацияТоваровУслугТовары.Ссылка.ЦенаВключаетНДС) КАК РеализацияТЧ
               |		ПО Источник.Ссылка = РеализацияТЧ.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ИсходныеСЧФ.Ссылка КАК Ссылка,
               |	СУММА(РеализацияТоваровУслугТовары.Количество) КАК КоличествоПоРТУ
               |ПОМЕСТИТЬ ВТ_ИсходныеРТУ
               |ИЗ
               |	ИсходныеСЧФ КАК ИсходныеСЧФ
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
               |		ПО ИсходныеСЧФ.ИсходныйСчетФактура.ДокументОснование = РеализацияТоваровУслугТовары.Ссылка
               |
               |СГРУППИРОВАТЬ ПО
               |	ИсходныеСЧФ.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТОсновная.Ссылка КАК Ссылка,
               |	ВТОсновная.ПредставлениеСЧФ КАК ПредставлениеСЧФ,
               |	ВТОсновная.НомерСЧФ КАК НомерСЧФ,
               |	ВТОсновная.ДатаСЧФ КАК ДатаСЧФ,
               |	ВТОсновная.СуммаДокументаРеализации КАК СуммаДокументаРеализации,
               |	ЕСТЬNULL(ВТОсновная.СуммаНДС, 0) КАК СуммаНДС,
               |	ВТОсновная.ДокументОснование КАК ДокументОснование,
               |	ВТОсновная.ДокументОснованиеДата КАК ДокументОснованиеДата,
               |	ВТОсновная.ДокументОснованиеНомер КАК ДокументОснованиеНомер,
               |	ВТОсновная.НомерИсправления КАК НомерИсправления,
               |	ВТОсновная.Заказ КАК Заказ,
               |	ВТОсновная.ДокументЗаказа КАК ДокументЗаказа,
               |	ВТОсновная.ЗаказДата КАК ЗаказДата,
               |	ВТОсновная.ЗаказНомер КАК ЗаказНомер,
               |	ВТОсновная.ЭтоКорректировка КАК ЭтоКорректировка,
               |	ВТОсновная.ЭтоИсправление КАК ЭтоИсправление,
               |	ВТОсновная.ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
               |	ВТОсновная.ИдентификаторПредыдещейСЧФ КАК ИдентификаторПредыдещейСЧФ,
               |	ВТОсновная.ИдентификаторТекущегоСЧФ КАК ИдентификаторТекущегоСЧФ,
               |	ВТОсновная.DR_RECADV КАК DR_RECADV,
               |	ВТОсновная.ВидСчетаФактуры КАК ВидСчетаФактуры,
               |	ВТОсновная.Организация КАК Организация,
               |	ВТОсновная.ПредставлениеОрганизации КАК ПредставлениеОрганизации,
               |	ВТОсновная.ОрганизацияЮрФизЛицо КАК ОрганизацияЮрФизЛицо,
               |	ВТОсновная.ОрганизацияИНН КАК ОрганизацияИНН,
               |	ВТОсновная.ОрганизацияКПП КАК ОрганизацияКПП,
               |	ВТОсновная.ОрганизацияНаименованиеПолное КАК ОрганизацияНаименованиеПолное,
               |	ВТОсновная.ОрганизацияФамилияИП КАК ОрганизацияФамилияИП,
               |	ВТОсновная.ОрганизацияИмяИП КАК ОрганизацияИмяИП,
               |	ВТОсновная.ОрганизацияОтчествоИП КАК ОрганизацияОтчествоИП,
               |	ВТОсновная.ОрганизацияGLN КАК ОрганизацияGLN,
               |	ВТОсновная.ОрганизацияГород КАК ОрганизацияГород,
               |	ВТОсновная.ОрганизацияИндекс КАК ОрганизацияИндекс,
               |	ВТОсновная.ОрганизацияДом КАК ОрганизацияДом,
               |	ВТОсновная.ОрганизацияКодРегиона КАК ОрганизацияКодРегиона,
               |	ВТОсновная.ОрганизацияУлица КАК ОрганизацияУлица,
               |	ВТОсновная.ОрганизацияРайон КАК ОрганизацияРайон,
               |	ВТОсновная.ОрганизацияНаселенныйПункт КАК ОрганизацияНаселенныйПункт,
               |	ВТОсновная.ОрганизацияКорпус КАК ОрганизацияКорпус,
               |	ВТОсновная.ОрганизацияКвартира КАК ОрганизацияКвартира,
               |	ВТОсновная.ОрганизацияИдОЭД КАК ОрганизацияИдОЭД,
               |	ВТОсновная.ОрганизацияОператорИд КАК ОрганизацияОператорИд,
               |	ВТОсновная.ОрганизацияОператорИНН КАК ОрганизацияОператорИНН,
               |	ВТОсновная.ОрганизацияОператорКПП КАК ОрганизацияОператорКПП,
               |	ВТОсновная.ОрганизацияОператорНаименование КАК ОрганизацияОператорНаименование,
               |	ВТОсновная.ОрганизацияОГРН КАК ОрганизацияОГРН,
               |	ВТОсновная.ОрганизацияСвидетельствоСерияНомер КАК ОрганизацияСвидетельствоСерияНомер,
               |	ВТОсновная.ОрганизацияСвидетельствоДатаВыдачи КАК ОрганизацияСвидетельствоДатаВыдачи,
               |	ВТОсновная.ДолжностьПодписанта КАК ДолжностьПодписанта,
               |	ВТОсновная.ФамилияПодписанта КАК ФамилияПодписанта,
               |	ВТОсновная.ИмяПодписанта КАК ИмяПодписанта,
               |	ВТОсновная.POSITION КАК POSITION,
               |	ВТОсновная.ОтчествоПодписанта КАК ОтчествоПодписанта,
               |	ВТОсновная.СертификатОбластьПолномочий КАК СертификатОбластьПолномочий,
               |	ВТОсновная.СертификатОснованиеПолномочий КАК СертификатОснованиеПолномочий,
               |	ВТОсновная.СертификатСтатусПодписанта КАК СертификатСтатусПодписанта,
               |	ВТОсновная.СертификатСертификатНаСервере КАК СертификатСертификатНаСервере,
               |	ВТОсновная.ДанныеСертификатаЭКОМ КАК ДанныеСертификатаЭКОМ,
               |	ВТОсновная.Контрагент КАК Контрагент,
               |	ВТОсновная.КонтрагентИзЗаказа КАК КонтрагентИзЗаказа,
               |	ВТОсновная.ПредставлениеКонтрагента КАК ПредставлениеКонтрагента,
               |	ВТОсновная.КонтрагентНаименованиеПолное КАК КонтрагентНаименованиеПолное,
               |	ВТОсновная.КонтрагентЮрФизЛицо КАК КонтрагентЮрФизЛицо,
               |	ВТОсновная.КонтрагентИНН КАК КонтрагентИНН,
               |	ВТОсновная.КонтрагентКПП КАК КонтрагентКПП,
               |	ВТОсновная.КонтрагентGLN КАК КонтрагентGLN,
               |	ВТОсновная.ФорматУПД КАК ФорматУПД,
               |	ВТОсновная.КонтрагентИдОЭД КАК КонтрагентИдОЭД,
               |	ВТОсновная.КонтрагентОператорИд КАК КонтрагентОператорИд,
               |	ВТОсновная.КонтрагентОператорИНН КАК КонтрагентОператорИНН,
               |	ВТОсновная.КонтрагентОператорКПП КАК КонтрагентОператорКПП,
               |	ВТОсновная.КонтрагентОператорНаименование КАК КонтрагентОператорНаименование,
               |	ВТОсновная.КонтрагентГород КАК КонтрагентГород,
               |	ВТОсновная.КонтрагентКодРегиона КАК КонтрагентКодРегиона,
               |	ВТОсновная.КонтрагентДом КАК КонтрагентДом,
               |	ВТОсновная.КонтрагентИндекс КАК КонтрагентИндекс,
               |	ВТОсновная.КонтрагентУлица КАК КонтрагентУлица,
               |	ВТОсновная.КонтрагентРайон КАК КонтрагентРайон,
               |	ВТОсновная.КонтрагентНаселенныйПункт КАК КонтрагентНаселенныйПункт,
               |	ВТОсновная.КонтрагентКорпус КАК КонтрагентКорпус,
               |	ВТОсновная.КонтрагентКвартира КАК КонтрагентКвартира,
               |	ВТОсновная.ТочкаДоставки КАК ТочкаДоставки,
               |	ВТОсновная.ПредставлениеТочкиДоставки КАК ПредставлениеТочкиДоставки,
               |	ВТОсновная.ТочкаДоставкиНаименованиеИзРегистра КАК ТочкаДоставкиНаименованиеИзРегистра,
               |	ВТОсновная.ТочкаДоставкиНаименованиеПолное КАК ТочкаДоставкиНаименованиеПолное,
               |	ВТОсновная.ТочкаДоставкиЮрФизЛицо КАК ТочкаДоставкиЮрФизЛицо,
               |	ВТОсновная.ТочкаДоставкиИНН КАК ТочкаДоставкиИНН,
               |	ВТОсновная.ТочкаДоставкиКПП КАК ТочкаДоставкиКПП,
               |	ВТОсновная.ТочкаДоставкиИННИзРегистра КАК ТочкаДоставкиИННИзРегистра,
               |	ВТОсновная.ТочкаДоставкиКППИзРегистра КАК ТочкаДоставкиКППИзРегистра,
               |	ВТОсновная.ТочкаДоставкиГород КАК ТочкаДоставкиГород,
               |	ВТОсновная.ТочкаДоставкиДом КАК ТочкаДоставкиДом,
               |	ВТОсновная.ТочкаДоставкиИндекс КАК ТочкаДоставкиИндекс,
               |	ВТОсновная.ТочкаДоставкиКодРегиона КАК ТочкаДоставкиКодРегиона,
               |	ВТОсновная.ТочкаДоставкиУлица КАК ТочкаДоставкиУлица,
               |	ВТОсновная.ТочкаДоставкиРайон КАК ТочкаДоставкиРайон,
               |	ВТОсновная.ТочкаДоставкиНаселенныйПункт КАК ТочкаДоставкиНаселенныйПункт,
               |	ВТОсновная.ТочкаДоставкиКорпус КАК ТочкаДоставкиКорпус,
               |	ВТОсновная.ТочкаДоставкиКвартира КАК ТочкаДоставкиКвартира,
               |	ВТОсновная.ТочкаДоставкиGLN КАК ТочкаДоставкиGLN,
               |	ВТОсновная.RECADV_EDIINTERCHANGEID КАК RECADV_EDIINTERCHANGEID,
               |	ВТОсновная.RECADV_CAMPAIGNNUMBER КАК RECADV_CAMPAIGNNUMBER,
               |	ВТОсновная.RECADV_Номер КАК RECADV_Номер,
               |	ВТОсновная.RECADV_Дата КАК RECADV_Дата,
               |	ВТОсновная.RECADV_ORDERVID КАК RECADV_ORDERVID,
               |	ВТОсновная.ORDER КАК ORDER,
               |	ВТОсновная.RECADV_RECADVVID КАК RECADV_RECADVVID,
               |	ВТОсновная.ДатаПриемаТовара КАК ДатаПриемаТовара,
               |	ВТОсновная.ЭтоМаркируемыйЮЗД КАК ЭтоМаркируемыйЮЗД,
               |	ВТОсновная.ЭтоПрослеживаемыйЮЗД КАК ЭтоПрослеживаемыйЮЗД,
               |	ВТОсновная.Контрагент_ЭСФБезИнфПоля КАК Контрагент_ЭСФБезИнфПоля,
               |	ЕСТЬNULL(DR_ИнфоПоля.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЭКОМ_ИнфоПоля,
               |	ЕСТЬNULL(ВТОсновная.СуммаСНДС, 0) КАК СуммаСНДС,
               |	ЕСТЬNULL(ЭКОМ_ИспользоватьАдресGLN.ЗначениеДополнительнойКонстанты, ЛОЖЬ) КАК ЭКОМ_ИспользоватьАдресGLN,
               |	ЕСТЬNULL(ЭКОМ_ИспользоватьАдресТочкиДоставкиGLN.ЗначениеДополнительнойКонстанты, ЛОЖЬ) КАК ЭКОМ_ИспользоватьАдресТочкиДоставкиGLN,
               |	ВТОсновная.ИзБазыОрганизацияЗначениеАдреса КАК ИзБазыОрганизацияЗначениеАдреса,
               |	ВТОсновная.ИзБазыОрганизацияТипАдреса КАК ИзБазыОрганизацияТипАдреса,
               |	ВТОсновная.ИзБазыТочкаДоставкиЗначениеАдреса КАК ИзБазыТочкаДоставкиЗначениеАдреса,
               |	ВТОсновная.ИзБазыТочкаДоставкиТипАдреса КАК ИзБазыТочкаДоставкиТипАдреса,
               |	ВТОсновная.ИзБазыКонтрагентЗначениеАдреса КАК ИзБазыКонтрагентЗначениеАдреса,
               |	ВТОсновная.ИзБазыКонтрагентТипАдреса КАК ИзБазыКонтрагентТипАдреса,
               |	ВТОсновная.ИсправляемыйСчетФактураДата КАК ИсправляемыйСчетФактураДата,
               |	ВТОсновная.ОтправитьМЧД КАК ОтправитьМЧД,
               |	ВТОсновная.ОрганизацияИНН КАК ОргПодписантИНН,
               |	ВТОсновная.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ВТ_ИсходныеРТУ.КоличествоПоРТУ КАК КоличествоПоРТУ
               |ИЗ
               |	ВТОсновная КАК ВТОсновная
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки КАК DR_ИнфоПоля
               |		ПО ВТОсновная.ФорматУПД = DR_ИнфоПоля.Наименование
               |			И (НЕ DR_ИнфоПоля.ПометкаУдаления)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ЗначениеДополнительныхКонстант КАК ЭКОМ_ИспользоватьАдресТочкиДоставкиGLN
               |		ПО (ИСТИНА)
               |			И (ЭКОМ_ИспользоватьАдресТочкиДоставкиGLN.ДополнительнаяКонстанта = ""ЭКОМ_ИспользоватьАдресаИзРегистраТочкиДоставкиGLN"")
               |			И (ЭКОМ_ИспользоватьАдресТочкиДоставкиGLN.Измерение = НЕОПРЕДЕЛЕНО)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_ЗначениеДополнительныхКонстант КАК ЭКОМ_ИспользоватьАдресGLN
               |		ПО (ИСТИНА)
               |			И (ЭКОМ_ИспользоватьАдресGLN.ДополнительнаяКонстанта = ""ЭКОМ_ИспользоватьАдресаИзРегистраGLN"")
               |			И (ЭКОМ_ИспользоватьАдресGLN.Измерение = НЕОПРЕДЕЛЕНО)
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсходныеРТУ КАК ВТ_ИсходныеРТУ
               |		ПО ВТОсновная.Ссылка = ВТ_ИсходныеРТУ.Ссылка";        
Запрос.УстановитьПараметр("Источник", Источник);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДокумента = РезультатЗапроса.Выбрать();

Результат = Новый ТаблицаЗначений;

МассивКолонок = Новый Массив; 

МассивКолонок.Добавить("ОтправитьМЧД");
МассивКолонок.Добавить("СтрокаМЧД");
МассивКолонок.Добавить("GUIDФайла"); 

МассивКолонок.Добавить("ВерсПрог");
МассивКолонок.Добавить("ВерсФорм");
МассивКолонок.Добавить("ВремИнфПр");
МассивКолонок.Добавить("Время");
МассивКолонок.Добавить("ГрузоотправительТип");
МассивКолонок.Добавить("ГрузополучательИНН");
МассивКолонок.Добавить("ГрузополучательКПП");
МассивКолонок.Добавить("ГрузополучательНаимОрг");
МассивКолонок.Добавить("ГрузополучательТип");
МассивКолонок.Добавить("ГрузПолГород");
МассивКолонок.Добавить("ГрузПолДом");
МассивКолонок.Добавить("ГрузПолИндекс");
МассивКолонок.Добавить("ГрузПолКварт");
МассивКолонок.Добавить("ГрузПолКодРегион");
МассивКолонок.Добавить("ГрузПолКорпус");
МассивКолонок.Добавить("ГрузПолНаселПункт");
МассивКолонок.Добавить("ГрузПолРайон");
МассивКолонок.Добавить("ГрузПолТипАдреса");
МассивКолонок.Добавить("ГрузПолУлица");
МассивКолонок.Добавить("ГУИДДокОснованиеДляКУПД");
МассивКолонок.Добавить("ГУИДФайлаЭСФ");
МассивКолонок.Добавить("Дата");
МассивКолонок.Добавить("ДатаАктаПриемки");
МассивКолонок.Добавить("ДатаЗаказа");
МассивКолонок.Добавить("ДатаИнфПр");
МассивКолонок.Добавить("ДатаОснования");
МассивКолонок.Добавить("ДатаРасходной");
МассивКолонок.Добавить("ДатаСчФ");
МассивКолонок.Добавить("ДокФункция");
МассивКолонок.Добавить("ИдОтпр");
МассивКолонок.Добавить("ИдПок");
МассивКолонок.Добавить("ИдФайл");
МассивКолонок.Добавить("ИдЭДООператор");
МассивКолонок.Добавить("ИННОператор");
МассивКолонок.Добавить("ИнфТекст");
МассивКолонок.Добавить("КНД");
МассивКолонок.Добавить("КодВалютыСчФ");
МассивКолонок.Добавить("Контрагент");
МассивКолонок.Добавить("КППОператор");
МассивКолонок.Добавить("ОргПодписантДолжность");
МассивКолонок.Добавить("ОргПодписантИНН");
МассивКолонок.Добавить("ОргПодписантФамилия");
МассивКолонок.Добавить("ОргПодписантИмя");
МассивКолонок.Добавить("ОргПодписантОтчество");
МассивКолонок.Добавить("ОргПодписантСвГосРегИП");
МассивКолонок.Добавить("ПодписантОблПолн");
МассивКолонок.Добавить("ПодписантОснПолн");
МассивКолонок.Добавить("ПодписантСтатус");
МассивКолонок.Добавить("НаимДокОпр");
МассивКолонок.Добавить("НаимЭконСубСост");
МассивКолонок.Добавить("НаименованиеОснования");
МассивКолонок.Добавить("НаимОргОператор");
МассивКолонок.Добавить("НомерОснования");
МассивКолонок.Добавить("НомерРасходной");
МассивКолонок.Добавить("НомерСчФ"); 
МассивКолонок.Добавить("НомерЗаказа");
МассивКолонок.Добавить("ОнЖе");
МассивКолонок.Добавить("Организация");
МассивКолонок.Добавить("ДатаИспрСчФ");
МассивКолонок.Добавить("НомИспрСчФ");
МассивКолонок.Добавить("ДефДатаИспрСчФ");
МассивКолонок.Добавить("ДефНомИспрСчФ");
МассивКолонок.Добавить("ПередатДокум");
МассивКолонок.Добавить("ПодписантТип");
МассивКолонок.Добавить("ПокГород");
МассивКолонок.Добавить("ПокДом");
МассивКолонок.Добавить("ПокИмя");
МассивКолонок.Добавить("ПокИндекс");
МассивКолонок.Добавить("ПокИНН");
МассивКолонок.Добавить("ПокИННЮЛ");
МассивКолонок.Добавить("ПокКварт");
МассивКолонок.Добавить("ПокКодРегион");
МассивКолонок.Добавить("ПокКорпус");
МассивКолонок.Добавить("ПокКПП");
МассивКолонок.Добавить("ПокНаимОрг");
МассивКолонок.Добавить("ПокНаселПункт");
МассивКолонок.Добавить("ПокОтчество");
МассивКолонок.Добавить("ПокРайон");
МассивКолонок.Добавить("ПокТипАдреса");
МассивКолонок.Добавить("ПокТипОрганизации");
МассивКолонок.Добавить("ПокУлица");
МассивКолонок.Добавить("ПокФамилия");
МассивКолонок.Добавить("ПолноеИмяФайла");
МассивКолонок.Добавить("ПоФактХЖ");
МассивКолонок.Добавить("ПродГород");
МассивКолонок.Добавить("ПродДом");
МассивКолонок.Добавить("ПродИндекс");
МассивКолонок.Добавить("ПродИНН");
МассивКолонок.Добавить("ПродКварт");
МассивКолонок.Добавить("ПродКодРегион");
МассивКолонок.Добавить("ПродКорпус");
МассивКолонок.Добавить("ПродКПП");
МассивКолонок.Добавить("ПродНаимОрг");
МассивКолонок.Добавить("ПродНаселПункт");
МассивКолонок.Добавить("ПродРайон");
МассивКолонок.Добавить("ПродТипАдреса");
МассивКолонок.Добавить("ПродТипОрганизации");
МассивКолонок.Добавить("ПродУлица");
МассивКолонок.Добавить("ПродФамилияИП");
МассивКолонок.Добавить("ПродИмяИП");
МассивКолонок.Добавить("ПродОтчествоИП");
МассивКолонок.Добавить("РеализацияСсылка");
МассивКолонок.Добавить("Ссылка");
МассивКолонок.Добавить("Статус");
МассивКолонок.Добавить("ДатаПер");
МассивКолонок.Добавить("СтТовБезНДСВсего");
МассивКолонок.Добавить("СтТовУчНалВсего");
МассивКолонок.Добавить("СуммаНДССчФ");
МассивКолонок.Добавить("ТипФайла");
МассивКолонок.Добавить("ФайлИмя");
МассивКолонок.Добавить("ФорматУПД");
МассивКолонок.Добавить("СодОпер");
МассивКолонок.Добавить("ТипДок");
МассивКолонок.Добавить("ВидДокумента"); 
МассивКолонок.Добавить("НаимОсн");
МассивКолонок.Добавить("НомОсн");
МассивКолонок.Добавить("ДатаОсн");
МассивКолонок.Добавить("НомТранНакл");
МассивКолонок.Добавить("ДатаТранНакл");
МассивКолонок.Добавить("СертификатСертификатНаСервере");  
МассивКолонок.Добавить("ДанныеСертификатаЭКОМ");
МассивКолонок.Добавить("ИдентификаторЦепочки");


Для Каждого Колонка Из МассивКолонок Цикл
	Результат.Колонки.Добавить(Колонка);
КонецЦикла;

ЗапросМаркировка = Новый Запрос;
ЗапросМаркировка.Текст = "ВЫБРАТЬ
                         |	ВЫБОР
                         |		КОГДА ТИПЗНАЧЕНИЯ(СчетФактураВыданный.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
                         |			ТОГДА СчетФактураВыданный.ДокументОснование
                         |		ИНАЧЕ СчетФактураВыданный.ДокументОснование.ДокументОснование
                         |	КОНЕЦ КАК Накладная,
                         |	СчетФактураВыданный.Контрагент КАК Контрагент
                         |ПОМЕСТИТЬ Источник
                         |ИЗ
                         |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
                         |		ПО СчетФактураВыданный.Контрагент = ЭКОМ_GLN.Объект
                         |			И (ЭКОМ_GLN.Контрагент_РаботаетСМаркировкой)
                         |ГДЕ
                         |	СчетФактураВыданный.Ссылка В(&amp;Источник)
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |ВЫБРАТЬ
                         |	Источник.Накладная КАК Накладная,
                         |	Источник.Контрагент КАК Контрагент,
                         |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
                         |ПОМЕСТИТЬ НакладнаяТовары
                         |ИЗ
                         |	Источник КАК Источник
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                         |		ПО Источник.Накладная = РеализацияТоваровУслугТовары.Ссылка
                         |
                         |СГРУППИРОВАТЬ ПО
                         |	Источник.Контрагент,
                         |	РеализацияТоваровУслугТовары.Номенклатура,
                         |	Источник.Накладная
                         |
                         |ОБЪЕДИНИТЬ ВСЕ
                         |
                         |ВЫБРАТЬ
                         |	Источник.Накладная,
                         |	Источник.Контрагент,
                         |	КорректировкаРеализацииТовары.Номенклатура
                         |ИЗ
                         |	Источник КАК Источник
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
                         |		ПО Источник.Накладная = КорректировкаРеализацииТовары.Ссылка
                         |
                         |СГРУППИРОВАТЬ ПО
                         |	Источник.Контрагент,
                         |	КорректировкаРеализацииТовары.Номенклатура,
                         |	Источник.Накладная
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |ВЫБРАТЬ
                         |	ЭКОМ_НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
                         |ИЗ
                         |	НакладнаяТовары КАК НакладнаяТовары
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
                         |		ПО НакладнаяТовары.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
                         |			И НакладнаяТовары.Номенклатура = ЭКОМ_НоменклатураКонтрагентов.Номенклатура
                         |			И (ЭКОМ_НоменклатураКонтрагентов.Маркировка &lt;&gt; """")
                         |			И (ЭКОМ_НоменклатураКонтрагентов.Маркировка &lt;&gt; ""нет"")
                         |			И (ЭКОМ_НоменклатураКонтрагентов.GTIN &lt;&gt; """")";
ЗапросМаркировка.УстановитьПараметр("Источник", Источник);
ЕстьМаркированныеТовары = Не ЗапросМаркировка.Выполнить().Пустой();

КвалификаторСтроки = Новый КвалификаторыСтроки(250,ДопустимаяДлина.Фиксированная);
ДанныеТЧНоменклатурORDER = новый ТаблицаЗначений;
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ORDER", 						Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Номенклатура", 				Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("QUANTITYOFCUINTU", 			Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("INFO", 						Новый ОписаниеТипов("Строка", КвалификаторСтроки));

Пока ВыборкаДокумента.Следующий() Цикл 
	
    СтруктураДокумента = Результат.Добавить();
    СтруктураДокумента.ИдентификаторЦепочки = ВыборкаДокумента.ИдентификаторЦепочки;
	
	СтрокаПоМЧД = ТаблицаМЧД.Найти(ВыборкаДокумента.Организация, "Организация");
	Если СтрокаПоМЧД &lt;&gt; Неопределено И СтрокаПоМЧД.Организация_ПоддерживаетМЧД = Истина И ВыборкаДокумента.ОтправитьМЧД = Истина Тогда 

		Если СтрокаПоМЧД.Сертификат = Null ИЛИ СтрокаПоМЧД.ТипСертификата = 2 И (НЕ ЗначениеЗаполнено(СтрокаПоМЧД.СтрокаМЧД) ИЛИ НЕ СтрокаПоМЧД.МЧД_Актуальна) Тогда  
	        ТекстЛогаСобытий = "Проверьте наличие доверенности для пользователя по организации "
	        + ВыборкаДокумента.ПредставлениеОрганизации;
			ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия); 
			
			Результат.Удалить(СтруктураДокумента);
        	Продолжить;
		КонецЕсли; 
		Если СтрокаПоМЧД.ТипСертификата = 2 Тогда	
			СтруктураДокумента.ОтправитьМЧД = Истина;
	    	СтруктураДокумента.СтрокаМЧД 	= СтрокаПоМЧД.СтрокаМЧД;  
			ПодписантТип                    = "ФЛ";  
		Иначе
			ПодписантТип                    = ВыборкаДокумента.ОрганизацияЮрФизЛицо;
		КонецЕсли;	
		
		СтруктураДокумента.СертификатСертификатНаСервере 	= СтрокаПоМЧД.СертификатНаСервере;
	    СтруктураДокумента.ДанныеСертификатаЭКОМ 			= СтрокаПоМЧД.Сертификат;
		
		ДолжностьПодписанта             = СтрокаПоМЧД.ДолжностьПодписанта;
		ФамилияПодписанта               = СтрокаПоМЧД.ФамилияПодписанта;
		ИмяПодписанта                   = СтрокаПоМЧД.ИмяПодписанта;
		ОтчествоПодписанта              = СтрокаПоМЧД.ОтчествоПодписанта;
		СертификатОбластьПолномочий    	= СтрокаПоМЧД.ОбластьПолномочий;
		СертификатОснованиеПолномочий   = СтрокаПоМЧД.ОснованиеПолномочий;
		СертификатСтатусПодписанта      = СтрокаПоМЧД.СтатусПодписанта;
		ОргПодписантИНН                 = СтрокаПоМЧД.СертификатИНН;
		
	Иначе
	    СтруктураДокумента.СертификатСертификатНаСервере 	= ВыборкаДокумента.СертификатСертификатНаСервере;
	    СтруктураДокумента.ДанныеСертификатаЭКОМ 			= ВыборкаДокумента.ДанныеСертификатаЭКОМ;
		
		ДолжностьПодписанта             = ВыборкаДокумента.ДолжностьПодписанта;
		ФамилияПодписанта               = ВыборкаДокумента.ФамилияПодписанта;
		ИмяПодписанта                   = ВыборкаДокумента.ИмяПодписанта;
		ОтчествоПодписанта              = ВыборкаДокумента.ОтчествоПодписанта;
		СертификатОбластьПолномочий    	= ВыборкаДокумента.СертификатОбластьПолномочий;
		СертификатОснованиеПолномочий   = ВыборкаДокумента.СертификатОснованиеПолномочий;
		СертификатСтатусПодписанта      = ВыборкаДокумента.СертификатСтатусПодписанта;
		ОргПодписантИНН                 = ВыборкаДокумента.ОргПодписантИНН;  
		ПодписантТип                    = ВыборкаДокумента.ОрганизацияЮрФизЛицо;
		
	КонецЕсли;
	
	Данные_POSITION = ВыборкаДокумента.POSITION.Получить(); 
	
	Для Каждого СтрокаНоменклатуры Из Данные_POSITION Цикл
		
		НоваяСтрокаНоменклатуры 						= ДанныеТЧНоменклатурORDER.Добавить();
		
		НоваяСтрокаНоменклатуры.ORDER                   = ВыборкаДокумента.ORDER;
		НоваяСтрокаНоменклатуры.Номенклатура            = СтрокаНоменклатуры.Номенклатура;
		
		Если Данные_POSITION.Колонки.Найти("QUANTITYOFCUINTU") &lt;&gt; Неопределено Тогда 
			НоваяСтрокаНоменклатуры.QUANTITYOFCUINTU        = СтрокаНоменклатуры.QUANTITYOFCUINTU;
		Иначе
			НоваяСтрокаНоменклатуры.QUANTITYOFCUINTU        = "1";	
		КонецЕсли;
		
		Если Данные_POSITION.Колонки.Найти("INFO") &lt;&gt; Неопределено Тогда 
			НоваяСтрокаНоменклатуры.INFO        = СтрокаНоменклатуры.QUANTIINFOTYOFCUINTU;
		Иначе
			НоваяСтрокаНоменклатуры.INFO        = "1";	
		КонецЕсли;

	КонецЦикла;
	
	Если ВыборкаДокумента.ЭтоКорректировка = Истина И (ВыборкаДокумента.КоличествоПоРТУ+ВыборкаДокумента.ВсегоКолКор) = 0 Тогда
		ТекстЛогаСобытий = "По документу Счет-фактура № " + ВыборкаДокумента.НомерСЧФ + " от " + ВыборкаДокумента.ДатаСЧФ + " отсутствуют товары. Используйте аннулирование УПД.";
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		Результат.Удалить(СтруктураДокумента);
		Продолжить;
	КонецЕсли;
	
    ТекущийНомерИсправления  = ?(ЗначениеЗаполнено(НомерИсправления), НомерИсправления, ВыборкаДокумента.НомерИсправления);
    ТекущийНомерИсправления  = ?(Строка(ТекущийНомерИсправления) = "0", "", Строка(ТекущийНомерИсправления));

    ЭтоИсправление = ВыборкаДокумента.ЭтоИсправление ИЛИ ЗначениеЗаполнено(ТекущийНомерИсправления);

    Если (ЭтоИсправление ИЛИ ВыборкаДокумента.ЭтоКорректировка)
		И НЕ ЗначениеЗаполнено(ВыборкаДокумента.ИдентификаторПредыдещейСЧФ)
		И ЗначениеЗаполнено(ВыборкаДокумента.ИсправляемыйСчетФактура) Тогда
		
		Результат.Удалить(СтруктураДокумента);
		Продолжить; 
		
	КонецЕсли;

    Если ЭтоИсправление Тогда
        ДатаИсправления = ВыборкаДокумента.ДатаСЧФ;
    Иначе
        ДатаИсправления = "";
    КонецЕсли;

	ТипФайла 			= "ON_NSCHFDOPPR";
    ТипТоваров			= "";
    ВидДокумента		= "ON_NSCHFDOPPR_01_Исходящий";
    ВидДокументаИспр	= "ON_NSCHFDOPPR_01_Испр_Исходящий";
	  
    ТипДок = "СчФ";
    ИсходнаяСчетФактура = ВыборкаДокумента.Ссылка;
    Если  ЭтоИсправление Тогда
        ТипДок        = "ИспСчФ";
        ИсходнаяСчетФактура = ВыборкаДокумента.ИсправляемыйСчетФактура;
        ВидДокумента        = ВидДокументаИспр;

    Иначе
        СтруктураДокумента.ДефДатаИспрСчФ = "-";
        СтруктураДокумента.ДефНомИспрСчФ = "-";
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.Организация)
        ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Контрагент) Тогда
        ТекстЛогаСобытий = "Проверьте заполнение реквизитов в документе Счет-фактура № " + ВыборкаДокумента.НомерСЧФ + " от " + ВыборкаДокумента.ДатаСЧФ;
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        Результат.Удалить(СтруктураДокумента);
        Продолжить;
    КонецЕсли;
    
	ТипФайла = ТипФайла + ТипТоваров;  

    Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.КонтрагентОператорИд)
        ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.КонтрагентОператорИНН)
        ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.КонтрагентОператорКПП)
        ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.КонтрагентОператорНаименование) Тогда
        ТекстЛогаСобытий = "Не заполнены данные по оператору ЭДО для контрагента " + ВыборкаДокумента.ПредставлениеКонтрагента;
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий,"Предупреждение", ИмяСобытия);
        Результат.Удалить(СтруктураДокумента);
        Продолжить;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.ОрганизацияОператорИд)
        ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.ОрганизацияОператорИНН)
        ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.ОрганизацияОператорКПП)
        ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.ОрганизацияОператорНаименование) Тогда
        ТекстЛогаСобытий = "Не заполнены данные по оператору ЭДО для организации " + ВыборкаДокумента.ПредставлениеОрганизации;
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        Результат.Удалить(СтруктураДокумента);
        Продолжить;
    КонецЕсли;

    Если ЗначениеЗаполнено(ВыборкаДокумента.ИдентификаторПредыдещейСЧФ) Тогда
        СтруктураДокумента.ГУИДДокОснованиеДляКУПД = Прав(ВыборкаДокумента.ИдентификаторПредыдещейСЧФ, 36);
    ИначеЕсли ТипДок = "КорСчФ"
        ИЛИ ТипДок = "ИспКор"
        ИЛИ ТипДок = "ИспСчФ" Тогда

        ТекстЛогаСобытий = "По документу неверно указано имя файла УПД исходного Счета-фактуры в базе модуля. КУПД отправлен не будет!";
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        Результат.Удалить(СтруктураДокумента);
        Продолжить;

    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ДолжностьПодписанта)
        ИЛИ НЕ ЗначениеЗаполнено(ИмяПодписанта)
        ИЛИ НЕ ЗначениеЗаполнено(ФамилияПодписанта)
        ИЛИ НЕ ЗначениеЗаполнено(ОтчествоПодписанта) Тогда
        ТекстЛогаСобытий = "Проверьте корректность заполнения подписанта в справочнике ЭКОМ(сертификаты) &lt;&lt;&lt;Должность, Фамилия, Имя, Отчество &gt;&gt;&gt; по организации "
        + ВыборкаДокумента.ПредставлениеОрганизации;
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        Результат.Удалить(СтруктураДокумента);
        Продолжить;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.ТочкаДоставкиGLN) Тогда
        ТекстЛогаСобытий = "Не заполнен GLN точки доставки  для контрагента !" + ВыборкаДокумента.ПредставлениеТочкиДоставки + " " +
        + ВыборкаДокумента.ПредставлениеКонтрагента;
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        Результат.Удалить(СтруктураДокумента);
        Продолжить;
    КонецЕсли;

    Если ВыборкаДокумента.ОрганизацияЮрФизЛицо = "ФЛ" Тогда
        СтруктураДокумента.ОргПодписантСвГосРегИП = ВыборкаДокумента.ОрганизацияОГРН + ", "
        + ВыборкаДокумента.ОрганизацияСвидетельствоСерияНомер + " от " + Формат(ВыборкаДокумента.ОрганизацияСвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy");

        СтруктураДокумента.ПродФамилияИП = ВыборкаДокумента.ОрганизацияФамилияИП;
        СтруктураДокумента.ПродИмяИП = ВыборкаДокумента.ОрганизацияИмяИП;
        СтруктураДокумента.ПродОтчествоИП = ВыборкаДокумента.ОрганизацияОтчествоИП;
    КонецЕсли;

    ОрганизацияКПП   = СокрЛП(ВыборкаДокумента.ОрганизацияКПП);
    КонтрагентКПП    = СокрЛП(ВыборкаДокумента.КонтрагентКПП);
    ТочкаДоставкиКПП = СокрЛП(?(ЗначениеЗаполнено(ВыборкаДокумента.ТочкаДоставкиКПП), ВыборкаДокумента.ТочкаДоставкиКПП, ВыборкаДокумента.ТочкаДоставкиКППИзРегистра));

    СписокАдресов = Новый Соответствие;
    СписокАдресов.Вставить("ОрганизацияИндекс"         , "");
    СписокАдресов.Вставить("ОрганизацияКодРегиона"     , "");
    СписокАдресов.Вставить("ОрганизацияРайон"          , "");
    СписокАдресов.Вставить("ОрганизацияГород"          , "");
    СписокАдресов.Вставить("ОрганизацияНаселенныйПункт", "");
    СписокАдресов.Вставить("ОрганизацияУлица"          , "");
    СписокАдресов.Вставить("ОрганизацияДом"            , "");
    СписокАдресов.Вставить("ОрганизацияКорпус"         , "");
    СписокАдресов.Вставить("ОрганизацияКвартира"       , "");
    СписокАдресов.Вставить("ОрганизацияКодРегионаИзКПП", Лев(ОрганизацияКПП, 2));

    СписокАдресов.Вставить("КонтрагентИндекс"         , "");
    СписокАдресов.Вставить("КонтрагентКодРегиона"     , "");
    СписокАдресов.Вставить("КонтрагентРайон"          , "");
    СписокАдресов.Вставить("КонтрагентГород"          , "");
    СписокАдресов.Вставить("КонтрагентНаселенныйПункт", "");
    СписокАдресов.Вставить("КонтрагентУлица"          , "");
    СписокАдресов.Вставить("КонтрагентДом"            , "");
    СписокАдресов.Вставить("КонтрагентКорпус"         , "");
    СписокАдресов.Вставить("КонтрагентКвартира"       , "");
    СписокАдресов.Вставить("КонтрагентКодРегионаИзКПП", Лев(КонтрагентКПП, 2));

    СписокАдресов.Вставить("ТочкаДоставкиИндекс"         , "");
    СписокАдресов.Вставить("ТочкаДоставкиКодРегиона"     , "");
    СписокАдресов.Вставить("ТочкаДоставкиРайон"          , "");
    СписокАдресов.Вставить("ТочкаДоставкиГород"          , "");
    СписокАдресов.Вставить("ТочкаДоставкиНаселенныйПункт", "");
    СписокАдресов.Вставить("ТочкаДоставкиУлица"          , "");
    СписокАдресов.Вставить("ТочкаДоставкиДом"            , "");
    СписокАдресов.Вставить("ТочкаДоставкиКорпус"         , "");
    СписокАдресов.Вставить("ТочкаДоставкиКвартира"       , "");
    СписокАдресов.Вставить("ТочкаДоставкиКодРегионаИзКПП", Лев(ТочкаДоставкиКПП, 2));
   
    СписокАдресов["ОрганизацияИндекс"]          = ВыборкаДокумента.ОрганизацияИндекс;
    СписокАдресов["ОрганизацияКодРегиона"]      = ВыборкаДокумента.ОрганизацияКодРегиона;
    СписокАдресов["ОрганизацияРайон"]           = ВыборкаДокумента.ОрганизацияРайон;
    СписокАдресов["ОрганизацияГород"]           = ВыборкаДокумента.ОрганизацияГород;
    СписокАдресов["ОрганизацияНаселенныйПункт"] = ВыборкаДокумента.ОрганизацияНаселенныйПункт;
    СписокАдресов["ОрганизацияУлица"]           = ВыборкаДокумента.ОрганизацияУлица;
    СписокАдресов["ОрганизацияДом"]             = ВыборкаДокумента.ОрганизацияДом;
    СписокАдресов["ОрганизацияКорпус"]          = ВыборкаДокумента.ОрганизацияКорпус;
    СписокАдресов["ОрганизацияКвартира"]        = ВыборкаДокумента.ОрганизацияКвартира;

    СписокАдресов["КонтрагентИндекс"]          = ВыборкаДокумента.КонтрагентИндекс;
    СписокАдресов["КонтрагентКодРегиона"]      = ВыборкаДокумента.КонтрагентКодРегиона;
    СписокАдресов["КонтрагентРайон"]           = ВыборкаДокумента.КонтрагентРайон;
    СписокАдресов["КонтрагентГород"]           = ВыборкаДокумента.КонтрагентГород;
    СписокАдресов["КонтрагентНаселенныйПункт"] = ВыборкаДокумента.КонтрагентНаселенныйПункт;
    СписокАдресов["КонтрагентУлица"]           = ВыборкаДокумента.КонтрагентУлица;
    СписокАдресов["КонтрагентДом"]             = ВыборкаДокумента.КонтрагентДом;
    СписокАдресов["КонтрагентКорпус"]          = ВыборкаДокумента.КонтрагентКорпус;
    СписокАдресов["КонтрагентКвартира"]        = ВыборкаДокумента.КонтрагентКвартира;    

    СписокАдресов["ТочкаДоставкиИндекс"]          = ВыборкаДокумента.ТочкаДоставкиИндекс;
    СписокАдресов["ТочкаДоставкиКодРегиона"]      = ВыборкаДокумента.ТочкаДоставкиКодРегиона;
    СписокАдресов["ТочкаДоставкиРайон"]           = ВыборкаДокумента.ТочкаДоставкиРайон;
    СписокАдресов["ТочкаДоставкиГород"]           = ВыборкаДокумента.ТочкаДоставкиГород;
    СписокАдресов["ТочкаДоставкиНаселенныйПункт"] = ВыборкаДокумента.ТочкаДоставкиНаселенныйПункт;
    СписокАдресов["ТочкаДоставкиУлица"]           = ВыборкаДокумента.ТочкаДоставкиУлица;
    СписокАдресов["ТочкаДоставкиДом"]             = ВыборкаДокумента.ТочкаДоставкиДом;
    СписокАдресов["ТочкаДоставкиКорпус"]          = ВыборкаДокумента.ТочкаДоставкиКорпус;
    СписокАдресов["ТочкаДоставкиКвартира"]        = ВыборкаДокумента.ТочкаДоставкиКвартира;

    
    // Обязательные параметры адреса
    СписокЭлементовАдреса = Новый СписокЗначений;
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ОрганизацияКодРегиона"], ВыборкаДокумента.ПредставлениеОрганизации), "код региона организации");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ОрганизацияИндекс"], ВыборкаДокумента.ПредставлениеОрганизации), "индекс организации");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ТочкаДоставкиКодРегиона"], ВыборкаДокумента.ТочкаДоставки), "код региона точки доставки");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ТочкаДоставкиИндекс"], ВыборкаДокумента.ТочкаДоставки), "индекс точки доставки");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["КонтрагентКодРегиона"], ВыборкаДокумента.ПредставлениеКонтрагента), "код региона контрагента");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["КонтрагентИндекс"], ВыборкаДокумента.ПредставлениеКонтрагента), "индекс контрагента");
    БылиОшибкиВАдресе = Ложь;
    Для каждого ЗначениеЭлемента Из СписокЭлементовАдреса Цикл
        Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента.Значение.ЗначениеОбъекта) Тогда
            ТекстЛогаСобытий = "Не заполнен &lt;&lt;&lt;" + ЗначениеЭлемента.Представление + "&gt;&gt;&gt;. Проверьте заполнение адреса " + СокрЛП(ЗначениеЭлемента.Значение.Представление);
            ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
            БылиОшибкиВАдресе = Истина;
        КонецЕсли;
    КонецЦикла;

    Если БылиОшибкиВАдресе Тогда
        Результат.Удалить(СтруктураДокумента);
        Продолжить;
    КонецЕсли;

    НомерСчФ  = Эком_ПолучитьНомерНаПечать(ИсходнаяСчетФактура);
    ФорматУПД = ВыборкаДокумента.ФорматУПД;
    Если НЕ ЗначениеЗаполнено(ФорматУПД) Тогда
        ФорматУПД = "УПД по умолчанию";
    КонецЕсли;

    СтруктураДокумента.ПродТипАдреса      = "АдрРФ";
    СтруктураДокумента.КодВалютыСчФ       = "643";
    СтруктураДокумента.ПродКодРегион      = СокрЛП(СписокАдресов["ОрганизацияКодРегиона"]);
    СтруктураДокумента.ПродИндекс         = СокрЛП(СписокАдресов["ОрганизацияИндекс"]);
    СтруктураДокумента.ПродРайон          = СокрЛП(СписокАдресов["ОрганизацияРайон"]);
    СтруктураДокумента.ПродГород          = СокрЛП(СписокАдресов["ОрганизацияГород"]);
    СтруктураДокумента.ПродНаселПункт     = СокрЛП(СписокАдресов["ОрганизацияНаселенныйПункт"]);
    СтруктураДокумента.ПродУлица          = СокрЛП(СписокАдресов["ОрганизацияУлица"]);
    СтруктураДокумента.ПродДом            = СокрЛП(СписокАдресов["ОрганизацияДом"]);
    СтруктураДокумента.ПродКорпус         = СокрЛП(СписокАдресов["ОрганизацияКорпус"]);
    СтруктураДокумента.ПродКварт          = СокрЛП(СписокАдресов["ОрганизацияКвартира"]);
    СтруктураДокумента.ФорматУПД          = ФорматУПД;
    СтруктураДокумента.ДокФункция         = ПолучитьФункциюЮЗД(ФорматУПД);
    СтруктураДокумента.НомерСчФ           = НомерСчФ;
    
    ЭтоКорректировкаИлиИсправление = ВыборкаДокумента.ЭтоКорректировка ИЛИ ЭтоИсправление;	
    СтруктураДокумента.ДатаСчФ     = Формат(?(ЭтоКорректировкаИлиИсправление, ВыборкаДокумента.ИсправляемыйСчетФактураДата, ВыборкаДокумента.ДатаСЧФ), "ДФ=dd.MM.yyyy");
    
    СтруктураДокумента.ПродТипОрганизации = ВыборкаДокумента.ОрганизацияЮрФизЛицо;
    СтруктураДокумента.ПродНаимОрг        = СокрЛП(ВыборкаДокумента.ОрганизацияНаименованиеПолное);
    СтруктураДокумента.ПродИНН            = СокрЛП(ВыборкаДокумента.ОрганизацияИНН);
    СтруктураДокумента.ПродКПП             = ОрганизацияКПП;

    ИНН_Грузополучателя  = ?(ЗначениеЗаполнено(ВыборкаДокумента.ТочкаДоставкиИНН), ВыборкаДокумента.ТочкаДоставкиИНН, ВыборкаДокумента.ТочкаДоставкиИННИзРегистра);
    Наим_Грузополучателя = ?(ЗначениеЗаполнено(ВыборкаДокумента.ТочкаДоставкиНаименованиеИзРегистра), ВыборкаДокумента.ТочкаДоставкиНаименованиеИзРегистра, ВыборкаДокумента.ТочкаДоставкиНаименованиеПолное);

    СтруктураДокумента.ГрузоотправительТип 	  = "ОнЖе"; // Грузоотправитель - в одной фактуре должен быть один Грузооправитель
    СтруктураДокумента.ГрузПолТипАдреса       = "АдрРФ";
    СтруктураДокумента.ГрузополучательНаимОрг = СокрЛП(Наим_Грузополучателя);
    СтруктураДокумента.ГрузополучательИНН     = СокрЛП(ИНН_Грузополучателя);
    СтруктураДокумента.ГрузополучательКПП     = ТочкаДоставкиКПП;
    СтруктураДокумента.ГрузополучательТип     = ВыборкаДокумента.ТочкаДоставкиЮрФизЛицо;;
    СтруктураДокумента.ГрузПолКодРегион       = СокрЛП(СписокАдресов["ТочкаДоставкиКодРегиона"]);
    СтруктураДокумента.ГрузПолИндекс          = СокрЛП(СписокАдресов["ТочкаДоставкиИндекс"]);
    СтруктураДокумента.ГрузПолРайон           = СокрЛП(СписокАдресов["ТочкаДоставкиРайон"]);
    СтруктураДокумента.ГрузПолГород           = СокрЛП(СписокАдресов["ТочкаДоставкиГород"]);
    СтруктураДокумента.ГрузПолНаселПункт      = СокрЛП(СписокАдресов["ТочкаДоставкиНаселенныйПункт"]);
    СтруктураДокумента.ГрузПолУлица           = СокрЛП(СписокАдресов["ТочкаДоставкиУлица"]);
    СтруктураДокумента.ГрузПолДом             = СокрЛП(СписокАдресов["ТочкаДоставкиДом"]);
    СтруктураДокумента.ГрузПолКорпус          = СокрЛП(СписокАдресов["ТочкаДоставкиКорпус"]);
    СтруктураДокумента.ГрузПолКварт           = СокрЛП(СписокАдресов["ТочкаДоставкиКвартира"]);

    СтруктураДокумента.ПокТипАдреса  = "АдрРФ";
    СтруктураДокумента.ПокКодРегион  = СокрЛП(СписокАдресов["КонтрагентКодРегиона"]);
    СтруктураДокумента.ПокИндекс     = СокрЛП(СписокАдресов["КонтрагентИндекс"]);
    СтруктураДокумента.ПокРайон      = СокрЛП(СписокАдресов["КонтрагентРайон"]);
    СтруктураДокумента.ПокГород      = СокрЛП(СписокАдресов["КонтрагентГород"]);
    СтруктураДокумента.ПокНаселПункт = СокрЛП(СписокАдресов["КонтрагентНаселенныйПункт"]);
    СтруктураДокумента.ПокУлица      = СокрЛП(СписокАдресов["КонтрагентУлица"]);
    СтруктураДокумента.ПокДом        = СокрЛП(СписокАдресов["КонтрагентДом"]);
    СтруктураДокумента.ПокКорпус     = СокрЛП(СписокАдресов["КонтрагентКорпус"]);
    СтруктураДокумента.ПокКварт      = СокрЛП(СписокАдресов["КонтрагентКвартира"]);

    ЮрФизЛицо = ВыборкаДокумента.КонтрагентЮрФизЛицо;
    Если ЮрФизЛицо = "ЮЛ" Тогда
        СтруктураДокумента.ПокТипОрганизации = ВыборкаДокумента.КонтрагентЮрФизЛицо;
        СтруктураДокумента.ПокНаимОрг        = СокрЛП(ВыборкаДокумента.КонтрагентНаименованиеПолное);
        СтруктураДокумента.ПокИНН            = СокрЛП(ВыборкаДокумента.КонтрагентИНН);
        СтруктураДокумента.ПокИННЮЛ          = СокрЛП(ВыборкаДокумента.КонтрагентИНН);
        Если НЕ ЗначениеЗаполнено(КонтрагентКПП) Тогда
            ТекстЛогаСобытий = "Не заполнен &lt;&lt;&lt;КПП по контрагенту&gt;&gt;&gt;. В документе не заполнена необходимая информация по " + ВыборкаДокумента.КонтрагентНаименованиеПолное;
            ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
            Результат.Удалить(СтруктураДокумента);
            Продолжить;
        КонецЕсли;
        СтруктураДокумента.ПокКПП = КонтрагентКПП;
    Иначе
        СтруктураДокумента.ПокТипОрганизации = ВыборкаДокумента.КонтрагентЮрФизЛицо;
        СтруктураДокумента.ПокИННЮЛ          = СокрЛП(ВыборкаДокумента.КонтрагентИНН);
        СтруктураДокумента.ПокФамилия        = СокрЛП(ВыборкаДокумента.КонтрагентНаименованиеПолное);
        СтруктураДокумента.ПокИмя            = "";
        СтруктураДокумента.ПокОтчество       = "";
    КонецЕсли;

    GUIDФайла = Новый УникальныйИдентификатор;
    Организация_ИД_ЭДО        = СокрЛП(ВыборкаДокумента.ОрганизацияОператорИд) + СокрЛП(ВыборкаДокумента.ОрганизацияИдОЭД);
    Покупатель_ИД_ЭДО         = СокрЛП(ВыборкаДокумента.КонтрагентОператорИд) + СокрЛП(ВыборкаДокумента.КонтрагентИдОЭД);
    ИдентификаторФайла        = ТипФайла + "_" + Покупатель_ИД_ЭДО + "_" + Организация_ИД_ЭДО + "_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" + GUIDФайла;
    ДатаФормированияДокумента = ТекущаяДата();
    НомерРасходнойНакладной   = ВыборкаДокумента.ДокументОснование.Номер;
    ДатаРасходнойНакладной    = ВыборкаДокумента.ДокументОснованиеДата;
    CAMPAIGNNUMBER            = ВыборкаДокумента.ДокументОснование.Договор.Номер;
    CAMPAIGNDATE              = ВыборкаДокумента.ДокументОснование.Договор.Дата;
    НомерОснования            = "";
    ДатаОснования             = Дата(01, 01, 01);
	
	Если ЗначениеЗаполнено(CAMPAIGNNUMBER)
        И ЗначениеЗаполнено(CAMPAIGNDATE) Тогда
        НаименованиеОснования = "Договор № " + CAMPAIGNNUMBER + " от " + Формат(CAMPAIGNDATE, "ДФ=dd.MM.yyyy");
        НомерОснования = CAMPAIGNNUMBER;
        ДатаОснования  = CAMPAIGNDATE;

    ИначеЕсли ЗначениеЗаполнено(НомерРасходнойНакладной)
        И ЗначениеЗаполнено(ДатаРасходнойНакладной) Тогда
        НаименованиеОснования = "Расходная накладная № " + НомерРасходнойНакладной + " от " + Формат(ДатаРасходнойНакладной, "ДФ=dd.MM.yyyy");
        НомерОснования = НомерРасходнойНакладной;
        ДатаОснования  = ДатаРасходнойНакладной;

    ИначеЕсли Найти(ТипФайла, "ON_NSCHFDOPPR") &gt; 0 Тогда
		НаименованиеОснования = "Без документа-основания";

	Иначе
        НаименованиеОснования = "Отсутствует";

    КонецЕсли;

    // Данные для ИнфПолФХЖ1
    ЭКОМ_ИнфоПоле          = ВыборкаДокумента.ЭКОМ_ИнфоПоля;
    ГЛНОрганизации         = ВыборкаДокумента.ОрганизацияGLN;          // GLN организации
    ГЛНКонтрагент          = ВыборкаДокумента.КонтрагентGLN;           // GLN контрагента
    ГЛНТочкиДоставки       = ВыборкаДокумента.ТочкаДоставкиGLN;        // GLN точки доставки
    RECADV_Дата            = ВыборкаДокумента.RECADV_Дата;             // Дата акта
    RECADV_Номер           = ВыборкаДокумента.RECADV_Номер;            // Номер акта
    ДокументОснованиеДата  = ВыборкаДокумента.ДокументОснованиеДата;   // Дата накладной
    ДокументОснованиеНомер = ВыборкаДокумента.ДокументОснованиеНомер;  // Номер накладной
    ЗаказНомер             = ВыборкаДокумента.ЗаказНомер;              // Номер заказа

    ДанныеИнфополя = Новый Соответствие;
    ДанныеИнфополя.Вставить("VID"                 , ВыборкаДокумента.RECADV_RECADVVID);
    ДанныеИнфополя.Вставить("ORDID"               , ВыборкаДокумента.RECADV_ORDERVID);
    ДанныеИнфополя.Вставить("получатель"          , ГЛНКонтрагент);
    ДанныеИнфополя.Вставить("покупатель"          , ГЛНКонтрагент);
    ДанныеИнфополя.Вставить("отправитель"         , ГЛНОрганизации);
    ДанныеИнфополя.Вставить("грузоотправитель"    , ГЛНОрганизации);
    ДанныеИнфополя.Вставить("поставщик"           , ГЛНОрганизации);
    ДанныеИнфополя.Вставить("GLN_грузоотправителя", ГЛНОрганизации);
    ДанныеИнфополя.Вставить("GLN_грузополучателя" , ГЛНТочкиДоставки);
    ДанныеИнфополя.Вставить("грузополучатель"     , ГЛНТочкиДоставки);
    ДанныеИнфополя.Вставить("документ_основание"  , СтруктураДокумента.ГУИДДокОснованиеДляКУПД);
    ДанныеИнфополя.Вставить("дата_акта"           , RECADV_Дата);
    ДанныеИнфополя.Вставить("дата_апп"            , RECADV_Дата);
    ДанныеИнфополя.Вставить("дата_заказа"         , ВыборкаДокумента.ЗаказДата);
    ДанныеИнфополя.Вставить("дата_накладной"      , ДокументОснованиеДата);
    ДанныеИнфополя.Вставить("ДтНакл"              , ДокументОснованиеДата);
    ДанныеИнфополя.Вставить("дата_отгрузки"       , ДокументОснованиеДата);
    ДанныеИнфополя.Вставить("дата_поставки"       , ВыборкаДокумента.ДатаПриемаТовара);
    ДанныеИнфополя.Вставить("код_поставщика"      , CAMPAIGNNUMBER);
    ДанныеИнфополя.Вставить("номер_акта"          , RECADV_Номер);
    ДанныеИнфополя.Вставить("номер_апп"           , RECADV_Номер);
    ДанныеИнфополя.Вставить("номер_накладной"     , ДокументОснованиеНомер);
    ДанныеИнфополя.Вставить("НомНакл"             , ДокументОснованиеНомер);
    ДанныеИнфополя.Вставить("Номер_накладной"     , ДокументОснованиеНомер);
    ДанныеИнфополя.Вставить("номер_отгрузки"      , ДокументОснованиеНомер);
    ДанныеИнфополя.Вставить("номер_заказа"        , ЗаказНомер);
    ДанныеИнфополя.Вставить("Заказ_на_поставку"   , ЗаказНомер);

    СоответсвияИнфоПолей = ПолучитьСтруктуруИнфоПолейИзСправочника("ИнфПолФХЖ1", ЭКОМ_ИнфоПоле, ДанныеИнфополя, ВыборкаДокумента.Контрагент_ЭСФБезИнфПоля);
	    
    Если СоответсвияИнфоПолей = Неопределено Тогда
        ТекстЛогаСобытий = "Не заполнены обязательные инфо поля! Формат ЮЗД - " + ВыборкаДокумента.ФорматУПД;
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);

        Результат.Удалить(СтруктураДокумента);
        Продолжить;
	КонецЕсли;

    СтруктураДокумента.ИнфТекст = СоответсвияИнфоПолей;
    
    СтруктураДокумента.КНД = "1115131";
    Если СтруктураДокумента.ДокФункция = "СЧФДОП" Тогда
        СтруктураДокумента.ПоФактХЖ = "Документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
        СтруктураДокумента.НаимДокОпр = "Счет-фактура и документ об отгрузке товаров (выполнении работ), передаче имущественных прав (документ об оказании услуг)";
    КонецЕсли;
    
    Если СтруктураДокумента.ПродТипОрганизации = "ЮЛ" Тогда
        СтруктураДокумента.НаимЭконСубСост = СтруктураДокумента.ПродНаимОрг;
    Иначе
        СтруктураДокумента.НаимЭконСубСост = СокрЛП(Лев(ВыборкаДокумента.ОрганизацияФамилияИП + " "
        + ВыборкаДокумента.ОрганизацияИмяИП + " " + ВыборкаДокумента.ОрганизацияОтчествоИП, 100));
    КонецЕсли;
    
    СтруктураДокумента.ПолноеИмяФайла        = СокрЛП(СтруктураДокумента.ИдФайл) + ".xml";
    СтруктураДокумента.ВерсПрог              = "Docrobot 1C";
    СтруктураДокумента.ВерсФорм              = "5.01";
    СтруктураДокумента.НомерОснования        = НомерОснования;
    СтруктураДокумента.ДатаОснования         = Формат(ДатаОснования, "ДФ=dd.MM.yyyy");
    СтруктураДокумента.РеализацияСсылка      = ВыборкаДокумента.ДокументОснование;
    СтруктураДокумента.НомерРасходной        = НомерРасходнойНакладной;
    СтруктураДокумента.ДатаРасходной         = Формат(ДатаРасходнойНакладной, "ДФ=dd.MM.yyyy");
    СтруктураДокумента.ПодписантОблПолн      = СокрЛП(СертификатОбластьПолномочий);
    СтруктураДокумента.ПодписантСтатус       = СокрЛП(СертификатСтатусПодписанта);
    СтруктураДокумента.ПодписантОснПолн      = СокрЛП(СертификатОснованиеПолномочий);
    СтруктураДокумента.ДатаАктаПриемки       = Формат(RECADV_Дата, "ДФ=dd.MM.yyyy");
    СтруктураДокумента.ДатаЗаказа            = ВыборкаДокумента.ЗаказДата;
    СтруктураДокумента.НомерЗаказа           = ВыборкаДокумента.ЗаказНомер;
    СтруктураДокумента.НаименованиеОснования = СокрЛП(НаименованиеОснования);
    СтруктураДокумента.Дата                  = Формат(ДатаФормированияДокумента, "ДФ=dd.MM.yyyy");
    СтруктураДокумента.Время                 = Формат(ДатаФормированияДокумента, "ДФ=ЧЧ.мм.сс");
    СтруктураДокумента.ТипФайла              = ТипФайла;
    СтруктураДокумента.ГУИДФайлаЭСФ          = СокрЛП(GUIDФайла);
    СтруктураДокумента.GUIDФайла			 = СокрЛП(GUIDФайла);
    СтруктураДокумента.ИдФайл                = ИдентификаторФайла;
    СтруктураДокумента.ИдОтпр                = СокрЛП(Организация_ИД_ЭДО);
    СтруктураДокумента.ИдПок                 = СокрЛП(Покупатель_ИД_ЭДО);
    СтруктураДокумента.НаимОргОператор       = СокрЛП(ВыборкаДокумента.ОрганизацияОператорНаименование);
    СтруктураДокумента.ИННОператор           = СокрЛП(ВыборкаДокумента.ОрганизацияОператорИНН);
    СтруктураДокумента.КППОператор           = СокрЛП(ВыборкаДокумента.ОрганизацияОператорКПП);
    СтруктураДокумента.ИдЭДООператор         = СокрЛП(ВыборкаДокумента.ОрганизацияОператорИд);
    СтруктураДокумента.ОргПодписантФамилия   = СокрЛП(ФамилияПодписанта);
    СтруктураДокумента.ОргПодписантИмя       = СокрЛП(ИмяПодписанта);
    СтруктураДокумента.ОргПодписантИНН       = ОргПодписантИНН;
    СтруктураДокумента.ОргПодписантОтчество  = СокрЛП(ОтчествоПодписанта);
    СтруктураДокумента.ПодписантТип          = ПодписантТип;
    СтруктураДокумента.ОргПодписантДолжность = СокрЛП(ДолжностьПодписанта);
    СтруктураДокумента.СтТовБезНДСВсего      = Формат(ВыборкаДокумента.СуммаСНДС - ВыборкаДокумента.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=");
    СтруктураДокумента.СтТовУчНалВсего       = Формат(ВыборкаДокумента.СуммаСНДС, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=");
    СтруктураДокумента.СуммаНДССчФ           = Формат(ВыборкаДокумента.СуммаНДС , "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=");
    СтруктураДокумента.ДатаИнфПр             = СтруктураДокумента.Дата;
    СтруктураДокумента.ВремИнфПр             = СтруктураДокумента.Время;
    СтруктураДокумента.ТипДок                = ТипДок;
    СтруктураДокумента.ВидДокумента          = ВидДокумента;
    СтруктураДокумента.НомИспрСчФ            = ТекущийНомерИсправления;
    СтруктураДокумента.ДатаИспрСчФ           = Формат(ДатаИсправления, "ДФ=dd.MM.yyyy");
    СтруктураДокумента.ОнЖе                  = "он же";
    СтруктураДокумента.Ссылка                = ВыборкаДокумента.Ссылка;
    СтруктураДокумента.Контрагент            = ВыборкаДокумента.КонтрагентИзЗаказа;
    СтруктураДокумента.Организация           = ВыборкаДокумента.Организация;
    СтруктураДокумента.Статус                = "Отправлен";
    СтруктураДокумента.ФайлИмя               = СтруктураДокумента.ИдФайл + ".xml";
    СтруктураДокумента.СодОпер               = "Товары переданы";
    СтруктураДокумента.ДатаПер               = Формат(ДатаРасходнойНакладной, "ДФ=dd.MM.yyyy");
    СтруктураДокумента.ПередатДокум          = ВыборкаДокумента.НомерСЧФ + " от " + Формат(ВыборкаДокумента.ДатаСчФ, "ДФ=dd.MM.yyyy"); 
    СтруктураДокумента.НаимОсн               = СокрЛП(НаименованиеОснования);
    СтруктураДокумента.НомОсн                = НомерОснования;
    СтруктураДокумента.ДатаОсн          	 = Формат(ДатаОснования, "ДФ=dd.MM.yyyy");
    СтруктураДокумента.НомТранНакл           = НомерРасходнойНакладной;
    СтруктураДокумента.ДатаТранНакл          = Формат(ДатаРасходнойНакладной, "ДФ=dd.MM.yyyy");


КонецЦикла; 

//Возврат результат;

////////////////--ШАПКА--/////////////////////////////////////

////////////////++РезультатНоменклатур++///////////////////////////////////// 
/// ТЧ - первичный/исправительный УПД
РезультатНоменклатур  = Новый ТаблицаЗначений;

Колонки = Новый Массив;
Колонки.Добавить("Ссылка");
Колонки.Добавить("ЦенаТов");
Колонки.Добавить("НомГТД");
Колонки.Добавить("ИнфПолСтр");
Колонки.Добавить("НомСтр");
Колонки.Добавить("НаимТов");
Колонки.Добавить("ОКЕИ_Тов");
Колонки.Добавить("КолТов");
Колонки.Добавить("СтТовБезНДС");
Колонки.Добавить("СтТовУчНал");
Колонки.Добавить("СумАкциз");
Колонки.Добавить("АкцизБезАкциз");
Колонки.Добавить("НаимЕдИзм");
Колонки.Добавить("ПрТовРаб");
Колонки.Добавить("КрНаимСтрПр");
Колонки.Добавить("КодПроисх");
Колонки.Добавить("КодТов");
Колонки.Добавить("НалСт");
Колонки.Добавить("СумНал");
Колонки.Добавить("СумНалБезНДС");
Колонки.Добавить("ДанныеПоМаркировке");

Для Каждого Колонка Из Колонки Цикл
	РезультатНоменклатур.Колонки.Добавить(Колонка);
КонецЦикла;

ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
                          |	СчетФактураВыданный.Ссылка КАК Ссылка,
                          |	СчетФактураВыданный.Представление КАК Представление,
                          |	СчетФактураВыданный.ДокументОснование КАК ДокументОснование,
                          |	СчетФактураВыданный.ДокументОснование.Дата КАК ДатаДокументаОснования,
                          |	ВЫБОР
                          |		КОГДА ТИПЗНАЧЕНИЯ(СчетФактураВыданный.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
                          |			ТОГДА СчетФактураВыданный.ДокументОснование
                          |		ИНАЧЕ СчетФактураВыданный.ДокументОснование.ДокументОснование
                          |	КОНЕЦ КАК Накладная,
                          |	ЕСТЬNULL(DR_ЦепочкиДокументов.ИдентификаторЦепочки, """") КАК ИдентификаторЦепочки,
                          |	ЕСТЬNULL(DR_ЦепочкиДокументов.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
                          |	ЕСТЬNULL(ORDER_События.Документ, ЗНАЧЕНИЕ(Документ.DR_Документ.ПустаяСсылка)) КАК ORDER,
                          |	CAMPAIGNNUMBER.Значение КАК CAMPAIGNNUMBER,
                          |	ЕСТЬNULL(DR_ЦепочкиДокументов.НомерЗаказа, """") КАК ЗаказНомер,
                          |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаЗаказа, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДата
                          |ПОМЕСТИТЬ Источник
                          |ИЗ
                          |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Источник_События
                          |		ПО СчетФактураВыданный.Ссылка = Источник_События.Документ
                          |			И (Источник_События.ВидДокумента = ""СчетФактура_Исходящий"")
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
                          |		ПО (Источник_События.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК ORDER_События
                          |		ПО (Источник_События.ИдентификаторЦепочки = ORDER_События.ИдентификаторЦепочки)
                          |			И (ORDER_События.ВидДокумента = ""ORDER_Входящий"")
                          |			И (ВЫРАЗИТЬ(ORDER_События.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК CAMPAIGNNUMBER
                          |		ПО (ORDER_События.Документ = CAMPAIGNNUMBER.Ссылка)
                          |			И (CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNNUMBER"")
                          |ГДЕ
                          |	СчетФактураВыданный.Ссылка В(&amp;Источник)
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	РеализацияТоваровУслугТовары.Ссылка КАК РеализацияТоваровУслуг,
                          |	РеализацияТоваровУслугТовары.Ссылка.Номер КАК НомерРеализации,
                          |	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
                          |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура,
                          |	РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
                          |	Источник.Ссылка КАК Ссылка,
                          |	Источник.Представление КАК ПредставлениеТекущегоСЧФ,
                          |	РеализацияТоваровУслугТовары.Количество КАК Количество,
                          |	РеализацияТоваровУслугТовары.Цена КАК Цена,
                          |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
                          |	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
                          |	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
                          |	"""" КАК КодПроисх,
                          |	"""" КАК КрНаимСтрПр,
                          |	Источник.ЗаказНомер КАК ЗаказНомер,
                          |	Источник.ЗаказДата КАК ЗаказДата,
                          |	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Код КАК ОКЕИ_Тов,
                          |	РеализацияТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование КАК НаименованиеЕдиницыИзмерения,
                          |	Источник.CAMPAIGNNUMBER КАК CAMPAIGNNUMBER,
                          |	Источник.ДокументОснование КАК ДокументОснование,
                          |	Источник.ДатаДокументаОснования КАК ДатаДокументаОснования,
                          |	Источник.Контрагент КАК Контрагент,
                          |	ЭКОМ_GLN.Контрагент_ЭСФБезИнфПоля КАК Контрагент_ЭСФБезИнфПоля,
                          |	ЭКОМ_GLN.Контрагент_ФорматЭСФ КАК ФорматУПД,
                          |	RECADV_Номер.Значение КАК НомерRECADV,
                          |	RECADV_Дата.Значение КАК ДатаRECADV,
                          |	РеализацияТоваровУслугТовары.Ссылка.ЦенаВключаетНДС КАК СуммаВключаетНДС,
                          |	"""" КАК НомерГТД,
                          |	NULL КАК ВидОперации,
                          |	ЛОЖЬ КАК ЭтоМаркируемыйЮЗД,
                          |	Источник.ORDER КАК ORDER
                          |ПОМЕСТИТЬ ВТОсновная
                          |ИЗ
                          |	Источник КАК Источник
                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                          |		ПО Источник.Накладная = РеализацияТоваровУслугТовары.Ссылка
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
                          |		ПО Источник.Контрагент = ЭКОМ_GLN.Объект
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Накладная_События
                          |		ПО Источник.ИдентификаторЦепочки = Накладная_События.ИдентификаторЦепочки
                          |			И Источник.Накладная = Накладная_События.Документ
                          |			И (Накладная_События.ВидДокумента = ""Накладная_Исходящая"")
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК RECADV_События
                          |		ПО (Накладная_События.ИдентификаторЦепочки = RECADV_События.ИдентификаторЦепочки)
                          |			И (RECADV_События.ВидДокумента = ""RECADV_Входящий"")
                          |			И (Накладная_События.Идентификатор = RECADV_События.ИдентификаторОснования)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Номер
                          |		ПО (RECADV_События.Документ = RECADV_Номер.Ссылка)
                          |			И (RECADV_Номер.Реквизит = ""NUMBER"")
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Дата
                          |		ПО (RECADV_События.Документ = RECADV_Дата.Ссылка)
                          |			И (RECADV_Дата.Реквизит = ""ДатаФайла"")
                          |ГДЕ
                          |	РеализацияТоваровУслугТовары.Цена &gt; 0
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ РАЗЛИЧНЫЕ
                          |	ДанныеТЧНоменклатурORDER.ORDER КАК ORDER,
                          |	ДанныеТЧНоменклатурORDER.Номенклатура КАК Номенклатура,
                          |	ДанныеТЧНоменклатурORDER.QUANTITYOFCUINTU КАК QUANTITYOFCUINTU,
                          |	ДанныеТЧНоменклатурORDER.INFO КАК INFO
                          |ПОМЕСТИТЬ ВТ_НоменклатураORDER
                          |ИЗ
                          |	&amp;ДанныеТЧНоменклатурORDER КАК ДанныеТЧНоменклатурORDER
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ВТОсновная.Ссылка КАК Ссылка,
                          |	ВТОсновная.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг,
                          |	ВТОсновная.НомерРеализации КАК НомерРеализации,
                          |	ВТОсновная.НомерСтроки КАК НомерСтроки,
                          |	ВТОсновная.Номенклатура КАК Номенклатура,
                          |	ВТОсновная.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
                          |	ВТОсновная.ПредставлениеТекущегоСЧФ КАК ПредставлениеТекущегоСЧФ,
                          |	ВТОсновная.Количество КАК Количество,
                          |	ВТОсновная.Цена КАК Цена,
                          |	ВТОсновная.Сумма КАК Сумма,
                          |	ВТОсновная.СтавкаНДС КАК СтавкаНДС,
                          |	ВТОсновная.НомерRECADV КАК НомерRECADV,
                          |	ВТОсновная.ДатаRECADV КАК ДатаRECADV,
                          |	ВТОсновная.СуммаНДС КАК СуммаНДС,
                          |	ВТОсновная.КодПроисх КАК КодПроисх,
                          |	ВТОсновная.КрНаимСтрПр КАК КрНаимСтрПр,
                          |	ВТОсновная.ЗаказНомер КАК ЗаказНомер,
                          |	ВТОсновная.ЗаказДата КАК ЗаказДата,
                          |	ВТОсновная.ОКЕИ_Тов КАК ОКЕИ_Тов,
                          |	ВТОсновная.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
                          |	ВТОсновная.CAMPAIGNNUMBER КАК CAMPAIGNNUMBER,
                          |	ВТОсновная.ДокументОснование КАК ДокументОснование,
                          |	ВТОсновная.ДатаДокументаОснования КАК ДатаДокументаОснования,
                          |	ВТОсновная.Контрагент КАК Контрагент,
                          |	ВТОсновная.Контрагент_ЭСФБезИнфПоля КАК Контрагент_ЭСФБезИнфПоля,
                          |	ЭКОМ_НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК АртикулНоменклатурыКонтрагента,
                          |	ЭКОМ_НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента,
                          |	ЭКОМ_НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента КАК НаименованиеНоменклатурыКонтрагента,
                          |	ЭКОМ_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК ШтрихкодНоменклатурыКонтрагента,
                          |	ЭКОМ_НоменклатураКонтрагентов.GTIN КАК GTIN,
                          |	ВТОсновная.Номенклатура.Код КАК КодНоменклатурыПоставщика,
                          |	ВТОсновная.ФорматУПД КАК ФорматУПД,
                          |	NULL КАК КоличествоМест,
                          |	ВТОсновная.СуммаВключаетНДС КАК СуммаВключаетНДС,
                          |	ВТОсновная.НомерГТД КАК НомерГТДСсылка,
                          |	"""" КАК НомерГТД,
                          |	ВЫБОР
                          |		КОГДА ВТОсновная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
                          |			ТОГДА ИСТИНА
                          |		ИНАЧЕ ЛОЖЬ
                          |	КОНЕЦ КАК ЭтоУКД,
                          |	ВТОсновная.ЭтоМаркируемыйЮЗД КАК ЭтоМаркируемыйЮЗД,
                          |	DR_ИнфоПоля.Ссылка КАК ЭКОМ_ИнфоПоля,
                          |	DR_POSITION.QUANTITYOFCUINTU КАК КоличествоВУпаковке,
                          |	DR_POSITION.INFO КАК Информация
                          |ИЗ
                          |	ВТОсновная КАК ВТОсновная
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
                          |		ПО ВТОсновная.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
                          |			И ВТОсновная.Номенклатура = ЭКОМ_НоменклатураКонтрагентов.Номенклатура
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки КАК DR_ИнфоПоля
                          |		ПО ВТОсновная.ФорматУПД = DR_ИнфоПоля.Наименование
                          |			И (НЕ DR_ИнфоПоля.ПометкаУдаления)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураORDER КАК DR_POSITION
                          |		ПО ВТОсновная.ORDER = DR_POSITION.ORDER
                          |			И ВТОсновная.Номенклатура = DR_POSITION.Номенклатура
                          |
                          |УПОРЯДОЧИТЬ ПО
                          |	НомерСтроки";

ЗапросНоменклатур.УстановитьПараметр("Источник", Источник);
ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурORDER",ДанныеТЧНоменклатурORDER);

РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить();

ЗапросМаркировка = Новый Запрос;
ЗапросМаркировка.Текст = "ВЫБРАТЬ
                         |	ВЫБОР
                         |		КОГДА ТИПЗНАЧЕНИЯ(СчетФактураВыданный.ДокументОснование) = ТИП(Документ.РеализацияТоваровУслуг)
                         |			ТОГДА СчетФактураВыданный.ДокументОснование
                         |		ИНАЧЕ СчетФактураВыданный.ДокументОснование.ДокументОснование
                         |	КОНЕЦ КАК Накладная,
                         |	СчетФактураВыданный.Контрагент КАК Контрагент
                         |ПОМЕСТИТЬ Источник
                         |ИЗ
                         |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_GLN КАК ЭКОМ_GLN
                         |		ПО СчетФактураВыданный.Контрагент = ЭКОМ_GLN.Объект
                         |			И (ЭКОМ_GLN.Контрагент_РаботаетСМаркировкой)
                         |ГДЕ
                         |	СчетФактураВыданный.Ссылка В(&amp;Источник)
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |ВЫБРАТЬ
                         |	Источник.Накладная КАК Накладная,
                         |	Источник.Контрагент КАК Контрагент,
                         |	РеализацияТоваровУслугТовары.Номенклатура КАК Номенклатура
                         |ПОМЕСТИТЬ НакладнаяТовары
                         |ИЗ
                         |	Источник КАК Источник
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                         |		ПО Источник.Накладная = РеализацияТоваровУслугТовары.Ссылка
                         |
                         |СГРУППИРОВАТЬ ПО
                         |	Источник.Контрагент,
                         |	РеализацияТоваровУслугТовары.Номенклатура,
                         |	Источник.Накладная
                         |
                         |;
                         |
                         |////////////////////////////////////////////////////////////////////////////////
                         |ВЫБРАТЬ
                         |	ЭКОМ_НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
                         |ИЗ
                         |	НакладнаяТовары КАК НакладнаяТовары
                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЭКОМ_НоменклатураКонтрагентов КАК ЭКОМ_НоменклатураКонтрагентов
                         |		ПО НакладнаяТовары.Контрагент = ЭКОМ_НоменклатураКонтрагентов.Контрагент
                         |			И НакладнаяТовары.Номенклатура = ЭКОМ_НоменклатураКонтрагентов.Номенклатура
                         |			И (ЭКОМ_НоменклатураКонтрагентов.Маркировка &lt;&gt; """")
                         |			И (ЭКОМ_НоменклатураКонтрагентов.Маркировка &lt;&gt; ""нет"")
                         |			И (ЭКОМ_НоменклатураКонтрагентов.GTIN &lt;&gt; """")";
ЗапросМаркировка.УстановитьПараметр("Источник", Источник);
ЕстьМаркированныеТовары = Не ЗапросМаркировка.Выполнить().Пустой();

ВыборкаНоменклатур = РезультатЗапросаНоменклатур.Выбрать();

Пока ВыборкаНоменклатур.Следующий() Цикл

	НоваяПозиция = РезультатНоменклатур.Добавить();

	НоваяПозиция.Ссылка = ВыборкаНоменклатур.Ссылка;

	НоваяПозиция.НомСтр = Формат(ВыборкаНоменклатур.НомерСтроки, "ЧГ=0");
	НоваяПозиция.НаимТов = СокрЛП(ВыборкаНоменклатур.НаименованиеНоменклатуры);

	НоваяПозиция.КодТов = ВыборкаНоменклатур.ШтрихкодНоменклатурыКонтрагента;

	КодПроисх   = ВРег(СокрЛП(ВыборкаНоменклатур.КодПроисх));
	КодПроисх   = ?(ПустаяСтрока(КодПроисх), "643", КодПроисх);
	НоваяПозиция.КодПроисх = КодПроисх;

	КрНаимСтрПр = ВРег(СокрЛП(ВыборкаНоменклатур.КрНаимСтрПр));
	КрНаимСтрПр = ?(ПустаяСтрока(КрНаимСтрПр), "RU", КрНаимСтрПр);
	НоваяПозиция.КрНаимСтрПр = КрНаимСтрПр;

	Если НЕ КрНаимСтрПр = "RU" Тогда
		НоваяПозиция.НомГТД = ВыборкаНоменклатур.НомерГТД;
	КонецЕсли;

	Если ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		НалСт = "без НДС";
	ИначеЕсли ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		НалСт = "10%";
	ИначеЕсли ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		НалСт = "10/110";
	ИначеЕсли ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		НалСт = "18%";
	ИначеЕсли ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		НалСт = "18/118";
	ИначеЕсли ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		НалСт = "20%";
	ИначеЕсли ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		НалСт = "20/120";
	Иначе
		НалСт = "";
	КонецЕсли;

	НоваяПозиция.НалСт = НалСт;

	НоваяПозиция.ОКЕИ_Тов = СокрЛП(ВыборкаНоменклатур.ОКЕИ_Тов);  //Может ли ОКЕИ корректироваться?
	НоваяПозиция.КолТов = Формат(ВыборкаНоменклатур.Количество, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");

	Если ВыборкаНоменклатур.СуммаВключаетНДС Тогда
		СтТовБезНДС = ВыборкаНоменклатур.Сумма - ВыборкаНоменклатур.СуммаНДС;
		ЦенаБезНДС  = Окр((ВыборкаНоменклатур.Цена * 100)/(100 + СтавкаНДСЧислом(ВыборкаНоменклатур.СтавкаНДС)), 2);
		СтТовУчНал = ВыборкаНоменклатур.Сумма;
	Иначе
		СтТовБезНДС = ВыборкаНоменклатур.Сумма;
		ЦенаБезНДС = ВыборкаНоменклатур.Цена;
		СтТовУчНал = ВыборкаНоменклатур.Сумма + ВыборкаНоменклатур.СуммаНДС;
	КонецЕсли;

	НоваяПозиция.СтТовБезНДС = Формат(СтТовБезНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	НоваяПозиция.СтТовУчНал = Формат(СтТовУчНал, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");

	Если НЕ ВыборкаНоменклатур.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		НоваяПозиция.СумНал = Формат(ВыборкаНоменклатур.СуммаНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	Иначе
		НоваяПозиция.СумНалБезНДС = "без НДС";
	КонецЕсли;

	НоваяПозиция.ЦенаТов = Формат(ЦенаБезНДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");

	НоваяПозиция.НаимЕдИзм = СокрЛП(ВыборкаНоменклатур.НаименованиеЕдиницыИзмерения);
	НоваяПозиция.ПрТовРаб = "1";
	НоваяПозиция.АкцизБезАкциз = "без акциза"; 

	// Данные для ИнфПолФХЖ2
	ЭКОМ_ИнфоПоле       = ВыборкаНоменклатур.ЭКОМ_ИнфоПоля;
	НомерНакладной      = СокрЛП(ВыборкаНоменклатур.НомерРеализации);
	КодТовараПоставщика = СокрЛП(ВыборкаНоменклатур.КодНоменклатурыПоставщика);
	КодТовараПокупателя = СокрЛП(ВыборкаНоменклатур.КодНоменклатурыКонтрагента);
	Штрихкод 			= СокрЛП(ВыборкаНоменклатур.ШтрихкодНоменклатурыКонтрагента);

	ДанныеИнфополя = Новый Соответствие;
	ДанныеИнфоПоля.Вставить("CAMPAIGNNUMBER"               , ВыборкаНоменклатур.CAMPAIGNNUMBER);
	ДанныеИнфоПоля.Вставить("дата_накладной"               , ВыборкаНоменклатур.ДатаДокументаОснования);
	ДанныеИнфоПоля.Вставить("номер_уведомления_об_отгрузке", НомерНакладной);
	ДанныеИнфоПоля.Вставить("номер_накладной"              , НомерНакладной);
	ДанныеИнфоПоля.Вставить("номер_отгрузки"               , НомерНакладной);
	ДанныеИнфоПоля.Вставить("номер_акта"                   , ВыборкаНоменклатур.НомерRECADV);
	ДанныеИнфоПоля.Вставить("дата_акта"                    , ВыборкаНоменклатур.ДатаRECADV);
	ДанныеИнфоПоля.Вставить("номер_заказа"                 , ВыборкаНоменклатур.ЗаказНомер);
	ДанныеИнфоПоля.Вставить("дата_заказа"                  , ВыборкаНоменклатур.ЗаказДата);
	ДанныеИнфоПоля.Вставить("код_материала"                , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("код_материала_заказчика"      , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("штрихкод"                     , Штрихкод);
	ДанныеИнфоПоля.Вставить("артикул_поставщика"           , КодТовараПоставщика);
	ДанныеИнфоПоля.Вставить("вложенность_кол"              , ВыборкаНоменклатур.КоличествоВУпаковке);
	ДанныеИнфоПоля.Вставить("вложенность_океи"             , ВыборкаНоменклатур.Информация);
    ДанныеИнфоПоля.Вставить("позиция_заказа"               , Строка(ВыборкаНоменклатур.НомерСтроки));
	ДанныеИнфоПоля.Вставить("код_продавца"                 , КодТовараПоставщика);
    ДанныеИнфоПоля.Вставить("КдВЕРНЫЙ"                     , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("SKU"                          , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("Штрих-код"                    , Штрихкод);

	СоответсвияИнфоПолей = ПолучитьСтруктуруИнфоПолейИзСправочника("ИнфПолФХЖ2", ЭКОМ_ИнфоПоле, ДанныеИнфополя, ВыборкаНоменклатур.Контрагент_ЭСФБезИнфПоля);

	Если СоответсвияИнфоПолей = Неопределено Тогда
		ТекстЛогаСобытий = "Не заполнены обязательные инфо поля &lt;&lt;&lt;ИнфПолФХЖ2&gt;&gt;&gt;! Формат ЮЗД - " + ВыборкаНоменклатур.ФорматУПД;
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);

		Результат.Удалить(НоваяПозиция);
		Отказ = Истина;
		Продолжить;

	КонецЕсли;

	НоваяПозиция.ИнфПолСтр = СоответсвияИнфоПолей;
		
	ДанныеМаркировки = Новый Массив;
	Если ЕстьМаркированныеТовары И Не ПустаяСтрока(ВыборкаНоменклатур.GTIN) Тогда   
		ЗначенияКодов = Новый Массив;
	                    
		СтруктураКодов = Новый Структура("НомУпак", "02" + ВыборкаНоменклатур.GTIN + "37" + Строка(ВыборкаНоменклатур.Количество));
		СтруктураКодов.Вставить("ЗначенияКодов" , Новый Структура);   		
		ЗначенияКодов.Добавить(СтруктураКодов);        
		
			СтруктураМаркировки = Новый Структура;
			СтруктураМаркировки.Вставить("ЗначенияКодов" , ЗначенияКодов);
		
		ДанныеМаркировки.Добавить(СтруктураМаркировки);
		
	КонецЕсли;

	НоваяПозиция.ДанныеПоМаркировке = ДанныеМаркировки;

КонецЦикла;

//Возврат Результат;
  
////////////////--РезультатНоменклатур--/////////////////////////////////////

//////////////////++СОЗДАНИЕ_XML++///////////////////////////////////  

ОбязательныеРеквизиты = Новый СписокЗначений;
//Ключ - Имя реквизита
//Значение - Вложенность элемента в XML
//пометка - Признак обязательности  

ОбязательныеРеквизиты.Добавить("Документ", "Документ", Истина);
ОбязательныеРеквизиты.Добавить("ГрузОт", "ГрузОт", Истина);
//Указать список обязательных реквизитов согласно спецификации
//Опционально: добавить проверку наличия колонок в результирующих 
//таблицах, чтобы исключить блокировку транзакции и пропустить создание документов.

Для каждого СтрокаШапкиДокумента из Результат Цикл 

	ТекстОшибкиПроверкиОбязательныхПолей = "";

    СтруктураДок = Новый Структура;
    	//+Файл 
	    СтруктураФайл = Новый Структура;
	    СписокЗначенийФайл = Новый СписокЗначений;
	    СписокЗначенийФайл.Добавить("ИдФайл"	, СтрокаШапкиДокумента.ИдФайл);
	    СписокЗначенийФайл.Добавить("ВерсПрог"	, СтрокаШапкиДокумента.ВерсПрог);
	    СписокЗначенийФайл.Добавить("ВерсФорм"	, СтрокаШапкиДокумента.ВерсФорм);
	    СтруктураФайл.Вставить("Файл", СписокЗначенийФайл);//Верхний Уровень
		    //+СвУчДокОбор
		    СтруктураСвУчДокОбор = Новый Структура;
		    СписокЗначенийСвУчДокОбор = Новый СписокЗначений;
		    СписокЗначенийСвУчДокОбор.Добавить("ИдОтпр"	, СтрокаШапкиДокумента.ИдОтпр);
		    СписокЗначенийСвУчДокОбор.Добавить("ИдПол"	, СтрокаШапкиДокумента.ИдПок);
		    СтруктураСвУчДокОбор.Вставить("СвУчДокОбор", СписокЗначенийСвУчДокОбор);
			    //+СвОЭДОтпр
			    СтруктураСвОЭДОтпр = Новый Структура;
			    СписокЗначенийСвОЭДОтпр = Новый СписокЗначений;
			    СписокЗначенийСвОЭДОтпр.Добавить("НаимОрг"	, СтрокаШапкиДокумента.НаимОргОператор);
			    СписокЗначенийСвОЭДОтпр.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ИННОператор);
			    СписокЗначенийСвОЭДОтпр.Добавить("ИдЭДО"	, СтрокаШапкиДокумента.ИдЭДООператор); 
			    СтруктураСвОЭДОтпр.Вставить("СвОЭДОтпр", СписокЗначенийСвОЭДОтпр);    
			    СтруктураСвУчДокОбор.Вставить("СвОЭДОтпр", СтруктураСвОЭДОтпр);//Вложенность "Файл.СвУчДокОбор"
			    //-СвОЭДОтпр
	    	СтруктураФайл.Вставить("СвУчДокОбор", СтруктураСвУчДокОбор);//Вложенность "Файл"
	    	//-СвУчДокОбо
	    	//+Документ
	    	СтруктураДокумент = Новый Структура;
		    СписокЗначенийДокумент = Новый СписокЗначений;
		    СписокЗначенийДокумент.Добавить("КНД"				, СтрокаШапкиДокумента.КНД);
		    СписокЗначенийДокумент.Добавить("Функция"			, СтрокаШапкиДокумента.ДокФункция);
		    СписокЗначенийДокумент.Добавить("ПоФактХЖ"			, СтрокаШапкиДокумента.ПоФактХЖ);
		    СписокЗначенийДокумент.Добавить("НаимДокОпр"		, СтрокаШапкиДокумента.НаимДокОпр);
		    СписокЗначенийДокумент.Добавить("ДатаИнфПр"			, СтрокаШапкиДокумента.ДатаИнфПр);
		    СписокЗначенийДокумент.Добавить("ВремИнфПр"			, СтрокаШапкиДокумента.ВремИнфПр);
		    СписокЗначенийДокумент.Добавить("НаимЭконСубСост"	, СтрокаШапкиДокумента.НаимЭконСубСост); 
		    СтруктураДокумент.Вставить("Документ", СписокЗначенийДокумент);
		    	//+СвСчФакт 
		    	СтруктураСвСчФакт = Новый Структура;
			    СписокЗначенийСвСчФакт = Новый СписокЗначений;
			    СписокЗначенийСвСчФакт.Добавить("НомерСчФ"	, СтрокаШапкиДокумента.НомерСчФ);
			    СписокЗначенийСвСчФакт.Добавить("ДатаСчФ"	, СтрокаШапкиДокумента.ДатаСчФ);
			    СписокЗначенийСвСчФакт.Добавить("КодОКВ"	, СтрокаШапкиДокумента.КодВалютыСчФ);  
			    СтруктураСвСчФакт.Вставить("СвСчФакт", СписокЗначенийСвСчФакт);
			    	//+ИспрСчФ
			    	СтруктураИспрСчФ = Новый Структура;
			    	СписокЗначенийИспрСчФ = Новый СписокЗначений;
			    	СписокЗначенийИспрСчФ.Добавить("ДефНомИспрСчФ"	, СтрокаШапкиДокумента.ДефНомИспрСчФ);
			    	СписокЗначенийИспрСчФ.Добавить("ДефДатаИспрСчФ"	, СтрокаШапкиДокумента.ДефДатаИспрСчФ);  
			    	СтруктураИспрСчФ.Вставить("ИспрСчФ", СписокЗначенийИспрСчФ);
  	    	     	СтруктураСвСчФакт.Вставить("ИспрСчФ", СтруктураИспрСчФ);//Вложенность "Файл.Документ"
	    			//-ИспрСчФ   
	    			//+СвПрод  
			    	СтруктураСвПрод = Новый Структура;
			    		//+ИдСв
			    		СтруктураИдСв = Новый Структура;
			    			//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг", СтрокаШапкиДокумента.ПродНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПродИНН);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"	, СтрокаШапкиДокумента.ПродКПП);
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.ИдСв"
			    	    	//-СвЮЛУч
			    		СтруктураСвПрод.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-ИдСв
  	    	     		//+Адрес
			    		СтруктураАдрес = Новый Структура;
			    			//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"	, СтрокаШапкиДокумента.ПродИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион", СтрокаШапкиДокумента.ПродКодРегион);
			    			СписокЗначенийАдрРФ.Добавить("Город"	, СтрокаШапкиДокумента.ПродГород);
			    			СписокЗначенийАдрРФ.Добавить("Улица"	, СтрокаШапкиДокумента.ПродУлица);
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.Адрес"
			    	    	//-АдрРФ
			    		СтруктураСвПрод.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-Адрес
					СтруктураСвСчФакт.Вставить("СвПрод", СтруктураСвПрод);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-СвПрод
	    	        //+ГрузОт  
			    	СтруктураГрузОт = Новый Структура;  	    	
			    		Если СтрокаШапкиДокумента.ОнЖе = "он же" Тогда  //если грузоотправителем является продавец, достаточно указать "он же"
				    		//+ОнЖе   		    	
				    	    СтруктураГрузОт.Вставить("ОнЖе", СтрокаШапкиДокумента.ОнЖе);
				    		//-ОнЖе
				    	Иначе
				    		//+ИдСв
				    		СтруктураИдСв = Новый Структура;
				    			//+СвЮЛУч
				    	    	СтруктураСвЮЛУч = Новый Структура;
				    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
				    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг", СтрокаШапкиДокумента.ПродНаимОрг);
				    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПродИНН);
				    			СписокЗначенийСвЮЛУч.Добавить("КПП"	, СтрокаШапкиДокумента.ПродКПП);
				    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
				    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.ИдСв"
				    	    	//-СвЮЛУч
				    		СтруктураГрузОт.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
	  	    	     		//-ИдСв
	  	    	     		//+Адрес
				    		СтруктураАдрес = Новый Структура;
				    			//+АдрРФ
				    	    	СтруктураАдрРФ = Новый Структура;
				    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
				    			СписокЗначенийАдрРФ.Добавить("Индекс"	, СтрокаШапкиДокумента.ПродИндекс);
				    			СписокЗначенийАдрРФ.Добавить("КодРегион", СтрокаШапкиДокумента.ПродКодРегион);
				    			СписокЗначенийАдрРФ.Добавить("Город"	, СтрокаШапкиДокумента.ПродГород);
				    			СписокЗначенийАдрРФ.Добавить("Улица"	, СтрокаШапкиДокумента.ПродУлица);
				    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
				    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.Адрес"
				    	    	//-АдрРФ
				    		СтруктураГрузОт.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
	  	    	     		//-Адрес 
	  	    	     	КонецЕсли;
					СтруктураСвСчФакт.Вставить("ГрузОт", СтруктураГрузОт);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-ГрузОт
	    			//+ГрузПолуч  
			    	СтруктураГрузПолуч = Новый Структура;
			    		//+ИдСв
			    		СтруктураИдСв = Новый Структура;
			    			//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг", СтрокаШапкиДокумента.ГрузополучательНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ГрузополучательИНН);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"	, СтрокаШапкиДокумента.ГрузополучательКПП);
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.ИдСв"
			    	    	//-СвЮЛУч
			    		СтруктураГрузПолуч.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-ИдСв
  	    	     		//+Адрес
			    		СтруктураАдрес = Новый Структура;
			    			//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"	, СтрокаШапкиДокумента.ГрузПолИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион", СтрокаШапкиДокумента.ГрузПолКодРегион);
			    			СписокЗначенийАдрРФ.Добавить("Город"	, СтрокаШапкиДокумента.ГрузПолГород);
			    			СписокЗначенийАдрРФ.Добавить("Улица"	, СтрокаШапкиДокумента.ГрузПолУлица);
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.Адрес"
			    	    	//-АдрРФ
			    		СтруктураГрузПолуч.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-Адрес
					СтруктураСвСчФакт.Вставить("ГрузПолуч", СтруктураГрузПолуч);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-ГрузПолуч
	    			//+СвПокуп  
			    	СтруктураСвПокуп = Новый Структура;
			    		//+ИдСв
			    		СтруктураИдСв = Новый Структура;
			    			//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг", СтрокаШапкиДокумента.ПокНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПокИНН);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"	, СтрокаШапкиДокумента.ПокКПП);
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.ИдСв"
			    	    	//-СвЮЛУч
			    		СтруктураСвПокуп.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-ИдСв
  	    	     		//+Адрес
			    		СтруктураАдрес = Новый Структура;
			    			//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"	, СтрокаШапкиДокумента.ПокИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион", СтрокаШапкиДокумента.ПокКодРегион);
			    			СписокЗначенийАдрРФ.Добавить("Город"	, СтрокаШапкиДокумента.ПокГород);
			    			СписокЗначенийАдрРФ.Добавить("Улица"	, СтрокаШапкиДокумента.ПокУлица);
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвСчФакт.СвПрод.Адрес"
			    	    	//-АдрРФ
			    		СтруктураСвПокуп.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвСчФакт.СвПрод"
  	    	     		//-Адрес
					СтруктураСвСчФакт.Вставить("СвПокуп", СтруктураСвПокуп);//Вложенность "Файл.Документ.СвСчФакт"
	    			//-СвПокуп
	    	        //+ИнфПолФХЖ1
	    	        СтруктураИнфПолФХЖ1 = Новый Структура;
	    	        	СтруктураТекстИнф = Новый Структура("ТекстИнф", СтрокаШапкиДокумента.ИнфТекст);
	    	        	СтруктураИнфПолФХЖ1.Вставить("ТекстИнф", СтруктураТекстИнф); 		    	
	    	        СтруктураСвСчФакт.Вставить("ИнфПолФХЖ1", СтруктураИнфПолФХЖ1);//Вложенность "Файл.Документ.СвСчФакт"
	    	        //-ИнфПолФХЖ1
	    	    СтруктураДокумент.Вставить("СвСчФакт", СтруктураСвСчФакт);//Вложенность "Файл.Документ"
	    		//-СвСчФакт    
    	        //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    	        
    	        //+ТаблСчФакт
    	        СтруктураТаблСчФакт = Новый Структура;	    	        
    	        
    	        ОтборСтрокНоменклатур = Новый Структура;
				ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
				СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);
					//+СведТов
					МассивСведТов = Новый Массив;	        			       			
	        		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
						
						СтруктураСведТов = Новый Структура;					
						СписокЗначенийСведТов = Новый СписокЗначений;
	    	            СписокЗначенийСведТов.Добавить("НомСтр"		, СтрокаНоменклатурыДокумента.НомСтр);
	    	            СписокЗначенийСведТов.Добавить("НаимТов"	, СтрокаНоменклатурыДокумента.НаимТов);
	    	            СписокЗначенийСведТов.Добавить("ОКЕИ_Тов"	, СтрокаНоменклатурыДокумента.ОКЕИ_Тов);
	    	            СписокЗначенийСведТов.Добавить("КолТов"		, СтрокаНоменклатурыДокумента.КолТов);
	    	            СписокЗначенийСведТов.Добавить("ЦенаТов"	, СтрокаНоменклатурыДокумента.ЦенаТов);
	    	            СписокЗначенийСведТов.Добавить("НалСт"		, СтрокаНоменклатурыДокумента.НалСт);
	    	            СписокЗначенийСведТов.Добавить("СтТовБезНДС", СтрокаНоменклатурыДокумента.СтТовБезНДС);
	    	            СписокЗначенийСведТов.Добавить("СтТовУчНал"	, СтрокаНоменклатурыДокумента.СтТовУчНал);
	    	            СтруктураСведТов.Вставить("СведТов",СписокЗначенийСведТов); 
	    	            //+Акциз
	    	            СтруктураАкциз = Новый Структура;
	    	            Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.СумАкциз) Тогда
	    	                СтруктураАкциз.Вставить("СумАкциз", СтрокаНоменклатурыДокумента.СумАкциз);
	    	            Иначе
	    	            	СтруктураАкциз.Вставить("БезАкциз", СтрокаНоменклатурыДокумента.АкцизБезАкциз);
	    	            КонецЕсли;					    	          
	    	            СтруктураСведТов.Вставить("Акциз",СтруктураАкциз);//Вложенность "Файл.Документ.СвСчФакт"
	    	            //-Акциз
	    	            //+СумНал
	    	            СтруктураСумНал = Новый Структура;
	    	            Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.СумНал) Тогда
	    	                СтруктураСумНал.Вставить("СумНал", СтрокаНоменклатурыДокумента.СумНал);
	    	            Иначе
	    	            	СтруктураСумНал.Вставить("БезНДС", СтрокаНоменклатурыДокумента.СумНалБезНДС);
	    	            КонецЕсли;					    	          
	    	            СтруктураСведТов.Вставить("СумНал",СтруктураСумНал); //Вложенность "Файл.Документ.СвСчФакт"
	    	            //-СумНал
	    	            //+ДопСведТов
	    	            СтруктураДопСведТов = Новый Структура;
	    	            СписокЗначенийСведТов = Новый СписокЗначений;
	    	            СписокЗначенийСведТов.Добавить("ПрТовРаб"	, СтрокаНоменклатурыДокумента.ПрТовРаб);
	    	            СписокЗначенийСведТов.Добавить("КодТов"		, СтрокаНоменклатурыДокумента.КодТов);
	    	            СписокЗначенийСведТов.Добавить("НаимЕдИзм"	, СтрокаНоменклатурыДокумента.НаимЕдИзм);
	      	            СтруктураДопСведТов.Вставить("ДопСведТов" ,СписокЗначенийСведТов);
	      	            СтруктураСведТов.Вставить("ДопСведТов",СтруктураДопСведТов);//Вложенность "Файл.Документ.СвСчФакт"
	    	            //-ДопСведТов
						//+ИнфПолФХЖ2
						Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.ИнфПолСтр) Тогда
		    	        	СтруктураИнфПолФХЖ2 = Новый Структура("ИнфПолФХЖ2", СтрокаНоменклатурыДокумента.ИнфПолСтр); 		    	
		    	        	СтруктураСведТов.Вставить("ИнфПолФХЖ2", СтруктураИнфПолФХЖ2);//Вложенность "Файл.Документ.СвСчФакт"
		    	        КонецЕсли;
		    	        //-ИнфПолФХЖ2
	    	            МассивСведТов.Добавить(СтруктураСведТов);
	      	       	КонецЦикла;     	        
	    	        СтруктураТаблСчФакт.Вставить("СведТов",МассивСведТов);
	    	        //-СведТов 
	    	        //+ВсегоОпл
	    	        СтруктураВсегоОпл = Новый Структура;					
					СписокЗначенийВсегоОпл = Новый СписокЗначений;
    	            СписокЗначенийВсегоОпл.Добавить("СтТовБезНДСВсего"	, СтрокаШапкиДокумента.СтТовБезНДСВсего);
    	            СписокЗначенийВсегоОпл.Добавить("СтТовУчНалВсего"	, СтрокаШапкиДокумента.СтТовУчНалВсего);
    	            СтруктураВсегоОпл.Вставить("ВсегоОпл",СписокЗначенийВсегоОпл); 
    	            	//+СумНалВсего
    	            	СтруктураСумНалВсего = Новый Структура;
    	            	СтруктураСумНалВсего.Вставить("СумНал", СтрокаШапкиДокумента.СуммаНДССчФ);
    	            	СтруктураВсегоОпл.Вставить("СумНалВсего",СтруктураСумНалВсего);
    	                //-СумНалВсего
    	            СтруктураТаблСчФакт.Вставить("ВсегоОпл",СтруктураВсегоОпл); 
	    	        //-ВсегоОпл    	        
				СтруктураДокумент.Вставить("ТаблСчФакт", СтруктураТаблСчФакт);//Вложенность "Файл.Документ"
    	        //-ТаблСчФакт
    	        
    	        //////////////////////////////////////////////////////////////////////////////////////////////////////////////
    	        //+СвПродПер
    	        СтруктураСвПродПер = Новый Структура;
    	        	//+СвПер
    	        	СтруктураСвПер = Новый Структура;	
    	        	СписокЗначенийСвПер = Новый СписокЗначений;
		    		СписокЗначенийСвПер.Добавить("СодОпер"	, СтрокаШапкиДокумента.СодОпер);
		    		СписокЗначенийСвПер.Добавить("ДатаПер"	, СтрокаШапкиДокумента.ДатаПер);
		   	 		СтруктураСвПер.Вставить("СвПер", СписокЗначенийСвПер); 
		   	 			//+ОснПер 
		   	 			СтруктураОснПер = Новый Структура;
		   	 			СписокЗначенийОснПер = Новый СписокЗначений;
		    			СписокЗначенийОснПер.Добавить("НаимОсн"	, СтрокаШапкиДокумента.НаимОсн);
		    			СписокЗначенийОснПер.Добавить("НомОсн"	, СтрокаШапкиДокумента.НомОсн);
		    			СписокЗначенийОснПер.Добавить("ДатаОсн"	, СтрокаШапкиДокумента.ДатаОсн);			    			
		   	 			СтруктураОснПер.Вставить("ОснПер", СписокЗначенийОснПер);//
		   	 			СтруктураСвПер.Вставить("ОснПер", СтруктураОснПер);//Вложенность "Файл.Документ.СвПродПер.СвПер"
		   	 			//-ОснПер		
		   	 		    //+ТранГруз 
		   	 			СтруктураТранГруз = Новый Структура;
			   	 			//+ТранНакл 
			   	 			СтруктураТранНакл = Новый Структура;	
							СписокЗначенийТранНакл = Новый СписокЗначений;
		    				СписокЗначенийТранНакл.Добавить("НомТранНакл"	, СтрокаШапкиДокумента.НомТранНакл);
		    				СписокЗначенийТранНакл.Добавить("ДатаТранНакл"	, СтрокаШапкиДокумента.ДатаТранНакл);
		   	 				СтруктураТранНакл.Вставить("ТранНакл", СписокЗначенийТранНакл);//
		   	 				СтруктураТранГруз.Вставить("ТранНакл", СтруктураТранНакл);//
		   	 			СтруктураСвПер.Вставить("ТранГруз", СтруктураТранГруз);//Вложенность "Файл.Документ.СвПродПер.СвПер"
		   	 			//-ТранГруз 
		    		СтруктураСвПродПер.Вставить("СвПер", СтруктураСвПер);//Вложенность "Файл.Документ.СвПродПер"
		    		//-СвПер	 		    	
    	        СтруктураДокумент.Вставить("СвПродПер", СтруктураСвПродПер);//Вложенность "Файл.Документ"
    	        //-СвПродПер
    	        //+Подписант
    	        СтруктураПодписант = Новый Структура;
    	        CписокЗначенийПодписант = Новый СписокЗначений;
    			CписокЗначенийПодписант.Добавить("ОблПолн"	, СтрокаШапкиДокумента.ПодписантОблПолн);
    			CписокЗначенийПодписант.Добавить("Статус"	, СтрокаШапкиДокумента.ПодписантСтатус);
    			CписокЗначенийПодписант.Добавить("ОснПолн"	, СтрокаШапкиДокумента.ПодписантОснПолн);			    			
   	 			СтруктураПодписант.Вставить("Подписант", CписокЗначенийПодписант);// 
				    Если СтрокаШапкиДокумента.ПодписантТип = "ЮЛ" Тогда
					//+ЮЛ
   	 				СтруктураЮЛ = Новый Структура;
   	 				CписокЗначенийЮЛ = Новый СписокЗначений;
    				CписокЗначенийЮЛ.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ОргПодписантИНН);
    				CписокЗначенийЮЛ.Добавить("Должн"	, СтрокаШапкиДокумента.ОргПодписантДолжность);
   	 				СтруктураЮЛ.Вставить("ЮЛ", CписокЗначенийЮЛ);//
   	 					//+ФИО
   	 					СтруктураФИО = Новый Структура;
   	 					CписокЗначенийФИО = Новый СписокЗначений;
    					CписокЗначенийФИО.Добавить("Фамилия"		, СтрокаШапкиДокумента.ОргПодписантФамилия);
    					CписокЗначенийФИО.Добавить("Имя"			, СтрокаШапкиДокумента.ОргПодписантИмя);
    					CписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ОргПодписантОтчество);
   	 					СтруктураФИО.Вставить("ФИО", CписокЗначенийФИО);
   	 					СтруктураЮЛ.Вставить("ФИО", СтруктураФИО);//Вложенность "Файл.Документ.Подписант.ЮЛ"
   	 					//-ФИО	
   	 				СтруктураПодписант.Вставить("ЮЛ", СтруктураЮЛ);//Вложенность "Файл.Документ.Подписант"	
    	        	//-ЮЛ 		    	
					ИначеЕсли СтрокаШапкиДокумента.ПодписантТип = "ФЛ" Тогда
					//+ФЛ
   	 				СтруктураФЛ = Новый Структура;
   	 				CписокЗначенийЮЛ = Новый СписокЗначений;
    				CписокЗначенийЮЛ.Добавить("ИННФЛ", СтрокаШапкиДокумента.ОргПодписантИНН);
   	 				СтруктураФЛ.Вставить("ФЛ", CписокЗначенийЮЛ);//
   	 					//+ФИО
   	 					СтруктураФИО = Новый Структура;
   	 					CписокЗначенийФИО = Новый СписокЗначений;
    					CписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ОргПодписантФамилия);
    					CписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ОргПодписантИмя);
    					CписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ОргПодписантОтчество);
   	 					СтруктураФИО.Вставить("ФИО", CписокЗначенийФИО);
   	 					СтруктураФЛ.Вставить("ФИО", СтруктураФИО);//Вложенность "Файл.Документ.Подписант.ФЛ"
   	 					//-ФИО	
   	 				СтруктураПодписант.Вставить("ФЛ", СтруктураФЛ);//Вложенность "Файл.Документ.Подписант"	
    	        	//-ФЛ
					КонецЕсли;
    	        СтруктураДокумент.Вставить("Подписант", СтруктураПодписант);//Вложенность "Файл.Документ"
    	        //-Подписант    	       
	    	СтруктураФайл.Вставить("Документ", СтруктураДокумент);//Вложенность "Файл"
	    	//-Документ
    	СтруктураДок.Вставить("Файл", СтруктураФайл);//Верхний Уровень
    	//-Файл
    				
	XMLДокумент        	= Новый ЗаписьXML;		
	ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("WINDOWS-1251", "1.0", Истина, Ложь, Символы.Таб); 
	XMLДокумент.УстановитьСтроку("WINDOWS-1251");
	XMLДокумент.ЗаписатьОбъявлениеXML();
	
	Для каждого СтрокаЭлемента Из СтруктураДок Цикл
		ЗаписатьБлоки(XMLДокумент, СтрокаЭлемента, ОбязательныеРеквизиты, ТекстОшибкиПроверкиОбязательныхПолей);
	КонецЦикла;	

	СтрокаXML = XMLДокумент.Закрыть(); 
			
	Если ЗначениеЗаполнено(ТекстОшибкиПроверкиОбязательныхПолей) Тогда
		ТекстЛогаСобытий = ТекстОшибкиПроверкиОбязательныхПолей + Символы.ПС + "Документ был пропущен.";
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        Продолжить;	
	Иначе 
	
		СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
		 		
		СтруктураФайлаДанных = Новый Структура;
		СтруктураФайлаДанных.Вставить("ВидДокумента"			, СтрокаШапкиДокумента.ВидДокумента);
		СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
		СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
		СтруктураФайлаДанных.Вставить("Идентификатор"			, СтрокаШапкиДокумента.GUIDФайла);
		СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
		СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "WINDOWS-1251");
		СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
		СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
		//СтруктураФайлаДанных.Вставить("Сообщение"				, "");
		СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
		СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
		СтруктураФайлаДанных.Вставить("СтруктураДокумента"		, СтруктураДляСовместимости);
		СтруктураФайлаДанных.Вставить("ТипФайла"				, ТипФайла); 
		СтруктураФайлаДанных.Вставить("СертификатНаСервере"     , СтрокаШапкиДокумента.СертификатСертификатНаСервере);
		СтруктураФайлаДанных.Вставить("ДанныеСертификатаЭКОМ"   , СтрокаШапкиДокумента.ДанныеСертификатаЭКОМ);
		
		Если СтрокаШапкиДокумента.ОтправитьМЧД = Истина Тогда
			СтруктураФайлаДанных.Вставить("СтрокаМЧД", СтрЗаменить(СтрокаШапкиДокумента.СтрокаМЧД, "&amp;GUID", СтрЗаменить(СтрокаШапкиДокумента.GUIDФайла, "-", "")));
		КонецЕсли;
		
		МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
	КонецЕсли;
КонецЦикла;

//Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Возврат МассивСтруктурИсходящих;</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Исходящий УПД - универсальный передаточный документ</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">7</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокСчетФактурыИсходящие</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>Исходящий УПД - универсальный передаточный документ</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПередаватьТекстПричины</value>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>ON_NSCHFDOPPR_01_Исходящий</presentation>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>СчетФактура_Исходящий</presentation>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Да</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">7</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueTable">
			<column>
				<Name xsi:type="xs:string">Реквизит1</Name>
				<ValueType>
					<Type>xs:string</Type>
					<StringQualifiers>
						<Length>0</Length>
						<AllowedLength>Variable</AllowedLength>
					</StringQualifiers>
				</ValueType>
			</column>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:boolean">false</Value>
		<Value xsi:type="xs:string"/>
	</row>
</ValueTree>