<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий ORDRSP</Value>
		<Value xsi:type="xs:string">Исходящий ORDRSP</Value>
		<Value xsi:type="xs:string">ИсходящийORDRSP</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">#Область ШАПКА_Заполнение

Запрос = Новый Запрос;
Запрос.Текст ="ВЫБРАТЬ
              |	ВЫРАЗИТЬ(DR_События.Документ КАК Документ.ЗаказПокупателя) КАК Источник,
              |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
              |	DR_События.ИдентификаторОснования КАК ИдентификаторОснования
              |ПОМЕСТИТЬ DRСобытияИсточник
              |ИЗ
              |	РегистрСведений.DR_События КАК DR_События
              |ГДЕ
              |	DR_События.Документ В(&amp;Документ)
              |	И DR_События.ВидДокумента = ""Заказ_Входящий""
              |;
              |
              |////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	DRСобытияИсточник.Источник КАК Источник,
              |	DRСобытияИсточник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
              |	DRСобытияИсточник.ИдентификаторОснования КАК ИдентификаторОснования,
              |	ВЫРАЗИТЬ(DRСобытияORDER.Документ КАК Документ.DR_Документ) КАК ORDER
              |ПОМЕСТИТЬ DRСобытияORDER
              |ИЗ
              |	DRСобытияИсточник КАК DRСобытияИсточник
              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DRСобытияORDER
              |		ПО DRСобытияИсточник.ИдентификаторЦепочки = DRСобытияORDER.ИдентификаторЦепочки
              |			И (DRСобытияORDER.ВидДокумента = ""ORDER_Входящий"")
              |			И DRСобытияИсточник.ИдентификаторОснования = DRСобытияORDER.Идентификатор
              |			И (DRСобытияORDER.Статус = ""Обработан"")
              |;
              |
              |////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	DRСобытияORDER.Источник КАК Источник,
              |	DRСобытияORDER.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
              |	DRСобытияORDER.ИдентификаторОснования КАК ИдентификаторОснования,
              |	DRСобытияORDER.ORDER КАК ORDER,
              |	ЕСТЬNULL(LIMES.ХранилищеЗначения, НЕОПРЕДЕЛЕНО) КАК LIMES,
              |	ВЫРАЗИТЬ(CURRENCY.Значение КАК СТРОКА(3)) КАК CURRENCY,
              |	ВЫРАЗИТЬ(ORDERNUMBER.Значение КАК СТРОКА(25)) КАК ORDERNUMBER,
              |	ВЫРАЗИТЬ(ORDERDATE.Значение КАК СТРОКА(10)) КАК ORDERDATE,
              |	ВЫРАЗИТЬ(CAMPAIGNNUMBER.Значение КАК СТРОКА(250)) КАК CAMPAIGNNUMBER,
              |	ВЫРАЗИТЬ(DELIVERYDATE.Значение КАК СТРОКА(10)) КАК DELIVERYDATE,
              |	ВЫРАЗИТЬ(DELIVERYTIME.Значение КАК СТРОКА(5)) КАК DELIVERYTIME,
              |	ВЫРАЗИТЬ(PROMO.Значение КАК СТРОКА(1)) КАК PROMO,
              |	ВЫРАЗИТЬ(FRESH.Значение КАК СТРОКА(1)) КАК FRESH,
              |	ВЫРАЗИТЬ(REASONDECREACEQUANTITYALL.Значение КАК СТРОКА(5)) КАК REASONDECREACEQUANTITYALL,
              |	ВЫРАЗИТЬ(INFO.Значение КАК СТРОКА(250)) КАК INFO,
              |	ВЫРАЗИТЬ(SENDER.Значение КАК СТРОКА(13)) КАК SENDER,
              |	POSITION.ХранилищеЗначения КАК POSITION
              |ПОМЕСТИТЬ ДопРеквизитыORDER
              |ИЗ
              |	DRСобытияORDER КАК DRСобытияORDER
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК LIMES
              |		ПО DRСобытияORDER.ORDER = LIMES.Ссылка
              |			И (LIMES.Реквизит = ""LIMES"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК CURRENCY
              |		ПО DRСобытияORDER.ORDER = CURRENCY.Ссылка
              |			И (CURRENCY.Реквизит = ""CURRENCY"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDERNUMBER
              |		ПО DRСобытияORDER.ORDER = ORDERNUMBER.Ссылка
              |			И (ORDERNUMBER.Реквизит = ""NUMBER"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDERDATE
              |		ПО DRСобытияORDER.ORDER = ORDERDATE.Ссылка
              |			И (ORDERDATE.Реквизит = ""DATE"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК CAMPAIGNNUMBER
              |		ПО DRСобытияORDER.ORDER = CAMPAIGNNUMBER.Ссылка
              |			И (CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNNUMBER"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DELIVERYDATE
              |		ПО DRСобытияORDER.ORDER = DELIVERYDATE.Ссылка
              |			И (DELIVERYDATE.Реквизит = ""DELIVERYDATE"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DELIVERYTIME
              |		ПО DRСобытияORDER.ORDER = DELIVERYTIME.Ссылка
              |			И (DELIVERYTIME.Реквизит = ""DELIVERYTIME"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК PROMO
              |		ПО DRСобытияORDER.ORDER = PROMO.Ссылка
              |			И (PROMO.Реквизит = ""PROMO"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК FRESH
              |		ПО DRСобытияORDER.ORDER = FRESH.Ссылка
              |			И (FRESH.Реквизит = ""FRESH"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК REASONDECREACEQUANTITYALL
              |		ПО DRСобытияORDER.ORDER = REASONDECREACEQUANTITYALL.Ссылка
              |			И (REASONDECREACEQUANTITYALL.Реквизит = ""REASONDECREACEQUANTITYALL"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК INFO
              |		ПО DRСобытияORDER.ORDER = INFO.Ссылка
              |			И (INFO.Реквизит = ""INFO"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК SENDER
              |		ПО DRСобытияORDER.ORDER = SENDER.Ссылка
              |			И (SENDER.Реквизит = ""SENDER"")
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК POSITION
              |		ПО DRСобытияORDER.ORDER = POSITION.Ссылка
              |			И (POSITION.Реквизит = ""POSITION"")
              |;
              |
              |////////////////////////////////////////////////////////////////////////////////
              |ВЫБРАТЬ
              |	ДопРеквизитыORDER.Источник КАК Ссылка,
              |	ЗаказПокупателя.Организация КАК Организация,
              |	ДопРеквизитыORDER.ORDERNUMBER КАК NUMBER,
              |	ДопРеквизитыORDER.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
              |	ДопРеквизитыORDER.ИдентификаторОснования КАК ИдентификаторОснования,
              |	ДопРеквизитыORDER.LIMES КАК ДеталиТраспорта,
              |	ДопРеквизитыORDER.CURRENCY КАК CURRENCY,
              |	ДопРеквизитыORDER.ORDERNUMBER КАК ORDERNUMBER,
              |	ДопРеквизитыORDER.ORDERDATE КАК ORDERDATE,
              |	ДопРеквизитыORDER.CAMPAIGNNUMBER КАК CAMPAIGNNUMBER,
              |	ДопРеквизитыORDER.DELIVERYDATE КАК DELIVERYDATE,
              |	ДопРеквизитыORDER.DELIVERYTIME КАК DELIVERYTIME,
              |	ДопРеквизитыORDER.PROMO КАК PROMO,
              |	ДопРеквизитыORDER.FRESH КАК FRESH,
              |	ДопРеквизитыORDER.REASONDECREACEQUANTITYALL КАК REASONDECREACEQUANTITYALL,
              |	ДопРеквизитыORDER.INFO КАК INFO,
              |	ДопРеквизитыORDER.POSITION КАК POSITION,
              |	GLN_Контрагент.Контрагент_ФорматЭСФ КАК ФорматУПД,
              |	GLN_Контрагент.GLN КАК BUYER,
              | GLN_Контрагент.Контрагент_УпдБезОснования КАК Контрагент_УпдБезОснования,
              |	GLN_Организация.GLN КАК SUPPLIER,
              |	GLN_Организация.GLN КАК SENDER,
              |	ДопРеквизитыORDER.SENDER КАК RECIPIENT,
              |	DR_ТочкиДоставки.GLN КАК DELIVERYPLACE,
              |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК DATE,
              |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК TIME,
              |	""29"" КАК ACTION,
              |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК EDIMESSAGE,
              |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК EDIINTERCHANGEID,
              |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК ФайлИмя,
              |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК Идентификатор,
              |	""Отправлен"" КАК Статус,
              |	""ORDRSP"" КАК ВидДокумента
              |ИЗ
              |	ДопРеквизитыORDER КАК ДопРеквизитыORDER
              |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя КАК ЗаказПокупателя
              |		ПО ДопРеквизитыORDER.Источник = ЗаказПокупателя.Ссылка
              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК GLN_Контрагент
              |		ПО (ЗаказПокупателя.Контрагент = GLN_Контрагент.Объект)
              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК GLN_Организация
              |		ПО (ЗаказПокупателя.Организация = GLN_Организация.Объект)
              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК DR_ТочкиДоставки
              |		ПО (ЗаказПокупателя.Грузополучатель = DR_ТочкиДоставки.Объект)";

Запрос.УстановитьПараметр("Документ", Источник);

РезультатЗапроса = Запрос.Выполнить(); 
Результат = РезультатЗапроса.Выгрузить();

Результат.Колонки.Добавить("LIMES", Новый ОписаниеТипов("Массив")); 

ДанныеORDER = новый ТаблицаЗначений;
ДанныеORDER.Колонки.Добавить("ЗаказПокупателя"			, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
ДанныеORDER.Колонки.Добавить("Номенклатура"				, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеORDER.Колонки.Добавить("КоличествоЗаказанное"		, Новый ОписаниеТипов("Число"));   

КвалификаторСтроки = Новый КвалификаторыСтроки(250,ДопустимаяДлина.Переменная);

ДанныеТЧНоменклатурORDER = новый ТаблицаЗначений;
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ЗаказПокупателя"			, Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("POSITIONNUMBER"			, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("PRICE"					, Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("VAT"						, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("PRICEWITHVAT"			, Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ORDRSPUNIT"				, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоЗаказанное"	, Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("КоличествоВУпаковке"		, Новый ОписаниеТипов("Число"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("DESCRIPTION"				, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("PRODUCT"					, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("PRODUCTIDBUYER"			, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("PRODUCTIDSUPPLIER"		, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("CALIBRE"					, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("REASONDECREACEQUANTITY"	, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ХЗ_PACKING"				, Новый ОписаниеТипов("ХранилищеЗначения"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("ФорматУПД"				, Новый ОписаниеТипов("Строка", КвалификаторСтроки));

Удалить = Новый Массив;

Для Каждого Строка Из Результат Цикл
	
    Если НЕ Строка.Контрагент_УпдБезОснования Тогда

    	POSITION = Строка.POSITION.Получить(); 
    	
    	Для Каждого СтрокаНоменклатуры Из POSITION Цикл
    		
    		НоваяСтрокаORDER 					  = ДанныеORDER.Добавить();
    		НоваяСтрокаORDER.ЗаказПокупателя   	  = Строка.Ссылка; 		
    		НоваяСтрокаORDER.Номенклатура 		  = СтрокаНоменклатуры.Номенклатура;
    		НоваяСтрокаORDER.КоличествоЗаказанное = СтрокаНоменклатуры.ORDEREDQUANTITY; 
    		
    		НоваяСтрокаНоменклатуры	= ДанныеТЧНоменклатурORDER.Добавить();
    		
    		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры, СтрокаНоменклатуры);
    		
    		НоваяСтрокаНоменклатуры.ЗаказПокупателя  = Строка.Ссылка;
    		
    		Если СтрокаНоменклатуры.Свойство("PACKING") Тогда 
    			НоваяСтрокаНоменклатуры.ХЗ_PACKING = Новый ХранилищеЗначения(СтрокаНоменклатуры.PACKING);
    		КонецЕсли;
    		
    		НоваяСтрокаНоменклатуры.КоличествоЗаказанное = СтрокаНоменклатуры.ORDEREDQUANTITY;
    		
    		Если СтрокаНоменклатуры.Свойство("QUANTITYOFCUINTU") Тогда
    			НоваяСтрокаНоменклатуры.КоличествоВУпаковке = СтрокаНоменклатуры.QUANTITYOFCUINTU;
    		КонецЕсли;
    		
    		Если СтрокаНоменклатуры.Свойство("ORDERPRICE") Тогда
    			НоваяСтрокаНоменклатуры.PRICE = СтрокаНоменклатуры.ORDERPRICE;
    		КонецЕсли;

    		Если СтрокаНоменклатуры.Свойство("ORDERUNIT") Тогда
    			НоваяСтрокаНоменклатуры.ORDRSPUNIT = СтрокаНоменклатуры.ORDERUNIT;
    		КонецЕсли;

    	КонецЦикла;

    Иначе
    
        ТекстЛогаСобытий = "Документ """ + Строка.Ссылка + """ был пропущен. У контрагента """ + Строка.Ссылка.Контрагент + """ установлен признак ""Отправлять УПД без основания"".";  
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        Удалить.Добавить(Строка); // Сохраняем для дальнейшего удаления строку ТЗ, так как это цепочка без EDI
        Продолжить;  
            
    КонецЕсли;        
	
КонецЦикла;

Для Каждого Строка Из Удалить Цикл  

    Результат.Удалить(Строка); 
    
КонецЦикла;

//&lt;Сравнение количества товаров между ORDER и ЗаказПокупателя, определение расхождения&gt;
ЗапросТабЧасть = Новый Запрос;               
ЗапросТабЧасть.Текст = "ВЫБРАТЬ
                       |	ДанныеORDER.ЗаказПокупателя КАК ЗаказПокупателя,
                       |	ДанныеORDER.Номенклатура КАК Номенклатура,
                       |	ДанныеORDER.КоличествоЗаказанное КАК КоличествоЗаказанное
                       |ПОМЕСТИТЬ ВТ_ДанныеORDER
                       |ИЗ
                       |	&amp;ДанныеORDER КАК ДанныеORDER
                       |;
                       |
                       |////////////////////////////////////////////////////////////////////////////////
                       |ВЫБРАТЬ
                       |	ЗаказПокупателяТовары.Ссылка,
                       |	ЗаказПокупателяТовары.Номенклатура КАК Номенклатура,
                       |	ЗаказПокупателяТовары.Количество
                       |ПОМЕСТИТЬ ВтДанныеЗаказаПокупателя
                       |ИЗ
                       |	ВТ_ДанныеORDER КАК ВТ_ДанныеORDER
                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
                       |		ПО ВТ_ДанныеORDER.ЗаказПокупателя = ЗаказПокупателяТовары.Ссылка
                       |
                       |ОБЪЕДИНИТЬ ВСЕ
                       |
                       |ВЫБРАТЬ
                       |	ЗаказПокупателяУслуги.Ссылка,
                       |	ЗаказПокупателяУслуги.Номенклатура,
                       |	ЗаказПокупателяУслуги.Количество
                       |ИЗ
                       |	ВТ_ДанныеORDER КАК ВТ_ДанныеORDER
                       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
                       |		ПО ВТ_ДанныеORDER.ЗаказПокупателя = ЗаказПокупателяУслуги.Ссылка
                       |;
                       |
                       |////////////////////////////////////////////////////////////////////////////////
                       |ВЫБРАТЬ
                       |	ВТ_ДанныеORDER.ЗаказПокупателя КАК ЗаказПокупателя,
                       |	ВТ_ДанныеORDER.Номенклатура КАК Номенклатура,
                       |	СУММА(ЕСТЬNULL(ВтДанныеЗаказаПокупателя.Количество, 0)) КАК КоличествоПоставляемое,
                       |	СУММА(ЕСТЬNULL(ВТ_ДанныеORDER.КоличествоЗаказанное, 0)) КАК КоличествоЗаказанное
                       |ПОМЕСТИТЬ СгруппированныеТовары
                       |ИЗ
                       |	ВТ_ДанныеORDER КАК ВТ_ДанныеORDER
                       |		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЗаказаПокупателя КАК ВтДанныеЗаказаПокупателя
                       |		ПО ВТ_ДанныеORDER.ЗаказПокупателя = ВтДанныеЗаказаПокупателя.Ссылка
                       |			И ВТ_ДанныеORDER.Номенклатура = ВтДанныеЗаказаПокупателя.Номенклатура
                       |
                       |СГРУППИРОВАТЬ ПО
                       |	ВТ_ДанныеORDER.ЗаказПокупателя,
                       |	ВТ_ДанныеORDER.Номенклатура
                       |;
                       |
                       |////////////////////////////////////////////////////////////////////////////////
                       |ВЫБРАТЬ
                       |	СгруппированныеТовары.ЗаказПокупателя КАК Ссылка,
                       |	МАКСИМУМ(ВЫБОР
                       |			КОГДА СгруппированныеТовары.КоличествоЗаказанное &lt;&gt; СгруппированныеТовары.КоличествоПоставляемое
                       |				ТОГДА ИСТИНА
                       |			ИНАЧЕ ЛОЖЬ
                       |		КОНЕЦ) КАК ЕстьРасхождения
                       |ИЗ
                       |	СгруппированныеТовары КАК СгруппированныеТовары
                       |
                       |СГРУППИРОВАТЬ ПО
                       |	СгруппированныеТовары.ЗаказПокупателя";    

ЗапросТабЧасть.УстановитьПараметр("ДанныеORDER", ДанныеORDER);

РезультатЗапроса		= ЗапросТабЧасть.Выполнить();
РасхождениеИсточник 	= РезультатЗапроса.Выгрузить();

РасхождениеИсточник.Индексы.Добавить("Ссылка");

EDIINTERCHANGEID = 0;

Удалить = Новый Массив;
ТекущийЗаказ = Неопределено;

Для Каждого Строка Из Результат Цикл

	Если ТекущийЗаказ = Строка.Ссылка Тогда
		Удалить.Добавить(Строка); // Сохраняем для дальнейшего удаления строку ТЗ, так как это задублированный заказ
		Продолжить;
	Иначе
		ТекущийЗаказ = Строка.Ссылка;
	КонецЕсли;
	
    НайденнаяСтрока = РасхождениеИсточник.Найти(Строка.Ссылка, "Ссылка");
	
	Если НайденнаяСтрока.ЕстьРасхождения Тогда
		Строка.ACTION = "4"; // Есть расхождения
	КонецЕсли;
	
	Строка.DATE	= Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd");
	Строка.TIME = Формат(ТекущаяДата(), "ДФ=HH:mm");
	
	EDIINTERCHANGEID 		= НовыйНомерТранзакции(EDIINTERCHANGEID);
	Строка.EDIINTERCHANGEID = Формат(EDIINTERCHANGEID, "ЧГ=0");
	
	Строка.EDIMESSAGE       = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс000") + "-OUT-" + Строка.EDIINTERCHANGEID;
	Строка.ФайлИмя          = "ORDRSP" + "_" + Строка.EDIMESSAGE + ".xml";
	Строка.Идентификатор    = "ORDRSP" + "_" + Строка.EDIMESSAGE; 
	
	Если Строка.ДеталиТраспорта &lt;&gt; Неопределено Тогда		
		Строка.LIMES = Строка.ДеталиТраспорта.Получить();		
	КонецЕсли;

КонецЦикла;

Для Каждого Строка Из Удалить Цикл
	Результат.Удалить(Строка);
КонецЦикла;

#КонецОбласти
 
#Область ТАБЛИЦА_Заполнение   

ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
                          |	ДанныеТЧНоменклатурORDER.ЗаказПокупателя КАК Ссылка,
                          |	ДанныеТЧНоменклатурORDER.POSITIONNUMBER КАК POSITIONNUMBER,
                          |	ДанныеТЧНоменклатурORDER.PRICE КАК PRICE,
                          |	ДанныеТЧНоменклатурORDER.VAT КАК VAT,
                          |	ДанныеТЧНоменклатурORDER.PRICEWITHVAT КАК PRICEWITHVAT,
                          |	ДанныеТЧНоменклатурORDER.Номенклатура КАК Номенклатура,
                          |	ДанныеТЧНоменклатурORDER.ORDRSPUNIT КАК ORDRSPUNIT,
                          |	ДанныеТЧНоменклатурORDER.КоличествоЗаказанное КАК КоличествоЗаказанное,
                          |	ДанныеТЧНоменклатурORDER.КоличествоВУпаковке КАК КоличествоВУпаковке,
                          |	ДанныеТЧНоменклатурORDER.DESCRIPTION КАК DESCRIPTION,
                          |	ДанныеТЧНоменклатурORDER.PRODUCT КАК PRODUCT,
                          |	ДанныеТЧНоменклатурORDER.PRODUCTIDBUYER КАК PRODUCTIDBUYER,
                          |	ДанныеТЧНоменклатурORDER.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER,
                          |	ДанныеТЧНоменклатурORDER.CALIBRE КАК CALIBRE,
                          |	ДанныеТЧНоменклатурORDER.REASONDECREACEQUANTITY КАК REASONDECREACEQUANTITY,
                          |	ДанныеТЧНоменклатурORDER.ХЗ_PACKING КАК ХЗ_PACKING,
                          |	ДанныеТЧНоменклатурORDER.ФорматУПД КАК ФорматУПД
                          |ПОМЕСТИТЬ ВТ_НоменклатураORDER
                          |ИЗ
                          |	&amp;ДанныеТЧНоменклатурORDER КАК ДанныеТЧНоменклатурORDER
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ЗаказПокупателяТовары.Ссылка,
                          |	ЗаказПокупателяТовары.Номенклатура,
                          |	ЗаказПокупателяТовары.Количество
                          |ПОМЕСТИТЬ ВТ_ДанныеЗаказа
                          |ИЗ
                          |	ВТ_НоменклатураORDER КАК ВТ_НоменклатураORDER
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Товары КАК ЗаказПокупателяТовары
                          |		ПО ВТ_НоменклатураORDER.Ссылка = ЗаказПокупателяТовары.Ссылка
						  |		И ВТ_НоменклатураORDER.Номенклатура = ЗаказПокупателяТовары.Номенклатура
                          |
                          |ОБЪЕДИНИТЬ ВСЕ
                          |
                          |ВЫБРАТЬ
                          |	ЗаказПокупателяУслуги.Ссылка,
                          |	ЗаказПокупателяУслуги.Номенклатура,
                          |	ЗаказПокупателяУслуги.Количество
                          |ИЗ
                          |	ВТ_НоменклатураORDER КАК ВТ_НоменклатураORDER
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПокупателя.Услуги КАК ЗаказПокупателяУслуги
                          |		ПО ВТ_НоменклатураORDER.Ссылка = ЗаказПокупателяУслуги.Ссылка
						  |		И ВТ_НоменклатураORDER.Номенклатура = ЗаказПокупателяУслуги.Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ВТ_НоменклатураORDER.Ссылка КАК Ссылка,
                          |	ВТ_НоменклатураORDER.POSITIONNUMBER КАК POSITIONNUMBER,
                          |	ВТ_НоменклатураORDER.PRICE КАК PRICE,
                          |	ВТ_НоменклатураORDER.VAT КАК VAT,
                          |	ВТ_НоменклатураORDER.PRICEWITHVAT КАК PRICEWITHVAT,
                          |	ВТ_НоменклатураORDER.ORDRSPUNIT КАК ORDRSPUNIT,
                          |	ВТ_НоменклатураORDER.КоличествоЗаказанное КАК КоличествоЗаказанное,
                          |	ВТ_НоменклатураORDER.КоличествоВУпаковке КАК КоличествоВУпаковке,                          
						  |	ВЫБОР
                          |		КОГДА ВТ_НоменклатураORDER.DESCRIPTION = """"
                          |			ТОГДА ДанныеЗаказа.Номенклатура.Представление
                          |		ИНАЧЕ ВТ_НоменклатураORDER.DESCRIPTION
                          |	КОНЕЦ КАК DESCRIPTION,
                          |	ВТ_НоменклатураORDER.PRODUCT КАК PRODUCT,
                          |	ВТ_НоменклатураORDER.PRODUCTIDBUYER КАК PRODUCTIDBUYER,
                          |	ВТ_НоменклатураORDER.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER,
                          |	ВТ_НоменклатураORDER.CALIBRE КАК CALIBRE,
                          |	ВТ_НоменклатураORDER.REASONDECREACEQUANTITY КАК REASONDECREACEQUANTITY,
                          |	ВТ_НоменклатураORDER.ХЗ_PACKING КАК ХЗ_PACKING,
                          |	ВТ_НоменклатураORDER.ФорматУПД КАК ФорматУПД,
                          |	ЕСТЬNULL(ДанныеЗаказа.Количество, 0) КАК КоличествоПоставляемое
                          |ПОМЕСТИТЬ ВТ_НоменклатураЗаказ
                          |ИЗ
                          |	ВТ_НоменклатураORDER КАК ВТ_НоменклатураORDER
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеЗаказа КАК ДанныеЗаказа
                          |		ПО ВТ_НоменклатураORDER.Ссылка = ДанныеЗаказа.Ссылка
                          |			И ВТ_НоменклатураORDER.Номенклатура = ДанныеЗаказа.Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ВТ_НоменклатураЗаказ.Ссылка КАК Ссылка,
                          |	ВТ_НоменклатураЗаказ.POSITIONNUMBER КАК POSITIONNUMBER,
                          |	ВТ_НоменклатураЗаказ.PRICE КАК ЦенаБезНДС,
                          |	ВТ_НоменклатураЗаказ.VAT КАК VAT,
                          |	ВТ_НоменклатураЗаказ.PRICEWITHVAT КАК ЦенаСНДС,
                          |	ВТ_НоменклатураЗаказ.ORDRSPUNIT КАК ORDRSPUNIT,
                          |	ВТ_НоменклатураЗаказ.КоличествоЗаказанное КАК КоличествоЗаказанное,
                          |	ВТ_НоменклатураЗаказ.КоличествоВУпаковке КАК КоличествоВУпаковке,
                          |	ВТ_НоменклатураЗаказ.DESCRIPTION КАК DESCRIPTION,
                          |	ВТ_НоменклатураЗаказ.PRODUCT КАК PRODUCT,
                          |	ВТ_НоменклатураЗаказ.PRODUCTIDBUYER КАК PRODUCTIDBUYER,
                          |	ВТ_НоменклатураЗаказ.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER,
                          |	ВТ_НоменклатураЗаказ.CALIBRE КАК CALIBRE,
                          |	ВТ_НоменклатураЗаказ.REASONDECREACEQUANTITY КАК REASONDECREACEQUANTITY,
                          |	ВТ_НоменклатураЗаказ.ХЗ_PACKING КАК ХЗ_PACKING,
                          |	ВТ_НоменклатураЗаказ.ФорматУПД КАК ФорматУПД,
                          |	ВТ_НоменклатураЗаказ.КоличествоПоставляемое КАК КоличествоПоставляемое,
                          |	ВЫБОР
                          |		КОГДА ВТ_НоменклатураЗаказ.КоличествоЗаказанное = ВТ_НоменклатураЗаказ.КоличествоПоставляемое
                          |			ТОГДА ""1""
                          |		КОГДА ВТ_НоменклатураЗаказ.КоличествоПоставляемое = 0
                          |			ТОГДА ""3""
                          |		ИНАЧЕ ""2""
                          |	КОНЕЦ КАК PRODUCTTYPE,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК PRICE,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК PRICEWITHVAT,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ORDEREDQUANTITY,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ACCEPTEDQUANTITY,
                          |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК QUANTITYOFCUINTU
                          |ИЗ
                          |	ВТ_НоменклатураЗаказ КАК ВТ_НоменклатураЗаказ";

ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурORDER", ДанныеТЧНоменклатурORDER);

РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить();
РезультатНоменклатур = РезультатЗапросаНоменклатур.Выгрузить();

РезультатНоменклатур.Колонки.Добавить("PACKING", Новый ОписаниеТипов("Массив"));

// Список для преобразования числа в строку: Значение – реквизит в результате; Представление - путь, где хранится число;
// Пометка при Истина округляет число до 3х знаков после запятой, а Ложь - 2х.
ЧислоВСтроку = Новый СписокЗначений;
ЧислоВСтроку.Добавить("QUANTITYOFCUINTU"	, "СтрокаНоменклатуры.КоличествоВУпаковке"		, Истина);
ЧислоВСтроку.Добавить("PRICE"				, "СтрокаНоменклатуры.ЦенаБезНДС");
ЧислоВСтроку.Добавить("PRICEWITHVAT"		, "СтрокаНоменклатуры.ЦенаСНДС");

Для Каждого СтрокаНоменклатуры Из РезультатНоменклатур Цикл
	
	ArrayPACKING = СтрокаНоменклатуры.ХЗ_PACKING.Получить();
	СтрокаНоменклатуры.PACKING = ?(ArrayPACKING &lt;&gt; Неопределено, ArrayPACKING, Новый Массив);
	
	// Преобразование числа в строку и заполнение значения.
    Для Каждого ЗаписьЧислоВСтроку Из ЧислоВСтроку Цикл
        
        ЗначениеЧисла = Вычислить(ЗаписьЧислоВСтроку.Представление);
    
        Если ЗначениеЧисла = 0 Тогда
			Продолжить;
		КонецЕсли;

        ЗначениеСтрокой = Формат(ЗначениеЧисла, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");
        
        Если НЕ ЗаписьЧислоВСтроку.Пометка Тогда
            ЗначениеСтрокой = Формат(ЗначениеЧисла, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
        КонецЕсли;
        
        СтрокаНоменклатуры[ЗаписьЧислоВСтроку.Значение] = ЗначениеСтрокой;
    
    КонецЦикла;
	
	СтрокаНоменклатуры.ORDEREDQUANTITY  = Формат(СтрокаНоменклатуры.КоличествоЗаказанное, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");
	СтрокаНоменклатуры.ACCEPTEDQUANTITY = Формат(СтрокаНоменклатуры.КоличествоПоставляемое, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");
	
КонецЦикла;
#КонецОбласти

#Область СОЗДАНИЕ_XML 
ОбязательныеКолонки = Новый СписокЗначений;

//ORDRSP
ОбязательныеКолонки.Добавить("NUMBER"		, "NUMBER"			, Истина);
ОбязательныеКолонки.Добавить("DATE"			, "DATE" 			, Истина);
ОбязательныеКолонки.Добавить("ORDERNUMBER"	, "ORDERNUMBER" 	, Истина);
ОбязательныеКолонки.Добавить("ORDERDATE"	, "ORDERDATE" 		, Истина);
ОбязательныеКолонки.Добавить("DELIVERYDATE"	, "DELIVERYDATE" 	, Истина);

//HEAD
ОбязательныеКолонки.Добавить("SUPPLIER"			, "SUPPLIER"		, Истина);
ОбязательныеКолонки.Добавить("BUYER"			, "BUYER"			, Истина);
ОбязательныеКолонки.Добавить("RECIPIENT"		, "RECIPIENT"		, Истина);
ОбязательныеКолонки.Добавить("DELIVERYPLACE"	, "DELIVERYPLACE"	, Истина);
ОбязательныеКолонки.Добавить("SENDER"			, "SENDER"			, Истина);

//POSITION
ОбязательныеКолонки.Добавить("POSITIONNUMBER"	, "POSITIONNUMBER"		, Истина);
ОбязательныеКолонки.Добавить("PRODUCT"			, "PRODUCT"				, Истина);
ОбязательныеКолонки.Добавить("PRODUCTIDBUYER"	, "PRODUCTIDBUYER"		, Истина);
ОбязательныеКолонки.Добавить("DESCRIPTION"		, "DESCRIPTION"			, Истина);
ОбязательныеКолонки.Добавить("ORDEREDQUANTITY"	, "ORDEREDQUANTITY"		, Истина);
ОбязательныеКолонки.Добавить("ACCEPTEDQUANTITY"	, "ACCEPTEDQUANTITY"	, Истина);

МассивСтруктурИсходящих = Новый Массив;

//Структура свойств шапки документа
СтруктураШапка = Новый Структура("NUMBER, DATE, ORDERNUMBER, ORDERDATE, TIME, DELIVERYDATE, 
								| DELIVERYTIME, CAMPAIGNNUMBER, DOCTYPE, FRESH, CURRENCY, 
								| REASONDECREACEQUANTITYALL, ACTION, PROMO, LIMES, INFO, HEAD");
									
//Структура свойств элемента HEAD
СтруктураHEAD = Новый Структура("SUPPLIER, BUYER, DELIVERYPLACE, SENDER, RECIPIENT, EDIINTERCHANGEID, EDIMESSAGE, POSITION");	

//Имена свойств элемента POSITION
СвойстваPOSITION = "POSITIONNUMBER, PRODUCT,  PRODUCTIDBUYER, PRODUCTIDSUPPLIER, ORDEREDQUANTITY, 
					| ACCEPTEDQUANTITY, QUANTITYOFCUINTU, ORDRSPUNIT, DESCRIPTION, PRICE, PRICEWITHVAT,  
					| VAT, PRODUCTTYPE, REASONDECREACEQUANTITY, CALIBRE, PACKING, INFO"; 

Для каждого СтрокаШапкиДокумента из Результат Цикл
	
	ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";  
	
	СтруктураДок = Новый Структура("ORDRSP");
	
	СтруктураДок.ORDRSP = СтруктураШапка;
	СтруктураШапка.HEAD = СтруктураHEAD;
	
	//Заполнение значений свойств шапки документа
	ЗаполнитьЗначенияСвойств(СтруктураШапка, СтрокаШапкиДокумента);
	
	//Заполнение значений свойств элемента HEAD
	ЗаполнитьЗначенияСвойств(СтруктураHEAD, СтрокаШапкиДокумента);
	
	МассивPOSITION = Новый Массив;
	
	ОтборСтрокНоменклатур = Новый Структура;
	ОтборСтрокНоменклатур.Вставить("Ссылка", СтрокаШапкиДокумента.Ссылка);
	
	СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);
	
	Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
		
		//Создание структуры POSITION
		Структура = Новый Структура(СвойстваPOSITION);
		
		//Заполнение значений свойств элемента POSITION
		ЗаполнитьЗначенияСвойств(Структура, СтрокаНоменклатурыДокумента);
		
		МассивPOSITION.Добавить(Структура);
	КонецЦикла;
	
	СтруктураHEAD.POSITION = МассивPOSITION;
	
	//Создание XML строки
	XMLДокумент        	= Новый ЗаписьXML;		
	ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб); 
	XMLДокумент.УстановитьСтроку("UTF-8");
	XMLДокумент.ЗаписатьОбъявлениеXML();
	
	Для каждого СтрокаЭлемента Из СтруктураДок Цикл
		ЗаписатьБлоки(XMLДокумент, СтрокаЭлемента, ОбязательныеКолонки, ТекстСообщенияПроверкиЗаполненияОбязательныхПолей);
	КонецЦикла;	
	
	СтрокаXML = XMLДокумент.Закрыть(); 
	
	Если ЗначениеЗаполнено(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей) Тогда
		
		ТекстЛогаСобытий = ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + "Документ был пропущен.";
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		
		Продолжить;	
	Иначе	
		
		СтруктураФайлаДанных = Новый Структура;
		СтруктураФайлаДанных.Вставить("ВидДокумента"			, "ORDRSP_Исходящий");
		СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
		СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
		СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
		СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "UTF-8");
		СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
		СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
		СтруктураФайлаДанных.Вставить("Сообщение"				, "");
		СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
		СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
		СтруктураФайлаДанных.Вставить("ТипФайла"				, СтрокаШапкиДокумента.ВидДокумента);
		
		МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
		
	КонецЕсли;
	
КонецЦикла;

#КонецОбласти

//Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Возврат МассивСтруктурИсходящих;</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">8</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<presentation>СписокЗаказыВходящиеПоставщик</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Исходящий ORDRSP</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ИсходящийORDRSP</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПередаватьТекстПричины</value>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>ORDRSP_Исходящий</presentation>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>Заказ_Входящий</presentation>
				<id xsi:type="xs:decimal">7</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Нет</presentation>
				<id xsi:type="xs:decimal">8</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string">ТекстЗапроса =  "ВЫБРАТЬ
                |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                |	DR_События.Документ КАК Документ,
                |	DR_События.Идентификатор КАК Идентификатор
                |ПОМЕСТИТЬ ВТ_ЗАКАЗЫ
                |ИЗ
                |	РегистрСведений.DR_События КАК DR_События
                |ГДЕ
                |	DR_События.ВидДокумента = ""Заказ_Входящий""
                |	И DR_События.Статус &lt;&gt; ""Архивный""
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ
                |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                |	DR_События.ИдентификаторОснования КАК ИдентификаторОснования,
                |	DR_События.Документ КАК Документ,
                |	МАКСИМУМ(DR_События.ДатаЗаписи) КАК ДатаЗаписи
                |ПОМЕСТИТЬ ВТ_ORDRSP
                |ИЗ
                |	РегистрСведений.DR_События КАК DR_События
                |ГДЕ
                |	DR_События.ВидДокумента = ""ORDRSP_Исходящий""
                |
                |СГРУППИРОВАТЬ ПО
                |	DR_События.ИдентификаторЦепочки,
                |	DR_События.ИдентификаторОснования,
                |	DR_События.Документ
                |;
                |
                |////////////////////////////////////////////////////////////////////////////////
                |ВЫБРАТЬ ПЕРВЫЕ 2
                |	ВТ_ЗАКАЗЫ.Документ КАК Документ,
                |	""ORDRSP_Исходящий"" КАК ВидДокумента,
                |	"""" КАК СтатусОбработкиДокумента
                |ИЗ
                |	ВТ_ЗАКАЗЫ КАК ВТ_ЗАКАЗЫ
                |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ORDRSP КАК ВТ_ORDRSP
                |		ПО ВТ_ЗАКАЗЫ.ИдентификаторЦепочки = ВТ_ORDRSP.ИдентификаторЦепочки
                |			И ВТ_ЗАКАЗЫ.Идентификатор = ВТ_ORDRSP.ИдентификаторОснования
                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
                |		ПО ВТ_ЗАКАЗЫ.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки
                |ГДЕ
                |	ВТ_ЗАКАЗЫ.Документ.Проведен
                |	И ВТ_ORDRSP.ИдентификаторЦепочки ЕСТЬ NULL
                |
                |УПОРЯДОЧИТЬ ПО
                |	DR_ЦепочкиДокументов.ДатаЗаказа УБЫВ";</value>
				<presentation>ТекстЗапроса</presentation>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
	</row>
</ValueTree>