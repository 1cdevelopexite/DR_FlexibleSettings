<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий DP_PRANNUL_22 Покупатель</Value>
		<Value xsi:type="xs:string">ИмяСобытия = "Формирование DP_PRANNUL_22"; 
МассивСтруктурИсходящих = Новый Массив;

///ТексАн 
Если ЗначениеЗаполнено(ТекстАн) Тогда
	ТекстСообщения = ТекстАн;
Иначе 
	ТекстЛогаСобытий = "Не найден текст аннулирования, обработка была прервана.";
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);		
	Перейти ~Выход;
КонецЕсли;

Если Источник.Количество() = 0 Тогда 
	ТекстЛогаСобытий = "Новые документы для обработки отсутствуют.";
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Информация", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
	
	Перейти ~Выход;
КонецЕсли;  

///МЧД
ЗапросМЧД = Новый Запрос;
ЗапросМЧД.Текст = ТекстЗапроса_МЧД_ПоОрганизациям();
ЗапросМЧД.УстановитьПараметр("ЭтоРегламентноеЗадание", ЭтоРегламентноеЗадание); 
ЗапросМЧД.УстановитьПараметр("Пользователь", НайтиТекущегоПользователя()); 
ЗапросМЧД.УстановитьПараметр("ТекущаяДата", ТекущаяДата()); 
ТаблицаМЧД = ЗапросМЧД.Выполнить().Выгрузить();

#Область ЗапросИВсеТакое

ПериодСвязиДокументов = DR_EDI_ОбщегоНазначения.Настройка_Параметр_Прочитать("EDI_ПериодСвязиДокументов");	

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	ТаблицаМЧД.Организация КАК Организация,
|	ТаблицаМЧД.Сертификат КАК Сертификат,
|	ТаблицаМЧД.СертификатИНН КАК СертификатИНН,
|	ТаблицаМЧД.СертификатНаСервере КАК СертификатНаСервере,
|	ТаблицаМЧД.ДолжностьПодписанта КАК ДолжностьПодписанта,
|	ТаблицаМЧД.ФамилияПодписанта КАК ФамилияПодписанта,
|	ТаблицаМЧД.ИмяПодписанта КАК ИмяПодписанта,
|	ТаблицаМЧД.ОтчествоПодписанта КАК ОтчествоПодписанта,
|	ТаблицаМЧД.ОбластьПолномочий КАК ОбластьПолномочий,
|	ТаблицаМЧД.ОснованиеПолномочий КАК ОснованиеПолномочий,
|	ТаблицаМЧД.СтатусПодписанта КАК СтатусПодписанта,
|	ТаблицаМЧД.Организация_ПоддерживаетМЧД КАК Организация_ПоддерживаетМЧД,
|	ТаблицаМЧД.ТипСертификата КАК ТипСертификата,
|	ТаблицаМЧД.МЧД_Актуальна КАК МЧД_Актуальна
|ПОМЕСТИТЬ ВТ_DR_МЧД
|ИЗ
|	&amp;ТаблицаМЧД КАК ТаблицаМЧД
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗЛИЧНЫЕ
|	DR_Настройки.Ссылка КАК Ссылка,
|	ВТ_ФорматУПД.Значение КАК ФорматУПД,
|	ВТ_АннулированиеБезЗавершенияЦепочки.Значение КАК АннулированиеБезЗавершенияЦепочки
|ПОМЕСТИТЬ ВТ_ИнфоПоля
|ИЗ
|	Справочник.DR_Настройки КАК DR_Настройки
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ВТ_ФорматУПД
|		ПО DR_Настройки.Ссылка = ВТ_ФорматУПД.Ссылка
|			И (ВТ_ФорматУПД.Реквизит = ""ФорматУПД"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ВТ_АннулированиеБезЗавершенияЦепочки
|		ПО DR_Настройки.Ссылка = ВТ_АннулированиеБезЗавершенияЦепочки.Ссылка
|			И (ВТ_АннулированиеБезЗавершенияЦепочки.Реквизит = ""АннулированиеБезЗавершенияЦепочки"")
|ГДЕ
|	DR_Настройки.ВидНастройки = ""ИнфоПоля""
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	DR_СобытияЮЗД.Документ КАК Ссылка,
|	""DP_PRANNUL_22_Исходящий"" КАК ВидДокумента,
|	DR_ЦепочкиДокументов.ДатаЗаказа КАК ЗаказДата,
|	DR_ЦепочкиДокументов.НомерЗаказа КАК ЗаказНомер,
|	DR_СобытияЮЗД.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
|	DR_СобытияЮЗД.ИдентификаторОснования КАК ИдентификаторОснование,
|	DR_ЦепочкиДокументов.Контрагент КАК Контрагент,
|	DR_ЦепочкиДокументов.Организация КАК Организация,
|	""Отправлен"" КАК Статус,
|	DR_GLN_Контрагент.Ид_ОЭД КАК ИдКонтрагента,
|	DR_GLN_Организация.Ид_ОЭД КАК ИдОрганизации,
|	DR_ЦепочкиДокументов.Контрагент.ИНН КАК КонтрагентИНН,
|	DR_ЦепочкиДокументов.Контрагент.КПП КАК КонтрагентКПП,
|	DR_ЦепочкиДокументов.Контрагент.Наименование КАК КонтрагентНаименование,
|	DR_ЦепочкиДокументов.Организация.ИНН КАК ОрганизацияИНН,
|	DR_ЦепочкиДокументов.Организация.КПП КАК ОрганизацияКПП,
|	DR_ЦепочкиДокументов.Организация.Наименование КАК ОрганизацияНаименование,
|	ВЫБОР
|		КОГДА DR_GLN_Организация.ПоддерживаетМЧД = ИСТИНА
|				И DR_GLN_Контрагент.ПоддерживаетМЧД = ИСТИНА
|			ТОГДА DR_МЧД.Сертификат
|		ИНАЧЕ DR_GLN_Организация.Сертификат
|	КОНЕЦ КАК Сертификат,
|	ВЫБОР
|		КОГДА DR_GLN_Организация.ПоддерживаетМЧД = ИСТИНА
|				И DR_GLN_Контрагент.ПоддерживаетМЧД = ИСТИНА
|			ТОГДА DR_МЧД.СертификатНаСервере
|		ИНАЧЕ DR_СертификатНаСервере.Значение
|	КОНЕЦ КАК СертификатНаСервере,
|	ВЫБОР
|		КОГДА DR_GLN_Организация.ПоддерживаетМЧД = ИСТИНА
|				И DR_GLN_Контрагент.ПоддерживаетМЧД = ИСТИНА
|			ТОГДА DR_МЧД.ДолжностьПодписанта
|		ИНАЧЕ DR_ДолжностьПодписанта.Значение
|	КОНЕЦ КАК СертификатДолжностьПодписанта,
|	ВЫБОР
|		КОГДА DR_GLN_Организация.ПоддерживаетМЧД = ИСТИНА
|				И DR_GLN_Контрагент.ПоддерживаетМЧД = ИСТИНА
|			ТОГДА DR_МЧД.ФамилияПодписанта
|		ИНАЧЕ DR_ФамилияПодписанта.Значение
|	КОНЕЦ КАК СертификатФамилияПодписанта,
|	ВЫБОР
|		КОГДА DR_GLN_Организация.ПоддерживаетМЧД = ИСТИНА
|				И DR_GLN_Контрагент.ПоддерживаетМЧД = ИСТИНА
|			ТОГДА DR_МЧД.ИмяПодписанта
|		ИНАЧЕ DR_ИмяПодписанта.Значение
|	КОНЕЦ КАК СертификатИмяПодписанта,
|	ВЫБОР
|		КОГДА DR_GLN_Организация.ПоддерживаетМЧД = ИСТИНА
|				И DR_GLN_Контрагент.ПоддерживаетМЧД = ИСТИНА
|			ТОГДА DR_МЧД.ОтчествоПодписанта
|		ИНАЧЕ DR_ОтчествоПодписанта.Значение
|	КОНЕЦ КАК СертификатОтчествоПодписанта,
|	ВЫБОР
|		КОГДА НЕ DR_ИдФайл.Значение ЕСТЬ NULL
|			ТОГДА DR_ИдФайл.Значение
|		ИНАЧЕ DR_СобытияЮЗД.Идентификатор
|	КОНЕЦ КАК ИмяПоступившегоФайла,
|	DR_СобытияЮЗД.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
|	ВЫРАЗИТЬ(DR_СобытияЮЗД.Документ КАК Документ.DR_Документ).ДанныеЭЦП КАК ДанныеЭЦП,
|	Контр_Идентификатор.Значение КАК ИдОператораКонтрагента,
|	Орг_Идентификатор.Значение КАК ИдОператораОрганизации,
|	DR_ИнфоПоля.АннулированиеБезЗавершенияЦепочки КАК АннулированиеБезЗавершенияЦепочки,
|	ВЫБОР
|		КОГДА Титул_События.Идентификатор ЕСТЬ NULL
|			ТОГДА ЛОЖЬ
|		ИНАЧЕ ИСТИНА
|	КОНЕЦ КАК ДокуменоборотЗавершен,
|	DR_СобытияЮЗД.Идентификатор КАК ИдентификаторЮЗД,
|	DR_GLN_Организация.ПоддерживаетМЧД
|		И DR_GLN_Контрагент.ПоддерживаетМЧД
|		И DR_МЧД.ТипСертификата = 2 КАК ОтправитьМЧД,
|	DR_МЧД.МЧД_Актуальна КАК МЧД_Актуальна
|ИЗ
|	РегистрСведений.DR_События КАК DR_СобытияЮЗД
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
|		ПО DR_СобытияЮЗД.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки
|			И (РАЗНОСТЬДАТ(DR_ЦепочкиДокументов.ДатаЗаказа, DR_СобытияЮЗД.ДатаЗаписи, ДЕНЬ) МЕЖДУ 0 И &amp;ПериодСвязиДокументов)
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Организация
|		ПО (DR_ЦепочкиДокументов.Организация = DR_GLN_Организация.Объект)
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК Орг_Идентификатор
|		ПО (DR_GLN_Организация.Партнер = Орг_Идентификатор.Ссылка)
|			И (Орг_Идентификатор.Реквизит = ""Идентификатор"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_СертификатНаСервере
|		ПО (DR_GLN_Организация.Сертификат = DR_СертификатНаСервере.Ссылка)
|			И (DR_СертификатНаСервере.Реквизит = ""СертификатНаСервере"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ДолжностьПодписанта
|		ПО (DR_GLN_Организация.Сертификат = DR_ДолжностьПодписанта.Ссылка)
|			И (DR_ДолжностьПодписанта.Реквизит = ""ДолжностьПодписанта"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ФамилияПодписанта
|		ПО (DR_GLN_Организация.Сертификат = DR_ФамилияПодписанта.Ссылка)
|			И (DR_ФамилияПодписанта.Реквизит = ""ФамилияПодписанта"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ИмяПодписанта
|		ПО (DR_GLN_Организация.Сертификат = DR_ИмяПодписанта.Ссылка)
|			И (DR_ИмяПодписанта.Реквизит = ""ИмяПодписанта"")
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК DR_ОтчествоПодписанта
|		ПО (DR_GLN_Организация.Сертификат = DR_ОтчествоПодписанта.Ссылка)
|			И (DR_ОтчествоПодписанта.Реквизит = ""ОтчествоПодписанта"")
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК DR_GLN_Контрагент
|		ПО (DR_ЦепочкиДокументов.Контрагент = DR_GLN_Контрагент.Объект)
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК Контр_Идентификатор
|		ПО (DR_GLN_Контрагент.Партнер = Контр_Идентификатор.Ссылка)
|			И (Контр_Идентификатор.Реквизит = ""Идентификатор"")
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИнфоПоля КАК DR_ИнфоПоля
|		ПО (DR_GLN_Контрагент.Контрагент_ФорматЭСФ = DR_ИнфоПоля.ФорматУПД)
|			И (НЕ DR_ИнфоПоля.Ссылка.ПометкаУдаления)
|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_DR_МЧД КАК DR_МЧД
|		ПО (DR_ЦепочкиДокументов.Организация = DR_МЧД.Организация)
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Титул_События
|		ПО DR_СобытияЮЗД.ИдентификаторЦепочки = Титул_События.ИдентификаторЦепочки
|			И DR_СобытияЮЗД.Документ = Титул_События.Документ
|			И (Титул_События.ВидДокумента В (&amp;ВидыДокументовТитулИсходящий))
|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ИдФайл
|		ПО ((ВЫРАЗИТЬ(DR_СобытияЮЗД.Документ КАК Документ.DR_Документ)) = DR_ИдФайл.Ссылка)
|			И (DR_ИдФайл.Реквизит = ""ИдФайл"")
|ГДЕ
|	DR_СобытияЮЗД.Документ В(&amp;Документ)
|	И DR_СобытияЮЗД.ВидДокумента В(&amp;ВидыДокументовЮЗД)";
	
ВидыДокументовЮЗД = Новый Массив;

ВидыДокументовЮЗД.Добавить("ON_SCHFDOPPR_01");
ВидыДокументовЮЗД.Добавить("ON_SCHFDOPPR_01_Испр");

ВидыДокументовЮЗД.Добавить("ON_NSCHFDOPPR_01_Входящий");
ВидыДокументовЮЗД.Добавить("ON_NSCHFDOPPR_01_Испр_Входящий");

ВидыДокументовЮЗД.Добавить("ON_KORSCHFDOPPR_01");
ВидыДокументовЮЗД.Добавить("ON_KORSCHFDOPPR_01_Испр");

ВидыДокументовЮЗД.Добавить("ON_NKORSCHFDOPPR_01_Входящий");
ВидыДокументовЮЗД.Добавить("ON_NKORSCHFDOPPR_01_Испр_Входящий");

ВидыДокументовЮЗД.Добавить("ON_NSCHFDOPPRMARK_01_Входящий");
ВидыДокументовЮЗД.Добавить("ON_NSCHFDOPPRMARK_01_Испр_Входящий");

ВидыДокументовЮЗД.Добавить("ON_NKORSCHFDOPPRMARK_01_Входящий");
ВидыДокументовЮЗД.Добавить("ON_NKORSCHFDOPPRMARK_01_Испр_Входящий");

ВидыДокументовЮЗД.Добавить("ON_NSCHFDOPPRPROS_01_Входящий");
ВидыДокументовЮЗД.Добавить("ON_NSCHFDOPPRPROS_01_Испр_Входящий");

ВидыДокументовЮЗД.Добавить("ON_NKORSCHFDOPPRPROS_01_Входящий");
ВидыДокументовЮЗД.Добавить("ON_NKORSCHFDOPPRPROS_01_Испр_Входящий");

ВидыДокументовТитулИсходящий = Новый Массив;
ВидыДокументовТитулИсходящий.Добавить("ON_NSCHFDOPPOKMARK_11_Исходящий");
ВидыДокументовТитулИсходящий.Добавить("ON_NSCHFDOPPOKPROS_11_Исходящий");
ВидыДокументовТитулИсходящий.Добавить("ON_NSCHFDOPPOK_11_Исходящий");
ВидыДокументовТитулИсходящий.Добавить("ON_NKORSCHFDOPPOK_11_Исходящий");
ВидыДокументовТитулИсходящий.Добавить("ON_NKORSCHFDOPPOKMARK_11_Исходящий");
ВидыДокументовТитулИсходящий.Добавить("ON_NKORSCHFDOPPOKPROS_11_Исходящий"); 


Запрос.УстановитьПараметр("Документ"         , Источник);
Запрос.УстановитьПараметр("ВидыДокументовЮЗД", ВидыДокументовЮЗД);
Запрос.УстановитьПараметр("ВидыДокументовТитулИсходящий", ВидыДокументовТитулИсходящий);
Запрос.УстановитьПараметр("ТаблицаМЧД", ТаблицаМЧД);
Запрос.УстановитьПараметр("ПериодСвязиДокументов", ПериодСвязиДокументов);

#КонецОбласти	

ВременныйКаталог = ПутьВременногоКаталогаЭКОМ("DP_PRANNUL_out");
КаталогВременный = ЭКОМ_СоздатьКаталогПроверитьНаЗапись(ВременныйКаталог, МассивЛогаСобытий);	
Если КаталогВременный = Неопределено Тогда		
	ТекстЛогаСобытий = "Не удалось создать временный каталог, обработка была прервана.";
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);		
	Перейти ~Выход;		
КонецЕсли;

Результат = Запрос.Выполнить();
Если Результат.Пустой() Тогда
	ТекстЛогаСобытий = "Уточнение не сформировано! Возможно уточнение уже отправлено или документ подписан ранее.";
	ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
	МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);

Иначе	
	ВыборкаДок 			= Результат.Выбрать();
	СтруктураМетаДанных = ЮрФизЛицоОпределитьМетаданные();
	
	Пока ВыборкаДок.Следующий() Цикл
		
		Если ВыборкаДок.АннулированиеБезЗавершенияЦепочки = Ложь
			И ВыборкаДок.ДокуменоборотЗавершен = Ложь Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документооборот не завершен! Аннулирование возможно только при завершеном документообороте.";
			Сообщение.Сообщить();
			
			Продолжить;
		КонецЕсли;
		
		НапрПредАн_ИдУчастЭДО = ВыборкаДок.ИдОператораКонтрагента + ВыборкаДок.ИдКонтрагента;
		УчастЭДО_ИдУчастЭДО   = ВыборкаДок.ИдОператораОрганизации + ВыборкаДок.ИдОрганизации;
		
		Если ВыборкаДок.ОтправитьМЧД = Истина И (НЕ ВыборкаДок.МЧД_Актуальна) Тогда
			ТекстЛогаСобытий = "Не определена МЧД для текущего пользователя по организации! - " + Строка(ВыборкаДок.Организация);			
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ВыборкаДок.Сертификат) Тогда	
			ТекстЛогаСобытий = "Не найден сертификат\мчд по организации " + Строка(ВыборкаДок.Организация) 
				+ ", необходимо проверить настройки в карточке организации.";
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
			
			Продолжить;
		КонецЕсли; 
					
		Если НЕ ЗначениеЗаполнено(ВыборкаДок.ИдОператораОрганизации) Тогда		
			ТекстЛогаСобытий = "Нет данных по организации! - " + Строка(ВыборкаДок.Организация);
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);

			Продолжить;			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДок.ИдОператораКонтрагента) Тогда
			ТекстЛогаСобытий = "Нет данных по контрагенту! - " + Строка(ВыборкаДок.Контрагент 
				+ ". ЭКОМ Документ № " + СокрЛП(ВыборкаДок.Номер) + " от " + ВыборкаДок.Дата); //Docrobot 1.19.0 MOD-1511 [Вывод документа, т.к. возникла ситуация, когда контрагент был пустой]
			ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
			МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);

			Продолжить;
		КонецЕсли;
					
		// Получаю из хранилища двоичные данные подписи и структуру файла
		ЭЦПАнФайл = Неопределено;
		Если ЗначениеЗаполнено(ВыборкаДок.ДанныеЭЦП) Тогда
			ЭЦПАнФайл = ВыборкаДок.ДанныеЭЦП.Получить();
		ИначеЕсли ЗначениеЗаполнено(ВыборкаДок.ДополнительнаяИнформация) Тогда
			ДополнительнаяИнформация = ВыборкаДок.ДополнительнаяИнформация.Получить();
			Если ТипЗнч(ДополнительнаяИнформация) = Тип("Структура") Тогда
				Если ДополнительнаяИнформация.Свойство("ЭЦП") Тогда 
					ЭЦПАнФайл = ДополнительнаяИнформация.ЭЦП;
					Если ТипЗнч(ЭЦПАнФайл) = Тип("ХранилищеЗначения") Тогда 
						ЭЦПАнФайл = ЭЦПАнФайл.Получить();
					КонецЕсли;
					Если ТипЗнч(ЭЦПАнФайл) = Тип("ДвоичныеДанные") Тогда
						СтрокаBase64 = Base64Строка(ЭЦПАнФайл);
						СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ПС, "");
						СтрокаBase64 = СтрЗаменить(СтрокаBase64, Символы.ВК, "");
						ЭЦПАнФайл = СтрокаBase64;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Нет данных по ЭЦП для документа - " + ВыборкаДок.ИмяПоступившегоФайла  + " аннулирование отправлено не будет!";
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
		КонецЕсли;
					
		ПредставлениеДок = "Документ (" + СокрЛП(ВыборкаДок.ВидДокумента) 
		//+ ") № " + СокрЛП(ВыборкаДок.Номер) + " от " + ВыборкаДок.Дата
		;
		
		СтруктураДокумента = Новый Структура;	
		
		Если НЕ ЗначениеЗаполнено(УчастЭДО_ИдУчастЭДО) Тогда
			Сообщить("Не заполнен Ид_ОЭД для организации &lt;" + СокрЛП(ВыборкаДок.Организация.Наименование) + "&gt; для документа " + ПредставлениеДок + "!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НапрПредАн_ИдУчастЭДО) Тогда
			Сообщить("Не заполнен Ид_ОЭД для контрагента &lt;" + СокрЛП(ВыборкаДок.Контрагент.Наименование) + "&gt; для документа " + ПредставлениеДок + "!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ЭтоЮрЛицоКонтрагент = ЮрФизЛицоОпределитьТипОбъекта(ВыборкаДок.Контрагент, СтруктураМетаДанных.ИмяРеквизитаКонтрагента, СтруктураМетаДанных.ПеречислениеЮрЛицо);
		
		ЭтаОрганизацияЮрЛицо = ЭтаОрганизацияФизЛицоИлиИП(ВыборкаДок.Организация);
		
		Идентификатор = Новый УникальныйИдентификатор;
					
		ИдФайл = "DP_PRANNUL_"
		+ НапрПредАн_ИдУчастЭДО + "_"
		+ УчастЭДО_ИдУчастЭДО + "_"
		+ Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_"
		+ Строка(Идентификатор);

		
		СтруктураДокумента = Новый Структура;
		СтруктураДокумента.Вставить("ИдФайл"           , ИдФайл); 
		СтруктураДокумента.Вставить("ИдОтпр"           , УчастЭДО_ИдУчастЭДО); 
		СтруктураДокумента.Вставить("ИдПок"            , НапрПредАн_ИдУчастЭДО);
		
		Если ЭтоЮрЛицоКонтрагент Тогда
			
			СтруктураДокумента.Вставить("ТипПолучателя", 	"ЮЛ");
			СтруктураДокумента.Вставить("ПоставщикНаимОрг", СокрЛП(ВыборкаДок.Контрагент.Наименование)); 
			СтруктураДокумента.Вставить("ПоставщикИННЮЛ", 	СокрЛП(ВыборкаДок.Контрагент.ИНН));     
			СтруктураДокумента.Вставить("ПоставщикКПП",		СокрЛП(ВыборкаДок.Контрагент.КПП));
			
		Иначе
			
			СтруктураДокумента.Вставить("ТипПолучателя", 	"ФЛ");
			СтруктураДокумента.Вставить("ПоставщикИННФЛ", 	СокрЛП(ВыборкаДок.Контрагент.ИНН));
			СтруктураДокумента.Вставить("ПоставщикФамилияФЛ", "");
			СтруктураДокумента.Вставить("ПоставщикИмяФЛ", 	"");
			СтруктураДокумента.Вставить("ПоставщикОтчествоФЛ", "");
			
			НаименованиеФЛ = ВыборкаДок.Контрагент.Наименование;
			Если Найти(ВРег(НаименованиеФЛ), "ИП ") = 1 Тогда
				НаименованиеФЛ = Прав(НаименованиеФЛ, СтрДлина(НаименованиеФЛ) - 3);
			КонецЕсли;
			
			МассивИмяФЛ = Эком_РазложитьСтрокуВМассивПодстрок(НаименованиеФЛ, " ");
			
			Если МассивИмяФЛ.Количество() 		&gt;= 3 Тогда
				СтруктураДокумента.ПоставщикФамилияФЛ 	= СокрЛП(МассивИмяФЛ.Получить(0));
				СтруктураДокумента.ПоставщикИмяФЛ 		= СокрЛП(МассивИмяФЛ.Получить(1));
				СтруктураДокумента.ПоставщикОтчествоФЛ 	= СокрЛП(МассивИмяФЛ.Получить(2));
			ИначеЕсли МассивИмяФЛ.Количество() 	= 2 Тогда
				СтруктураДокумента.ПоставщикФамилияФЛ 	= СокрЛП(МассивИмяФЛ.Получить(0));
				СтруктураДокумента.ПоставщикИмяФЛ 		= СокрЛП(МассивИмяФЛ.Получить(1));
			ИначеЕсли МассивИмяФЛ.Количество() 	= 1 Тогда
				СтруктураДокумента.ПоставщикФамилияФЛ 	= СокрЛП(МассивИмяФЛ.Получить(0));
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтаОрганизацияЮрЛицо Тогда
			
			СтруктураДокумента.Вставить("ТипОтправителя", "ЮЛ");	
			СтруктураДокумента.Вставить("ПлательщикНаимОрг", СокрЛП(ВыборкаДок.Организация.Наименование)); 
			СтруктураДокумента.Вставить("ПлательщикИННЮЛ"  , СокрЛП(ВыборкаДок.Организация.ИНН)); 	
			СтруктураДокумента.Вставить("ПлательщикКПП"    , СокрЛП(ВыборкаДок.Организация.КПП)); 
			
		Иначе 
			
			СтруктураДокумента.Вставить("ТипОтправителя", 	"ФЛ");
			СтруктураДокумента.Вставить("ПокупательИННФЛ", 	СокрЛП(ВыборкаДок.Организация.ИНН));
			СтруктураДокумента.Вставить("ПокупательФамилияФЛ", "");
			СтруктураДокумента.Вставить("ПокупательИмяФЛ", 	"");
			СтруктураДокумента.Вставить("ПокупательОтчествоФЛ", "");
			
			НаименованиеФЛ = ВыборкаДок.Организация.Наименование;
			Если Найти(ВРег(НаименованиеФЛ), "ИП ") = 1 Тогда
				НаименованиеФЛ = Прав(НаименованиеФЛ, СтрДлина(НаименованиеФЛ) - 3);
			КонецЕсли;
			
			МассивИмяФЛ = Эком_РазложитьСтрокуВМассивПодстрок(НаименованиеФЛ, " ");
			
			Если МассивИмяФЛ.Количество() 		&gt;= 3 Тогда
				СтруктураДокумента.ПокупательФамилияФЛ 	= СокрЛП(МассивИмяФЛ.Получить(0));
				СтруктураДокумента.ПокупательИмяФЛ 		= СокрЛП(МассивИмяФЛ.Получить(1));
				СтруктураДокумента.ПокупательОтчествоФЛ = СокрЛП(МассивИмяФЛ.Получить(2));
			ИначеЕсли МассивИмяФЛ.Количество() 	= 2 Тогда
				СтруктураДокумента.ПокупательФамилияФЛ 	= СокрЛП(МассивИмяФЛ.Получить(0));
				СтруктураДокумента.ПокупательИмяФЛ 		= СокрЛП(МассивИмяФЛ.Получить(1));
			ИначеЕсли МассивИмяФЛ.Количество() 	= 1 Тогда
				СтруктураДокумента.ПокупательФамилияФЛ 	= СокрЛП(МассивИмяФЛ.Получить(0));
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДокумента.Вставить("ИмяАнФайла"     	, ВыборкаДок.ИмяПоступившегоФайла);
		СтруктураДокумента.Вставить("ТекстПредАн"    	, ТекстСообщения);
		
		СтруктураДокумента.Вставить("ЭЦПАнФайл"       	, ЭЦПАнФайл);
		
		СтруктураДокумента.Вставить("ПодписантИННЮЛ"   	, СокрЛП(ВыборкаДок.Организация.ИНН));
		СтруктураДокумента.Вставить("ПодписантДолжн"   	, ВыборкаДок.СертификатДолжностьПодписанта);
		СтруктураДокумента.Вставить("ПодписантФамилия" 	, ВыборкаДок.СертификатФамилияПодписанта);
		СтруктураДокумента.Вставить("ПодписантИмя"     	, ВыборкаДок.СертификатИмяПодписанта);
		СтруктураДокумента.Вставить("ПодписантОтчество" , ВыборкаДок.СертификатОтчествоПодписанта);
		
		ФайлXMLПолноеИмя = ВременныйКаталог + СтруктураДокумента.ИдФайл + ".xml"; 

		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("windows-1251");
		ЗаписьXML.ЗаписатьОбъявлениеXML();

		// &lt;&lt;&lt; Файл
		ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
		ЗаписьXML.ЗаписатьАтрибут("ИдФайл"  , СтруктураДокумента.ИдФайл);
		ЗаписьXML.ЗаписатьАтрибут("ВерсПрог", "Docrobot 1С: Integration");
		ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "1.02");

		// &lt;&lt;&lt; Документ
		ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");

		// &lt;&lt;&lt; УчастЭДО
		ЗаписьXML.ЗаписатьНачалоЭлемента( "УчастЭДО" );
		ЗаписьXML.ЗаписатьАтрибут("ИдУчастЭДО", СтруктураДокумента.ИдОтпр);

		Если СтруктураДокумента.ТипПолучателя = "ЮЛ" Тогда
			
			// &lt;&lt;&lt; ЮЛ
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
			ЗаписьXML.ЗаписатьАтрибут("НаимОрг", 	СтруктураДокумента.ПлательщикНаимОрг);
			ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", 		СтруктураДокумента.ПлательщикИННЮЛ);
			ЗаписьXML.ЗаписатьАтрибут("КПП", 		СтруктураДокумента.ПлательщикКПП);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ЮЛ
			
		ИначеЕсли СтруктураДокумента.ТипПолучателя = "ФЛ" Тогда
			
			// &lt;&lt;&lt; ИП
			ЗаписьXML.ЗаписатьНачалоЭлемента("ИП");
			ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", СтруктураДокумента.ПоставщикИННФЛ);
			// &lt;&lt;&lt; ФИО
			ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
			ЗаписьXML.ЗаписатьАтрибут("Фамилия", 	СтруктураДокумента.ПоставщикФамилияФЛ);
			ЗаписьXML.ЗаписатьАтрибут("Имя", 		СтруктураДокумента.ПоставщикИмяФЛ);
			ЗаписьXML.ЗаписатьАтрибут("Отчество", 	СтруктураДокумента.ПоставщикОтчествоФЛ);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ФИО
			ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ИП
			
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; УчастЭДО

		// &lt;&lt;&lt; СвУведУточ
		ЗаписьXML.ЗаписатьНачалоЭлемента("СвПредАн");
		//ЗаписьXML.ЗаписатьАтрибут("ДатаПол" , СтруктураДокумента.ДатаДок);
		//ЗаписьXML.ЗаписатьАтрибут("ВремяПол", СтруктураДокумента.ВремДок);

		// &lt;&lt;&lt; СведПолФайл
		ЗаписьXML.ЗаписатьНачалоЭлемента("СведАнФайл");
		ЗаписьXML.ЗаписатьАтрибут("ИмяАнФайла", СтруктураДокумента.ИмяАнФайла);

		// &lt;&lt;&lt; ЭЦППолФайл
		ЗаписьXML.ЗаписатьНачалоЭлемента("ЭЦПАнФайл");
		ЗаписьXML.ЗаписатьТекст(СтруктураДокумента.ЭЦПАнФайл);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ЭЦПАнФайл

		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; СведАнФайл

		// &lt;&lt;&lt; ТекстУведУточ
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТекстПредАн");
		ЗаписьXML.ЗаписатьТекст(СтруктураДокумента.ТекстПредАн);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ТекстПредАн
			
		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; СвПредАн

		// &lt;&lt;&lt; ОтпрДок
		ЗаписьXML.ЗаписатьНачалоЭлемента("НапрПредАн"); // Отправитель документа указанный в СведПолФайл, в данном случае это поставщик отправлял ЮЗД
		ЗаписьXML.ЗаписатьАтрибут("ИдУчастЭДО", СтруктураДокумента.ИдПок);

		Если СтруктураДокумента.ТипПолучателя = "ЮЛ" Тогда 
			// &lt;&lt;&lt; ЮЛ
			ЗаписьXML.ЗаписатьНачалоЭлемента("ЮЛ");
			ЗаписьXML.ЗаписатьАтрибут("НаимОрг", СтруктураДокумента.ПоставщикНаимОрг);
			ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ"  , СтруктураДокумента.ПоставщикИННЮЛ);
			ЗаписьXML.ЗаписатьАтрибут("КПП"    , СтруктураДокумента.ПоставщикКПП);
			ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ЮЛ

		ИначеЕсли СтруктураДокумента.ТипПолучателя = "ФЛ" Тогда
			// &lt;&lt;&lt; ИП
			ЗаписьXML.ЗаписатьНачалоЭлемента("ИП");
			ЗаписьXML.ЗаписатьАтрибут("ИННФЛ"  , СтруктураДокумента.ПоставщикИННФЛ);
			// &lt;&lt;&lt; ФИО
			ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
			Если ЗначениеЗаполнено(СтруктураДокумента.ПоставщикФамилияФЛ) Тогда 
				ЗаписьXML.ЗаписатьАтрибут("Фамилия"  , СтруктураДокумента.ПоставщикФамилияФЛ);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДокумента.ПоставщикИмяФЛ) Тогда 
				ЗаписьXML.ЗаписатьАтрибут("Имя"  , СтруктураДокумента.ПоставщикИмяФЛ);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураДокумента.ПоставщикОтчествоФЛ) Тогда 
				ЗаписьXML.ЗаписатьАтрибут("Отчество"  , СтруктураДокумента.ПоставщикОтчествоФЛ);
			КонецЕсли;
			ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ФИО
			ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ИП
		КонецЕсли;

		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; НапрПредАн

		// &lt;&lt;&lt; Подписант
		ЗаписьXML.ЗаписатьНачалоЭлемента("Подписант");
		ЗаписьXML.ЗаписатьАтрибут("Должность", СтруктураДокумента.ПодписантДолжн);

		// &lt;&lt;&lt; ФИО
		ЗаписьXML.ЗаписатьНачалоЭлемента("ФИО");
		ЗаписьXML.ЗаписатьАтрибут("Имя"    , СтруктураДокумента.ПодписантИмя);
		ЗаписьXML.ЗаписатьАтрибут("Фамилия", СтруктураДокумента.ПодписантФамилия);	
		ЗаписьXML.ЗаписатьАтрибут("Отчество", СтруктураДокумента.ПодписантОтчество);	
		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; ФИО

		ЗаписьXML.ЗаписатьКонецЭлемента(); // &gt;&gt;&gt; Подписант

		ЗаписьXML.ЗаписатьКонецЭлемента();//Документ
		ЗаписьXML.ЗаписатьКонецЭлемента();//файл

		СтрокаXML = ЗаписьXML.Закрыть();
		
				
		СтрокаСтруктура = Новый Структура;			
		СтрокаСтруктура.Вставить("ИмяФайлаXML"          , СтруктураДокумента.ИдФайл + ".xml");
		СтрокаСтруктура.Вставить("СтруктураДокумента"   , СтруктураДокумента);
		СтрокаСтруктура.Вставить("ДанныеСертификатаЭКОМ", ВыборкаДок.Сертификат);
		СтрокаСтруктура.Вставить("СертификатНаСервере"  , ВыборкаДок.СертификатНаСервере);
		СтрокаСтруктура.Вставить("Документ"             , ВыборкаДок.Ссылка);
		СтрокаСтруктура.Вставить("Организация"          , ВыборкаДок.Организация);
		СтрокаСтруктура.Вставить("Контрагент"           , ВыборкаДок.Контрагент);
		СтрокаСтруктура.Вставить("ВидДокументаУПД"      , ВыборкаДок.ВидДокумента);
		СтрокаСтруктура.Вставить("Статус"               , "Отправлен");
		СтрокаСтруктура.Вставить("ВидДокумента"         , "DP_PRANNUL_22_Исходящий");
		СтрокаСтруктура.Вставить("ИдентификаторЦепочки" , ВыборкаДок.ИдентификаторЦепочки);
		СтрокаСтруктура.Вставить("ИдентификаторОснования", Прав(ВыборкаДок.ИдентификаторЮЗД, 36));
		СтрокаСтруктура.Вставить("ИдентификаторИспр"    , ВыборкаДок.ИдентификаторОснование);
		СтрокаСтруктура.Вставить("СтрокаXML"            , СтрокаXML);
		СтрокаСтруктура.Вставить("КодировкаФайла"       , "windows-1251");
		СтрокаСтруктура.Вставить("Идентификатор"		, Идентификатор);
		СтрокаСтруктура.Вставить("ТекстСообщения"		, ТекстСообщения);		
		СтрокаСтруктура.Вставить("ТипФайла", "DP_PRANNUL");
		
		МассивСтруктурИсходящих.Добавить(СтрокаСтруктура);
		
	КонецЦикла;
	
КонецЕсли;
~Выход:
Возврат МассивСтруктурИсходящих;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Аннулирование ЮЗД</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">9</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<presentation>СписокPrannulИсходящиеПокупатель</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Аннулирование ЮЗД</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ИсходящийDP_PRANNUL_22Покупатель</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПередаватьТекстПричины</value>
				<presentation>Текст аннулирования</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>DP_PRANNUL_22_Исходящий</presentation>
				<id xsi:type="xs:decimal">7</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>ON_NSCHFDOPPR_01_Входящий; ON_NSCHFDOPPR_01_Испр_Входящий; ON_NSCHFDOPPRMARK_01_Входящий; ON_NSCHFDOPPRMARK_01_Испр_Входящий; ON_NSCHFDOPPRPROS_01_Входящий; ON_NSCHFDOPPRPROS_01_Испр_Входящий; ON_NKORSCHFDOPPR_01_Входящий; ON_NKORSCHFDOPPR_01_Испр_Входящий; ON_NKORSCHFDOPPRMARK_01_Входящий; ON_NKORSCHFDOPPRMARK_01_Испр_Входящий; ON_NKORSCHFDOPPRPROS_01_Входящий; ON_NKORSCHFDOPPRPROS_01_Испр_Входящий</presentation>
				<id xsi:type="xs:decimal">8</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Да</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">9</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">ИсходящийDP_PRANNUL_22Покупатель</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
	</row>
</ValueTree>