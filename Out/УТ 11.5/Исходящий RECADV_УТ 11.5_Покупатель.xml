<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Источник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Приемник</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Атрибуты</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДанныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ДоступныеЗначения</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Связи</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Обязательный</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий RECADV</Value>
		<Value xsi:type="xs:string">#Область ШАПКА_Заполнение

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
               |	ВЫРАЗИТЬ(DR_События.Документ КАК Документ.ПриобретениеТоваровУслуг) КАК Источник,
               |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	DR_События.ИдентификаторОснования КАК ИдентификаторОснования
               |ПОМЕСТИТЬ втDR_События_Источник
               |ИЗ
               |	РегистрСведений.DR_События КАК DR_События
               |ГДЕ
               |	DR_События.Документ В(&amp;Документ)
               |	И DR_События.ВидДокумента = ""Накладная_Входящая""
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	втDR_События_Источник.Источник КАК Источник,
               |	втDR_События_Источник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ВЫРАЗИТЬ(DR_События_DESADV.Документ КАК Документ.DR_Документ) КАК DESADV
               |ПОМЕСТИТЬ втДанныеПоЦепочке
               |ИЗ
               |	втDR_События_Источник КАК втDR_События_Источник
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_DESADV
               |		ПО втDR_События_Источник.ИдентификаторЦепочки = DR_События_DESADV.ИдентификаторЦепочки
               |			И (DR_События_DESADV.ВидДокумента = ""DESADV_Входящий"")
               |			И втDR_События_Источник.ИдентификаторОснования = DR_События_DESADV.Идентификатор
               |			И (DR_События_DESADV.Статус = ""Обработан"")
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	втДанныеПоЦепочке.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	втДанныеПоЦепочке.Источник КАК Ссылка,
               |	втДанныеПоЦепочке.Источник.Номер КАК NUMBER,
               |	втДанныеПоЦепочке.Источник.Дата КАК ДатаИсточник,
               |	втДанныеПоЦепочке.Источник.Контрагент КАК Контрагент,
               |	втДанныеПоЦепочке.Источник.Организация КАК Организация,
			   |	втДанныеПоЦепочке.Источник.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
               |	ДоговорКонтрагента.Номер КАК CAMPAIGNNUMBER,
               |	ДоговорКонтрагента.Дата КАК ДатаДоговорКонтрагента,
               |	втДанныеПоЦепочке.DESADV КАК DESADV,
               |	ВЫРАЗИТЬ(DR_BUYER.Значение КАК СТРОКА(13)) КАК SENDER,
               |	ВЫРАЗИТЬ(DR_SUPPLIER.Значение КАК СТРОКА(13)) КАК RECIPIENT,
               |	ВЫРАЗИТЬ(DR_BUYER.Значение КАК СТРОКА(13)) КАК BUYER,
               |	ВЫРАЗИТЬ(DR_SUPPLIER.Значение КАК СТРОКА(13)) КАК SUPPLIER,
               |	ВЫРАЗИТЬ(DR_DELIVERYPLACE.Значение КАК СТРОКА(13)) КАК DELIVERYPLACE,
               |	ВЫРАЗИТЬ(DR_ORDERNUMBER.Значение КАК СТРОКА(35)) КАК ORDERNUMBER,
               |	ВЫРАЗИТЬ(DR_ORDERDATE.Значение КАК СТРОКА(10)) КАК ORDERDATE,
               |	ВЫРАЗИТЬ(DR_NUMBER.Значение КАК СТРОКА(35)) КАК DESADVNUMBER,
               |	ВЫРАЗИТЬ(DR_DATE.Значение КАК СТРОКА(10)) КАК DESADVDATE,
			   |	DR_POSITION.ХранилищеЗначения КАК POSITION,
			   |	""RUB"" КАК CURRENCY,
               |	""Отправлен"" КАК Статус,
               |	""RECADV"" КАК ВидДокумента,
               |	""1"" КАК HIERARCHICALID,
               |	""O"" КАК DOCTYPE,
			   |	""9"" КАК ACTION,
			   |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК DATE,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК CAMPAIGNDATE,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(35)) КАК DELIVERYNOTENUMBER,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК DELIVERYNOTEDATE,
			   |	ВЫРАЗИТЬ("""" КАК СТРОКА(10)) КАК RECEPTIONDATE,               
			   |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК EDIMESSAGE,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК EDIINTERCHANGEID,
			   |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК ФайлИмя,
               |	ВЫРАЗИТЬ("""" КАК СТРОКА(300)) КАК Идентификатор
               |ИЗ
               |	втДанныеПоЦепочке КАК втДанныеПоЦепочке
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорКонтрагента
               |		ПО втДанныеПоЦепочке.Источник.Договор = ДоговорКонтрагента.Ссылка
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_POSITION
               |		ПО втДанныеПоЦепочке.DESADV = DR_POSITION.Ссылка
               |			И (DR_POSITION.Реквизит = ""POSITION"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_NUMBER
               |		ПО втДанныеПоЦепочке.DESADV = DR_NUMBER.Ссылка
               |			И (DR_NUMBER.Реквизит = ""NUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ORDERNUMBER
               |		ПО втДанныеПоЦепочке.DESADV = DR_ORDERNUMBER.Ссылка
               |			И (DR_ORDERNUMBER.Реквизит = ""ORDERNUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ORDERDATE
               |		ПО втДанныеПоЦепочке.DESADV = DR_ORDERDATE.Ссылка
               |			И (DR_ORDERDATE.Реквизит = ""ORDERDATE"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_BUYER
               |		ПО втДанныеПоЦепочке.DESADV = DR_BUYER.Ссылка
               |			И (DR_BUYER.Реквизит = ""BUYER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_SUPPLIER
               |		ПО втДанныеПоЦепочке.DESADV = DR_SUPPLIER.Ссылка
               |			И (DR_SUPPLIER.Реквизит = ""SUPPLIER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_DELIVERYPLACE
               |		ПО втДанныеПоЦепочке.DESADV = DR_DELIVERYPLACE.Ссылка
               |			И (DR_DELIVERYPLACE.Реквизит = ""DELIVERYPLACE"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_DATE
               |		ПО втДанныеПоЦепочке.DESADV = DR_DATE.Ссылка
               |			И (DR_DATE.Реквизит = ""DATE"")";

Запрос.УстановитьПараметр("Документ", Источник);

РезультатЗапроса = Запрос.Выполнить(); 
Результат = РезультатЗапроса.Выгрузить();

ДатуВСтроку = Новый Соответствие;
ДатуВСтроку.Вставить("DATE"				, "Строка.ДатаИсточник");
ДатуВСтроку.Вставить("CAMPAIGNDATE"		, "Строка.ДатаДоговорКонтрагента");
ДатуВСтроку.Вставить("RECEPTIONDATE"	, "Строка.ДатаИсточник");

EDIINTERCHANGEID = 0; 

СтрокиДляУдаления 	= Новый Массив;
ДокументРеализации  = Неопределено;

КвалификаторСтроки = Новый КвалификаторыСтроки(250,ДопустимаяДлина.Переменная);

ДанныеDESADV = новый ТаблицаЗначений;
ДанныеDESADV.Колонки.Добавить("Поступление"				, Новый ОписаниеТипов("ДокументСсылка.ПриобретениеТоваровУслуг"));
ДанныеDESADV.Колонки.Добавить("ЦенаВключаетНДС"			, Новый ОписаниеТипов("Булево"));
ДанныеDESADV.Колонки.Добавить("Номенклатура"			, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеDESADV.Колонки.Добавить("DELIVEREDUNIT"			, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеDESADV.Колонки.Добавить("КоличествоЗаказанное"	, Новый ОписаниеТипов("Число"));
ДанныеDESADV.Колонки.Добавить("КоличествоПоставленное"	, Новый ОписаниеТипов("Число"));
ДанныеDESADV.Колонки.Добавить("КоличествоВУпаковке"		, Новый ОписаниеТипов("Число"));
ДанныеDESADV.Колонки.Добавить("DESCRIPTION"				, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеDESADV.Колонки.Добавить("PRODUCT"					, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеDESADV.Колонки.Добавить("PRODUCTIDBUYER"			, Новый ОписаниеТипов("Строка", КвалификаторСтроки));
ДанныеDESADV.Колонки.Добавить("PRODUCTIDSUPPLIER"		, Новый ОписаниеТипов("Строка", КвалификаторСтроки)); 

Для Каждого Строка Из Результат Цикл

    POSITION = Строка.POSITION.Получить();
	
	Для Каждого СтрокаНоменклатуры Из POSITION Цикл
		
		НоваяСтрокаDESADV = ДанныеDESADV.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаDESADV, СтрокаНоменклатуры); 
				
		НоваяСтрокаDESADV.Поступление  = Строка.Ссылка;		
		НоваяСтрокаDESADV.КоличествоЗаказанное = СтрокаНоменклатуры.ORDEREDQUANTITY;
		НоваяСтрокаDESADV.КоличествоПоставленное = СтрокаНоменклатуры.DELIVEREDQUANTITY;
		
		Если СтрокаНоменклатуры.Свойство("QUANTITYOFCUINTU") Тогда 
			НоваяСтрокаDESADV.КоличествоВУпаковке = СтрокаНоменклатуры.QUANTITYOFCUINTU;
		КонецЕсли;
		
	КонецЦикла;

    Если ДокументРеализации = Строка.Ссылка Тогда
        СтрокиДляУдаления.Добавить(Строка);
        Продолжить;
    КонецЕсли;
    
    ДокументРеализации = Строка.Ссылка;
	
	NUMBER = Эком_ПолучитьНомерНаПечать(ДокументРеализации, Истина, Ложь); //второй параметр убирает префикс, третий параметр убирает лидирующие нули.
	
	Строка.NUMBER = NUMBER;
	
	// Преобразование даты в строку и заполнение значения.
    Для Каждого ЗаписьДатуВСтроку Из ДатуВСтроку Цикл
        Строка[ЗаписьДатуВСтроку.Ключ] = Формат(Вычислить(ЗаписьДатуВСтроку.Значение), "ДФ=yyyy-MM-dd");
    КонецЦикла;
		
    EDIINTERCHANGEID = НовыйНомерТранзакции(EDIINTERCHANGEID);
    Строка.EDIINTERCHANGEID = Формат(EDIINTERCHANGEID, "ЧГ=0");
	
	// EDIMESSAGE.
    ГСЧ               = Новый ГенераторСлучайныхЧисел;
    СлучЧисло         = ГСЧ.СлучайноеЧисло(100, 999);
    Строка.EDIMESSAGE = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс000") + СлучЧисло + "-OUT-" + Строка.EDIINTERCHANGEID;
	
    Строка.ФайлИмя          = Строка.ВидДокумента + "_" + Строка.EDIMESSAGE + ".xml";
    Строка.Идентификатор    = Строка.ВидДокумента + "_" + Строка.EDIMESSAGE;
	
КонецЦикла;

Для Каждого Строка Из СтрокиДляУдаления Цикл
    Результат.Удалить(Строка);
КонецЦикла;

#КонецОбласти

#Область ТАБЛИЦА_Заполнение
ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
                          |	ДанныеТЧНоменклатурDESADV.Поступление КАК Ссылка,
                          |	ДанныеТЧНоменклатурDESADV.Номенклатура КАК Номенклатура,
                          |	ДанныеТЧНоменклатурDESADV.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
                          |	ДанныеТЧНоменклатурDESADV.DELIVEREDUNIT КАК DELIVEREDUNIT,
                          |	ДанныеТЧНоменклатурDESADV.КоличествоЗаказанное КАК КоличествоЗаказанное,
                          |	ДанныеТЧНоменклатурDESADV.КоличествоПоставленное КАК КоличествоПоставленное,
						  |	ДанныеТЧНоменклатурDESADV.КоличествоВУпаковке КАК КоличествоВУпаковке,
                          |	ДанныеТЧНоменклатурDESADV.DESCRIPTION КАК DESCRIPTION,
                          |	ДанныеТЧНоменклатурDESADV.PRODUCT КАК PRODUCT,
                          |	ДанныеТЧНоменклатурDESADV.PRODUCTIDBUYER КАК PRODUCTIDBUYER,
                          |	ДанныеТЧНоменклатурDESADV.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER
                          |ПОМЕСТИТЬ ТаблицаDESADV
                          |ИЗ
                          |	&amp;ДанныеТЧНоменклатурDESADV КАК ДанныеТЧНоменклатурDESADV
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ТаблицаDESADV.Ссылка КАК Ссылка,
                          |	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
                          |	ТаблицаТовары.Номенклатура КАК Номенклатура,
                          |	ТаблицаТовары.Номенклатура.Код КАК КодНоменклатуры,
                          |	ТаблицаТовары.КоличествоУпаковок КАК Количество,
                          |	ВЫБОР
                          |		КОГДА ТаблицаDESADV.ЦенаВключаетНДС
                          |			ТОГДА ВЫРАЗИТЬ((ТаблицаТовары.Сумма - ТаблицаТовары.СуммаНДС) / ТаблицаТовары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
                          |		ИНАЧЕ ТаблицаТовары.Цена
                          |	КОНЕЦ КАК ЦенаБезНДС,
                          |	ВЫБОР
                          |		КОГДА ТаблицаDESADV.ЦенаВключаетНДС
                          |			ТОГДА ТаблицаТовары.Цена
                          |		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС) / ТаблицаТовары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
                          |	КОНЕЦ КАК ЦенаСНДС,
                          |	ВЫБОР
                          |		КОГДА ТаблицаDESADV.ЦенаВключаетНДС
                          |			ТОГДА ТаблицаТовары.СуммаСНДС - ТаблицаТовары.СуммаНДС
                          |		ИНАЧЕ ТаблицаТовары.Сумма
                          |	КОНЕЦ КАК СтоимостьБезНДС,
                          |	ВЫБОР
                          |		КОГДА ТаблицаDESADV.ЦенаВключаетНДС
                          |			ТОГДА ТаблицаТовары.СуммаСНДС
                          |		ИНАЧЕ ТаблицаТовары.Сумма + ТаблицаТовары.СуммаНДС
                          |	КОНЕЦ КАК СтоимостьСНДС,
                          |	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
                          |	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС
                          |ПОМЕСТИТЬ ТаблицаТовары
                          |ИЗ
                          |	ТаблицаDESADV КАК ТаблицаDESADV
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТовары
                          |		ПО ТаблицаDESADV.Ссылка = ТаблицаТовары.Ссылка
                          |			И ТаблицаDESADV.Номенклатура = ТаблицаТовары.Номенклатура
                          |ГДЕ
                          |	ТаблицаТовары.Количество &gt; 0
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |	Ссылка,
                          |	Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ТаблицаDESADV.Ссылка КАК Ссылка,
                          |	ТаблицаТовары.НомерСтроки КАК POSITIONNUMBER,
                          |	ТаблицаDESADV.Номенклатура КАК Номенклатура,
                          |	ТаблицаDESADV.DELIVEREDUNIT КАК ACCEPTEDUNIT,
                          |	ТаблицаDESADV.КоличествоЗаказанное КАК КоличествоЗаказанное,
                          |	ТаблицаDESADV.КоличествоПоставленное КАК КоличествоПоставленное,
						  |	ТаблицаDESADV.КоличествоВУпаковке КАК КоличествоВУпаковке,
                          |	ТаблицаDESADV.DESCRIPTION КАК DESCRIPTION,
                          |	ТаблицаDESADV.PRODUCT КАК PRODUCT,
                          |	ТаблицаDESADV.PRODUCTIDBUYER КАК PRODUCTIDBUYER,
                          |	ТаблицаDESADV.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER,
                          |	ТаблицаТовары.Количество КАК КоличествоПринятое,
                          |	ТаблицаТовары.ЦенаБезНДС КАК ЦенаБезНДС,
                          |	ТаблицаТовары.ЦенаСНДС КАК ЦенаСНДС,
                          |	ТаблицаТовары.СтоимостьБезНДС КАК СтоимостьБезНДС,
                          |	ТаблицаТовары.СтоимостьСНДС КАК СтоимостьСНДС,
                          |	ТаблицаТовары.СуммаНДС КАК СуммаНДС,
                          |	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК ORDERQUANTITY,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК DELIVERQUANTITY,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК ACCEPTEDQUANTITY,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК PRICE,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК PRICEWITHVAT,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК AMOUNT,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК AMOUNTWITHVAT,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(20)) КАК VATAMOUNT,
                          |	ВЫРАЗИТЬ("""""""" КАК СТРОКА(2)) КАК VAT
                          |ИЗ
                          |	ТаблицаDESADV КАК ТаблицаDESADV
                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
                          |		ПО ТаблицаDESADV.Ссылка = ТаблицаТовары.Ссылка
                          |			И ТаблицаDESADV.Номенклатура = ТаблицаТовары.Номенклатура";

ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурDESADV", ДанныеDESADV);

РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить(); 
РезультатНоменклатур = РезультатЗапросаНоменклатур.Выгрузить();

ЧислоВСтроку = Новый СписокЗначений;
ЧислоВСтроку.Добавить("ORDERQUANTITY"		, "СтрокаНоменклатуры.КоличествоЗаказанное"		, Истина);
ЧислоВСтроку.Добавить("DELIVERQUANTITY"		, "СтрокаНоменклатуры.КоличествоПоставленное"	, Истина);
ЧислоВСтроку.Добавить("ACCEPTEDQUANTITY"	, "СтрокаНоменклатуры.КоличествоПринятое"		, Истина);
ЧислоВСтроку.Добавить("QUANTITYOFCUINTU"	, "СтрокаНоменклатуры.КоличествоВУпаковке"		, Истина);
ЧислоВСтроку.Добавить("PRICE"				, "СтрокаНоменклатуры.ЦенаБезНДС");
ЧислоВСтроку.Добавить("PRICEWITHVAT"		, "СтрокаНоменклатуры.ЦенаСНДС");
ЧислоВСтроку.Добавить("AMOUNT"				, "СтрокаНоменклатуры.СтоимостьБезНДС");
ЧислоВСтроку.Добавить("AMOUNTWITHVAT"		, "СтрокаНоменклатуры.СтоимостьСНДС");
ЧислоВСтроку.Добавить("VATAMOUNT"			, "СтрокаНоменклатуры.СуммаНДС");

Для Каждого СтрокаНоменклатуры Из РезультатНоменклатур Цикл                               
	
	// Преобразование числа в строку и заполнение значения.
    Для Каждого ЗаписьЧислоВСтроку Из ЧислоВСтроку Цикл
        
        ЗначениеЧисла = Вычислить(ЗаписьЧислоВСтроку.Представление);
		
		Если ЗначениеЧисла = 0 Тогда
			Продолжить;
		КонецЕсли;
		
        ЗначениеСтрокой = Формат(ЗначениеЧисла, "ЧДЦ=3; ЧРД=.; ЧГ=0; ЧН=");
        
        Если НЕ ЗаписьЧислоВСтроку.Пометка Тогда
            ЗначениеСтрокой = Формат(ЗначениеЧисла, "ЧДЦ=2; ЧРД=.; ЧГ=0; ЧН=0.00");
        КонецЕсли;
        
        СтрокаНоменклатуры[ЗаписьЧислоВСтроку.Значение] = ЗначениеСтрокой;
    
	КонецЦикла;
	
	Если СтрокаНоменклатуры.СтавкаНДС &lt;&gt; Перечисления.СтавкиНДС.БезНДС Тогда
    	СтрокаНоменклатуры.VAT = Сред(Строка(СтрокаНоменклатуры.СтавкаНДС),1,2);
	КонецЕсли;
	
КонецЦикла;

#КонецОбласти

#Область СОЗДАНИЕ_XML	

//Проверка наличия обязательных полей
ОбязательныеКолонки = Новый СписокЗначений;

//DESADV
ОбязательныеКолонки.Добавить("NUMBER"			, "NUMBER"			, Истина);
ОбязательныеКолонки.Добавить("DATE"				, "DATE" 			, Истина);
ОбязательныеКолонки.Добавить("ORDERNUMBER"		, "ORDERNUMBER" 	, Истина);
ОбязательныеКолонки.Добавить("ORDERDATE"		, "ORDERDATE" 		, Истина);
ОбязательныеКолонки.Добавить("RECEPTIONDATE"	, "RECEPTIONDATE" 	, Истина);

//HEAD
ОбязательныеКолонки.Добавить("SUPPLIER"			, "SUPPLIER"		, Истина);
ОбязательныеКолонки.Добавить("BUYER"			, "BUYER"			, Истина);
ОбязательныеКолонки.Добавить("RECIPIENT"		, "RECIPIENT"		, Истина);
ОбязательныеКолонки.Добавить("DELIVERYPLACE"	, "DELIVERYPLACE"	, Истина);
ОбязательныеКолонки.Добавить("SENDER"		 	, "SENDER"			, Истина);

ОбязательныеКолонки.Добавить("HIERARCHICALID"	, "HIERARCHICALID"	, Истина);

//POSITION
ОбязательныеКолонки.Добавить("POSITIONNUMBER"	, "POSITIONNUMBER"		, Истина);
ОбязательныеКолонки.Добавить("PRODUCT"			, "PRODUCT"				, Истина);
ОбязательныеКолонки.Добавить("PRODUCTIDBUYER"	, "PRODUCTIDBUYER"		, Истина);
ОбязательныеКолонки.Добавить("ACCEPTEDQUANTITY"	, "ACCEPTEDQUANTITY"	, Истина);


МассивСтруктурИсходящих = Новый Массив;	

//Структура свойств шапки документа
СтруктураШапка = Новый Структура("NUMBER, DATE, ORDERNUMBER, ORDERDATE, RECEPTIONDATE, DESADVNUMBER, DESADVDATE, 
								| DELIVERYNOTENUMBER, DELIVERYNOTEDATE, TOTALAMOUNTWITHVAT, TOTALAMOUNT, TOTALVAT, 
								| CAMPAIGNNUMBER, CAMPAIGNDATE, ACTION, DOCTYPE, INFO, HEAD");

//Структура свойств элемента HEAD
СтруктураHEAD = Новый Структура("SUPPLIER, BUYER, DELIVERYPLACE, SENDER, RECIPIENT, EDIINTERCHANGEID, EDIMESSAGE, PACKINGSEQUENCE");

//Структура свойств элемента PACKINGSEQUENCE
СтруктураPACKINGSEQUENCE = Новый Структура("HIERARCHICALID, POSITION");

//Имена свойств элемента POSITION
СвойстваPOSITION = "POSITIONNUMBER, PRODUCT, PRODUCTIDBUYER, PRODUCTIDSUPPLIER, ORDERQUANTITY, DELIVERQUANTITY,
					| ACCEPTEDQUANTITY, ORDERUNIT, ACCEPTEDUNIT, PRICE, PRICEWITHVAT, TAXRATE, VAT, AMOUNT,
					| AMOUNTWITHVAT, VATAMOUNT, DESCRIPTION, QUANTITYOFCUINTU";


Для каждого СтрокаШапкиДокумента из Результат Цикл

		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";  
	    
	    //Заполнение структуры документа
		СтруктураДок = Новый Структура("RECADV");
	    
	    СтруктураДок.RECADV = СтруктураШапка;
	    СтруктураШапка.HEAD = СтруктураHEAD;
	    СтруктураHEAD.PACKINGSEQUENCE = СтруктураPACKINGSEQUENCE;
	    
		//Заполнение значений свойств шапки документа
		ЗаполнитьЗначенияСвойств(СтруктураШапка, СтрокаШапкиДокумента);
	
		//Заполнение значений свойств элемента HEAD
		ЗаполнитьЗначенияСвойств(СтруктураHEAD, СтрокаШапкиДокумента);
	
		МассивPOSITION = Новый Массив;
	    
	    ОтборСтрокНоменклатур = Новый Структура;
		ОтборСтрокНоменклатур.Вставить("Ссылка", СтрокаШапкиДокумента.Ссылка);
	
		СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);
		
		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
			
			//Создание структуры POSITION
			Структура = Новый Структура(СвойстваPOSITION);
			
			//Заполнение значений свойств элемента POSITION
			ЗаполнитьЗначенияСвойств(Структура, СтрокаНоменклатурыДокумента);
			
			МассивPOSITION.Добавить(Структура);
		КонецЦикла;
		
		//Заполнение значений свойств элемента HIERARCHICALID
		СтруктураPACKINGSEQUENCE.HIERARCHICALID = СтрокаШапкиДокумента.HIERARCHICALID;
		СтруктураPACKINGSEQUENCE.POSITION = МассивPOSITION;
	    
		//Создание XML строки
		XMLДокумент        	= Новый ЗаписьXML;		
		ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб); 
		XMLДокумент.УстановитьСтроку("UTF-8");
		XMLДокумент.ЗаписатьОбъявлениеXML();
		
		Для каждого СтрокаЭлемента Из СтруктураДок Цикл
			ЗаписатьБлоки(XMLДокумент, СтрокаЭлемента, ОбязательныеКолонки, ТекстСообщенияПроверкиЗаполненияОбязательныхПолей);
		КонецЦикла;	

			СтрокаXML = XMLДокумент.Закрыть(); 
			
			
			Если ЗначениеЗаполнено(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей) Тогда
			
				ТекстЛогаСобытий = ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + "Документ был пропущен.";
			
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
			
			Продолжить;	
		Иначе	
			
			СтруктураФайлаДанных = Новый Структура;
			СтруктураФайлаДанных.Вставить("ВидДокумента"			, "RECADV_Исходящий");
			СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
			СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
			СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
			СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "UTF-8");
			СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
			СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
			СтруктураФайлаДанных.Вставить("Сообщение"				, "");
			СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
			СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
			СтруктураФайлаДанных.Вставить("ТипФайла"				, СтрокаШапкиДокумента.ВидДокумента);
			
			МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
			
		КонецЕсли;
	
КонецЦикла;

#КонецОбласти

//Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"

Возврат МассивСтруктурИсходящих;


//////////////////++ШАПКА++/////////////////////////////////////
//Запрос = Новый Запрос;
//Запрос.Текст = "ВЫБРАТЬ
//               |	DR_События_Накладная.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
//               |	DR_События_Накладная.Документ КАК Накладная,
//               |	DR_События_Накладная.ИдентификаторОснования КАК ИдентификаторОснования,
//               |	DR_События_DESADV.Документ КАК DESADV,
//               |	DR_События_DESADV.Идентификатор КАК Идентификатор
//               |ПОМЕСТИТЬ ВТ_ЦепочкиДокументов
//               |ИЗ
//               |	РегистрСведений.DR_События КАК DR_События_Накладная
//               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_DESADV
//               |		ПО DR_События_Накладная.ИдентификаторЦепочки = DR_События_DESADV.ИдентификаторЦепочки
//               |			И (DR_События_DESADV.ВидДокумента = ""DESADV_Входящий"")
//               |			И DR_События_Накладная.ИдентификаторОснования = DR_События_DESADV.Идентификатор
//               |			И (ВЫРАЗИТЬ(DR_События_DESADV.Документ КАК Документ.DR_Документ).Статус = ""Обработан"")
//               |ГДЕ
//               |	DR_События_Накладная.Документ В(&amp;Документ)
//               |	И DR_События_Накладная.ВидДокумента = ""Накладная_Входящая""
//               |;
//               |
//               |////////////////////////////////////////////////////////////////////////////////
//               |ВЫБРАТЬ
//               |	ВТ_ЦепочкиДокументов.DESADV КАК DESADV,
//               |	""220"" КАК DOCUMENTNAME,
//               |	Поступление.Дата КАК Дата,
//               |	""RUB"" КАК CURRENCY,
//               |	Поступление.Ссылка КАК Ссылка,
//               |	Поступление.Номер КАК Номер,
//               |	Поступление.Контрагент КАК Контрагент,
//               |	Поступление.Организация КАК Организация,
//               |	""Отправлен"" КАК Статус,
//               |	""RECADV"" КАК ВидДокумента,
//               |	Поступление.Номер КАК NUMBER,
//               |	Поступление.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
//               |	"""" КАК DELIVERYNOTENUMBER,
//               |	""1"" КАК HIERARCHICALID,
//               |	""O"" КАК DOCTYPE,
//               |	Поступление.Договор.Номер КАК CAMPAIGNNUMBER,
//               |	DR_BUYER.Значение КАК INVOICEPARTNER,
//               |	DR_BUYER.Значение КАК SENDER,
//               |	DR_SUPPLIER.Значение КАК RECIPIENT,
//               |	DR_NUMBER.Значение КАК DESADVNUMBER,
//               |	DR_ORDERNUMBER.Значение КАК ЗаказНомер,
//               |	DR_BUYER.Значение КАК BUYER,
//               |	DR_SUPPLIER.Значение КАК SUPPLIER,
//               |	DR_DELIVERYPLACE.Значение КАК DELIVERYPLACE,
//               |	DR_ORDERDATE.Значение КАК ЗаказДата,
//               |	DR_ORDERNUMBER.Значение КАК ORDERNUMBER,
//               |	DR_POSITION.ХранилищеЗначения КАК POSITION,
//               |	ВТ_ЦепочкиДокументов.ИдентификаторЦепочки КАК ИдентификаторЦепочки
//               |ИЗ
//               |	ВТ_ЦепочкиДокументов КАК ВТ_ЦепочкиДокументов
//               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.DR_Документ КАК DR_Документ
//               |		ПО ВТ_ЦепочкиДокументов.DESADV = DR_Документ.Ссылка
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_POSITION
//               |		ПО (DR_Документ.Ссылка = DR_POSITION.Ссылка)
//               |			И (DR_POSITION.Реквизит = ""POSITION"")
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_NUMBER
//               |		ПО (DR_Документ.Ссылка = DR_NUMBER.Ссылка)
//               |			И (DR_NUMBER.Реквизит = ""NUMBER"")
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ORDERNUMBER
//               |		ПО (DR_Документ.Ссылка = DR_ORDERNUMBER.Ссылка)
//               |			И (DR_ORDERNUMBER.Реквизит = ""ORDERNUMBER"")
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_ORDERDATE
//               |		ПО (DR_Документ.Ссылка = DR_ORDERDATE.Ссылка)
//               |			И (DR_ORDERDATE.Реквизит = ""ORDERDATE"")
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_BUYER
//               |		ПО (DR_Документ.Ссылка = DR_BUYER.Ссылка)
//               |			И (DR_BUYER.Реквизит = ""BUYER"")
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_SUPPLIER
//               |		ПО (DR_Документ.Ссылка = DR_SUPPLIER.Ссылка)
//               |			И (DR_SUPPLIER.Реквизит = ""SUPPLIER"")
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК DR_DELIVERYPLACE
//               |		ПО (DR_Документ.Ссылка = DR_DELIVERYPLACE.Ссылка)
//               |			И (DR_DELIVERYPLACE.Реквизит = ""DELIVERYPLACE"")
//               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Поступление
//               |		ПО ВТ_ЦепочкиДокументов.Накладная = Поступление.Ссылка";
//Запрос.УстановитьПараметр("Документ", Источник);
//РезультатЗапроса = Запрос.Выполнить(); 
//Результат = РезультатЗапроса.Выгрузить();
//
//Результат.Колонки.Добавить("DESADVDATE"          , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("DATE"                , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("TIME"                , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("RECEPTIONDATE"       , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("ORDERDATE"           , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("DELIVERYDATE"        , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("EARLIESTDELIVERYDATE", Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("LATESTDELIVERYDATE"  , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("EDIINTERCHANGEID"    , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("EDIMESSAGE"          , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("ФайлИмя"             , Новый ОписаниеТипов("Строка"));
//Результат.Колонки.Добавить("Идентификатор"       , Новый ОписаниеТипов("Строка"));
//
//EDIINTERCHANGEID = 0; 
//
//ДанныеDESADV = новый ТаблицаЗначений;
//ДанныеDESADV.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.DR_Документ"));
//ДанныеDESADV.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
//ДанныеDESADV.Колонки.Добавить("PRODUCT", Новый ОписаниеТипов("Строка")); 
//ДанныеDESADV.Колонки.Добавить("DELIVEREDQUANTITY", Новый ОписаниеТипов("Число")); 
//ДанныеDESADV.Колонки.Добавить("PRODUCTIDSUPPLIER", Новый ОписаниеТипов("Строка")); 
//
//Для Каждого Строка Из Результат Цикл
//
//    EDIINTERCHANGEID = НовыйНомерТранзакции(EDIINTERCHANGEID);
//
//    Строка.DATE             = Формат(Строка.Дата, "ДФ=yyyy-MM-dd");
//    Строка.TIME             = Формат(Строка.Дата, "ДФ=HH:mm");
//    Строка.RECEPTIONDATE    = Формат(Строка.Дата, "ДФ=yyyy-MM-dd");
//    Строка.ORDERDATE        = Формат(Строка.ЗаказДата, "ДФ=yyyy-MM-dd");
//    Строка.DESADVDATE       = Формат(Строка.ДатаВходящегоДокумента, "ДФ=yyyy-MM-dd");
//    Строка.DELIVERYDATE     = Формат(Строка.Дата, "ДФ=yyyy-MM-dd");
//    Строка.EDIINTERCHANGEID = Формат(EDIINTERCHANGEID, "ЧГ=0");
//    Строка.EDIMESSAGE       = Формат(ТекущаяДата(), "ДФ=ггггММддЧЧммсс000") + "-OUT-" + Строка.EDIINTERCHANGEID;
//    Строка.ФайлИмя          = Строка.ВидДокумента + "_" + Строка.EDIMESSAGE + ".xml";
//    Строка.Идентификатор    = Строка.ВидДокумента + "_" + Строка.EDIMESSAGE;
//	
//	Данные_POSITION = Строка.POSITION.Получить(); 
//	
//	Для Каждого СтрокаНоменклатуры Из Данные_POSITION Цикл
//		НоваяСтрокаDESADV					= ДанныеDESADV.Добавить();
// 		НоваяСтрокаDESADV.Ссылка			= Строка.DESADV;
//		НоваяСтрокаDESADV.Номенклатура		= СтрокаНоменклатуры.Номенклатура;
//		НоваяСтрокаDESADV.PRODUCT			= СтрокаНоменклатуры.PRODUCT; 
//		НоваяСтрокаDESADV.DELIVEREDQUANTITY	= СтрокаНоменклатуры.DELIVEREDQUANTITY; 
//		НоваяСтрокаDESADV.PRODUCTIDSUPPLIER	= СтрокаНоменклатуры.PRODUCTIDSUPPLIER;
//	КонецЦикла;
//	
//КонецЦикла;
//
//////////////////--ШАПКА--/////////////////////////////////////
//
//////////////////++ТАБЛИЦА++///////////////////////////////////
//ЗапросНоменклатур = Новый Запрос;
//ЗапросНоменклатур.Текст = "ВЫБРАТЬ
//                          |	ДанныеТЧНоменклатурDESADV.Ссылка КАК Ссылка,
//                          |	ДанныеТЧНоменклатурDESADV.Номенклатура КАК Номенклатура,
//                          |	ДанныеТЧНоменклатурDESADV.PRODUCT КАК PRODUCT,
//                          |	ДанныеТЧНоменклатурDESADV.DELIVEREDQUANTITY КАК DELIVEREDQUANTITY,
//                          |	ДанныеТЧНоменклатурDESADV.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER
//                          |ПОМЕСТИТЬ ВТ_НоменклатураDESADV
//                          |ИЗ
//                          |	&amp;ДанныеТЧНоменклатурDESADV КАК ДанныеТЧНоменклатурDESADV
//                          |;
//                          |
//                          |////////////////////////////////////////////////////////////////////////////////
//                          |ВЫБРАТЬ
//                          |	DR_События_Накладная.Документ КАК Накладная,
//                          |	ЕСТЬNULL(DR_События_Заказ.Документ, ЗНАЧЕНИЕ(Документ.DR_Документ.ПустаяСсылка)) КАК Заказ,
//                          |	ЕСТЬNULL(DR_События_DESADV.Документ, ЗНАЧЕНИЕ(Документ.DR_Документ.ПустаяСсылка)) КАК DESADV
//                          |ПОМЕСТИТЬ ВТ_ЦепочкиДокументов
//                          |ИЗ
//                          |	РегистрСведений.DR_События КАК DR_События_Накладная
//                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_Заказ
//                          |		ПО DR_События_Накладная.ИдентификаторЦепочки = DR_События_Заказ.ИдентификаторЦепочки
//                          |			И DR_События_Накладная.Документ.ЗаказПоставщику = DR_События_Заказ.Документ
//                          |			И (DR_События_Заказ.ВидДокумента = ""Заказ_Исходящий"")
//                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК DR_События_DESADV
//                          |		ПО DR_События_Накладная.ИдентификаторЦепочки = DR_События_DESADV.ИдентификаторЦепочки
//                          |			И DR_События_Накладная.ИдентификаторОснования = DR_События_DESADV.Идентификатор
//                          |			И (DR_События_DESADV.ВидДокумента = ""DESADV_Входящий"")
//                          |ГДЕ
//                          |	DR_События_Накладная.Документ В(&amp;Документ)
//                          |	И DR_События_Накладная.ВидДокумента = ""Накладная_Входящая""
//                          |;
//                          |
//                          |////////////////////////////////////////////////////////////////////////////////
//                          |ВЫБРАТЬ
//                          |	ПоступлениеТЧ.Ссылка КАК Ссылка,
//                          |	ПоступлениеТЧ.НомерСтроки КАК НомерСтроки,
//                          |	ПоступлениеТЧ.Номенклатура.Код КАК PRODUCTIDBUYER,
//                          |	ПоступлениеТЧ.Количество КАК Количество,
//                          |	ПоступлениеТЧ.Цена КАК Цена,
//                          |	ПоступлениеТЧ.СтавкаНДС КАК СтавкаНДС,
//                          |	ПоступлениеТЧ.Номенклатура.Наименование КАК DESCRIPTION,
//                          |	ВТ_ЦепочкиДокументов.DESADV КАК DESADV,
//                          |	ВТ_ЦепочкиДокументов.Заказ КАК Заказ,
//                          |	ПоступлениеТЧ.Номенклатура КАК Номенклатура,
//                          |	ПоступлениеТЧ.Номенклатура.ЕдиницаИзмерения.Наименование КАК НоменклатураЕдиницаИзмеренияНаименование
//                          |ПОМЕСТИТЬ ВТ
//                          |ИЗ
//                          |	ВТ_ЦепочкиДокументов КАК ВТ_ЦепочкиДокументов
//                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК Поступление
//                          |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПоступлениеТЧ
//                          |			ПО Поступление.Ссылка = ПоступлениеТЧ.Ссылка
//                          |		ПО ВТ_ЦепочкиДокументов.Накладная = Поступление.Ссылка
//                          |;
//                          |
//                          |////////////////////////////////////////////////////////////////////////////////
//                          |ВЫБРАТЬ
//                          |	ВТ.Ссылка КАК Ссылка,
//                          |	ВТ.НомерСтроки КАК НомерСтроки,
//                          |	ВТ.PRODUCTIDBUYER КАК PRODUCTIDBUYER,
//                          |	ВТ.Количество КАК Количество,
//                          |	ВТ.Цена КАК Цена,
//                          |	ВТ.СтавкаНДС КАК СтавкаНДС,
//                          |	ВТ.DESCRIPTION КАК DESCRIPTION,
//                          |	DESADV_ТЧ.PRODUCT КАК Штрихкод,
//                          |	DESADV_ТЧ.DELIVEREDQUANTITY КАК КоличествоПоставляемое,
//                          |	ЗаказТЧ.Количество КАК КоличествоЗаказанное,
//                          |	ВТ.НоменклатураЕдиницаИзмеренияНаименование КАК НоменклатураЕдиницаИзмеренияНаименование,
//                          |	DESADV_ТЧ.PRODUCTIDSUPPLIER КАК PRODUCTIDSUPPLIER
//                          |ИЗ
//                          |	ВТ КАК ВТ
//                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураDESADV КАК DESADV_ТЧ
//                          |		ПО ВТ.DESADV = DESADV_ТЧ.Ссылка
//                          |			И ВТ.Номенклатура = DESADV_ТЧ.Номенклатура
//                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТЧ
//                          |		ПО ВТ.Заказ = ЗаказТЧ.Ссылка
//                          |			И ВТ.Номенклатура = ЗаказТЧ.Номенклатура
//                          |
//                          |УПОРЯДОЧИТЬ ПО
//                          |	НомерСтроки";
//ЗапросНоменклатур.УстановитьПараметр("Документ", Источник);
//ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурDESADV", ДанныеDESADV);
//РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить(); 
//РезультатНоменклатур = РезультатЗапросаНоменклатур.Выгрузить();
//
//РезультатНоменклатур.Колонки.Добавить("TAXRATE"          	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("PRODUCT"          	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("ORDERQUANTITY" 		, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("ACCEPTEDQUANTITY" 	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("DELIVERQUANITY"   	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("PRICE"            	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("PRICEWITHVAT"     	, Новый ОписаниеТипов("Строка")); 
//РезультатНоменклатур.Колонки.Добавить("AMOUNT"           	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("AMOUNTWITHVAT"    	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("ACCEPTEDUNIT"     	, Новый ОписаниеТипов("Строка"));
//РезультатНоменклатур.Колонки.Добавить("POSITIONNUMBER"   	, Новый ОписаниеТипов("Строка"));
//
////СтрокиДляУдаления = Новый Массив;
//
//Для Каждого СтрокаНоменклатуры Из РезультатНоменклатур Цикл                               
//
//    СтавкаНДС   = СтавкаНДСЧислом(СтрокаНоменклатуры.СтавкаНДС);
//    Цена_с_НДС  = СтрокаНоменклатуры.Цена * ((100 + СтавкаНДС)/100);
//
//    СтрокаНоменклатуры.PRICE         	= Формат(СтрокаНоменклатуры.Цена, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
//    СтрокаНоменклатуры.PRICEWITHVAT  	= Формат(Цена_с_НДС, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
//    СтрокаНоменклатуры.AMOUNT        	= Формат(СтрокаНоменклатуры.Цена * СтрокаНоменклатуры.Количество, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
//    СтрокаНоменклатуры.AMOUNTWITHVAT 	= Формат(Цена_с_НДС * СтрокаНоменклатуры.Количество, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
//    СтрокаНоменклатуры.PRODUCT 			= СтрокаНоменклатуры.Штрихкод;    
//    СтрокаНоменклатуры.POSITIONNUMBER 	= Формат(СтрокаНоменклатуры.НомерСтроки, "ЧДЦ=; ЧГ=0");
//    СтрокаНоменклатуры.ACCEPTEDUNIT     = ПолучитьЕдиницуИзмерения(СтрокаНоменклатуры.НоменклатураЕдиницаИзмеренияНаименование);
//    СтрокаНоменклатуры.ACCEPTEDQUANTITY = Формат(СтрокаНоменклатуры.Количество, "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0");
//    СтрокаНоменклатуры.ORDERQUANTITY  	= Формат(СтрокаНоменклатуры.КоличествоЗаказанное, "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0");
//    СтрокаНоменклатуры.DELIVERQUANITY   = Формат(СтрокаНоменклатуры.КоличествоПоставляемое, "ЧДЦ=3; ЧРД=.; ЧН=; ЧГ=0");
//
//    СтрокаНоменклатуры.TAXRATE = Формат(СтавкаНДС, "ЧДЦ=; ЧГ=0");
//
//КонецЦикла;
//
////Для Каждого Строка Из СтрокиДляУдаления Цикл
////    РезультатНоменклатур.Удалить(Строка);
////КонецЦикла;
//
//////////////////--ТАБЛИЦА--///////////////////////////////////
//
//
////////////////////++СОЗДАНИЕ_XML++/////////////////////////////////// 	
//
//МассивСтруктурИсходящих = Новый Массив;	
//ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";
//
//СписокRECADV = Новый СписокЗначений;	
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "NUMBER"			, Истина);					
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "DATE"			, Истина);				
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "ORDERDATE"		, Истина);
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "ORDERNUMBER"		, Истина);
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "RECEPTIONDATE"	, Ложь);   							
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "DESADVNUMBER"	, Ложь);
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "DESADVDATE"		, Истина);
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "CAMPAIGNNUMBER"	, Ложь);   							
//СписокRECADV.Добавить("СтрокаШапкиДокумента"	, "DOCTYPE"			, Ложь);
//	
//СписокHEAD = Новый СписокЗначений;	
//СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SUPPLIER"				, Истина);
//СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "BUYER"					, Истина);					
//СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "DELIVERYPLACE"			, Истина);   							
//СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "SENDER"					, Истина);
//СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "RECIPIENT"				, Истина);				
//СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "EDIINTERCHANGEID"		, Ложь);
//СписокHEAD.Добавить("СтрокаШапкиДокумента"		, "INVOICEPARTNER"			, Ложь);
//
//СписокPACKINGSEQUENCE = Новый СписокЗначений;	
//СписокPACKINGSEQUENCE.Добавить("СтрокаШапкиДокумента"	, "HIERARCHICALID"	, Истина);
//		
//CписокPOSITION = Новый СписокЗначений;	
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "POSITIONNUMBER"		, Истина);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCT"			, Истина);					
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDSUPPLIER"	, Ложь);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRODUCTIDBUYER"		, Истина);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ACCEPTEDQUANTITY"	, Истина);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ACCEPTEDUNIT"		, Истина);   							
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "ORDERQUANTITY"		, Ложь);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICE"				, Ложь);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "PRICEWITHVAT"		, Ложь);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "TAXRATE"			, Ложь);
//CписокPOSITION.Добавить("СтрокаНоменклатурыДокумента", "DESCRIPTION"		, Ложь);			
//
//Для каждого СтрокаШапкиДокумента из Результат Цикл
//
//	ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "";  
//    				
//	XMLДокумент        	= Новый ЗаписьXML;		
//	ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Ложь, Символы.Таб); 
//	XMLДокумент.УстановитьСтроку("UTF-8");
//	XMLДокумент.ЗаписатьОбъявлениеXML();
//				
//	XMLДокумент.ЗаписатьНачалоЭлемента("RECADV");
//    
//	Для Каждого ЭлементRECADV из СписокRECADV Цикл
//	
//		СтрокаТЗ = Вычислить(ЭлементRECADV.Значение);
//		ИмяРеквизита = ЭлементRECADV.Представление;
//		ОбязательноеПоле = ЭлементRECADV.Пометка;
//		Вложенность = "RECADV."; 
//				
//		Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
//			ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
//		Иначе
//			Если ОбязательноеПоле Тогда 
//	    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,
//				"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита 
//				+ " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС 
//				+ "" + Вложенность + "" + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
//        	КонецЕсли;
//		КонецЕсли; 
//		 
//	КонецЦикла;
//	
//		XMLДокумент.ЗаписатьНачалоЭлемента("HEAD");
//		    
//			Для Каждого ЭлементHEAD из СписокHEAD Цикл
//			
//				СтрокаТЗ = Вычислить(ЭлементHEAD.Значение);
//				ИмяРеквизита = ЭлементHEAD.Представление;
//				ОбязательноеПоле = ЭлементHEAD.Пометка;
//				Вложенность = "RECADV.HEAD."; 
//			
//				Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
//					ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
//				Иначе
//					Если ОбязательноеПоле Тогда 
//			    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,
//						"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита 
//						+ " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС 
//						+ "" + Вложенность + "" + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
//	            	КонецЕсли;
//				КонецЕсли;
//                     
//			КонецЦикла;
//			
//			XMLДокумент.ЗаписатьНачалоЭлемента("PACKINGSEQUENCE");
//		    
//				Для Каждого ЭлементPACKINGSEQUENCE из СписокPACKINGSEQUENCE Цикл
//				
//					СтрокаТЗ = Вычислить(ЭлементPACKINGSEQUENCE.Значение);
//					ИмяРеквизита = ЭлементPACKINGSEQUENCE.Представление;
//					ОбязательноеПоле = ЭлементPACKINGSEQUENCE.Пометка;
//					Вложенность = "RECADV.HEAD.PACKINGSEQUENCE."; 
//
//					Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
//						ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
//					Иначе
//						Если ОбязательноеПоле Тогда 
//				    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,
//							"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита 
//							+ " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС 
//							+ "" + Вложенность + "" + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
//		            	КонецЕсли;
//					КонецЕсли;
//	                     
//				КонецЦикла;
//   		
//        		ОтборСтрокНоменклатур = Новый Структура;
//				ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
//				СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);	        			
//        			
//        		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
//        			    
//        		    XMLДокумент.ЗаписатьНачалоЭлемента("POSITION");
//        		    
//		        		Для Каждого ЭлементPOSITION из CписокPOSITION Цикл
//						
//							СтрокаТЗ = Вычислить(ЭлементPOSITION.Значение);
//							ИмяРеквизита = ЭлементPOSITION.Представление;
//							ОбязательноеПоле = ЭлементPOSITION.Пометка;
//							Вложенность = "RECADV.HEAD.PACKINGSEQUENCE.POSITION."; 
//						
//							Если ЗначениеЗаполнено(СтрокаТЗ[ИмяРеквизита]) Тогда                                             		                                             
//								ЗаписатьXML(XMLДокумент, 	СтрокаТЗ[ИмяРеквизита]		, ИмяРеквизита);
//							Иначе
//								Если ОбязательноеПоле Тогда 
//						    		ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = ?(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей = "" ,
//									"При обработке документа &lt;" + СтрокаТЗ.Ссылка + "&gt; Возникли ошибки:" + Символы.ПС + Вложенность + ИмяРеквизита 
//									+ " - отсутствуют данные для заполнения тэга.", ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС 
//									+ "" + Вложенность + "" + ИмяРеквизита + " - отсутствуют данные для заполнения тэга."); 
//				            	КонецЕсли;
//							КонецЕсли;
//
//						КонецЦикла;
//        					
//        			XMLДокумент.ЗаписатьКонецЭлемента(); 
//        				
//        		КонецЦикла;
//        		
//    		XMLДокумент.ЗаписатьКонецЭлемента();
//    			     
//		XMLДокумент.ЗаписатьКонецЭлемента();
//			
//	XMLДокумент.ЗаписатьКонецЭлемента();
//
//	СтрокаXML = XMLДокумент.Закрыть(); 
//	
//	
//	Если ЗначениеЗаполнено(ТекстСообщенияПроверкиЗаполненияОбязательныхПолей) Тогда
//		ТекстЛогаСобытий = ТекстСообщенияПроверкиЗаполненияОбязательныхПолей + Символы.ПС + "Документ пропущен и отправлен не будет.";
//		ЗаписьСтруктурыЛога = ЗаполненнаяЗаписьЛога(ТекстЛогаСобытий, "Ошибка", ИмяСобытия);
//		МассивЛогаСобытий.Добавить(ЗаписьСтруктурыЛога);
//	    Продолжить;
//	КонецЕсли;
//		
//	СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
//	 
//	СтруктураДляСовместимости.СтрокаXML = СтрокаXML;
//	СтруктураДляСовместимости.Отказ = Ложь;
//	СтруктураДляСовместимости.ВидДокумента = "RECADV_Исходящий";
//	СтруктураДляСовместимости.ЗаказДата = СтрокаШапкиДокумента.ЗаказДата;
//	СтруктураДляСовместимости.ЗаказНомер = СтрокаШапкиДокумента.ЗаказНомер;
//	СтруктураДляСовместимости.Идентификатор = СтрокаШапкиДокумента.Идентификатор;
//	СтруктураДляСовместимости.Контрагент = СтрокаШапкиДокумента.Контрагент;
//	СтруктураДляСовместимости.Номер = СтрокаШапкиДокумента.Номер;
//	СтруктураДляСовместимости.Организация = СтрокаШапкиДокумента.Организация;
//	СтруктураДляСовместимости.Ссылка = СтрокаШапкиДокумента.Ссылка;
//	СтруктураДляСовместимости.Статус = СтрокаШапкиДокумента.Статус;
//	СтруктураДляСовместимости.ФайлИмя = СтрокаШапкиДокумента.ФайлИмя;
//	СтруктураДляСовместимости.ЭлектронныйДокумент = СтрокаШапкиДокумента.Ссылка;
//	СтруктураДляСовместимости.ИдентификаторЦепочки = СтрокаШапкиДокумента.ИдентификаторЦепочки;
//	
//	СтруктураФайлаДанных = Новый Структура;
//	СтруктураФайлаДанных.Вставить("ВидДокумента"			, "RECADV_Исходящий");
//	СтруктураФайлаДанных.Вставить("ДатаДокумента"			, СтрокаШапкиДокумента.Дата);
//	СтруктураФайлаДанных.Вставить("Документ"				, СтрокаШапкиДокумента.Ссылка);
//	СтруктураФайлаДанных.Вставить("ЗаказДата"				, СтрокаШапкиДокумента.ЗаказДата);
//	СтруктураФайлаДанных.Вставить("ЗаказНомер"				, СтрокаШапкиДокумента.ЗаказНомер);
//	СтруктураФайлаДанных.Вставить("ИдентификаторИспр"		, "");
//	СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"	, СтрокаШапкиДокумента.ИдентификаторЦепочки);
//	СтруктураФайлаДанных.Вставить("ИмяФайлаXML"				, СтрокаШапкиДокумента.ФайлИмя);
//	СтруктураФайлаДанных.Вставить("КодировкаФайла"			, "UTF-8");
//	СтруктураФайлаДанных.Вставить("Контрагент"				, СтрокаШапкиДокумента.Контрагент);
//	СтруктураФайлаДанных.Вставить("НомерДокумента"			, СтрокаШапкиДокумента.Номер);
//	СтруктураФайлаДанных.Вставить("Организация"				, СтрокаШапкиДокумента.Организация);
//	СтруктураФайлаДанных.Вставить("Отправлен"				, НЕОПРЕДЕЛЕНО);
//	СтруктураФайлаДанных.Вставить("Сообщение"				, "");
//	СтруктураФайлаДанных.Вставить("Статус"					, СтрокаШапкиДокумента.Статус);
//	СтруктураФайлаДанных.Вставить("СтрокаXML"				, СтрокаXML);
//	СтруктураФайлаДанных.Вставить("СтруктураДокумента"		, СтруктураДляСовместимости);
//	СтруктураФайлаДанных.Вставить("ТипФайла"				, СтрокаШапкиДокумента.ВидДокумента);
//
//	МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных); 
//	
//КонецЦикла;
//
////Возврат Результат;				//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
////Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"
//
//Возврат МассивСтруктурИсходящих;
</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Исходящий RECADV</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">8</lastId>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<presentation>СписокНакладныеВходящиеПокупатель</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Исходящий RECADV</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ИсходящийRECADV</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПередаватьТекстПричины</value>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>RECADV_Исходящий</presentation>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>Накладная_Входящая</presentation>
				<id xsi:type="xs:decimal">7</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Нет</presentation>
				<id xsi:type="xs:decimal">8</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueTable">
			<column>
				<Name xsi:type="xs:string">Реквизит1</Name>
				<ValueType>
					<Type>xs:string</Type>
					<StringQualifiers>
						<Length>0</Length>
						<AllowedLength>Variable</AllowedLength>
					</StringQualifiers>
				</ValueType>
			</column>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
		<Value xsi:type="xs:boolean">false</Value>
		<Value xsi:type="xs:string">ИсходящийRECADV</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">-1</lastId>
		</Value>
	</row>
</ValueTree>