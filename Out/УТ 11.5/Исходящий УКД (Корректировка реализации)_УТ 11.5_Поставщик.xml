<ValueTree xmlns="http://v8.1c.ru/8.1/data/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="ValueTree">
	<column>
		<Name xsi:type="xs:string">Использовать</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ТипТранзакции</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Служебные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Данные</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Сохранение</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Загрузка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Кнопка</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">КоллекцияТЧ</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">СлужебныеТекст</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">ИмяКнопки</Name>
		<ValueType/>
	</column>
	<column>
		<Name xsi:type="xs:string">Регламент</Name>
		<ValueType/>
	</column>
	<row>
		<Value xsi:type="xs:boolean">true</Value>
		<Value xsi:type="xs:string">Исходящий УКД</Value>
		<Value xsi:type="xs:string">ВызовМастерКнопкойУКД 	= ?(ВызовМастерКнопкойУКД = Неопределено, Ложь, ВызовМастерКнопкойУКД);

Если НЕ ВызовМастерКнопкойУКД Тогда
	МассивСтруктурИсходящих = Новый Массив;
КонецЕсли;

DRВидыДокументовТекСчФ 	= Новый Массив;
DRВидыДокументовТекСчФ.Добавить("ON_NKORSCHFDOPPR_01_Исходящий");
DRВидыДокументовТекСчФ.Добавить("ON_NKORSCHFDOPPRMARK_01_Исходящий");

DRВидыДокументовПредСчФ = Новый Массив;
DRВидыДокументовПредСчФ.Добавить("ON_NKORSCHFDOPPR_01_Исходящий");
DRВидыДокументовПредСчФ.Добавить("ON_NKORSCHFDOPPRMARK_01_Исходящий");
DRВидыДокументовПредСчФ.Добавить("ON_NKORSCHFDOPPR_01_Испр_Исходящий");
DRВидыДокументовПредСчФ.Добавить("ON_NKORSCHFDOPPRMARK_01_Испр_Исходящий");
DRВидыДокументовПредСчФ.Добавить("ON_NSCHFDOPPR_01_Исходящий");
DRВидыДокументовПредСчФ.Добавить("ON_NSCHFDOPPRMARK_01_Исходящий");
DRВидыДокументовПредСчФ.Добавить("ON_NSCHFDOPPR_01_Испр_Исходящий");
DRВидыДокументовПредСчФ.Добавить("ON_NSCHFDOPPRMARK_01_Испр_Исходящий");

///МЧД
ЗапросМЧД = Новый Запрос;
ЗапросМЧД.Текст = ТекстЗапроса_МЧД_ПоОрганизациям();
ЗапросМЧД.УстановитьПараметр("ЭтоРегламентноеЗадание", ЭтоРегламентноеЗадание); 
ЗапросМЧД.УстановитьПараметр("Пользователь", НайтиТекущегоПользователя()); 
ЗапросМЧД.УстановитьПараметр("ТекущаяДата", ТекущаяДата()); 
ТаблицаМЧД = ЗапросМЧД.Выполнить().Выгрузить();

//////////////////////////////////++ШАПКА++/////////////////////////////////////

//Список таблиц запроса:
//ВТ_Источник 				- Получение данных по СчФ с установленным признаком Корректировочный (далее КорСчФ), созданных на основании "Корректировка реализации".
//ВТ_ДанныеТаблЧастьСЧФ 	- Получение количественно-суммовых показетелей КорСчФ полученных в ВТ_Источник. Отличие значений полей "ПредыдущийСчетФактура" и "ИсходныйСчетФактура" заключается в том,
//							 что текущая Счет фактура может быть создана либо к Корректировочной или Исправительной, либо к первичной Счет-фактуре.
//ВТ_ДанныеРегСведПоСчФ 	- Получение данных из РС DR_События, DR_ЦепочкиДокументов по отобранным ранее КорСчФ.
//ВТ_ИдентСчФОтправленных 	- Получение значений измерения "Идентификатор" последних записей из РС_События по ранее отправленным Текущей и Предыдущей СчФ.
//ВТ_Основная  				- Объединение данных ВТ_ДанныеРегСведПоСчФ и ВТ_ИдентСчФОтправленных, получение данных по ORDER, RECADV, Точка доставки.
//ВТ_УчастникиЭДО 			- Получение из массива выбранных КорСчФ уникальных значений Организация, Контрагент. (Ограничение списка) 
//ВТ_СОУП                   - По данным, полученным в ВТ_УчастникиЭДО выполняется получение данных Сертификата, ОператораЭДО, Участники(адреса, gln и т.п.), Подписант - (СОУП).

//РЕЗУЛЬТАТ - Объединение данных ВТ_Основная, ВТ_СОУП, определение ЭтоМаркируемыйЮЗД и получение данных инфополей по формату УПД контрагента. 

Запрос = Новый Запрос;  
Запрос.Текст = "ВЫБРАТЬ
               |	СчетФактураВыданный.Ссылка КАК Ссылка,
               |	СчетФактураВыданный.Номер КАК НомерТекСчф,
               |	СчетФактураВыданный.Дата КАК ДатаТекСчф,
               |	СчетФактураВыданный.Договор КАК ДоговорКонтрагента,
               |	СчетФактураВыданный.Организация КАК Организация,
               |	ВЫРАЗИТЬ(СчетФактураВыданный.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
               |	ВЫРАЗИТЬ(СчетФактураВыданный.ДокументОснование КАК Документ.КорректировкаРеализации) КАК ДокументОснованиеТекСЧФ
               |ПОМЕСТИТЬ ВТ_Источник
               |ИЗ
               |	Документ.СчетФактураВыданный КАК СчетФактураВыданный
               |ГДЕ
               |	СчетФактураВыданный.Ссылка В(&amp;Источник)
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	Источник.Ссылка КАК Ссылка,
               |	Источник.НомерТекСчф КАК НомерТекСчф,
               |	Источник.ДатаТекСчф КАК ДатаТекСчф,
               |	Источник.ДоговорКонтрагента КАК ДоговорКонтрагента,
               |	Источник.Организация КАК Организация,
               |	Источник.Контрагент КАК Контрагент,
               |	Источник.ДокументОснованиеТекСЧФ КАК ДокументОснованиеТекСЧФ,
               |	ВЫРАЗИТЬ(СчетФактураВыданныйТовары.ИсходныйСчетФактура.ДокументОснование КАК Документ.РеализацияТоваровУслуг) КАК ДокументОснованиеИсхСЧФ,
               |	МАКСИМУМ(СчетФактураВыданныйТовары.ПредыдущийСчетФактура) КАК ПредыдущийСчетФактура,
               |	СчетФактураВыданныйТовары.ИсходныйСчетФактура КАК ИсходныйСчетФактура,
               |	СУММА(СчетФактураВыданныйТовары.СуммаУменьшение) КАК ВсегоУмСтТовУчНалВсего,
               |	СУММА(СчетФактураВыданныйТовары.СуммаНДСУменьшение) КАК ВсегоУмСумНДС,
               |	СУММА(СчетФактураВыданныйТовары.СуммаУменьшение - СчетФактураВыданныйТовары.СуммаНДСУменьшение) КАК ВсегоУмСтТовБезНДСВсего,
               |	СУММА(СчетФактураВыданныйТовары.СуммаУвеличение) КАК ВсегоУвелСтТовУчНалВсего,
               |	СУММА(СчетФактураВыданныйТовары.СуммаНДСУвеличение) КАК ВсегоУвелСумНДС,
               |	СУММА(СчетФактураВыданныйТовары.СуммаУвеличение - СчетФактураВыданныйТовары.СуммаНДСУвеличение) КАК ВсегоУвелСтТовБезНДСВсего,
               |	КОЛИЧЕСТВО(DR_НоменклатураКонтрагентов.Номенклатура) КАК КоличествоМаркПозиций
               |ПОМЕСТИТЬ ВТ_ДанныеТаблЧастьСЧФ
               |ИЗ
               |	ВТ_Источник КАК Источник
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
               |		ПО Источник.Ссылка = СчетФактураВыданныйТовары.Ссылка
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК DR_НоменклатураКонтрагентов
               |		ПО Источник.Контрагент = DR_НоменклатураКонтрагентов.Контрагент
               |			И (СчетФактураВыданныйТовары.Номенклатура = DR_НоменклатураКонтрагентов.Номенклатура)
               |			И (DR_НоменклатураКонтрагентов.Маркировка &lt;&gt; """")
               |			И (DR_НоменклатураКонтрагентов.Маркировка &lt;&gt; ""нет"")
               |			И (DR_НоменклатураКонтрагентов.GTIN &lt;&gt; """")
               |
               |СГРУППИРОВАТЬ ПО
               |	Источник.Ссылка,
               |	Источник.НомерТекСчф,
               |	Источник.ДатаТекСчф,
               |	Источник.ДокументОснованиеТекСЧФ,
               |	ВЫРАЗИТЬ(СчетФактураВыданныйТовары.ИсходныйСчетФактура.ДокументОснование КАК Документ.РеализацияТоваровУслуг),
               |	СчетФактураВыданныйТовары.ИсходныйСчетФактура,
               |	Источник.ДоговорКонтрагента,
               |	Источник.Контрагент,
               |	Источник.Организация
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	СчетФактураВыданный.Ссылка КАК Ссылка,
               |	СчетФактураВыданный.НомерТекСчф КАК НомерТекСчф,
               |	СчетФактураВыданный.ДатаТекСчф КАК ДатаТекСчф,
               |	СчетФактураВыданный.ДокументОснованиеТекСЧФ КАК ДокументОснованиеТекСЧФ,
               |	СчетФактураВыданный.ДокументОснованиеИсхСЧФ КАК ДокументОснованиеИсхСЧФ,
               |	СчетФактураВыданный.ИсходныйСчетФактура КАК ИсходныйСчетФактура,
               |	СчетФактураВыданный.ПредыдущийСчетФактура КАК ПредыдущийСчетФактура,
               |	СчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
               |	СчетФактураВыданный.Организация КАК Организация,
               |	СчетФактураВыданный.Контрагент КАК Контрагент,
               |	СчетФактураВыданный.КоличествоМаркПозиций КАК КоличествоМаркПозиций,
               |	СчетФактураВыданный.ВсегоУмСтТовУчНалВсего КАК ВсегоУмСтТовУчНалВсего,
               |	СчетФактураВыданный.ВсегоУмСумНДС КАК ВсегоУмСумНДС,
               |	СчетФактураВыданный.ВсегоУмСтТовБезНДСВсего КАК ВсегоУмСтТовБезНДСВсего,
               |	СчетФактураВыданный.ВсегоУвелСтТовУчНалВсего КАК ВсегоУвелСтТовУчНалВсего,
               |	СчетФактураВыданный.ВсегоУвелСумНДС КАК ВсегоУвелСумНДС,
               |	СчетФактураВыданный.ВсегоУвелСтТовБезНДСВсего КАК ВсегоУвелСтТовБезНДСВсего,
               |	ЕСТЬNULL(События_Источник.ИдентификаторЦепочки, """") КАК ИдентификаторЦепочки,
               |	МАКСИМУМ(ЕСТЬNULL(События_ТекСчфОтправленный.ДатаЗаписи, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаЗаписиТекСЧФОтправленный,
               |	МАКСИМУМ(ЕСТЬNULL(События_ПредСчфОтправленный.ДатаЗаписи, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаЗаписиПредСЧФОтправленный,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки, СчетФактураВыданный.ДокументОснованиеТекСЧФ.Партнер) КАК ТочкаДоставкиЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.НомерЗаказа, """") КАК НомерЗаказаЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаЗаказа, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаказаЦепочка,
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоставкиЦепочка
               |ПОМЕСТИТЬ ВТ_ДанныеРегСведПоСчФ
               |ИЗ
               |	ВТ_ДанныеТаблЧастьСЧФ КАК СчетФактураВыданный
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК События_Источник
               |		ПО СчетФактураВыданный.Ссылка = События_Источник.Документ
               |			И (События_Источник.ВидДокумента = ""СчетФактура_Исходящий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
               |		ПО (События_Источник.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
			   |			И (РАЗНОСТЬДАТ(DR_ЦепочкиДокументов.ДатаЗаказа, События_Источник.ДатаЗаписи, ДЕНЬ) МЕЖДУ 0 И &amp;ПериодСвязиДокументов)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК События_ТекСчфОтправленный
               |		ПО (DR_ЦепочкиДокументов.ИдентификаторЦепочки = События_ТекСчфОтправленный.ИдентификаторЦепочки)
               |			И (События_ТекСчфОтправленный.ВидДокумента В (&amp;DRВидыДокументовТекСчФ))
               |			И СчетФактураВыданный.Ссылка = События_ТекСчфОтправленный.Документ
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК События_ПредСчфОтправленный
               |		ПО (DR_ЦепочкиДокументов.ИдентификаторЦепочки = События_ПредСчфОтправленный.ИдентификаторЦепочки)
               |			И (События_ПредСчфОтправленный.ВидДокумента В (&amp;DRВидыДокументовПредСчФ))
               |			И СчетФактураВыданный.ПредыдущийСчетФактура = События_ПредСчфОтправленный.Документ
               |
               |СГРУППИРОВАТЬ ПО
               |	СчетФактураВыданный.Ссылка,
               |	СчетФактураВыданный.НомерТекСчф,
               |	СчетФактураВыданный.ДатаТекСчф,
               |	СчетФактураВыданный.ИсходныйСчетФактура,
               |	СчетФактураВыданный.ПредыдущийСчетФактура,
               |	СчетФактураВыданный.ДокументОснованиеТекСЧФ,
               |	СчетФактураВыданный.ДокументОснованиеИсхСЧФ,
               |	СчетФактураВыданный.ДоговорКонтрагента,
               |	СчетФактураВыданный.КоличествоМаркПозиций,
               |	СчетФактураВыданный.ВсегоУмСтТовУчНалВсего,
               |	СчетФактураВыданный.ВсегоУмСумНДС,
               |	СчетФактураВыданный.ВсегоУмСтТовБезНДСВсего,
               |	СчетФактураВыданный.ВсегоУвелСтТовУчНалВсего,
               |	СчетФактураВыданный.ВсегоУвелСумНДС,
               |	СчетФактураВыданный.ВсегоУвелСтТовБезНДСВсего,
               |	СчетФактураВыданный.Организация,
               |	СчетФактураВыданный.Контрагент,
               |	ЕСТЬNULL(События_Источник.ИдентификаторЦепочки, """"),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ТочкаДоставки, СчетФактураВыданный.ДокументОснованиеТекСЧФ.Партнер),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.НомерЗаказа, """"),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаПоставки, ДАТАВРЕМЯ(1, 1, 1)),
               |	ЕСТЬNULL(DR_ЦепочкиДокументов.ДатаЗаказа, ДАТАВРЕМЯ(1, 1, 1))
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТ_ДанныеРегСведПоСчФ.Ссылка КАК Ссылка,
               |	МАКСИМУМ(ЕСТЬNULL(События_ТекСчфОтправленный.Идентификатор, """")) КАК ИдентификаторТекСчФОтправленный,
               |	МАКСИМУМ(ЕСТЬNULL(События_ПредСчфОтправленный.Идентификатор, """")) КАК ИдентификаторПредСчФОтправленный
               |ПОМЕСТИТЬ ВТ_ИдентСчФОтправленных
               |ИЗ
               |	ВТ_ДанныеРегСведПоСчФ КАК ВТ_ДанныеРегСведПоСчФ
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК События_ТекСчфОтправленный
               |		ПО ВТ_ДанныеРегСведПоСчФ.ИдентификаторЦепочки = События_ТекСчфОтправленный.ИдентификаторЦепочки
               |			И (События_ТекСчфОтправленный.ВидДокумента В (&amp;DRВидыДокументовТекСчФ))
               |			И ВТ_ДанныеРегСведПоСчФ.Ссылка = События_ТекСчфОтправленный.Документ
               |			И ВТ_ДанныеРегСведПоСчФ.ДатаЗаписиТекСЧФОтправленный = События_ТекСчфОтправленный.ДатаЗаписи
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК События_ПредСчфОтправленный
               |		ПО ВТ_ДанныеРегСведПоСчФ.ИдентификаторЦепочки = События_ПредСчфОтправленный.ИдентификаторЦепочки
               |			И (События_ПредСчфОтправленный.ВидДокумента В (&amp;DRВидыДокументовПредСчФ))
               |			И ВТ_ДанныеРегСведПоСчФ.ПредыдущийСчетФактура = События_ПредСчфОтправленный.Документ
               |			И ВТ_ДанныеРегСведПоСчФ.ДатаЗаписиПредСЧФОтправленный = События_ПредСчфОтправленный.ДатаЗаписи
               |
               |СГРУППИРОВАТЬ ПО
               |	ВТ_ДанныеРегСведПоСчФ.Ссылка
               |
               |ИНДЕКСИРОВАТЬ ПО
               |	ВТ_ДанныеРегСведПоСчФ.Ссылка
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	Источник.Ссылка КАК Ссылка,
               |	Источник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	Источник.НомерТекСчф КАК НомерТекСчф,
               |	Источник.ДатаТекСчф КАК ДатаТекСчф,
               |	ЕСТЬNULL(Источник.ПредыдущийСчетФактура.СчетФактураОснование, Источник.ИсходныйСчетФактура) КАК ИсходныйСчетФактура,
               |	Источник.ПредыдущийСчетФактура КАК ПредыдущийСчетФактура,
               |	Источник.ДокументОснованиеТекСЧФ КАК ДокументОснованиеТекСЧФ,
               |	Источник.ДокументОснованиеИсхСЧФ КАК ДокументОснованиеИсхСЧФ,
               |	Источник.ДоговорКонтрагента КАК ДоговорКонтрагента,
               |	Источник.КоличествоМаркПозиций КАК КоличествоМаркПозиций,
               |	Источник.ВсегоУмСтТовУчНалВсего КАК ВсегоУмСтТовУчНалВсего,
               |	Источник.ВсегоУмСумНДС КАК ВсегоУмСумНДС,
               |	Источник.ВсегоУмСтТовБезНДСВсего КАК ВсегоУмСтТовБезНДСВсего,
               |	Источник.ВсегоУвелСтТовУчНалВсего КАК ВсегоУвелСтТовУчНалВсего,
               |	Источник.ВсегоУвелСумНДС КАК ВсегоУвелСумНДС,
               |	Источник.ВсегоУвелСтТовБезНДСВсего КАК ВсегоУвелСтТовБезНДСВсего,
               |	ВЫРАЗИТЬ(Заказ_События.Документ КАК Документ.ЗаказКлиента) КАК ЗаказКлиента,
               |	Источник.Организация КАК Организация,
               |	Источник.Контрагент КАК Контрагент,
               |	ВТ_ИдентСчФОтправленных.ИдентификаторТекСчФОтправленный КАК ИдентификаторТекСчФОтправленный,
               |	ВТ_ИдентСчФОтправленных.ИдентификаторПредСчФОтправленный КАК ИдентификаторПредСчФОтправленный,
               |	ДанныеТочкиДоставки.GLN КАК ТочкаДоставкиGLN,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_Номер.Значение КАК СТРОКА(25)), """") КАК RECADV_NUMBER,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_Дата.Значение КАК ДАТА), ДАТАВРЕМЯ(1, 1, 1)) КАК RECADV_DATE,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_CAMPAIGNNUMBER.Значение КАК СТРОКА(50)), """") КАК RECADV_CAMPAIGNNUMBER,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_ORDERVID.Значение КАК СТРОКА(25)), """") КАК ORDERVID,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(RECADV_RECADVVID.Значение КАК СТРОКА(25)), """") КАК RECADVVID,
               |	Источник.НомерЗаказаЦепочка КАК ORDER_NUMBER,
               |	Источник.ДатаЗаказаЦепочка КАК ORDER_DATE,
               |	Источник.ДатаПоставкиЦепочка КАК ORDER_DELIVERYDATE,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(ORDER_BUYERCODE.Значение КАК СТРОКА(13)), """") КАК ORDER_BUYERCODE,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(ORDER_INFO.Значение КАК СТРОКА(256)), """") КАК ORDER_INFO,
               |	ЕСТЬNULL(ВЫРАЗИТЬ(ORDER_CAMPAIGNNUMBER.Значение КАК СТРОКА(50)), """") КАК ORDER_CAMPAIGNNUMBER,
               |	POSITION.ХранилищеЗначения КАК ORDER_POSITION
               |ПОМЕСТИТЬ ВТ_Основная
               |ИЗ
               |	ВТ_ДанныеРегСведПоСчФ КАК Источник
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИдентСчФОтправленных КАК ВТ_ИдентСчФОтправленных
               |		ПО Источник.Ссылка = ВТ_ИдентСчФОтправленных.Ссылка
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Накладная_События
               |		ПО Источник.ИдентификаторЦепочки = Накладная_События.ИдентификаторЦепочки
               |			И (Накладная_События.ВидДокумента = ""Накладная_Исходящая"")
               |			И Источник.ДокументОснованиеИсхСЧФ = Накладная_События.Документ
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК RECADV_События
               |		ПО Источник.ИдентификаторЦепочки = RECADV_События.ИдентификаторЦепочки
               |			И (RECADV_События.ВидДокумента = ""RECADV_Входящий"")
               |			И (Накладная_События.Идентификатор = RECADV_События.ИдентификаторОснования)
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_CAMPAIGNNUMBER
               |		ПО (RECADV_События.Документ = RECADV_CAMPAIGNNUMBER.Ссылка)
               |			И (RECADV_CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNINFO"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Номер
               |		ПО (RECADV_События.Документ = RECADV_Номер.Ссылка)
               |			И (RECADV_Номер.Реквизит = ""NUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_Дата
               |		ПО (RECADV_События.Документ = RECADV_Дата.Ссылка)
               |			И (RECADV_Дата.Реквизит = ""ДатаЭлектронногоДокумента"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_ORDERVID
               |		ПО (RECADV_События.Документ = RECADV_ORDERVID.Ссылка)
               |			И (RECADV_ORDERVID.Реквизит = ""ORDERVID"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК RECADV_RECADVVID
               |		ПО (RECADV_События.Документ = RECADV_RECADVVID.Ссылка)
               |			И (RECADV_RECADVVID.Реквизит = ""RECADVVID"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК Заказ_События
               |		ПО (Накладная_События.ИдентификаторЦепочки = Заказ_События.ИдентификаторЦепочки)
               |			И (Заказ_События.ВидДокумента = ""Заказ_Входящий"")
               |			И (Накладная_События.ИдентификаторОснования = Заказ_События.Идентификатор)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_События КАК ORDER_События
               |		ПО (Заказ_События.ИдентификаторЦепочки = ORDER_События.ИдентификаторЦепочки)
               |			И (ORDER_События.ВидДокумента = ""ORDER_Входящий"")
               |			И (Заказ_События.ИдентификаторОснования = ORDER_События.Идентификатор)
               |			И (ORDER_События.Статус = ""Обработан"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК POSITION
               |		ПО (ORDER_События.Документ = POSITION.Ссылка)
               |			И (POSITION.Реквизит = ""POSITION"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDER_BUYERCODE
               |		ПО (ORDER_События.Документ = ORDER_BUYERCODE.Ссылка)
               |			И (ORDER_BUYERCODE.Реквизит = ""BUYERCODE"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDER_INFO
               |		ПО (ORDER_События.Документ = ORDER_INFO.Ссылка)
               |			И (ORDER_INFO.Реквизит = ""INFO"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.DR_Документ.ДополнительныеРеквизиты КАК ORDER_CAMPAIGNNUMBER
               |		ПО (ORDER_События.Документ = ORDER_CAMPAIGNNUMBER.Ссылка)
               |			И (ORDER_CAMPAIGNNUMBER.Реквизит = ""CAMPAIGNNUMBER"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ТочкиДоставки КАК ДанныеТочкиДоставки
               |		ПО Источник.ТочкаДоставкиЦепочка = ДанныеТочкиДоставки.Объект
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ РАЗЛИЧНЫЕ
               |	ВТ_Основная.Организация КАК Организация,
               |	ВТ_Основная.Контрагент КАК Контрагент
               |ПОМЕСТИТЬ ВТ_УчастникиЭДО
               |ИЗ
               |	ВТ_Основная КАК ВТ_Основная
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ДанныеУчастникиЭДО.Организация КАК Организация,
               |	ДанныеУчастникиЭДО.Контрагент КАК Контрагент,
               |	ДанныеОрганизации.GLN КАК ОрганизацияGLN,
               |	ДанныеОрганизации.Ид_ОЭД КАК ОрганизацияИдОЭД,
               |	ПРЕДСТАВЛЕНИЕ(ДанныеОрганизации.Партнер) КАК ОрганизацияНаимОператор,
               |	ДанныеОрганизации.Сертификат КАК ОрганизацияДанныеСертификата,
               |	ДанныеОрганизации.ПоддерживаетМЧД КАК ОрганизацияПоддерживаетМЧД,
               |	ДанныеОрганизации.eXiteАдр_Город КАК ОрганизацияГород,
               |	ДанныеОрганизации.eXiteАдр_Индекс КАК ОрганизацияИндекс,
               |	ДанныеОрганизации.eXiteАдр_Дом КАК ОрганизацияДом,
               |	ДанныеОрганизации.eXiteАдр_КодРегиона КАК ОрганизацияКодРегиона,
               |	ДанныеОрганизации.eXiteАдр_Улица КАК ОрганизацияУлица,
               |	ДанныеОрганизации.eXiteАдр_Район КАК ОрганизацияРайон,
               |	ДанныеОрганизации.eXiteАдр_НаселПункт КАК ОрганизацияНаселенныйПункт,
               |	ДанныеОрганизации.eXiteАдр_Корпус КАК ОрганизацияКорпус,
               |	ДанныеОрганизации.eXiteАдр_Кварт КАК ОрганизацияКвартира,
               |	ДанныеКонтрагента.Ид_ОЭД КАК КонтрагентИдОЭД,
               |	ДанныеКонтрагента.GLN КАК КонтрагентGLN,
               |	ДанныеКонтрагента.Контрагент_ФорматЭСФ КАК КонтрагентФорматУПД,
               |	ДанныеКонтрагента.Контрагент_ЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
               |	ДанныеКонтрагента.ПоддерживаетМЧД КАК КонтрагентОтправитьМЧД,
               |	ДанныеКонтрагента.eXiteАдр_Город КАК КонтрагентГород,
               |	ДанныеКонтрагента.eXiteАдр_Дом КАК КонтрагентДом,
               |	ДанныеКонтрагента.eXiteАдр_Индекс КАК КонтрагентИндекс,
               |	ДанныеКонтрагента.eXiteАдр_КодРегиона КАК КонтрагентКодРегиона,
               |	ДанныеКонтрагента.eXiteАдр_Улица КАК КонтрагентУлица,
               |	ДанныеКонтрагента.eXiteАдр_Район КАК КонтрагентРайон,
               |	ДанныеКонтрагента.eXiteАдр_НаселПункт КАК КонтрагентНаселенныйПункт,
               |	ДанныеКонтрагента.eXiteАдр_Корпус КАК КонтрагентКорпус,
               |	ДанныеКонтрагента.eXiteАдр_Кварт КАК КонтрагентКвартира,
               |	ВЫРАЗИТЬ(ОрганизацияОператорИд.Значение КАК СТРОКА(3)) КАК ОрганизацияИдЭДООператор,
               |	ОрганизацияОператорИНН.Значение КАК ОрганизацияИННЮЛОператор,
               |	ВЫРАЗИТЬ(КонтрагентОператорИд.Значение КАК СТРОКА(3)) КАК КонтрагентОператорИд,
               |	ВЫРАЗИТЬ(ДолжностьПодписанта.Значение КАК СТРОКА(100)) КАК ПодписантДолжность,
               |	ВЫРАЗИТЬ(ФамилияПодписанта.Значение КАК СТРОКА(50)) КАК ПодписантФамилия,
               |	ВЫРАЗИТЬ(ИмяПодписанта.Значение КАК СТРОКА(50)) КАК ПодписантИмя,
               |	ВЫРАЗИТЬ(ОтчествоПодписанта.Значение КАК СТРОКА(50)) КАК ПодписантОтчество,
               |	ВЫРАЗИТЬ(СертификатОбластьПолномочий.Значение КАК СТРОКА(1)) КАК ПодписантОблПолн,
               |	ВЫРАЗИТЬ(СертификатОснованиеПолномочий.Значение КАК СТРОКА(256)) КАК ПодписантОснПолн,
               |	ВЫРАЗИТЬ(СертификатСтатусПодписанта.Значение КАК СТРОКА(3)) КАК ПодписантСтатус,
               |	ВЫРАЗИТЬ(СертификатНаСервере.Значение КАК БУЛЕВО) КАК СертификатНаСервере,
               |	(ВЫРАЗИТЬ(ОрганизацияОператорИд.Значение КАК СТРОКА(3))) + ДанныеОрганизации.Ид_ОЭД КАК ИдОтпр,
               |	(ВЫРАЗИТЬ(КонтрагентОператорИд.Значение КАК СТРОКА(3))) + ДанныеКонтрагента.Ид_ОЭД КАК ИдПок,
               |	ДанныеКонтрагента.ПодтверждениеПолномочий КАК КонтрагентПодтверждениеПолномочий
               |ПОМЕСТИТЬ ВТ_СОУП
               |ИЗ
               |	ВТ_УчастникиЭДО КАК ДанныеУчастникиЭДО
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК ДанныеКонтрагента
               |		ПО (ДанныеУчастникиЭДО.Контрагент = ДанныеКонтрагента.Объект)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_GLN КАК ДанныеОрганизации
               |		ПО (ДанныеУчастникиЭДО.Организация = ДанныеОрганизации.Объект)
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК КонтрагентОператорИд
               |		ПО (КонтрагентОператорИд.Ссылка = ДанныеКонтрагента.Партнер)
               |			И (КонтрагентОператорИд.Реквизит = ""Идентификатор"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОрганизацияОператорИд
               |		ПО (ОрганизацияОператорИд.Ссылка = ДанныеОрганизации.Партнер)
               |			И (ОрганизацияОператорИд.Реквизит = ""Идентификатор"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОрганизацияОператорИНН
               |		ПО (ОрганизацияОператорИНН.Ссылка = ДанныеОрганизации.Партнер)
               |			И (ОрганизацияОператорИНН.Реквизит = ""ИНН"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ДолжностьПодписанта
               |		ПО (ДолжностьПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ДолжностьПодписанта.Реквизит = ""ДолжностьПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ФамилияПодписанта
               |		ПО (ФамилияПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ФамилияПодписанта.Реквизит = ""ФамилияПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ИмяПодписанта
               |		ПО (ИмяПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ИмяПодписанта.Реквизит = ""ИмяПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК ОтчествоПодписанта
               |		ПО (ОтчествоПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (ОтчествоПодписанта.Реквизит = ""ОтчествоПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатОбластьПолномочий
               |		ПО (СертификатОбластьПолномочий.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатОбластьПолномочий.Реквизит = ""ОбластьПолномочий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатОснованиеПолномочий
               |		ПО (СертификатОснованиеПолномочий.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатОснованиеПолномочий.Реквизит = ""ОснованиеПолномочий"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатСтатусПодписанта
               |		ПО (СертификатСтатусПодписанта.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатСтатусПодписанта.Реквизит = ""СтатусПодписанта"")
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки.ДополнительныеРеквизиты КАК СертификатНаСервере
               |		ПО (СертификатНаСервере.Ссылка = ДанныеОрганизации.Сертификат)
               |			И (СертификатНаСервере.Реквизит = ""СертификатНаСервере"")
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	ВТОсновная.Ссылка КАК Ссылка,
               |	ВТОсновная.НомерТекСчф КАК НомерТекСчф,
               |	ВТОсновная.ДатаТекСчф КАК ДатаТекСчф,
               |	""КСЧФДИС"" КАК ДокФункция,
               |	""643"" КАК КодОКВ,
               |	""Docrobot 1C"" КАК ВерсПрог,
               |	""5.01"" КАК ВерсФорм,
               |	""1115133"" КАК КНД,
               |	""КорСчФ"" КАК ТипДок,
               |	""ON_NKORSCHFDOPPR"" КАК ТипФайла,
               |	""ON_NKORSCHFDOPPR_01_Исходящий"" КАК ВидДокумента,
               |	ВТОсновная.ВсегоУмСтТовУчНалВсего КАК ВсегоУмСтТовУчНалВсего,
               |	ВТОсновная.ВсегоУмСумНДС КАК ВсегоУмСумНал,
               |	ВТОсновная.ВсегоУмСтТовБезНДСВсего КАК ВсегоУмСтТовБезНДСВсего,
               |	НЕОПРЕДЕЛЕНО КАК ВсегоУмБезНДС,
               |	ВТОсновная.ВсегоУвелСтТовУчНалВсего КАК ВсегоУвелСтТовУчНалВсего,
               |	ВТОсновная.ВсегоУвелСумНДС КАК ВсегоУвелСумНал,
               |	ВТОсновная.ВсегоУвелСтТовБезНДСВсего КАК ВсегоУвелСтТовБезНДСВсего,
               |	ВТОсновная.ДокументОснованиеТекСЧФ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
               |	НЕОПРЕДЕЛЕНО КАК ВсегоУвелБезНДС,
               |	ВТОсновная.ДокументОснованиеТекСЧФ КАК ДокументОснованиеТекСчФ,
               |	ВТОсновная.ДокументОснованиеИсхСЧФ КАК ДокументОснованиеИсхСчФ,
               |	ВТОсновная.ДокументОснованиеИсхСЧФ.Дата КАК ДатаДокументОснованиеИсхСчФ,
               |	ВТОсновная.ИсходныйСчетФактура КАК ИсходныйСчетФактура,
               |	ВТОсновная.ИсходныйСчетФактура.Дата КАК ДатаИсходныйСчетФактура,
               |	ВТОсновная.ПредыдущийСчетФактура КАК ПредыдущийСчетФактура,
               |	ВТОсновная.ПредыдущийСчетФактура.Дата КАК ДатаПредыдущийСчетФактура,
               |	ВТОсновная.ПредыдущийСчетФактура.НомерИсправления КАК НомерИспПредыдущийСчетФактура,
               |	ЕСТЬNULL(ВТОсновная.ДоговорКонтрагента.Номер, """") КАК НомерДоговорКонтрагента,
               |	ЕСТЬNULL(ВТОсновная.ДоговорКонтрагента.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговорКонтрагента,
               |	ВТОсновная.ЗаказКлиента КАК ЗаказКлиента,
               |	ВТОсновная.ИдентификаторТекСчФОтправленный КАК ИдентификаторТекСчФОтправленный,
               |	ВТОсновная.ИдентификаторПредСчФОтправленный КАК ИдентификаторПредСчФОтправленный,
               |	ВТОсновная.Организация КАК Организация,
               |	ВЫБОР
               |		КОГДА ВТОсновная.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА ВТОсновная.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
               |			ТОГДА ""ИП""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ КАК ПродТипОрганизации,
               |	ВТОсновная.Организация.НаименованиеПолное КАК ПродНаимОрг,
               |	ВТОсновная.Организация.ИНН КАК ПродИННЮЛ,
               |	ВТОсновная.Организация.КПП КАК ПродКПП,
               |	ВТОсновная.Организация.ОГРН КАК ОрганизацияОГРН,
               |	ВТОсновная.Организация.СвидетельствоСерияНомер КАК ОрганизацияСвидетельствоСерияНомер,
               |	ВТОсновная.Организация.СвидетельствоДатаВыдачи КАК ОрганизацияСвидетельствоДатаВыдачи,
               |	ВТ_СОУП.ОрганизацияИдОЭД КАК ОрганизацияИдОЭД,
               |	ВТ_СОУП.ОрганизацияGLN КАК ОрганизацияGLN,
               |	ВТ_СОУП.ОрганизацияПоддерживаетМЧД КАК ОрганизацияПоддерживаетМЧД,
               |	ВТ_СОУП.ОрганизацияНаимОператор КАК НаимОргОператор,
               |	ВТ_СОУП.ОрганизацияИдЭДООператор КАК ИдЭДООператор,
               |	ВТ_СОУП.ОрганизацияИННЮЛОператор КАК ИННЮЛОператор,
               |	ВТ_СОУП.ОрганизацияДанныеСертификата КАК ОрганизацияДанныеСертификата,
               |	ВТ_СОУП.ОрганизацияГород КАК ПродГород,
               |	ВТ_СОУП.ОрганизацияИндекс КАК ПродИндекс,
               |	ВТ_СОУП.ОрганизацияДом КАК ПродДом,
               |	ВТ_СОУП.ОрганизацияКодРегиона КАК ПродКодРегион,
               |	ВТ_СОУП.ОрганизацияУлица КАК ПродУлица,
               |	ВТ_СОУП.ОрганизацияРайон КАК ПродРайон,
               |	ВТ_СОУП.ОрганизацияНаселенныйПункт КАК ПродНаселПункт,
               |	ВТ_СОУП.ОрганизацияКорпус КАК ПродКорпус,
               |	ВТ_СОУП.ОрганизацияКвартира КАК ПродКварт,
               |	ВТОсновная.Контрагент КАК Контрагент,
               |	ВЫБОР
               |		КОГДА ВТОсновная.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
               |			ТОГДА ""ЮЛ""
               |		КОГДА ВТОсновная.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
               |			ТОГДА ""ИП""
               |		ИНАЧЕ ""ЮЛ""
               |	КОНЕЦ КАК ПокТипОрганизации,
               |	ВТОсновная.Контрагент.Наименование КАК ПокНаимОрг,
               |	ВТОсновная.Контрагент.ИНН КАК ПокИННЮЛ,
               |	ВТОсновная.Контрагент.КПП КАК ПокКПП,
               |	ВТ_СОУП.КонтрагентИдОЭД КАК КонтрагентИдОЭД,
               |	ВТ_СОУП.КонтрагентGLN КАК КонтрагентGLN,
               |	ВТ_СОУП.КонтрагентОтправитьМЧД КАК КонтрагентОтправитьМЧД,
               |	ВТ_СОУП.КонтрагентОператорИд КАК КонтрагентОператорИд,
               |	ВТ_СОУП.КонтрагентФорматУПД КАК ФорматУПД,
               |	ВТ_СОУП.КонтрагентЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
               |	ВТ_СОУП.КонтрагентГород КАК ПокГород,
               |	ВТ_СОУП.КонтрагентКодРегиона КАК ПокКодРегион,
               |	ВТ_СОУП.КонтрагентДом КАК ПокДом,
               |	ВТ_СОУП.КонтрагентИндекс КАК ПокИндекс,
               |	ВТ_СОУП.КонтрагентУлица КАК ПокУлица,
               |	ВТ_СОУП.КонтрагентРайон КАК ПокРайон,
               |	ВТ_СОУП.КонтрагентНаселенныйПункт КАК ПокНаселПункт,
               |	ВТ_СОУП.КонтрагентКорпус КАК ПокКорпус,
               |	ВТ_СОУП.КонтрагентКвартира КАК ПокКварт,
               |	ВТОсновная.ТочкаДоставкиGLN КАК ТочкаДоставкиGLN,
               |	ВТОсновная.Организация.ИНН КАК ПодписантИНН,
               |	ВТ_СОУП.ПодписантДолжность КАК ПодписантДолжность,
               |	ВТ_СОУП.ПодписантФамилия КАК ПодписантФамилия,
               |	ВТ_СОУП.ПодписантИмя КАК ПодписантИмя,
               |	ВТ_СОУП.ПодписантОтчество КАК ПодписантОтчество,
               |	ВТ_СОУП.ПодписантОблПолн КАК ПодписантОблПолн,
               |	ВТ_СОУП.ПодписантОснПолн КАК ПодписантОснПолн,
               |	ВТ_СОУП.ПодписантСтатус КАК ПодписантСтатус,
               |	ВТ_СОУП.СертификатНаСервере КАК СертификатНаСервере,
               |	ВТ_СОУП.ИдОтпр КАК ИдОтпр,
               |	ВТ_СОУП.ИдПок КАК ИдПок,
               |	ВТОсновная.RECADV_NUMBER КАК RECADV_NUMBER,
               |	ВТОсновная.RECADV_DATE КАК RECADV_DATE,
               |	ВТОсновная.RECADV_CAMPAIGNNUMBER КАК RECADV_CAMPAIGNNUMBER,
               |	ВТОсновная.ORDERVID КАК ORDERVID,
               |	ВТОсновная.RECADVVID КАК RECADVVID,
               |	ВТОсновная.ORDER_NUMBER КАК ORDER_NUMBER,
               |	ВТОсновная.ORDER_DATE КАК ORDER_DATE,
               |	ВТОсновная.ORDER_DELIVERYDATE КАК ORDER_DELIVERYDATE,
               |	ВТОсновная.ORDER_BUYERCODE КАК ORDER_BUYERCODE,
               |	ВТОсновная.ORDER_INFO КАК ORDER_INFO,
               |	ВТОсновная.ORDER_CAMPAIGNNUMBER КАК ORDER_CAMPAIGNNUMBER,
               |	ВТОсновная.ORDER_POSITION КАК ORDER_POSITION,
               |	ВЫБОР
               |		КОГДА ВТОсновная.КоличествоМаркПозиций &lt;&gt; 0
               |			ТОГДА ИСТИНА
               |		ИНАЧЕ ЛОЖЬ
               |	КОНЕЦ КАК ЭтоМаркируемыйЮЗД,
               |	ЛОЖЬ КАК ЭтоПрослеживаемыйЮЗД,
               |	ЕСТЬNULL(DR_ИнфоПоля.Ссылка, НЕОПРЕДЕЛЕНО) КАК ИнфоПоля,
               |	ВТОсновная.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	ВТ_СОУП.КонтрагентПодтверждениеПолномочий КАК КонтрагентСпосПодтПолном
               |ИЗ
               |	ВТ_Основная КАК ВТОсновная
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СОУП КАК ВТ_СОУП
               |		ПО (ВТОсновная.Организация = ВТ_СОУП.Организация)
               |			И (ВТОсновная.Контрагент = ВТ_СОУП.Контрагент)
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.DR_Настройки КАК DR_ИнфоПоля
               |		ПО (DR_ИнфоПоля.ВидНастройки = ""ИнфоПоля"")
               |			И (ВТ_СОУП.КонтрагентФорматУПД = DR_ИнфоПоля.Наименование)
               |			И (НЕ DR_ИнфоПоля.ПометкаУдаления)";
                       
Запрос.УстановитьПараметр("Источник", Источник);
Запрос.УстановитьПараметр("DRВидыДокументовТекСчФ", DRВидыДокументовТекСчФ);
Запрос.УстановитьПараметр("DRВидыДокументовПредСчФ", DRВидыДокументовПредСчФ);
Запрос.УстановитьПараметр("ПериодСвязиДокументов", DR_EDI_ОбщегоНазначения.Настройка_Параметр_Прочитать("EDI_ПериодСвязиДокументов"));

РезультатЗапроса = Запрос.ВыполнитьПакет();

ИНДЕКС = РезультатЗапроса.Вграница();
ВыборкаДокумента = РезультатЗапроса[ИНДЕКС].Выбрать();

РезультатШапкаПодвалУПД = Новый ТаблицаЗначений;

КвалификаторСтроки 		= Новый КвалификаторыСтроки(500,ДопустимаяДлина.Переменная);
КвалификаторДаты		= Новый КвалификаторыДаты(ЧастиДаты.Дата);

ОписаниеТиповСтрока 		= Новый ОписаниеТипов("Строка"	, КвалификаторСтроки);
ОписаниеТиповДата   		= Новый ОписаниеТипов("Дата"	, КвалификаторДаты);
ОписаниеТиповБулево 		= Новый ОписаниеТипов("Булево");
ОписаниеТиповСчФ    		= Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный");
ОписаниеТиповDRДокумент  	= Новый ОписаниеТипов("ДокументСсылка.DR_Документ");
ОписаниеТиповЗаказКлиента  	= Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента");
ОписаниеТиповОрганизации  	= Новый ОписаниеТипов("СправочникСсылка.Организации");
ОписаниеТиповКонтрагенты  	= Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
ОписаниеТиповКорРТУ  		= Новый ОписаниеТипов("ДокументСсылка.КорректировкаРеализации");
ОписаниеТиповРТУ  			= Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
ОписаниеТиповDRНастройки  	= Новый ОписаниеТипов("СправочникСсылка.DR_Настройки");


//&lt;Служебные поля&gt; ключ по алфавиту
СтруктураПолей = Новый Структура;
СтруктураПолей.Вставить("ВидДокумента"					, ОписаниеТиповСтрока); 
СтруктураПолей.Вставить("ДокументОснованиеТекСчФ"		, ОписаниеТиповКорРТУ);
СтруктураПолей.Вставить("ДокументОснованиеИсхСчФ"		, ОписаниеТиповРТУ);
СтруктураПолей.Вставить("ДатаДокументОснованиеИсхСчФ"	, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ЗаказКлиента"					, ОписаниеТиповЗаказКлиента);
СтруктураПолей.Вставить("ИнфоПоля"						, ОписаниеТиповDRНастройки);
СтруктураПолей.Вставить("ИдентификаторЦепочки"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ИдентификаторЭлДокумента"		, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("КонтрагентОтправитьМЧД"		, ОписаниеТиповБулево);
СтруктураПолей.Вставить("КонтрагентЭСФБезИнфПоля"		, ОписаниеТиповБулево);
СтруктураПолей.Вставить("Контрагент"					, ОписаниеТиповКонтрагенты);
СтруктураПолей.Вставить("НомерИспПредыдущийСчетФактура"	, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("НомерДокументОснованиеИсхСчФ"	, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("Организация"					, ОписаниеТиповОрганизации);
СтруктураПолей.Вставить("ОргСвГосРегИП"					, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ОрганизацияДанныеСертификата"	, ОписаниеТиповDRНастройки);
СтруктураПолей.Вставить("Ссылка"						, ОписаниеТиповСчФ);
СтруктураПолей.Вставить("Статус"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("СтрокаМЧД"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("СертификатНаСервере"			, ОписаниеТиповБулево);
СтруктураПолей.Вставить("ТипДок"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ТипФайла"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ФайлИмя"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ФорматУПД"						, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ЦенаВключаетНДС"				, ОписаниеТиповБулево);
СтруктураПолей.Вставить("ЭтоМаркируемыйЮЗД"				, ОписаниеТиповБулево);

СтруктураПолей.Вставить("ORDER_NUMBER"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_DATE" 			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_CAMPAIGNNUMBER"	, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_INFO"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDER_BUYERCODE"		, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADV_CAMPAIGNNUMBER"	, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADV_NUMBER"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADV_DATE"			, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("RECADVVID"				, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("ORDERVID"				, ОписаниеТиповСтрока);
СтруктураПолей.Вставить("GUIDФайла"				, ОписаниеТиповСтрока); 
СтруктураПолей.Вставить("GUIDДокОснование"		, ОписаниеТиповСтрока);
//&lt;/Служебные поля&gt;

Для каждого ЭлСтруктуры Из СтруктураПолей Цикл 
	РезультатШапкаПодвалУПД.Колонки.Добавить(ЭлСтруктуры.Ключ, ЭлСтруктуры.Значение);		
КонецЦикла;

МассивКолонок = Новый Массив;

//&lt;Файл&gt;
МассивКолонок.Добавить("ИдФайл");
МассивКолонок.Добавить("ВерсПрог");
МассивКолонок.Добавить("ВерсФорм");

//&lt;&lt;СвУчДокОбор&gt;&gt;
МассивКолонок.Добавить("ИдОтпр");
МассивКолонок.Добавить("ИдПок");

//&lt;СвОЭДОтпр&gt;
МассивКолонок.Добавить("НаимОргОператор");
МассивКолонок.Добавить("ИдЭДООператор");
МассивКолонок.Добавить("ИННЮЛОператор");
//&lt;&lt;/СвУчДокОбор&gt;&gt;

//&lt;Документ&gt;
МассивКолонок.Добавить("КНД");
МассивКолонок.Добавить("ДокФункция");
МассивКолонок.Добавить("ПоФактХЖ");
МассивКолонок.Добавить("НаимДокОпр");
МассивКолонок.Добавить("ДатаИнфПр");
МассивКолонок.Добавить("ВремИнфПр");
МассивКолонок.Добавить("НаимЭконСубСост");

//&lt;СвКСчФ&gt;
МассивКолонок.Добавить("НомерКСчФ");
МассивКолонок.Добавить("ДатаКСчФ");
МассивКолонок.Добавить("КодОКВ");

//&lt;СчФ&gt;
МассивКолонок.Добавить("НомерСчФ");
МассивКолонок.Добавить("ДатаСчФ");

//&lt;ИспрСчФ&gt;
МассивКолонок.Добавить("ДатаИспрСчФ");
МассивКолонок.Добавить("НомИспрСчФ");
//&lt;/СчФ&gt;

//&lt;&lt;СвПрод&gt;&gt;
МассивКолонок.Добавить("ПродТипОрганизации");  //Служебное поле

//&lt;АдрРФ&gt;
МассивКолонок.Добавить("ПродТипАдреса");
МассивКолонок.Добавить("ПродИндекс");
МассивКолонок.Добавить("ПродКодРегион");
МассивКолонок.Добавить("ПродРайон");
МассивКолонок.Добавить("ПродГород");
МассивКолонок.Добавить("ПродНаселПункт");
МассивКолонок.Добавить("ПродУлица");
МассивКолонок.Добавить("ПродДом");
МассивКолонок.Добавить("ПродКорпус");
МассивКолонок.Добавить("ПродКварт");

//&lt;СвЮЛУч&gt;
МассивКолонок.Добавить("ПродНаимОрг");
МассивКолонок.Добавить("ПродИННЮЛ");
МассивКолонок.Добавить("ПродКПП");

//&lt;СвИП&gt;
МассивКолонок.Добавить("ПродИННФЛ");
МассивКолонок.Добавить("ПродСвГосРегИП");

//&lt;ФИО&gt;
МассивКолонок.Добавить("ПродФамилияИП");
МассивКолонок.Добавить("ПродИмяИП");
МассивКолонок.Добавить("ПродОтчествоИП");
//&lt;&lt;/СвПрод&gt;&gt;

//&lt;&lt;СвПокуп&gt;&gt;
МассивКолонок.Добавить("ПокТипОрганизации");

//&lt;АдрРФ&gt;
МассивКолонок.Добавить("ПокТипАдреса"); //Служебное поле
МассивКолонок.Добавить("ПокИндекс");
МассивКолонок.Добавить("ПокКодРегион");
МассивКолонок.Добавить("ПокРайон");
МассивКолонок.Добавить("ПокГород");
МассивКолонок.Добавить("ПокНаселПункт");
МассивКолонок.Добавить("ПокУлица");
МассивКолонок.Добавить("ПокДом");
МассивКолонок.Добавить("ПокКорпус");
МассивКолонок.Добавить("ПокКварт");

//&lt;СвЮЛУч&gt;
МассивКолонок.Добавить("ПокНаимОрг");
МассивКолонок.Добавить("ПокИННЮЛ");
МассивКолонок.Добавить("ПокКПП");

//&lt;СвИП&gt;
МассивКолонок.Добавить("ПокИННФЛ");
МассивКолонок.Добавить("ПокСвГосРегИП");

//&lt;ФИО&gt;
МассивКолонок.Добавить("ПокФамилияИП");
МассивКолонок.Добавить("ПокИмяИП");
МассивКолонок.Добавить("ПокОтчествоИП");
//&lt;&lt;/СвПокуп&gt;&gt;

//&lt;ИнфПолФХЖ1&gt;
МассивКолонок.Добавить("ИнфТекст");

//&lt;ВсегоУвел&gt;
МассивКолонок.Добавить("ВсегоУвелСтТовБезНДСВсего");
МассивКолонок.Добавить("ВсегоУвелСтТовУчНалВсего");
МассивКолонок.Добавить("ВсегоУвелСумНал");
МассивКолонок.Добавить("ВсегоУвелБезНДС");

//&lt;ВсегоУм&gt;
МассивКолонок.Добавить("ВсегоУмСтТовБезНДСВсего");
МассивКолонок.Добавить("ВсегоУмСтТовУчНалВсего");
МассивКолонок.Добавить("ВсегоУмСумНал");
МассивКолонок.Добавить("ВсегоУмБезНДС");

//&lt;СодФХЖ3&gt;
МассивКолонок.Добавить("СодОпер"); //Содержание операции
МассивКолонок.Добавить("ИныеСвИзмСтоим"); //Иные сведения об изменении стоимости

//Формат - ДД.ММ.ГГГГ.
МассивКолонок.Добавить("ДатаНапр"); //Дата направления на согласование (дата уведомления)

//&lt;ПередатДокум&gt;
МассивКолонок.Добавить("НаимПередатДокум");
МассивКолонок.Добавить("НомПередатДокум");
МассивКолонок.Добавить("ДатаПередатДокум");
МассивКолонок.Добавить("ДопСвПередатДокум");  //Дополнительные сведения 
МассивКолонок.Добавить("ИдентФайлПередатДокум");  //Идентификатор файла - основания

//&lt;ДокумОснКор&gt;
МассивКолонок.Добавить("НаимОсн");
МассивКолонок.Добавить("НомОсн");
МассивКолонок.Добавить("ДатаОсн");
МассивКолонок.Добавить("ДопСвОсн");  //Дополнительные сведения 
МассивКолонок.Добавить("ИдФайлОсн");  //Идентификатор файла - основания
//&lt;/СодФХЖ3&gt;

//&lt;Подписант&gt;
МассивКолонок.Добавить("ПодписантТип"); //Служебное поле
МассивКолонок.Добавить("ПодписантОблПолн");
МассивКолонок.Добавить("ПодписантОснПолн");
МассивКолонок.Добавить("ПодписантСтатус");
МассивКолонок.Добавить("ПодписантИНН"); //Поле для ЮЛ и ИП

//&lt;ЮЛ&gt;
МассивКолонок.Добавить("ПодписантДолжность");

//&lt;ИП&gt; Таблица 5.43
МассивКолонок.Добавить("ПодписантСвГосРегИП");
МассивКолонок.Добавить("ПодписантИныеСведИП");

//&lt;ФЛ&gt; Таблица 5.44
МассивКолонок.Добавить("ПодписантИННФЛ");
МассивКолонок.Добавить("ПодписантГосРегИПВыдДовФЛ");
МассивКолонок.Добавить("ПодписантИныеСведФЛ");

//&lt;ФИО&gt;
МассивКолонок.Добавить("ПодписантФамилия");
МассивКолонок.Добавить("ПодписантИмя");
МассивКолонок.Добавить("ПодписантОтчество");
//&lt;/Подписант&gt;

Для Каждого Колонка Из МассивКолонок Цикл
	РезультатШапкаПодвалУПД.Колонки.Добавить(Колонка);
КонецЦикла;

РезультатШапкаПодвалУПД.Индексы.Добавить("Ссылка");

ДанныеТЧНоменклатурORDER = Новый ТаблицаЗначений;
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Ссылка"				, ОписаниеТиповСЧФ);
ДанныеТЧНоменклатурORDER.Колонки.Добавить("Номенклатура"		, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ДанныеТЧНоменклатурORDER.Колонки.Добавить("POSITIONNUMBER"		, ОписаниеТиповСтрока);
ДанныеТЧНоменклатурORDER.Колонки.Добавить("QUANTITYOFCUINTU"	, ОписаниеТиповСтрока);
ДанныеТЧНоменклатурORDER.Колонки.Добавить("INFO"				, ОписаниеТиповСтрока);

Пока ВыборкаДокумента.Следующий() Цикл 
	
	//&lt;Служебные переменные&gt;
	ПредставлениеОрганизации  		= СокрЛП(ВыборкаДокумента.ПродНаимОрг);
	ПредставлениеКонтрагента   		= СокрЛП(ВыборкаДокумента.ПокНаимОрг);
	
	ИдентификаторТекСчФОтправленный  = ВыборкаДокумента.ИдентификаторТекСчФОтправленный;
	ИдентификаторПредСчФОтправленный = ВыборкаДокумента.ИдентификаторПредСчФОтправленный;
	
	НомерИспПредыдущийСчетФактура    = ВыборкаДокумента.НомерИспПредыдущийСчетФактура;
	
	ПредыдущийСчетФактура 			 = ВыборкаДокумента.ПредыдущийСчетФактура;
	ДатаПредыдущийСчетФактура 		 = Формат(ВыборкаДокумента.ДатаПредыдущийСчетФактура, "ДЛФ=Д");
	
	ИсходныйСчетФактура 			 = ВыборкаДокумента.ИсходныйСчетФактура;
	ДатаИсходныйСчетФактура 		 = Формат(ВыборкаДокумента.ДатаИсходныйСчетФактура, "ДЛФ=Д");
    //&lt;/Служебные переменные&gt;
    
    СтруктураДокумента = РезультатШапкаПодвалУПД.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтруктураДокумента, ВыборкаДокумента);
	
	Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.КонтрагентОператорИд) Тогда
        
        ТекстЛогаСобытий = "Не заполнены данные по оператору ЭДО для контрагента " + ПредставлениеКонтрагента;
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий,"Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
    КонецЕсли;

    Если НЕ ЗначениеЗаполнено(СтруктураДокумента.ИдЭДООператор)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ИННЮЛОператор) Тогда
        
        ТекстЛогаСобытий = "Не заполнены данные по оператору ЭДО для организации " + ПредставлениеОрганизации;
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
	КонецЕсли;
	
	СтруктураДокумента.ОргСвГосРегИП = ВыборкаДокумента.ОрганизацияОГРН + ", " + ВыборкаДокумента.ОрганизацияСвидетельствоСерияНомер 
										+ " от " + Формат(ВыборкаДокумента.ОрганизацияСвидетельствоДатаВыдачи, "ДЛФ=Д");
						
	СтруктураДокумента.ПодписантТип 		= ВыборкаДокумента.ПродТипОрганизации;
	СтруктураДокумента.ПодписантСвГосРегИП 	= ?(СтруктураДокумента.ПодписантТип = "ИП", СтруктураДокумента.ОргСвГосРегИП, "");
	
	ИспользованиеМЧД = ВыборкаДокумента.ОрганизацияПоддерживаетМЧД И ВыборкаДокумента.КонтрагентОтправитьМЧД и ВыборкаДокумента.КонтрагентСпосПодтПолном = "4";
	
	Если ИспользованиеМЧД Тогда
		
		СтрокаПоМЧД = ТаблицаМЧД.Найти(ВыборкаДокумента.Организация, "Организация");
		
		//&lt;Получение данных МЧД Подписант&gt;
		Если СтрокаПоМЧД &lt;&gt; Неопределено Тогда

			Если СтрокаПоМЧД.Сертификат = Null ИЛИ СтрокаПоМЧД.ТипСертификата = 2 И (НЕ ЗначениеЗаполнено(СтрокаПоМЧД.СтрокаМЧД) ИЛИ НЕ СтрокаПоМЧД.МЧД_Актуальна) Тогда  
	        
	        	ТекстЛогаСобытий = "Проверьте наличие доверенности для пользователя по Организации "
	        						+ ПредставлениеОрганизации;
									
				ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия); 
			
				РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        		
        		Продолжить;
			КонецЕсли;
		
			//ТипСертификата: 0 - Юр.Лицо, 1 - ИП, 2 - ФизЛицо.
			Если СтрокаПоМЧД.ТипСертификата = 2 Тогда	
	    		СтруктураДокумента.СтрокаМЧД 	= СтрокаПоМЧД.СтрокаМЧД;
				СтруктураДокумента.ПодписантТип = "ФЛ";
				СтруктураДокумента.ПодписантГосРегИПВыдДовФЛ = ?(СтруктураДокумента.ПродТипОрганизации = "ИП", СтруктураДокумента.ОргСвГосРегИП, "");
			КонецЕсли;	
		
			СтруктураДокумента.СертификатНаСервере		 	= СтрокаПоМЧД.СертификатНаСервере;
	    	СтруктураДокумента.ОрганизацияДанныеСертификата	= СтрокаПоМЧД.Сертификат;
		
			СтруктураДокумента.ПодписантДолжность		 = СтрокаПоМЧД.ДолжностьПодписанта;
			СтруктураДокумента.ПодписантФамилия  		 = СтрокаПоМЧД.ФамилияПодписанта;
			СтруктураДокумента.ПодписантИмя      		 = СтрокаПоМЧД.ИмяПодписанта;
			СтруктураДокумента.ПодписантОтчество  		 = СтрокаПоМЧД.ОтчествоПодписанта;
			СтруктураДокумента.ПодписантОблПолн          = СтрокаПоМЧД.ОбластьПолномочий;
			СтруктураДокумента.ПодписантОснПолн   		 = СтрокаПоМЧД.ОснованиеПолномочий;
			СтруктураДокумента.ПодписантСтатус    		 = СтрокаПоМЧД.СтатусПодписанта;
			СтруктураДокумента.ПодписантИННФЛ     		 = СтрокаПоМЧД.СертификатИНН;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантДолжность)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантИмя)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантФамилия)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантОтчество) 
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантОблПолн)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантОснПолн)
        ИЛИ НЕ ЗначениеЗаполнено(СтруктураДокумента.ПодписантСтатус) Тогда
        
        ТекстЛогаСобытий = "Проверьте корректность заполнения данных подписанта "
        					+ "(Должность, Фамилия, Имя, Отчество, Статус, Область/Основание полномочий) в Настройках сертификата по Организации: "
        					+ ПредставлениеОрганизации;
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;        
    КонецЕсли;
	
	Если СтруктураДокумента.ЭтоМаркируемыйЮЗД Тогда
    	
    	СтруктураДокумента.ТипФайла		= "ON_NKORSCHFDOPPRMARK";
		СтруктураДокумента.ВидДокумента	= "ON_NKORSCHFDOPPRMARK_01_Исходящий";
		
	КонецЕсли;
	
    Если ЗначениеЗаполнено(ПредыдущийСчетФактура) И ПустаяСтрока(ИдентификаторПредСчФОтправленный) Тогда
		
		ТекстЛогаСобытий = "На основании " + Строка(СтруктураДокумента.Ссылка) + " УКД не сформирован!!! Выполните отправку УПД/УКД по "
							+ Строка(ПредыдущийСчетФактура);							
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		
		РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;
	КонецЕсли;
	
	НомерКСчФ = Эком_ПолучитьНомерНаПечать(СтруктураДокумента.Ссылка, Истина, Ложь); //второй параметр убирает префикс, третий параметр убирает лидирующие нули.
	СтруктураДокумента.НомерКСчФ = НомерКСчФ;
	
	ДатаКСчФ = Формат(ВыборкаДокумента.ДатаТекСчф, "ДЛФ=Д");
	СтруктураДокумента.ДатаКСчФ = ДатаКСчФ;
	
	Если ПустаяСтрока(НомерИспПредыдущийСчетФактура) Тогда
		
		НомерСчФ = Эком_ПолучитьНомерНаПечать(ПредыдущийСчетФактура, Истина, Ложь); //второй параметр убирает префикс, третий параметр убирает лидирующие нули.
		СтруктураДокумента.НомерСчФ = НомерСчФ;
		
		СтруктураДокумента.ДатаСчФ = ДатаПредыдущийСчетФактура;
		
	Иначе
		
		НомерСчФ = Эком_ПолучитьНомерНаПечать(ИсходныйСчетФактура, Истина, Ложь); //второй параметр убирает префикс, третий параметр убирает лидирующие нули.
		СтруктураДокумента.НомерСчФ = НомерСчФ;
		
		СтруктураДокумента.ДатаСчФ = ДатаИсходныйСчетФактура;
		
		СтруктураДокумента.НомИспрСчФ  = НомерИспПредыдущийСчетФактура;
		СтруктураДокумента.ДатаИспрСчФ = ДатаПредыдущийСчетФактура;
		
	КонецЕсли;
	
	ИдентификаторДокОснование 			= ?(ПустаяСтрока(ИдентификаторТекСчФОтправленный), ИдентификаторПредСчФОтправленный, ИдентификаторТекСчФОтправленный); 
	СтруктураДокумента.GUIDДокОснование = ИдентификаторДокОснование;
	
	Если НЕ ЗначениеЗаполнено(ВыборкаДокумента.Организация)
        	ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Контрагент) Тогда
        
        ТекстЛогаСобытий = "Проверьте заполнение реквизитов (Организация/Контрагент) в " + Строка(ВыборкаДокумента.Ссылка);
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		
		РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;
    КонецЕсли;
    
	//&lt;Продавец ИП&gt;
    Если СтруктураДокумента.ПродТипОрганизации = "ИП" Тогда
		
		СтруктураДокумента.ПродИННФЛ = СтруктураДокумента.ПродИННЮЛ;
		СтруктураДокумента.ПродСвГосРегИП = СтруктураДокумента.ОргСвГосРегИП;
		
		ФИО = СтрЗаменить(СтруктураДокумента.ПродНаимОрг, "ИП ", "");
		ФИО = СтрЗаменить(ФИО, "Индивидуальный Предприниматель ", "");
		ФИО = СтрЗаменить(ФИО, "Индивидуальный предприниматель ", "");
		ФИО = СтрЗаменить(ФИО, " ", Символы.ПС);
		
        СтруктураДокумента.ПродФамилияИП 	= СтрПолучитьСтроку(ФИО,1);
        СтруктураДокумента.ПродИмяИП 		= СтрПолучитьСтроку(ФИО,2);
        СтруктураДокумента.ПродОтчествоИП 	= СтрПолучитьСтроку(ФИО,3);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураДокумента.ПокКПП) Тогда
		
		ТекстЛогаСобытий = "Не заполнен КПП по Контрагенту: " + ПредставлениеКонтрагента;
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;
    КонецЕсли;

	//&lt;Покупатель ИП&gt;
	Если СтруктураДокумента.ПокТипОрганизации = "ИП" Тогда
        		
        СтруктураДокумента.ПокИННФЛ = СокрЛП(СтруктураДокумента.ПокИННЮЛ);
		
		ФИО = СтрЗаменить(СтруктураДокумента.ПокНаимОрг, "ИП ", "");
		ФИО = СтрЗаменить(ФИО, "Индивидуальный Предприниматель ", "");
		ФИО = СтрЗаменить(ФИО, "Индивидуальный предприниматель ", "");
		ФИО = СтрЗаменить(ФИО, " ", Символы.ПС);
		
        СтруктураДокумента.ПокФамилияИП	= СтрПолучитьСтроку(ФИО,1);
        СтруктураДокумента.ПокИмяИП       = СтрПолучитьСтроку(ФИО,2);
        СтруктураДокумента.ПокОтчествоИП  = СтрПолучитьСтроку(ФИО,3);
		
    КонецЕсли;

    ОрганизацияКПП   = СокрЛП(СтруктураДокумента.ПродКПП);
    КонтрагентКПП    = СокрЛП(СтруктураДокумента.ПокКПП);

    СписокАдресов = Новый Структура;
    СписокАдресов.Вставить("ПродИндекс");
    СписокАдресов.Вставить("ПродКодРегион");
    СписокАдресов.Вставить("ПродРайон");
	СписокАдресов.Вставить("ПродГород");
	СписокАдресов.Вставить("ПродНаселПункт");
	СписокАдресов.Вставить("ПродУлица");
	СписокАдресов.Вставить("ПродДом");
	СписокАдресов.Вставить("ПродКорпус");
	СписокАдресов.Вставить("ПродКварт");
    СписокАдресов.Вставить("ПродКодРегионаИзКПП", Лев(ОрганизацияКПП, 2));

   	СписокАдресов.Вставить("ПокИндекс");
	СписокАдресов.Вставить("ПокКодРегион");
	СписокАдресов.Вставить("ПокРайон");
	СписокАдресов.Вставить("ПокГород");
	СписокАдресов.Вставить("ПокНаселПункт");
	СписокАдресов.Вставить("ПокУлица");
	СписокАдресов.Вставить("ПокДом");
	СписокАдресов.Вставить("ПокКорпус");
	СписокАдресов.Вставить("ПокКварт");
    СписокАдресов.Вставить("ПокКодРегионаИзКПП", Лев(КонтрагентКПП, 2));

	ЗаполнитьЗначенияСвойств(СписокАдресов, СтруктураДокумента);
	    
    // Обязательные параметры адреса
    СписокЭлементовАдреса = Новый СписокЗначений;
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПродКодРегион"], ПредставлениеОрганизации)	, "код региона Организации");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПродИндекс"], ПредставлениеОрганизации)		, "индекс Организации");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПокКодРегион"], ПредставлениеКонтрагента)	, "код региона Контрагента");
    СписокЭлементовАдреса.Добавить(Новый Структура("ЗначениеОбъекта, Представление", СписокАдресов["ПокИндекс"], ПредставлениеКонтрагента)		, "индекс Контрагента");
	
	БылиОшибкиВАдресе = Ложь;
	
	Для каждого ЗначениеЭлемента Из СписокЭлементовАдреса Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗначениеЭлемента.Значение.ЗначениеОбъекта) Тогда
			
			ТекстЛогаСобытий = "Не заполнен &lt;&lt;&lt;" + ЗначениеЭлемента.Представление + "&gt;&gt;&gt;. Проверьте заполнение адреса " + СокрЛП(ЗначениеЭлемента.Значение.Представление);
            ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
            БылиОшибкиВАдресе = Истина;
			
		КонецЕсли;
		
    КонецЦикла;

    Если БылиОшибкиВАдресе Тогда
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        Продолжить;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураДокумента.ФорматУПД) Тогда
		
		ТекстЛогаСобытий = "Документ " + СтруктураДокумента.Ссылка + " был пропущен. В настройках модуля у соответствия по Контрагенту """ + Строка(СтруктураДокумента.Контрагент) 
								+ """ - ""Не заполнен формат УПД""! Заполните формат УПД и повторите действие.";
																
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        
        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
		
		Продолжить;
		
	КонецЕсли;
	
	ФорматУПД = СокрЛП(СтруктураДокумента.ФорматУПД);
    
    //Номер и дата первичной реализации
	СтруктураДокумента.НомерДокументОснованиеИсхСчФ = Эком_ПолучитьНомерНаПечать(СтруктураДокумента.ДокументОснованиеИсхСчФ, Истина, Ложь);
	СтруктураДокумента.ДатаДокументОснованиеИсхСчФ  = Формат(Дата(СтруктураДокумента.ДатаДокументОснованиеИсхСчФ), "ДЛФ=Д");
	
	//Даты входящих EDI по цепочке
	СтруктураДокумента.ORDER_DATE  = Формат(ВыборкаДокумента.ORDER_DATE, "ДЛФ=Д");
	СтруктураДокумента.RECADV_DATE = Формат(Дата(СтруктураДокумента.RECADV_DATE), "ДЛФ=Д");
	
	//Номер и дата договора контрагента
	НомерДоговорКонтрагента = СокрЛП(ВыборкаДокумента.НомерДоговорКонтрагента);
	ДатаДоговорКонтрагента  = Формат(ВыборкаДокумента.ДатаДоговорКонтрагента, "ДЛФ=Д");
    
    НаименованиеОснования = "Без документа-основания";
    НомерОснования          = "";
    ДатаОснования           = "";
	
    ГЛНОрганизации          = ВыборкаДокумента.ОрганизацияGLN;
    ГЛНКонтрагент           = ВыборкаДокумента.КонтрагентGLN;
    ГЛНТочкиДоставки        = ВыборкаДокумента.ТочкаДоставкиGLN;
	
	Если ФорматУПД = "УПД ЕВРОПА" Тогда
		
		НаименованиеОснования 	= "Заказ";			  
		НомерОснования 			= СтруктураДокумента.ORDER_NUMBER;
		ДатаОснования  			= СтруктураДокумента.ORDER_DATE;
		
	ИначеЕсли ФорматУПД = "УПД ТАБЫШ" Тогда
		
		НаименованиеОснования 	= "Акт";			  
		НомерОснования 			= СтруктураДокумента.RECADV_NUMBER;
		ДатаОснования  			= СтруктураДокумента.RECADV_DATE; 
		
	ИначеЕсли ЗначениеЗаполнено(НомерДоговорКонтрагента)
		И ЗначениеЗаполнено(ДатаДоговорКонтрагента) Тогда
		
		НаименованиеОснования = "Договор поставки";
		НомерОснования = НомерДоговорКонтрагента;
		ДатаОснования  = ДатаДоговорКонтрагента;
		
	КонецЕсли;

    ДанныеИнфополя = Новый Соответствие;
	ДанныеИнфополя.Вставить("VID"                 , СтруктураДокумента.RECADVVID);
	ДанныеИнфополя.Вставить("ORDID"               , СтруктураДокумента.ORDERVID);
	ДанныеИнфополя.Вставить("получатель"          , ?(ЗначениеЗаполнено(СтруктураДокумента.ORDER_BUYERCODE), СтруктураДокумента.ORDER_BUYERCODE, ГЛНКонтрагент));
	ДанныеИнфополя.Вставить("покупатель"          , ГЛНКонтрагент);
	ДанныеИнфополя.Вставить("отправитель"         , ГЛНОрганизации);
	ДанныеИнфополя.Вставить("грузоотправитель"    , ГЛНОрганизации);
	ДанныеИнфополя.Вставить("поставщик"           , ГЛНОрганизации);
	ДанныеИнфополя.Вставить("GLN_грузоотправителя", ГЛНОрганизации);
	ДанныеИнфополя.Вставить("GLN_грузополучателя" , ГЛНТочкиДоставки);
	ДанныеИнфополя.Вставить("грузополучатель"     , ГЛНТочкиДоставки);
	ДанныеИнфополя.Вставить("дата_акта"           , СтруктураДокумента.RECADV_DATE);
	ДанныеИнфополя.Вставить("дата_апп"            , СтруктураДокумента.RECADV_DATE);
	ДанныеИнфополя.Вставить("дата_заказа"         , СтруктураДокумента.ORDER_DATE);
	ДанныеИнфополя.Вставить("дата_накладной"      , СтруктураДокумента.ДатаДокументОснованиеИсхСчФ);
	ДанныеИнфополя.Вставить("ДтНакл"              , СтруктураДокумента.ДатаДокументОснованиеИсхСчФ);
	ДанныеИнфополя.Вставить("дата_отгрузки"       , СтруктураДокумента.ДатаДокументОснованиеИсхСчФ);
	ДанныеИнфополя.Вставить("дата_поставки"       , Формат(ВыборкаДокумента.ORDER_DELIVERYDATE, "ДЛФ=Д"));
	ДанныеИнфополя.Вставить("код_поставщика"      , СтруктураДокумента.ORDER_CAMPAIGNNUMBER);
	ДанныеИнфополя.Вставить("номер_акта"          , СтруктураДокумента.RECADV_NUMBER);
	ДанныеИнфополя.Вставить("номер_апп"           , СтруктураДокумента.RECADV_NUMBER);
	ДанныеИнфополя.Вставить("номер_накладной"     , СтруктураДокумента.НомерДокументОснованиеИсхСчФ);
	ДанныеИнфополя.Вставить("НомНакл"             , СтруктураДокумента.НомерДокументОснованиеИсхСчФ);
	ДанныеИнфополя.Вставить("Номер накладной"     , СтруктураДокумента.НомерДокументОснованиеИсхСчФ);
	ДанныеИнфополя.Вставить("номер_отгрузки"      , СтруктураДокумента.НомерДокументОснованиеИсхСчФ);
	ДанныеИнфополя.Вставить("номер_заказа"        , СтруктураДокумента.ORDER_NUMBER);
	ДанныеИнфополя.Вставить("Заказ на поставку"   , СтруктураДокумента.ORDER_NUMBER);
	ДанныеИнфополя.Вставить("Номер_заказа"        , СтруктураДокумента.ORDER_NUMBER);
	ДанныеИнфополя.Вставить("номер_договора"   	  , ?(ФорматУПД = "УПД ДА", СтруктураДокумента.ORDER_INFO, НомерДоговорКонтрагента));
	ДанныеИнфополя.Вставить("дата_договора"   	  , ДатаДоговорКонтрагента);
	
	СоответсвияИнфоПолей = ПолучитьСтруктуруИнфоПолейИзСправочника("ИнфПолФХЖ1", СтруктураДокумента.ИнфоПоля, ДанныеИнфополя, ВыборкаДокумента.КонтрагентЭСФБезИнфПоля);
	    
    Если СоответсвияИнфоПолей = Неопределено Тогда
        
        ТекстЛогаСобытий = "Не заполнены обязательные инфо поля! Формат ЮЗД - " + ФорматУПД;
        
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);

        РезультатШапкаПодвалУПД.Удалить(СтруктураДокумента);
        
        Продолжить;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДокумента.GUIDДокОснование) Тогда
		СоответсвияИнфоПолей.Вставить("документ_основание", СтруктураДокумента.GUIDДокОснование);
	КонецЕсли;
	
    СтруктураДокумента.ИнфТекст = СоответсвияИнфоПолей;
	
    СтруктураДокумента.ПоФактХЖ = "Документ, подтверждающий согласие (факт уведомления) покупателя на изменение стоимости отгруженных товаров "
										+ "(выполненных работ, оказанных услуг), переданных имущественных прав";
    СтруктураДокумента.НаимДокОпр = "Корректировочный счет-фактура и документ об изменении стоимости отгруженных товаров "
										+ "(выполненных работ, оказанных услуг), переданных имущественных прав";
    
    Если СтруктураДокумента.ПродТипОрганизации = "ЮЛ" Тогда
        СтруктураДокумента.НаимЭконСубСост = СтруктураДокумента.ПродНаимОрг;
    Иначе
        СтруктураДокумента.НаимЭконСубСост = СтруктураДокумента.ПродФамилияИП + " " + СтруктураДокумента.ПродИмяИП + " " + СтруктураДокумента.ПродОтчествоИП;
    КонецЕсли;
	
	//&lt;&lt;Заполнение данных с учетом выполненных проверок и преобразований&gt;&gt;
    GUIDФайла = Новый УникальныйИдентификатор;
    
    СтруктураДокумента.ИдентификаторЭлДокумента = GUIDФайла;
    
    СтруктураДокумента.ИдФайл 	 = СтруктураДокумента.ТипФайла + "_" + СокрЛП(СтруктураДокумента.ИдПок) + "_" + (СтруктураДокумента.ИдОтпр) + "_" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd") + "_" + GUIDФайла;
    СтруктураДокумента.ФайлИмя	 = СокрЛП(СтруктураДокумента.ИдФайл) + ".xml";
    СтруктураДокумента.GUIDФайла = GUIDФайла;
	
	ДатаФормированияДокумента		= ТекущаяДата();
	СтруктураДокумента.Статус       = "Отправлен";
		
	СтруктураДокумента.ДатаИнфПр    = Формат(ДатаФормированияДокумента, "ДЛФ=Д");
    СтруктураДокумента.ВремИнфПр    = Формат(ДатаФормированияДокумента, "ДФ=ЧЧ.мм.сс");
	СтруктураДокумента.СодОпер      = "Уведомляю об изменении стоимости";
	
	//&lt;ПередатДокум&gt; 
	СтруктураДокумента.НаимПередатДокум = "УПД";
	СтруктураДокумента.НомПередатДокум 	= Эком_ПолучитьНомерНаПечать(ИсходныйСчетФактура, Истина, Ложь);
	СтруктураДокумента.ДатаПередатДокум = ДатаИсходныйСчетФактура;
	
	//&lt;ДокумОснКор&gt;
	СтруктураДокумента.НаимОсн      = СокрЛП(НаименованиеОснования);
    СтруктураДокумента.НомОсн       = НомерОснования;
    СтруктураДокумента.ДатаОсн      = ДатаОснования;
	
	//&lt;ВсегоУвел&gt;
	СтруктураДокумента.ВсегоУвелСтТовБезНДСВсего 	= Формат(СтруктураДокумента.ВсегоУвелСтТовБезНДСВсего, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	СтруктураДокумента.ВсегоУвелСтТовУчНалВсего		= Формат(СтруктураДокумента.ВсегоУвелСтТовУчНалВсего, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	СтруктураДокумента.ВсегоУвелСумНал 				= Формат(СтруктураДокумента.ВсегоУвелСумНал, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	
	Если ЗначениеЗаполнено(СтруктураДокумента.ВсегоУвелСтТовБезНДСВсего) 
		И ЗначениеЗаполнено(СтруктураДокумента.ВсегоУвелСтТовУчНалВсего) И ПустаяСтрока(СтруктураДокумента.ВсегоУвелСумНал) Тогда
		
		СтруктураДокумента.ВсегоУвелБезНДС = "без НДС";
		
	КонецЕсли;
		
	//&lt;ВсегоУм&gt;
	СтруктураДокумента.ВсегоУмСтТовБезНДСВсего 	= Формат(СтруктураДокумента.ВсегоУмСтТовБезНДСВсего, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	СтруктураДокумента.ВсегоУмСтТовУчНалВсего 	= Формат(СтруктураДокумента.ВсегоУмСтТовУчНалВсего, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	СтруктураДокумента.ВсегоУмСумНал 			= Формат(СтруктураДокумента.ВсегоУмСумНал, "ЧДЦ=2; ЧРД=.; ЧГ=0");
	
	Если ЗначениеЗаполнено(СтруктураДокумента.ВсегоУмСтТовБезНДСВсего) 
		И ЗначениеЗаполнено(СтруктураДокумента.ВсегоУмСтТовУчНалВсего) И ПустаяСтрока(СтруктураДокумента.ВсегоУмСумНал) Тогда
		
		СтруктураДокумента.ВсегоУмБезНДС = "без НДС";
		
    КонецЕсли;

    Если ЗначениеЗаполнено(ВыборкаДокумента.ORDER_POSITION) Тогда
    
    	POSITION = ВыборкаДокумента.ORDER_POSITION.Получить(); 
    	
    	Для Каждого ЭлементКоллекции Из POSITION Цикл
    		
    		НоваяСтрокаНоменклатуры 		= ДанныеТЧНоменклатурORDER.Добавить();
    		НоваяСтрокаНоменклатуры.Ссылка  = СтруктураДокумента.Ссылка;
    		
    		ЗаполнитьЗначенияСвойств(НоваяСтрокаНоменклатуры, ЭлементКоллекции);
    		
    	КонецЦикла;

    КонецЕсли;

КонецЦикла; 

//Возврат РезультатШапкаПодвалУПД;

////////////////--ШАПКА--/////////////////////////////////////

////////////////++РезультатНоменклатур++///////////////////////////////////// 
/// ТЧ - первичный/исправительный УПД
РезультатНоменклатур  = Новый ТаблицаЗначений;

Колонки = Новый Массив;
Колонки.Добавить("Ссылка");
Колонки.Добавить("ТоварМаркируемый");

//&lt;СведТов&gt;
Колонки.Добавить("НомСтр");
Колонки.Добавить("ПорНомТовВСЧФ");
Колонки.Добавить("НаимТов");
Колонки.Добавить("ЦенаТовДо");
Колонки.Добавить("ЦенаТовПосле");
Колонки.Добавить("ОКЕИ_ТовДо");
Колонки.Добавить("ОКЕИ_ТовПосле");
Колонки.Добавить("КолТовДо");
Колонки.Добавить("КолТовПосле");
Колонки.Добавить("НалСтДо");
Колонки.Добавить("НалСтПосле");

//&lt;СтТовБезНДС&gt;
Колонки.Добавить("СтТовБезНДССтоимДоИзм");
Колонки.Добавить("СтТовБезНДССтоимПослеИзм");
Колонки.Добавить("СтТовБезНДССтоимУвел");
Колонки.Добавить("СтТовБезНДССтоимУм");

//&lt;СтТовУчНал&gt;
Колонки.Добавить("СтТовУчНалСтоимДоИзм");
Колонки.Добавить("СтТовУчНалСтоимПослеИзм");
Колонки.Добавить("СтТовУчНалСтоимУвел");
Колонки.Добавить("СтТовУчНалСтоимУм");

//&lt;Акциз&gt;
Колонки.Добавить("АкцизДоБезАкциз");
Колонки.Добавить("АкцизПослеБезАкциз");
Колонки.Добавить("АкцизДоСумАкциз");
Колонки.Добавить("АкцизПослеСумАкциз");
Колонки.Добавить("АкцизРазнСумУвел");
Колонки.Добавить("АкцизРазнСумУм");

//&lt;СумНал&gt;
Колонки.Добавить("СумНалДо");
Колонки.Добавить("СумНалДоБезНДС");
Колонки.Добавить("СумНалПосле");
Колонки.Добавить("СумНалПослеБезНДС");
Колонки.Добавить("СумНалРазнСумУвел");
Колонки.Добавить("СумНалРазнСумУм");

//&lt;ИнфПолФХЖ2&gt;
Колонки.Добавить("ИнфПолСтр");

//&lt;ДопСведТов&gt;
Колонки.Добавить("ХарактерТов"); 	//Обязателен при отсутствии НаимТов и,КодТов и АртикулТов.
Колонки.Добавить("СортТов");
Колонки.Добавить("АртикулТов");  	//Обязателен при отсутствии НаимТов и ХарактерТов и КодТов.
Колонки.Добавить("КодТов");      	//Обязателен при отсутствии НаимТов и ХарактерТов и АртикулТов.
Колонки.Добавить("НаимЕдИзмДо"); 	//Обязателен при наличии ОКЕИ_ТовДо.
Колонки.Добавить("НаимЕдИзмПосле"); //Обязателен при наличии ОКЕИ_ТовПосле.
Колонки.Добавить("КодВидТов");		//Код ТН ВЭД.

//&lt;НомСредИдентТов&gt;
Колонки.Добавить("НомСредИдентТовДо");
Колонки.Добавить("НомСредИдентТовПосле");

Для Каждого Колонка Из Колонки Цикл
	РезультатНоменклатур.Колонки.Добавить(Колонка);
КонецЦикла;

ЗапросНоменклатур = Новый Запрос;
ЗапросНоменклатур.Текст = "ВЫБРАТЬ
                          |	ТаблицаДанныхИсточник.Ссылка КАК Ссылка,
                          |	ТаблицаДанныхИсточник.Организация КАК Организация,
                          |	ТаблицаДанныхИсточник.Контрагент КАК Контрагент,
                          |	ТаблицаДанныхИсточник.ДокументОснованиеТекСчФ КАК ДокументОснованиеТекСчФ,
                          |	ТаблицаДанныхИсточник.ДокументОснованиеИсхСчФ КАК ДокументОснованиеИсхСчФ,
                          |	ТаблицаДанныхИсточник.НомерДокументОснованиеИсхСчФ КАК НомерДокументОснованиеИсхСчФ,
                          |	ТаблицаДанныхИсточник.ДатаДокументОснованиеИсхСчФ КАК ДатаДокументОснованиеИсхСчФ,
                          |	ТаблицаДанныхИсточник.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
                          |	ТаблицаДанныхИсточник.ЗаказКлиента КАК ЗаказКлиента,
                          |	ТаблицаДанныхИсточник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                          |	ТаблицаДанныхИсточник.ORDER_NUMBER КАК ORDER_NUMBER,
                          |	ТаблицаДанныхИсточник.ORDER_DATE КАК ORDER_DATE,
                          |	ТаблицаДанныхИсточник.ORDER_CAMPAIGNNUMBER КАК ORDER_CAMPAIGNNUMBER,
                          |	ТаблицаДанныхИсточник.RECADV_NUMBER КАК RECADV_NUMBER,
                          |	ТаблицаДанныхИсточник.RECADV_DATE КАК RECADV_DATE,
                          |	ТаблицаДанныхИсточник.КонтрагентЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
                          |	ТаблицаДанныхИсточник.ФорматУПД КАК ФорматУПД,
                          |	ТаблицаДанныхИсточник.ИнфоПоля КАК ИнфоПоля,
                          |	ТаблицаДанныхИсточник.ЭтоМаркируемыйЮЗД КАК ЭтоМаркируемыйЮЗД
                          |ПОМЕСТИТЬ Источник
                          |ИЗ
                          |	&amp;ТаблицаДанныхИсточник КАК ТаблицаДанныхИсточник
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	ДанныеТЧНоменклатурORDER.Ссылка КАК Ссылка,
                          |	ДанныеТЧНоменклатурORDER.Номенклатура КАК Номенклатура,
                          |	ДанныеТЧНоменклатурORDER.POSITIONNUMBER КАК POSITIONNUMBER,
                          |	ДанныеТЧНоменклатурORDER.QUANTITYOFCUINTU КАК QUANTITYOFCUINTU,
                          |	ДанныеТЧНоменклатурORDER.INFO КАК INFO
                          |ПОМЕСТИТЬ ВТ_НоменклатураORDER
                          |ИЗ
                          |	&amp;ДанныеТЧНоменклатурORDER КАК ДанныеТЧНоменклатурORDER
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |	Ссылка,
                          |	Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	Источник.Ссылка КАК Ссылка,
                          |	СчФТовары.НомерСтрокиПриПечати КАК НомерСтрокиПриПечати,
                          |	СчФТовары.НомерСтрокиИсходногоСФ КАК НомерСтрокиИсходногоСФ,
                          |	СчФТовары.Номенклатура КАК Номенклатура,
                          |	РеалТовУслугТовары.СтавкаНДС.Наименование КАК НалСтДо,
                          |	КоррРеалРасхождения.СтавкаНДС.Наименование КАК НалСтПосле,
                          |	ВЫБОР
                          |		КОГДА РеалТовУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
                          |			ТОГДА РеалТовУслугТовары.Номенклатура.ЕдиницаИзмерения.Код
                          |		ИНАЧЕ РеалТовУслугТовары.Упаковка.ЕдиницаИзмерения.Код
                          |	КОНЕЦ КАК ОКЕИ_ТовДо,
                          |	ВЫБОР
                          |		КОГДА РеалТовУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
                          |			ТОГДА РеалТовУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование
                          |		ИНАЧЕ РеалТовУслугТовары.Упаковка.ЕдиницаИзмерения.Наименование
                          |	КОНЕЦ КАК НаимЕдИзмДо,
                          |	ВЫБОР
                          |		КОГДА КоррРеалРасхождения.Упаковка = ЗНАЧЕНИЕ(справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
                          |			ТОГДА КоррРеалРасхождения.Номенклатура.ЕдиницаИзмерения.Код
                          |		ИНАЧЕ КоррРеалРасхождения.Упаковка.ЕдиницаИзмерения.Код
                          |	КОНЕЦ КАК ОКЕИ_ТовПосле,
                          |	ВЫБОР
                          |		КОГДА КоррРеалРасхождения.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.Пустаяссылка)
                          |			ТОГДА КоррРеалРасхождения.Номенклатура.ЕдиницаИзмерения.Наименование
                          |		ИНАЧЕ КоррРеалРасхождения.Упаковка.ЕдиницаИзмерения.Наименование
                          |	КОНЕЦ КАК НаимЕдИзмПосле,
                          |	ВЫБОР
                          |		КОГДА СчФТовары.Количество = 0
                          |			ТОГДА (СчФТовары.СуммаУменьшение - СчФТовары.СуммаНДСУменьшение) / СчФТовары.КоличествоУменьшение
                          |		ИНАЧЕ (СчФТовары.Сумма - СчФТовары.СуммаНДС) / СчФТовары.Количество
                          |	КОНЕЦ КАК ЦенаТовПосле,
                          |	СчФТовары.Количество - СчФТовары.КоличествоУвеличение + СчФТовары.КоличествоУменьшение КАК КолТовДо,
                          |	СчФТовары.Количество КАК КолТовПосле,
                          |	СчФТовары.Сумма - СчФТовары.СуммаУвеличение + СчФТовары.СуммаУменьшение КАК СтТовУчНалСтоимДоИзм,
                          |	СчФТовары.Сумма КАК СтТовУчНалСтоимПослеИзм,
                          |	СчФТовары.СуммаУвеличение - СчФТовары.СуммаНДСУвеличение КАК СтТовБезНДССтоимУвел,
                          |	СчФТовары.СуммаУменьшение - СчФТовары.СуммаНДСУменьшение КАК СтТовБезНДССтоимУм,
                          |	СчФТовары.СуммаУвеличение КАК СтТовУчНалСтоимУвел,
                          |	СчФТовары.СуммаУменьшение КАК СтТовУчНалСтоимУм,
                          |	СчФТовары.СуммаНДС - СчФТовары.СуммаНДСУвеличение + СчФТовары.СуммаНДСУменьшение КАК СумНалДо,
                          |	СчФТовары.СуммаНДС КАК СумНалПосле,
                          |	СчФТовары.СуммаНДСУвеличение КАК СумНалРазнСумУвел,
                          |	СчФТовары.СуммаНДСУменьшение КАК СумНалРазнСумУм
                          |ПОМЕСТИТЬ ВТ_ДанныеТабличнойЧасти
                          |ИЗ
                          |	Источник КАК Источник
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Товары КАК СчФТовары
                          |		ПО Источник.Ссылка = СчФТовары.Ссылка
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Расхождения КАК КоррРеалРасхождения
                          |		ПО Источник.ДокументОснованиеТекСчФ = КоррРеалРасхождения.Ссылка
                          |			И (СчФТовары.Номенклатура = КоррРеалРасхождения.Номенклатура)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеалТовУслугТовары
                          |		ПО Источник.ДокументОснованиеИсхСчФ = РеалТовУслугТовары.Ссылка
                          |			И (СчФТовары.Номенклатура = РеалТовУслугТовары.Номенклатура)
                          |
                          |СГРУППИРОВАТЬ ПО
                          |	Источник.Ссылка,
                          |	СчФТовары.НомерСтрокиПриПечати,
                          |	СчФТовары.Номенклатура,
                          |	СчФТовары.НомерСтрокиИсходногоСФ,
                          |	РеалТовУслугТовары.СтавкаНДС.Наименование,
                          |	КоррРеалРасхождения.СтавкаНДС.Наименование,
                          |	ВЫБОР
                          |		КОГДА РеалТовУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.пустаяссылка)
                          |			ТОГДА РеалТовУслугТовары.Номенклатура.ЕдиницаИзмерения.Код
                          |		ИНАЧЕ РеалТовУслугТовары.Упаковка.ЕдиницаИзмерения.Код
                          |	КОНЕЦ,
                          |	ВЫБОР
                          |		КОГДА РеалТовУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.Пустаяссылка)
                          |			ТОГДА РеалТовУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование
                          |		ИНАЧЕ РеалТовУслугТовары.Упаковка.ЕдиницаИзмерения.Наименование
                          |	КОНЕЦ,
                          |	ВЫБОР
                          |		КОГДА КоррРеалРасхождения.Упаковка = ЗНАЧЕНИЕ(справочник.УпаковкиЕдиницыИзмерения.пустаяссылка)
                          |			ТОГДА КоррРеалРасхождения.Номенклатура.ЕдиницаИзмерения.Код
                          |		ИНАЧЕ КоррРеалРасхождения.Упаковка.ЕдиницаИзмерения.Код
                          |	КОНЕЦ,
                          |	ВЫБОР
                          |		КОГДА КоррРеалРасхождения.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.Пустаяссылка)
                          |			ТОГДА КоррРеалРасхождения.Номенклатура.ЕдиницаИзмерения.Наименование
                          |		ИНАЧЕ КоррРеалРасхождения.Упаковка.ЕдиницаИзмерения.Наименование
                          |	КОНЕЦ,
                          |	ВЫБОР
                          |		КОГДА СчФТовары.Количество = 0
                          |			ТОГДА (СчФТовары.СуммаУменьшение - СчФТовары.СуммаНДСУменьшение) / СчФТовары.КоличествоУменьшение
                          |		ИНАЧЕ (СчФТовары.Сумма - СчФТовары.СуммаНДС) / СчФТовары.Количество
                          |	КОНЕЦ,
                          |	СчФТовары.Количество - СчФТовары.КоличествоУвеличение + СчФТовары.КоличествоУменьшение,
                          |	СчФТовары.Количество,
                          |	СчФТовары.Сумма - СчФТовары.СуммаУвеличение + СчФТовары.СуммаУменьшение,
                          |	СчФТовары.Сумма,
                          |	СчФТовары.СуммаУвеличение,
                          |	СчФТовары.СуммаУменьшение,
                          |	СчФТовары.СуммаНДС - СчФТовары.СуммаНДСУвеличение + СчФТовары.СуммаНДСУменьшение,
                          |	СчФТовары.СуммаНДС,
                          |	СчФТовары.СуммаНДСУвеличение,
                          |	СчФТовары.СуммаНДСУменьшение,
                          |	СчФТовары.СуммаУвеличение - СчФТовары.СуммаНДСУвеличение,
                          |	СчФТовары.СуммаУменьшение - СчФТовары.СуммаНДСУменьшение,
                          |	ВЫБОР
                          |		КОГДА РеалТовУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
                          |			ТОГДА РеалТовУслугТовары.Номенклатура.ЕдиницаИзмерения.Код
                          |		ИНАЧЕ РеалТовУслугТовары.Упаковка.ЕдиницаИзмерения.Код
                          |	КОНЕЦ,
                          |	ВЫБОР
                          |		КОГДА РеалТовУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
                          |			ТОГДА РеалТовУслугТовары.Номенклатура.ЕдиницаИзмерения.Наименование
                          |		ИНАЧЕ РеалТовУслугТовары.Упаковка.ЕдиницаИзмерения.Наименование
                          |	КОНЕЦ,
                          |	ВЫБОР
                          |		КОГДА КоррРеалРасхождения.Упаковка = ЗНАЧЕНИЕ(справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
                          |			ТОГДА КоррРеалРасхождения.Номенклатура.ЕдиницаИзмерения.Код
                          |		ИНАЧЕ КоррРеалРасхождения.Упаковка.ЕдиницаИзмерения.Код
                          |	КОНЕЦ
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	Источник.Ссылка КАК Ссылка,
                          |	ВТ_ДанныеТабличнойЧасти.Номенклатура КАК Номенклатура,
                          |	ИСТИНА КАК ТоварМаркируемый
                          |ПОМЕСТИТЬ ВТ_МаркируемыйТовар
                          |ИЗ
                          |	Источник КАК Источник
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеТабличнойЧасти КАК ВТ_ДанныеТабличнойЧасти
                          |		ПО (Источник.ЭтоМаркируемыйЮЗД = ИСТИНА)
                          |			И Источник.Ссылка = ВТ_ДанныеТабличнойЧасти.Ссылка
                          |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК МаркируемыйТовар
                          |		ПО Источник.Контрагент = МаркируемыйТовар.Контрагент
                          |			И (ВТ_ДанныеТабличнойЧасти.Номенклатура = МаркируемыйТовар.Номенклатура)
                          |			И (МаркируемыйТовар.Маркировка &lt;&gt; """")
                          |			И (МаркируемыйТовар.Маркировка &lt;&gt; ""нет"")
                          |			И (МаркируемыйТовар.GTIN &lt;&gt; """")
                          |
                          |ИНДЕКСИРОВАТЬ ПО
                          |	Источник.Ссылка,
                          |	ВТ_ДанныеТабличнойЧасти.Номенклатура
                          |;
                          |
                          |////////////////////////////////////////////////////////////////////////////////
                          |ВЫБРАТЬ
                          |	Источник.Ссылка КАК Ссылка,
                          |	Источник.ДокументОснованиеТекСчФ КАК ДокументОснованиеТекСчФ,
                          |	Источник.ДокументОснованиеИсхСчФ КАК ДокументОснованиеИсхСчФ,
                          |	Источник.НомерДокументОснованиеИсхСчФ КАК НомерДокументОснованиеИсхСчФ,
                          |	Источник.ДатаДокументОснованиеИсхСчФ КАК ДатаДокументОснованиеИсхСчФ,
                          |	Источник.Организация КАК Организация,
                          |	Источник.Контрагент КАК Контрагент,
                          |	Источник.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
                          |	Источник.ЗаказКлиента КАК ЗаказКлиента,
                          |	Источник.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
                          |	Источник.ORDER_NUMBER КАК ORDER_NUMBER,
                          |	Источник.ORDER_DATE КАК ORDER_DATE,
                          |	Источник.ORDER_CAMPAIGNNUMBER КАК ORDER_CAMPAIGNNUMBER,
                          |	Источник.RECADV_NUMBER КАК RECADV_NUMBER,
                          |	Источник.RECADV_DATE КАК RECADV_DATE,
                          |	Источник.КонтрагентЭСФБезИнфПоля КАК КонтрагентЭСФБезИнфПоля,
                          |	Источник.ФорматУПД КАК ФорматУПД,
                          |	Источник.ИнфоПоля КАК ИнфоПоля,
                          |	ДанныеТабличнойЧасти.НомерСтрокиПриПечати КАК НомСтр,
                          |	ДанныеТабличнойЧасти.НомерСтрокиИсходногоСФ КАК ПорНомТовВСЧФ,
                          |	ДанныеТабличнойЧасти.Номенклатура КАК Номенклатура,
                          |	ДанныеТабличнойЧасти.Номенклатура.Наименование КАК НаименованиеНоменклатуры,
                          |	ДанныеТабличнойЧасти.Номенклатура.Код КАК КодНоменклатурыПоставщика,
                          |	ДанныеТабличнойЧасти.Номенклатура.Артикул КАК АртикулНоменклатурыПоставщика,
                          |	ДанныеТабличнойЧасти.КолТовДо КАК КолТовДо,
                          |	ДанныеТабличнойЧасти.КолТовПосле КАК КолТовПосле,
                          |	ДанныеТабличнойЧасти.НалСтДо КАК НалСтДо,
                          |	ДанныеТабличнойЧасти.НалСтПосле КАК НалСтПосле,
                          |	ДанныеТабличнойЧасти.ОКЕИ_ТовДо КАК ОКЕИ_ТовДо,
                          |	ДанныеТабличнойЧасти.ОКЕИ_ТовПосле КАК ОКЕИ_ТовПосле,
                          |	ДанныеТабличнойЧасти.НаимЕдИзмДо КАК НаимЕдИзмДо,
                          |	ДанныеТабличнойЧасти.НаимЕдИзмПосле КАК НаимЕдИзмПосле,
                          |	(ДанныеТабличнойЧасти.СтТовУчНалСтоимДоИзм - ДанныеТабличнойЧасти.СумНалДо) / ДанныеТабличнойЧасти.КолТовДо КАК ЦенаТовДо,
                          |	ДанныеТабличнойЧасти.ЦенаТовПосле КАК ЦенаТовПосле,
                          |	ДанныеТабличнойЧасти.СтТовУчНалСтоимДоИзм - ДанныеТабличнойЧасти.СумНалДо КАК СтТовБезНДССтоимДоИзм,
                          |	ДанныеТабличнойЧасти.СтТовУчНалСтоимПослеИзм - ДанныеТабличнойЧасти.СумНалПосле КАК СтТовБезНДССтоимПослеИзм,
                          |	ДанныеТабличнойЧасти.СтТовБезНДССтоимУвел КАК СтТовБезНДССтоимУвел,
                          |	ДанныеТабличнойЧасти.СтТовБезНДССтоимУм КАК СтТовБезНДССтоимУм,
                          |	ДанныеТабличнойЧасти.СтТовУчНалСтоимДоИзм КАК СтТовУчНалСтоимДоИзм,
                          |	ДанныеТабличнойЧасти.СтТовУчНалСтоимПослеИзм КАК СтТовУчНалСтоимПослеИзм,
                          |	ДанныеТабличнойЧасти.СтТовУчНалСтоимУвел КАК СтТовУчНалСтоимУвел,
                          |	ДанныеТабличнойЧасти.СтТовУчНалСтоимУм КАК СтТовУчНалСтоимУм,
                          |	ДанныеТабличнойЧасти.СумНалДо КАК СумНалДо,
                          |	ДанныеТабличнойЧасти.СумНалПосле КАК СумНалПосле,
                          |	ДанныеТабличнойЧасти.СумНалРазнСумУвел КАК СумНалРазнСумУвел,
                          |	ДанныеТабличнойЧасти.СумНалРазнСумУм КАК СумНалРазнСумУм,
                          |	DR_НоменклатураКонтрагентов.АртикулНоменклатурыКонтрагента КАК АртикулНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.КодНоменклатурыКонтрагента КАК КодНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.НаименованиеНоменклатурыКонтрагента КАК НаименованиеНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.ШтрихКодНоменклатурыКонтрагента КАК ШтрихкодНоменклатурыКонтрагента,
                          |	DR_НоменклатураКонтрагентов.GTIN КАК GTIN,
                          |	ЕСТЬNULL(DR_POSITION.QUANTITYOFCUINTU, """") КАК КоличествоВУпаковке,
                          |	ЕСТЬNULL(DR_POSITION.POSITIONNUMBER, """") КАК НомерПозицииORDER,
                          |	ЕСТЬNULL(DR_POSITION.INFO, """") КАК Информация,
                          |	ЕСТЬNULL(ВТ_МаркируемыйТовар.ТоварМаркируемый, ЛОЖЬ) КАК ТоварМаркируемый
                          |ИЗ
                          |	Источник КАК Источник
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеТабличнойЧасти КАК ДанныеТабличнойЧасти
                          |		ПО (Источник.Ссылка = ДанныеТабличнойЧасти.Ссылка)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НоменклатураORDER КАК DR_POSITION
                          |		ПО (Источник.Ссылка = DR_POSITION.Ссылка)
                          |			И (ДанныеТабличнойЧасти.Номенклатура = DR_POSITION.Номенклатура)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_НоменклатураКонтрагентов КАК DR_НоменклатураКонтрагентов
                          |		ПО (Источник.Контрагент = DR_НоменклатураКонтрагентов.Контрагент)
                          |			И (ДанныеТабличнойЧасти.Номенклатура = DR_НоменклатураКонтрагентов.Номенклатура)
                          |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МаркируемыйТовар КАК ВТ_МаркируемыйТовар
                          |		ПО (Источник.Ссылка = ВТ_МаркируемыйТовар.Ссылка)
                          |			И (ДанныеТабличнойЧасти.Номенклатура = ВТ_МаркируемыйТовар.Номенклатура)
                          |
                          |УПОРЯДОЧИТЬ ПО
                          |	Источник.Ссылка,
                          |	ДанныеТабличнойЧасти.НомерСтрокиПриПечати";

СписокКолонок = " ДокументОснованиеИсхСчФ, ДатаДокументОснованиеИсхСчФ, ДокументОснованиеТекСчФ,
				| ЗаказКлиента, ИдентификаторЦепочки, ИнфоПоля, КонтрагентЭСФБезИнфПоля, Контрагент, 
				| НомерДокументОснованиеИсхСчФ, Организация, Ссылка, ЦенаВключаетНДС, ФорматУПД, ЭтоМаркируемыйЮЗД,
				| ORDER_NUMBER , ORDER_DATE , ORDER_CAMPAIGNNUMBER, RECADV_NUMBER, RECADV_DATE";

ЗапросНоменклатур.УстановитьПараметр("ТаблицаДанныхИсточник"	, РезультатШапкаПодвалУПД.Скопировать(,СписокКолонок));
ЗапросНоменклатур.УстановитьПараметр("ДанныеТЧНоменклатурORDER"	, ДанныеТЧНоменклатурORDER);

РезультатЗапросаНоменклатур = ЗапросНоменклатур.Выполнить();

ВыборкаНоменклатур = РезультатЗапросаНоменклатур.Выбрать();

Пока ВыборкаНоменклатур.Следующий() Цикл

	НоваяПозиция = РезультатНоменклатур.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяПозиция, ВыборкаНоменклатур); 
	
	НоваяПозиция.НомСтр 		= Формат(НоваяПозиция.НомСтр, "ЧГ=0");
	НоваяПозиция.НаимТов 		= ВыборкаНоменклатур.НаименованиеНоменклатуры;
    НоваяПозиция.ХарактерТов 	= НоваяПозиция.НаимТов;
	НоваяПозиция.КодТов 		= ВыборкаНоменклатур.ШтрихкодНоменклатурыКонтрагента;
	
	НалСтДо = СокрЛП(НоваяПозиция.НалСтДо);
	НоваяПозиция.НалСтДо = НалСтДо;
	
	НалСтПосле = СокрЛП(НоваяПозиция.НалСтПосле);
	НоваяПозиция.НалСтПосле = НалСтПосле;

	НоваяПозиция.КолТовДо = Формат(НоваяПозиция.КолТовДо, "ЧДЦ=3; ЧРД=.; ЧГ=0");
	НоваяПозиция.КолТовПосле = Формат(НоваяПозиция.КолТовПосле, "ЧДЦ=3; ЧРД=.; ЧН=0; ЧГ=0");
	
	НоваяПозиция.ЦенаТовДо		= Формат(Окр(НоваяПозиция.ЦенаТовДо, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0"); 
	НоваяПозиция.ЦенаТовПосле   = Формат(Окр(НоваяПозиция.ЦенаТовПосле, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	
	НоваяПозиция.СумНалДо			= Формат(Окр(НоваяПозиция.СумНалДо, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	НоваяПозиция.СумНалПосле        = Формат(Окр(НоваяПозиция.СумНалПосле, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	НоваяПозиция.СумНалРазнСумУвел  = Формат(Окр(НоваяПозиция.СумНалРазнСумУвел, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	НоваяПозиция.СумНалРазнСумУм    = Формат(Окр(НоваяПозиция.СумНалРазнСумУм, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	
    НоваяПозиция.СумНалДоБезНДС 	= ?(НалСтДо = "Без НДС", "без НДС", "");
	НоваяПозиция.СумНалПослеБезНДС 	= ?(НалСтПосле = "Без НДС", "без НДС", "");
	
	НоваяПозиция.АкцизДоБезАкциз	= "без акциза";
	НоваяПозиция.АкцизПослеБезАкциз = "без акциза";
	
	НоваяПозиция.СтТовБезНДССтоимДоИзм    = Формат(Окр(НоваяПозиция.СтТовБезНДССтоимДоИзм, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	НоваяПозиция.СтТовБезНДССтоимПослеИзм = Формат(Окр(НоваяПозиция.СтТовБезНДССтоимПослеИзм, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	НоваяПозиция.СтТовБезНДССтоимУвел     = Формат(Окр(НоваяПозиция.СтТовБезНДССтоимУвел, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	НоваяПозиция.СтТовБезНДССтоимУм       = Формат(Окр(НоваяПозиция.СтТовБезНДССтоимУм, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	
	НоваяПозиция.СтТовУчНалСтоимДоИзм    = Формат(Окр(НоваяПозиция.СтТовУчНалСтоимДоИзм, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	НоваяПозиция.СтТовУчНалСтоимПослеИзм = Формат(Окр(НоваяПозиция.СтТовУчНалСтоимПослеИзм, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	НоваяПозиция.СтТовУчНалСтоимУвел     = Формат(Окр(НоваяПозиция.СтТовУчНалСтоимУвел, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");
	НоваяПозиция.СтТовУчНалСтоимУм       = Формат(Окр(НоваяПозиция.СтТовУчНалСтоимУм, 2,РежимОкругления.Окр15как20), "ЧДЦ=2; ЧРД=.; ЧГ=0");

	//&lt;Служебные переменные&gt;
	НомерРасходнойНакладной = ВыборкаНоменклатур.НомерДокументОснованиеИсхСчФ;
	ДатаРасходнойНакладной  = ВыборкаНоменклатур.ДатаДокументОснованиеИсхСчФ;
	
	Если Найти(ФорматУПД, "УПД Метро") &gt; 0 Тогда
		КодТовараПоставщика 	= СокрЛП(ВыборкаНоменклатур.АртикулНоменклатурыПоставщика);
	Иначе
		КодТовараПоставщика 	= СокрЛП(ВыборкаНоменклатур.КодНоменклатурыПоставщика);
	КонецЕсли;
	
	КодТовараПокупателя 	= СокрЛП(ВыборкаНоменклатур.КодНоменклатурыКонтрагента);
	КоличествоВУпаковке 	= ?(СокрЛП(ВыборкаНоменклатур.КоличествоВУпаковке) &lt;&gt; "0", ВыборкаНоменклатур.КоличествоВУпаковке, "");
	
	ФорматУПД 	= СокрЛП(ВыборкаНоменклатур.ФорматУПД);
	Штрихкод 	= СокрЛП(ВыборкаНоменклатур.ШтрихкодНоменклатурыКонтрагента);

	ДанныеИнфополя = Новый Соответствие;
	ДанныеИнфоПоля.Вставить("CAMPAIGNNUMBER"               , СокрЛП(ВыборкаНоменклатур.ORDER_CAMPAIGNNUMBER));
	ДанныеИнфоПоля.Вставить("дата_накладной"               , ДатаРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_уведомления_об_отгрузке", НомерРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_накладной"              , НомерРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_отгрузки"               , НомерРасходнойНакладной);
	ДанныеИнфоПоля.Вставить("номер_акта"                   , ВыборкаНоменклатур.RECADV_NUMBER);
	ДанныеИнфоПоля.Вставить("дата_акта"                    , ВыборкаНоменклатур.RECADV_DATE);
	ДанныеИнфоПоля.Вставить("номер_заказа"                 , ВыборкаНоменклатур.ORDER_NUMBER);
	ДанныеИнфоПоля.Вставить("дата_заказа"                  , ВыборкаНоменклатур.ORDER_DATE);
	ДанныеИнфоПоля.Вставить("код_материала"                , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("код_материала_заказчика"      , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("Артикул" 				       , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("штрихкод"                     , Штрихкод);
	ДанныеИнфоПоля.Вставить("артикул_поставщика"           , КодТовараПоставщика);
	ДанныеИнфоПоля.Вставить("вложенность_кол"              , КоличествоВУпаковке);
	ДанныеИнфоПоля.Вставить("вложенность_океи"             , ВыборкаНоменклатур.Информация);
	ДанныеИнфоПоля.Вставить("позиция_заказа"               , СокрЛП(ВыборкаНоменклатур.НомерПозицииORDER));
	ДанныеИнфоПоля.Вставить("код_продавца"                 , КодТовараПоставщика);
	ДанныеИнфоПоля.Вставить("КдВЕРНЫЙ"                     , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("SKU"                          , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("Штрих-код"                    , Штрихкод);
	ДанныеИнфоПоля.Вставить("EAN_код"	                   , Штрихкод);
	ДанныеИнфоПоля.Вставить("КодПокупателя"                , КодТовараПокупателя);
	ДанныеИнфоПоля.Вставить("ID товара"     	           , КодТовараПокупателя);
	
	СоответсвияИнфоПолей = ПолучитьСтруктуруИнфоПолейИзСправочника("ИнфПолФХЖ2", ВыборкаНоменклатур.ИнфоПоля, ДанныеИнфополя, ВыборкаНоменклатур.КонтрагентЭСФБезИнфПоля);

	Если СоответсвияИнфоПолей = Неопределено Тогда
		
		ТекстЛогаСобытий = "Не заполнены обязательные инфо поля &lt;&lt;&lt;ИнфПолФХЖ2&gt;&gt;&gt;! Формат ЮЗД - " + ФорматУПД;
		
		ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
		
		СтрокаСчетфактура = РезультатШапкаПодвалУПД.Найти(НоваяПозиция.Ссылка, "Ссылка");
		
		Если СтрокаСчетфактура &lt;&gt; Неопределено Тогда 
			РезультатШапкаПодвалУПД.Удалить(СтрокаСчетфактура);
		КонецЕсли;
		
		Продолжить;
	КонецЕсли;

	НоваяПозиция.ИнфПолСтр = СоответсвияИнфоПолей;
	
	//&lt;НомСредИдентТовДо/НомСредИдентТовПосле - Тип Массив т.к. может быть множественное использование&gt;
	НомСредИдентТовДо 	 = Новый Массив;
	НомСредИдентТовПосле = Новый Массив;
	
	// Структура данных НомСредИдентТовДо/НомСредИдентТовПосле:
    //	- СтруктураКодовДо:
	//		Ключ - ИдентТрансУпак; Значение - тип Строка;
	//		Ключ - НомУпак; Значение - Тип Массив;
	//		Ключ - КИЗ; Значение - Тип Массив;
	 	
	//	- СтруктураКодовПосле:
	//		Ключ - ИдентТрансУпак; Значение - тип Строка;
	//		Ключ - НомУпак; Значение - Тип Массив;
	//		Ключ - КИЗ; Значение - Тип Массив;
	 
	 //Примечание:
	 //1. Блок условия "ТоварМаркируемый" может быть обернут в дополнительный цикл.
	 //2. Не зависимо от количества уровней, а так же количества агрегации, 
	 //структура данных НомСредИдентТовДо/НомСредИдентТовПосле должна соответствовать структуре описанной выше.
	 		  
	Если ВыборкаНоменклатур.ТоварМаркируемый Тогда
		
		//////////////////////////////+ДО/////////////////////////////////////
		СтруктураКодовДо = Новый Структура;
		
		//&lt;ИдентТрансУпак - Заполнить при необходимости&gt;
		СтруктураКодовДо.Вставить("ИдентТрансУпак");
		
		//&lt;НомУпак - Тип Массив т.к. может быть множественное использование&gt;
		НомУпакДо = Новый Массив;
		НомУпакДо.Добавить("02" + ВыборкаНоменклатур.GTIN + "37" + Строка(ВыборкаНоменклатур.КолТовДо));
				
		СтруктураКодовДо.Вставить("НомУпак", НомУпакДо);
		
		//&lt;КИЗ - Тип Массив т.к. может быть множественное использование&gt;
		КИЗДо = Новый Массив;
		//&lt;КИЗДо - Заполнить при необходимости&gt;
		//...........
		//...........
		
		СтруктураКодовДо.Вставить("КИЗ", КИЗДо);
		
		НомСредИдентТовДо.Добавить(СтруктураКодовДо);
		//////////////////////////////-ДО/////////////////////////////////////
	
		////////////////////////////+После/////////////////////////////////////
		СтруктураКодовПосле = Новый Структура;
		СтруктураКодовПосле.Вставить("ИдентТрансУпак");
		
		//&lt;НомУпак - Тип Массив т.к. может быть множественное использование&gt;
		НомУпакПосле = Новый Массив;
		НомУпакПосле.Добавить("02" + ВыборкаНоменклатур.GTIN + "37" + Строка(ВыборкаНоменклатур.КолТовПосле));
				
		СтруктураКодовПосле.Вставить("НомУпак", НомУпакПосле);
		
		//&lt;КИЗ - Тип Массив т.к. может быть множественное использование&gt;
		КИЗПосле = Новый Массив;
		//&lt;КИЗПосле - Заполнить при необходимости&gt;
		//...........
		//...........
		
		СтруктураКодовПосле.Вставить("КИЗ", КИЗПосле);
		
		НомСредИдентТовПосле.Добавить(СтруктураКодовПосле);
		////////////////////////////-После/////////////////////////////////////
	КонецЕсли;
	
	НоваяПозиция.НомСредИдентТовДо 	  = НомСредИдентТовДо;
	НоваяПозиция.НомСредИдентТовПосле = НомСредИдентТовПосле;
	
КонецЦикла;

//Возврат РезультатШапкаПодвалУПД;
  
////////////////--РезультатНоменклатур--/////////////////////////////////////

//////////////////++СОЗДАНИЕ_XML++///////////////////////////////////  

ОбязательныеРеквизиты = Новый СписокЗначений;
//Ключ - Имя реквизита
//Значение - Вложенность элемента в XML
//пометка - Признак обязательности  

ОбязательныеРеквизиты.Добавить("Документ", "Документ", Истина);
//Указать список обязательных реквизитов согласно спецификации
//Опционально: добавить проверку наличия колонок в результирующих 
//таблицах, чтобы исключить блокировку транзакции и пропустить создание документов.

Для каждого СтрокаШапкиДокумента из РезультатШапкаПодвалУПД Цикл 

	ТекстОшибкиПроверкиОбязательныхПолей = "";

    СтруктураДок = Новый Структура;
    	//+Файл 
	    СтруктураФайл = Новый Структура;
	    СписокЗначенийФайл = Новый СписокЗначений;
	    СписокЗначенийФайл.Добавить("ИдФайл"	, СтрокаШапкиДокумента.ИдФайл);
	    СписокЗначенийФайл.Добавить("ВерсПрог"	, СтрокаШапкиДокумента.ВерсПрог);
	    СписокЗначенийФайл.Добавить("ВерсФорм"	, СтрокаШапкиДокумента.ВерсФорм);
	    СтруктураФайл.Вставить("Файл", СписокЗначенийФайл);//Верхний Уровень
		    //+СвУчДокОбор
		    СтруктураСвУчДокОбор = Новый Структура;
		    СписокЗначенийСвУчДокОбор = Новый СписокЗначений;
		    СписокЗначенийСвУчДокОбор.Добавить("ИдОтпр"	, СтрокаШапкиДокумента.ИдОтпр);
		    СписокЗначенийСвУчДокОбор.Добавить("ИдПол"	, СтрокаШапкиДокумента.ИдПок);
		    СтруктураСвУчДокОбор.Вставить("СвУчДокОбор", СписокЗначенийСвУчДокОбор);
			    //+СвОЭДОтпр
			    СтруктураСвОЭДОтпр = Новый Структура;
			    СписокЗначенийСвОЭДОтпр = Новый СписокЗначений;
			    СписокЗначенийСвОЭДОтпр.Добавить("НаимОрг"	, СтрокаШапкиДокумента.НаимОргОператор);
			    СписокЗначенийСвОЭДОтпр.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ИННЮЛОператор);
			    СписокЗначенийСвОЭДОтпр.Добавить("ИдЭДО"	, СтрокаШапкиДокумента.ИдЭДООператор); 
			    СтруктураСвОЭДОтпр.Вставить("СвОЭДОтпр", СписокЗначенийСвОЭДОтпр);    
			    СтруктураСвУчДокОбор.Вставить("СвОЭДОтпр", СтруктураСвОЭДОтпр);//Вложенность "Файл.СвУчДокОбор"
			    //-СвОЭДОтпр
	    	СтруктураФайл.Вставить("СвУчДокОбор", СтруктураСвУчДокОбор);//Вложенность "Файл"
	    	//-СвУчДокОбо
	    	//+Документ
	    	СтруктураДокумент = Новый Структура;
		    СписокЗначенийДокумент = Новый СписокЗначений;
		    СписокЗначенийДокумент.Добавить("КНД"				, СтрокаШапкиДокумента.КНД);
		    СписокЗначенийДокумент.Добавить("Функция"			, СтрокаШапкиДокумента.ДокФункция);
		    СписокЗначенийДокумент.Добавить("ПоФактХЖ"			, СтрокаШапкиДокумента.ПоФактХЖ);
		    СписокЗначенийДокумент.Добавить("НаимДокОпр"		, СтрокаШапкиДокумента.НаимДокОпр);
		    СписокЗначенийДокумент.Добавить("ДатаИнфПр"			, СтрокаШапкиДокумента.ДатаИнфПр);
		    СписокЗначенийДокумент.Добавить("ВремИнфПр"			, СтрокаШапкиДокумента.ВремИнфПр);
		    СписокЗначенийДокумент.Добавить("НаимЭконСубСост"	, СтрокаШапкиДокумента.НаимЭконСубСост); 
		    СтруктураДокумент.Вставить("Документ", СписокЗначенийДокумент);
		    /////////////////////////////////////////////+СвКСчФ/////////////////////////////////////////////////////////// 
		    	СтруктураСвКСчФ = Новый Структура;
			    СписокЗначенийСвКСчФ = Новый СписокЗначений;
			    СписокЗначенийСвКСчФ.Добавить("НомерКСчФ"	, СтрокаШапкиДокумента.НомерКСчФ);
			    СписокЗначенийСвКСчФ.Добавить("ДатаКСчФ"	, СтрокаШапкиДокумента.ДатаКСчФ);
			    СписокЗначенийСвКСчФ.Добавить("КодОКВ"		, СтрокаШапкиДокумента.КодОКВ);  
			    СтруктураСвКСчФ.Вставить("СвКСчФ", СписокЗначенийСвКСчФ);					
					/////////////////////////////////////////////+СчФ///////////////////////////////////////////////////
					СтруктураСчФ = Новый Структура;
			    	СписокЗначенийСчФ = Новый СписокЗначений;
					СписокЗначенийСчФ.Добавить("НомерСчФ"		, СтрокаШапкиДокумента.НомерСчФ);
			    	СписокЗначенийСчФ.Добавить("ДатаСчФ"	, СтрокаШапкиДокумента.ДатаСчФ);
					СтруктураСчФ.Вставить("СчФ", СписокЗначенийСчФ);  
				    	//+ИспрСчФ
				    	СтруктураИспрСчФ = Новый Структура;
				    	СписокЗначенийИспрСчФ = Новый СписокЗначений;
						СписокЗначенийИспрСчФ.Добавить("НомИспрСчФ"		, СтрокаШапкиДокумента.НомИспрСчФ);
				    	СписокЗначенийИспрСчФ.Добавить("ДатаИспрСчФ"	, СтрокаШапкиДокумента.ДатаИспрСчФ);
				    	СтруктураИспрСчФ.Вставить("ИспрСчФ",СписокЗначенийИспрСчФ);
						//-ИспрСчФ
			    		СтруктураСчФ.Вставить("ИспрСчФ"	, СтруктураИспрСчФ); //Вложенность "Файл.Документ.СвКСчФ.СчФ.ИспрСчФ"
					/////////////////////////////////////////////-СчФ///////////////////////////////////////////////////    
  	    	    СтруктураСвКСчФ.Вставить("СчФ"	, СтруктураСчФ); //Вложенность "Файл.Документ.СвКСчФ.СчФ"
	    			
					/////////////////////////////////////////////+СвПрод////////////////////////////////////////////////
			    	СтруктураСвПрод = Новый Структура;
			    		//+ИдСв
			    		СтруктураИдСв = Новый Структура;
						Если СтрокаШапкиДокумента.ПродТипОрганизации = "ЮЛ" Тогда
							//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг"	, СтрокаШапкиДокумента.ПродНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПродИННЮЛ);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"		, СтрокаШапкиДокумента.ПродКПП);
							
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч"	, СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч"		, СтруктураСвЮЛУч);	//Вложенность "Файл.Документ.СвКСчФ.СвПрод.ИдСв"
			    	    	//-СвЮЛУч
						ИначеЕсли СтрокаШапкиДокумента.ПродТипОрганизации = "ИП" Тогда
							//+СвИП
							СтруктураСвИП = Новый Структура;
							СписокЗначенийСвИП = Новый СписокЗначений;
							СписокЗначенийСвИП.Добавить("ИННФЛ"			, СтрокаШапкиДокумента.ПродИННФЛ);
			    			СписокЗначенийСвИП.Добавить("СвГосРегИП"	, СтрокаШапкиДокумента.ПродСвГосРегИП);
							СтруктураСвИП.Вставить("СвИП", СписокЗначенийСвИП);
							    //+ФИО
								СтруктураФИО= Новый Структура;
								СписокЗначенийФИО = Новый СписокЗначений;
								СписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПродФамилияИП);
				    			СписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПродИмяИП);
								СписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПродОтчествоИП);
								СтруктураСвИП.Вставить("ФИО", СтруктураФИО); //Вложенность "Файл.Документ.СвКСчФ.СвПрод.ИдСв.СвИП"
							    //-ФИО
							СтруктураИдСв.Вставить("СвИП", СтруктураСвИП);//Вложенность "Файл.Документ.СвКСчФ.СвПрод.ИдСв"
							//-СвИП	
						КонецЕсли;
						СтруктураСвПрод.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвКСчФ.СвПрод"
  	    	     		//-ИдСв
  	    	     		//+Адрес
			    		СтруктураАдрес = Новый Структура;
			    			//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"		, СтрокаШапкиДокумента.ПродИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион"	, СтрокаШапкиДокумента.ПродКодРегион);
							СписокЗначенийАдрРФ.Добавить("Район"		, СтрокаШапкиДокумента.ПродРайон);
			    			СписокЗначенийАдрРФ.Добавить("Город"		, СтрокаШапкиДокумента.ПродГород);
							СписокЗначенийАдрРФ.Добавить("НаселПункт"	, СтрокаШапкиДокумента.ПродНаселПункт);
							СписокЗначенийАдрРФ.Добавить("Улица"		, СтрокаШапкиДокумента.ПродУлица);
							СписокЗначенийАдрРФ.Добавить("Дом"			, СтрокаШапкиДокумента.ПродДом);
							СписокЗначенийАдрРФ.Добавить("Корпус"		, СтрокаШапкиДокумента.ПродКорпус);
							СписокЗначенийАдрРФ.Добавить("Кварт"		, СтрокаШапкиДокумента.ПродКварт);
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвКСчФ.СвПрод.Адрес"
			    	    	//-АдрРФ
			    		СтруктураСвПрод.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвКСчФ.СвПрод"
  	    	     		//-Адрес
					СтруктураСвКСчФ.Вставить("СвПрод", СтруктураСвПрод);//Вложенность "Файл.Документ.СвКСчФ"
	    			//-СвПрод
	    			//+СвПокуп  
			    	СтруктураСвПокуп = Новый Структура;
			    		//+ИдСв
			    		СтруктураИдСв = Новый Структура;
						Если СтрокаШапкиДокумента.ПокТипОрганизации = "ЮЛ" Тогда
			    			//+СвЮЛУч
			    	    	СтруктураСвЮЛУч = Новый Структура;
			    	        СписокЗначенийСвЮЛУч = Новый СписокЗначений;
			    			СписокЗначенийСвЮЛУч.Добавить("НаимОрг"	, СтрокаШапкиДокумента.ПокНаимОрг);
			    			СписокЗначенийСвЮЛУч.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПокИННЮЛ);
			    			СписокЗначенийСвЮЛУч.Добавить("КПП"		, СтрокаШапкиДокумента.ПокКПП);
			    	        СтруктураСвЮЛУч.Вставить("СвЮЛУч", СписокЗначенийСвЮЛУч);			    	
			    	    	СтруктураИдСв.Вставить("СвЮЛУч", СтруктураСвЮЛУч);//Вложенность "Файл.Документ.СвКСчФ.СвПокуп.ИдСв"
			    	    	//-СвЮЛУч
						ИначеЕсли СтрокаШапкиДокумента.ПокТипОрганизации = "ИП" Тогда
							//+СвИП
							СтруктураСвИП = Новый Структура;
							СписокЗначенийСвИП = Новый СписокЗначений;
							СписокЗначенийСвИП.Добавить("ИННФЛ"	, СтрокаШапкиДокумента.ПокИННФЛ);
							СтруктураСвИП.Вставить("СвИП", СписокЗначенийСвИП);
							    //+ФИО
								СтруктураФИО= Новый Структура;
								СписокЗначенийФИО = Новый СписокЗначений;
								СписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПокФамилияИП);
				    			СписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПокИмяИП);
								СписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПокОтчествоИП);
								СтруктураСвИП.Вставить("ФИО", СтруктураФИО); //Вложенность "Файл.Документ.СвКСчФ.СвПокуп.ИдСв.СвИП"
							    //-ФИО
							СтруктураИдСв.Вставить("СвИП", СтруктураСвИП);//Вложенность "Файл.Документ.СвКСчФ.СвПокуп.ИдСв"
							//-СвИП		
						КонецЕсли;						
			    		СтруктураСвПокуп.Вставить("ИдСв", СтруктураИдСв); //Вложенность "Файл.Документ.СвКСчФ.СвПокуп"
  	    	     		//-ИдСв
  	    	     		//+Адрес
			    		СтруктураАдрес = Новый Структура;
			    			//+АдрРФ
			    	    	СтруктураАдрРФ = Новый Структура;
			    	        СписокЗначенийАдрРФ = Новый СписокЗначений;
			    			СписокЗначенийАдрРФ.Добавить("Индекс"		, СтрокаШапкиДокумента.ПокИндекс);
			    			СписокЗначенийАдрРФ.Добавить("КодРегион"	, СтрокаШапкиДокумента.ПокКодРегион);
							СписокЗначенийАдрРФ.Добавить("Район"		, СтрокаШапкиДокумента.ПокРайон);
			    			СписокЗначенийАдрРФ.Добавить("Город"		, СтрокаШапкиДокумента.ПокГород);
							СписокЗначенийАдрРФ.Добавить("НаселПункт"	, СтрокаШапкиДокумента.ПокНаселПункт);
			    			СписокЗначенийАдрРФ.Добавить("Улица"		, СтрокаШапкиДокумента.ПокУлица);
							СписокЗначенийАдрРФ.Добавить("Дом"			, СтрокаШапкиДокумента.ПокДом);
							СписокЗначенийАдрРФ.Добавить("Корпус"		, СтрокаШапкиДокумента.ПокКорпус);
							СписокЗначенийАдрРФ.Добавить("Кварт"		, СтрокаШапкиДокумента.ПокКварт);
			    	        СтруктураАдрРФ.Вставить("АдрРФ", СписокЗначенийАдрРФ);			    	
			    	    	СтруктураАдрес.Вставить("АдрРФ", СтруктураАдрРФ);//Вложенность "Файл.Документ.СвКСчФ.СвПокуп.Адрес"
			    	    	//-АдрРФ
			    		СтруктураСвПокуп.Вставить("Адрес", СтруктураАдрес); //Вложенность "Файл.Документ.СвКСчФ.СвПокуп"
  	    	     		//-Адрес
					СтруктураСвКСчФ.Вставить("СвПокуп", СтруктураСвПокуп); //Вложенность "Файл.Документ.СвКСчФ"
	    			//-СвПокуп
					//+ИнфПолФХЖ1
	    	        СтруктураИнфПолФХЖ1 = Новый Структура;
	    	        	СтруктураТекстИнф = Новый Структура("ТекстИнф", СтрокаШапкиДокумента.ИнфТекст);
	    	        	СтруктураИнфПолФХЖ1.Вставить("ТекстИнф", СтруктураТекстИнф); 		    	
	    	        СтруктураСвКСчФ.Вставить("ИнфПолФХЖ1", СтруктураИнфПолФХЖ1); //Вложенность "Файл.Документ.СвКСчФ"
	    	        //-ИнфПолФХЖ1
	    	    СтруктураДокумент.Вставить("СвКСчФ", СтруктураСвКСчФ); //Вложенность "Файл.Документ"
    	        ///////////////////////////////////////////-СвКСчФ///////////////////////////////////////////////////////////
    	        
    	        ///////////////////////////////////////////+ТаблКСчФ/////////////////////////////////////////////////////////
    	        СтруктураТаблКСчФ = Новый Структура;	    	        
    	        
    	        ОтборСтрокНоменклатур = Новый Структура;
				ОтборСтрокНоменклатур.Вставить("Ссылка"		, СтрокаШапкиДокумента.Ссылка);
				СтрокиНоменклатурДокумента = РезультатНоменклатур.НайтиСтроки(ОтборСтрокНоменклатур);
					//+СведТов
					МассивСведТов = Новый Массив;	        			       			
	        		Для Каждого СтрокаНоменклатурыДокумента Из СтрокиНоменклатурДокумента Цикл
						
						СтруктураСведТов = Новый Структура;					
						СписокЗначенийСведТов = Новый СписокЗначений;
	    	            СписокЗначенийСведТов.Добавить("НомСтр"			, СтрокаНоменклатурыДокумента.НомСтр);
						СписокЗначенийСведТов.Добавить("ПорНомТовВСЧФ"	, СтрокаНоменклатурыДокумента.ПорНомТовВСЧФ);
	    	            СписокЗначенийСведТов.Добавить("НаимТов"		, СтрокаНоменклатурыДокумента.НаимТов);
	    	            СписокЗначенийСведТов.Добавить("ОКЕИ_ТовДо"		, СтрокаНоменклатурыДокумента.ОКЕИ_ТовДо);
						СписокЗначенийСведТов.Добавить("ОКЕИ_ТовПосле"	, СтрокаНоменклатурыДокумента.ОКЕИ_ТовПосле);
	    	            СписокЗначенийСведТов.Добавить("КолТовДо"		, СтрокаНоменклатурыДокумента.КолТовДо);
						СписокЗначенийСведТов.Добавить("КолТовПосле"	, СтрокаНоменклатурыДокумента.КолТовПосле);
	    	            СписокЗначенийСведТов.Добавить("ЦенаТовДо"		, СтрокаНоменклатурыДокумента.ЦенаТовДо);
						СписокЗначенийСведТов.Добавить("ЦенаТовПосле"	, СтрокаНоменклатурыДокумента.ЦенаТовПосле);
	    	            СписокЗначенийСведТов.Добавить("НалСтДо"		, СтрокаНоменклатурыДокумента.НалСтДо);
						СписокЗначенийСведТов.Добавить("НалСтПосле"		, СтрокаНоменклатурыДокумента.НалСтПосле);
	    	            СтруктураСведТов.Вставить("СведТов",СписокЗначенийСведТов);
							//+СтТовБезНДС
							СтруктураСтТовБезНДС = Новый Структура;
							СписокЗначенийСтТовБезНДС = Новый СписокЗначений;
							СписокЗначенийСтТовБезНДС.Добавить("СтоимДоИзм"		, СтрокаНоменклатурыДокумента.СтТовБезНДССтоимДоИзм);
							СписокЗначенийСтТовБезНДС.Добавить("СтоимПослеИзм"	, СтрокаНоменклатурыДокумента.СтТовБезНДССтоимПослеИзм);
							СписокЗначенийСтТовБезНДС.Добавить("СтоимУвел"		, СтрокаНоменклатурыДокумента.СтТовБезНДССтоимУвел);
							СписокЗначенийСтТовБезНДС.Добавить("СтоимУм"		, СтрокаНоменклатурыДокумента.СтТовБезНДССтоимУм);
							СтруктураСтТовБезНДС.Вставить("СтТовБезНДС" , СписокЗначенийСтТовБезНДС);
							СтруктураСведТов.Вставить("СтТовБезНДС", СтруктураСтТовБезНДС);  //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
							//-СтТовБезНДС
							//+АкцизДо
		    	            СтруктураАкцизДо = Новый Структура;
		    	            Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.АкцизДоСумАкциз) Тогда
		    	                СтруктураАкцизДо.Вставить("СумАкциз" , СтрокаНоменклатурыДокумента.АкцизДоСумАкциз);
		    	            Иначе
		    	            	СтруктураАкцизДо.Вставить("БезАкциз" , СтрокаНоменклатурыДокумента.АкцизДоБезАкциз);
		    	            КонецЕсли;					    	          
		    	            СтруктураСведТов.Вставить("АкцизДо"	,СтруктураАкцизДо); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
							//-АкцизДо
							//+АкцизПосле
							СтруктураАкцизПосле = Новый Структура;
		    	            Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.АкцизПослеСумАкциз) Тогда
		    	                СтруктураАкцизПосле.Вставить("СумАкциз"	, СтрокаНоменклатурыДокумента.АкцизПослеСумАкциз);
		    	            Иначе
		    	            	СтруктураАкцизПосле.Вставить("БезАкциз"	, СтрокаНоменклатурыДокумента.АкцизПослеБезАкциз);
		    	            КонецЕсли;					    	          
		    	            СтруктураСведТов.Вставить("АкцизПосле"	, СтруктураАкцизПосле); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
		    	            //-АкцизПосле						
							//+АкцизРазн
								СтруктураАкцизРазн = Новый Структура;
								СтруктураАкцизРазн.Вставить("СумУвел"	, СтрокаНоменклатурыДокумента.АкцизРазнСумУвел);
								СтруктураАкцизРазн.Вставить("СумУм"		, СтрокаНоменклатурыДокумента.АкцизРазнСумУм);
								СтруктураСведТов.Вставить("АкцизРазн" , СтруктураАкцизРазн);	//Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
							//-АкцизРазн						
		    	            //+СумНалДо
		    	            СтруктураСумНалДо = Новый Структура;
		    	            Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.СумНалДо) Тогда
		    	                СтруктураСумНалДо.Вставить("СумНДС"	, СтрокаНоменклатурыДокумента.СумНалДо);
		    	            Иначе
		    	            	СтруктураСумНалДо.Вставить("БезНДС"	, СтрокаНоменклатурыДокумента.СумНалДоБезНДС);
		    	            КонецЕсли;					    	          
		    	            СтруктураСведТов.Вставить("СумНалДо" , СтруктураСумНалДо); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
		    	            //-СумНалДо						
							//+СумНалПосле
		    	            СтруктураСумНалПосле = Новый Структура;
		    	            Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.СумНалПосле) Тогда
		    	                СтруктураСумНалПосле.Вставить("СумНДС"	, СтрокаНоменклатурыДокумента.СумНалПосле);
		    	            Иначе
		    	            	СтруктураСумНалПосле.Вставить("БезНДС"	, СтрокаНоменклатурыДокумента.СумНалПослеБезНДС);
		    	            КонецЕсли;					    	          
		    	            СтруктураСведТов.Вставить("СумНалПосле" , СтруктураСумНалПосле); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
		    	            //-СумНалПосле						
							//+СумНалРазн
		    	            СтруктураСумНалРазн = Новый Структура;
		    	            СтруктураСумНалРазн.Вставить("СумУвел"	, СтрокаНоменклатурыДокумента.СумНалРазнСумУвел);
		    	            СтруктураСумНалРазн.Вставить("СумУм"	, СтрокаНоменклатурыДокумента.СумНалРазнСумУм);
		    	            СтруктураСведТов.Вставить("СумНалРазн" , СтруктураСумНалРазн); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
		    	            //-СумНалРазн 
							//+СтТовУчНал
							СтруктураСтТовУчНал = Новый Структура;
							СписокЗначенийСтТовУчНал = Новый СписокЗначений;
		    	            СписокЗначенийСтТовУчНал.Добавить("СтоимДоИзм"		, СтрокаНоменклатурыДокумента.СтТовУчНалСтоимДоИзм);
							СписокЗначенийСтТовУчНал.Добавить("СтоимПослеИзм"	, СтрокаНоменклатурыДокумента.СтТовУчНалСтоимПослеИзм);
							СписокЗначенийСтТовУчНал.Добавить("СтоимУвел"		, СтрокаНоменклатурыДокумента.СтТовУчНалСтоимУвел);
							СписокЗначенийСтТовУчНал.Добавить("СтоимУм"			, СтрокаНоменклатурыДокумента.СтТовУчНалСтоимУм);
							СтруктураСтТовУчНал.Вставить("СтТовУчНал" , СписокЗначенийСтТовУчНал);
							СтруктураСведТов.Вставить("СтТовУчНал" ,СтруктураСтТовУчНал); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
							//-СтТовУчНал
						    //+ИнфПолФХЖ2
							Если ЗначениеЗаполнено(СтрокаНоменклатурыДокумента.ИнфПолСтр) Тогда
			    	        	СтруктураИнфПолФХЖ2 = Новый Структура("ИнфПолФХЖ2", СтрокаНоменклатурыДокумента.ИнфПолСтр); 		    	
			    	        	СтруктураСведТов.Вставить("ИнфПолФХЖ2", СтруктураИнфПолФХЖ2); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
			    	        КонецЕсли;
		    	        	//-ИнфПолФХЖ2
		    	            //+ДопСведТов
		    	            СтруктураДопСведТов = Новый Структура;
		    	            СписокЗначенийСведТов = Новый СписокЗначений;
		    	            СписокЗначенийСведТов.Добавить("ХарактерТов"	, СтрокаНоменклатурыДокумента.ХарактерТов);
		    	            СписокЗначенийСведТов.Добавить("СортТов"		, СтрокаНоменклатурыДокумента.СортТов);
							СписокЗначенийСведТов.Добавить("АртикулТов"		, СтрокаНоменклатурыДокумента.АртикулТов);
							СписокЗначенийСведТов.Добавить("КодТов"			, СтрокаНоменклатурыДокумента.КодТов);
		    	            СписокЗначенийСведТов.Добавить("НаимЕдИзмДо"	, СтрокаНоменклатурыДокумента.НаимЕдИзмДо);
							СписокЗначенийСведТов.Добавить("НаимЕдИзмПосле"	, СтрокаНоменклатурыДокумента.НаимЕдИзмПосле);
		    	            СписокЗначенийСведТов.Добавить("КодВидТов"		, СтрокаНоменклатурыДокумента.КодВидТов);
		      	            СтруктураДопСведТов.Вставить("ДопСведТов" ,СписокЗначенийСведТов); 
							СтруктураСведТов.Вставить("ДопСведТов",СтруктураДопСведТов); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"
							//-ДопСведТов							
							Если СтрокаНоменклатурыДокумента.ТоварМаркируемый Тогда
								//+НомСредИдентТовДо
								Для Каждого СтруктураКодов Из СтрокаНоменклатурыДокумента.НомСредИдентТовДо Цикл
									
									СтркутраНомСредИдентТовДо = Новый Структура;
									СписокЗначенийНомСредИдентТовДо = Новый СписокЗначений;
									СписокЗначенийНомСредИдентТовДо.Добавить("ИдентТрансУпак", СтруктураКодов["ИдентТрансУпак"]);
									СтркутраНомСредИдентТовДо.Вставить("НомСредИдентТовДо", СписокЗначенийНомСредИдентТовДо); 	
									//+НомУпак
									СтркутраНомСредИдентТовДо.Вставить("НомУпак", СтруктураКодов["НомУпак"]);
									//-НомУпак
									//+Киз
									СтркутраНомСредИдентТовДо.Вставить("КИЗ", СтруктураКодов["КИЗ"]);						
									//-Киз	
									СтруктураСведТов.Вставить("НомСредИдентТовДо",СтркутраНомСредИдентТовДо); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"							
									
								КонецЦикла;
								//-НомСредИдентТовДо
								
								//+НомСредИдентТовПосле
								Для Каждого СтруктураКодов Из СтрокаНоменклатурыДокумента.НомСредИдентТовПосле Цикл
									
									СтркутраНомСредИдентТовПосле = Новый Структура;
									СписокЗначенийНомСредИдентТовПосле = Новый СписокЗначений;
									СписокЗначенийНомСредИдентТовПосле.Добавить("ИдентТрансУпак", СтруктураКодов["ИдентТрансУпак"]);
									СтркутраНомСредИдентТовПосле.Вставить("НомСредИдентТовПосле", СписокЗначенийНомСредИдентТовПосле); 	
									//+НомУпак
									СтркутраНомСредИдентТовПосле.Вставить("НомУпак", СтруктураКодов["НомУпак"]);
									//-НомУпак
									//+Киз
									СтркутраНомСредИдентТовПосле.Вставить("КИЗ", СтруктураКодов["КИЗ"]);						
									//-Киз
									СтруктураСведТов.Вставить("НомСредИдентТовПосле",СтркутраНомСредИдентТовПосле); //Вложенность "Файл.Документ.ТаблКСчФ.СведТов"								
									
								КонецЦикла;
								//-НомСредИдентТовПосле
							КонецЕсли;
	    	            МассивСведТов.Добавить(СтруктураСведТов);
	      	       	КонецЦикла;     	        
	    	        СтруктураТаблКСчФ.Вставить("СведТов",МассивСведТов); //Вложенность "Файл.Документ.ТаблКСчФ"
	    	        //-СведТов								
	    	        //+ВсегоУвел
	    	        СтруктураВсегоУвел = Новый Структура;					
					СписокЗначенийВсегоУвел = Новый СписокЗначений;
    	            СписокЗначенийВсегоУвел.Добавить("СтТовБезНДСВсего"	, СтрокаШапкиДокумента.ВсегоУвелСтТовБезНДСВсего);
    	            СписокЗначенийВсегоУвел.Добавить("СтТовУчНалВсего"	, СтрокаШапкиДокумента.ВсегоУвелСтТовУчНалВсего);
    	            СтруктураВсегоУвел.Вставить("ВсегоУвел",СписокЗначенийВсегоУвел); 
    	            	//+СумНал
    	            	СтруктураСумНал = Новый Структура;						
						Если СтрокаШапкиДокумента.ВсегоУвелБезНДС = Неопределено Тогда
    	            		СтруктураСумНал.Вставить("СумНДС" , СтрокаШапкиДокумента.ВсегоУвелСумНал);
						Иначе
							СтруктураСумНал.Вставить("БезНДС" , СтрокаШапкиДокумента.ВсегоУвелБезНДС);
						КонецЕсли;						
    	            	СтруктураВсегоУвел.Вставить("СумНал" , СтруктураСумНал); //Вложенность "Файл.Документ.ТаблКСчФ.ВсегоУвел"
    	                //-СумНал
    	            СтруктураТаблКСчФ.Вставить("ВсегоУвел" , СтруктураВсегоУвел); 
	    	        //-ВсегоУвел
					//+ВсегоУм
	    	        СтруктураВсегоУм = Новый Структура;					
					СписокЗначенийВсегоУм = Новый СписокЗначений;
    	            СписокЗначенийВсегоУм.Добавить("СтТовБезНДСВсего"	, СтрокаШапкиДокумента.ВсегоУмСтТовБезНДСВсего);
    	            СписокЗначенийВсегоУм.Добавить("СтТовУчНалВсего"	, СтрокаШапкиДокумента.ВсегоУмСтТовУчНалВсего);
    	            СтруктураВсегоУм.Вставить("ВсегоУм",СписокЗначенийВсегоУм); 
    	            	//+СумНал
    	            	СтруктураСумНал = Новый Структура;						
						Если СтрокаШапкиДокумента.ВсегоУмБезНДС = Неопределено Тогда
    	            		СтруктураСумНал.Вставить("СумНДС" , СтрокаШапкиДокумента.ВсегоУмСумНал);
						Иначе
							СтруктураСумНал.Вставить("БезНДС" , СтрокаШапкиДокумента.ВсегоУмБезНДС);
						КонецЕсли;						
    	            	СтруктураВсегоУм.Вставить("СумНал" , СтруктураСумНал); //Вложенность "Файл.Документ.ТаблКСчФ.ВсегоУм"
    	                //-СумНал
    	            СтруктураТаблКСчФ.Вставить("ВсегоУм" , СтруктураВсегоУм); 
	    	        //-ВсегоУм					
				СтруктураДокумент.Вставить("ТаблКСчФ", СтруктураТаблКСчФ); //Вложенность "Файл.Документ"
    	        ///////////////////////////////////////////-ТаблКСчФ/////////////////////////////////////////////////////////
				
    	        ///////////////////////////////////////////+СодФХЖ3//////////////////////////////////////////////////////////
				СтруктураСодФХЖ3 = Новый Структура;
				СписокЗначенийСодФХЖ3 = Новый СписокЗначений;
				СписокЗначенийСодФХЖ3.Добавить("СодОпер"		, СтрокаШапкиДокумента.СодОпер);
				СписокЗначенийСодФХЖ3.Добавить("ИныеСвИзмСтоим"	, СтрокаШапкиДокумента.ИныеСвИзмСтоим);
				СписокЗначенийСодФХЖ3.Добавить("ДатаНапр"		, СтрокаШапкиДокумента.ДатаНапр);
		   	 	СтруктураСодФХЖ3.Вставить("СвПер", СписокЗначенийСодФХЖ3);
					//+ПередатДокум
					СтруктураПередатДокум = Новый Структура;
					СписокЗначенийПередатДокум = Новый СписокЗначений;
					СписокЗначенийПередатДокум.Добавить("НаимОсн"	, СтрокаШапкиДокумента.НаимПередатДокум);
					СписокЗначенийПередатДокум.Добавить("НомОсн"	, СтрокаШапкиДокумента.НомПередатДокум);
					СписокЗначенийПередатДокум.Добавить("ДатаОсн"	, СтрокаШапкиДокумента.ДатаПередатДокум);
					СписокЗначенийПередатДокум.Добавить("ДопСвОсн"	, СтрокаШапкиДокумента.ДопСвПередатДокум);
					СписокЗначенийПередатДокум.Добавить("ИдФайлОсн"	, СтрокаШапкиДокумента.ИдентФайлПередатДокум);
					СтруктураПередатДокум.Вставить("ПередатДокум", СписокЗначенийПередатДокум);
					СтруктураСодФХЖ3.Вставить("ПередатДокум" , СтруктураПередатДокум); //Вложенность "Файл.Документ.СодФХЖ3"
					//-ПередатДокум					
					//+ДокумОснКор
					СтруктураДокумОснКор = Новый Структура;
					СписокЗначенийДокумОснКор = Новый СписокЗначений;
					СписокЗначенийДокумОснКор.Добавить("НаимОсн"	, СтрокаШапкиДокумента.НаимОсн);
					СписокЗначенийДокумОснКор.Добавить("НомОсн"		, СтрокаШапкиДокумента.НомОсн);
					СписокЗначенийДокумОснКор.Добавить("ДатаОсн"	, СтрокаШапкиДокумента.ДатаОсн);
					СписокЗначенийДокумОснКор.Добавить("ДопСвОсн"	, СтрокаШапкиДокумента.ДопСвОсн);
					СписокЗначенийДокумОснКор.Добавить("ИдФайлОсн"	, СтрокаШапкиДокумента.ИдФайлОсн);
					СтруктураДокумОснКор.Вставить("ДокумОснКор", СписокЗначенийДокумОснКор);
					СтруктураСодФХЖ3.Вставить("ДокумОснКор" , СтруктураДокумОснКор); //Вложенность "Файл.Документ.СодФХЖ3"	
					//-ДокумОснКор
				СтруктураДокумент.Вставить("СодФХЖ3", СтруктураСодФХЖ3); //Вложенность "Файл.Документ"		
				///////////////////////////////////////////-СодФХЖ3//////////////////////////////////////////////////////////
    	        //+Подписант
    	        СтруктураПодписант = Новый Структура;
    	        CписокЗначенийПодписант = Новый СписокЗначений;
    			CписокЗначенийПодписант.Добавить("ОблПолн"	, СтрокаШапкиДокумента.ПодписантОблПолн);
    			CписокЗначенийПодписант.Добавить("Статус"	, СтрокаШапкиДокумента.ПодписантСтатус);
    			CписокЗначенийПодписант.Добавить("ОснПолн"	, СтрокаШапкиДокумента.ПодписантОснПолн);			    			
   	 			СтруктураПодписант.Вставить("Подписант", CписокЗначенийПодписант);// 
				    Если СтрокаШапкиДокумента.ПодписантТип = "ЮЛ" Тогда
						//+ЮЛ
	   	 				СтруктураЮЛ = Новый Структура;
	   	 				CписокЗначенийЮЛ = Новый СписокЗначений;
	    				CписокЗначенийЮЛ.Добавить("ИННЮЛ"	, СтрокаШапкиДокумента.ПодписантИНН);
	    				CписокЗначенийЮЛ.Добавить("Должн"	, СтрокаШапкиДокумента.ПодписантДолжность);
	   	 				СтруктураЮЛ.Вставить("ЮЛ", CписокЗначенийЮЛ);//
	   	 					//+ФИО
	   	 					СтруктураФИО = Новый Структура;
	   	 					CписокЗначенийФИО = Новый СписокЗначений;
	    					CписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПодписантФамилия);
	    					CписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПодписантИмя);
	    					CписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПодписантОтчество);
							
	   	 					СтруктураФИО.Вставить("ФИО", CписокЗначенийФИО);
	   	 					СтруктураЮЛ.Вставить("ФИО", СтруктураФИО);//Вложенность "Файл.Документ.Подписант.ЮЛ"
	   	 					//-ФИО	
	   	 				СтруктураПодписант.Вставить("ЮЛ", СтруктураЮЛ);//Вложенность "Файл.Документ.Подписант"	
    	        		//-ЮЛ
					ИначеЕсли СтрокаШапкиДокумента.ПодписантТип = "ИП" Тогда
						//+ИП
	   	 				СтруктураИП = Новый Структура;
	   	 				CписокЗначенийИП = Новый СписокЗначений;
	    				CписокЗначенийИП.Добавить("ИННФЛ"			, СтрокаШапкиДокумента.ПодписантИНН);
						CписокЗначенийИП.Добавить("ОргСвГосРегИП"	, СтрокаШапкиДокумента.ПодписантСвГосРегИП);
	   	 				СтруктураИП.Вставить("ИП", CписокЗначенийИП);//
	   	 					//+ФИО
	   	 					СтруктураФИО = Новый Структура;
	   	 					CписокЗначенийФИО = Новый СписокЗначений;
	    					CписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПодписантФамилия);
	    					CписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПодписантИмя);
	    					CписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПодписантОтчество);
	   	 					СтруктураФИО.Вставить("ФИО", CписокЗначенийФИО);
	   	 					СтруктураИП.Вставить("ФИО", СтруктураФИО);//Вложенность "Файл.Документ.Подписант.ИП"
	   	 					//-ФИО	
	   	 				СтруктураПодписант.Вставить("ИП", СтруктураИП);//Вложенность "Файл.Документ.Подписант"	
	    	        	//-ИП	
					ИначеЕсли СтрокаШапкиДокумента.ПодписантТип = "ФЛ" Тогда
						//+ФЛ
	   	 				СтруктураФЛ = Новый Структура;
	   	 				CписокЗначенийФЛ = Новый СписокЗначений;
	    				CписокЗначенийФЛ.Добавить("ИННФЛ", СтрокаШапкиДокумента.ПодписантИННФЛ);
						
						Если СтрокаШапкиДокумента.ПродТипОрганизации = "ИП" Тогда 
							CписокЗначенийФЛ.Добавить("ГосРегИПВыдДов", СтрокаШапкиДокумента.ПодписантГосРегИПВыдДовФЛ);
						КонецЕсли;
						
						СтруктураФЛ.Вставить("ФЛ", CписокЗначенийФЛ);//
	   	 					//+ФИО
	   	 					СтруктураФИО = Новый Структура;
	   	 					CписокЗначенийФИО = Новый СписокЗначений;
	    					CписокЗначенийФИО.Добавить("Фамилия"	, СтрокаШапкиДокумента.ПодписантФамилия);
	    					CписокЗначенийФИО.Добавить("Имя"		, СтрокаШапкиДокумента.ПодписантИмя);
	    					CписокЗначенийФИО.Добавить("Отчество"	, СтрокаШапкиДокумента.ПодписантОтчество);
	   	 					СтруктураФИО.Вставить("ФИО", CписокЗначенийФИО);
	   	 					СтруктураФЛ.Вставить("ФИО", СтруктураФИО);//Вложенность "Файл.Документ.Подписант.ФЛ"
	   	 					//-ФИО	
	   	 				СтруктураПодписант.Вставить("ФЛ", СтруктураФЛ);//Вложенность "Файл.Документ.Подписант"	
	    	        	//-ФЛ
					КонецЕсли;
    	        СтруктураДокумент.Вставить("Подписант", СтруктураПодписант);//Вложенность "Файл.Документ"
    	        //-Подписант    	       
	    	СтруктураФайл.Вставить("Документ", СтруктураДокумент);//Вложенность "Файл"
	    	//-Документ
    	СтруктураДок.Вставить("Файл", СтруктураФайл);//Верхний Уровень
    	//-Файл
    				
	XMLДокумент        	= Новый ЗаписьXML;		
	ПараметрыЗаписиXML 	= Новый ПараметрыЗаписиXML("WINDOWS-1251", "1.0", Истина, Ложь, Символы.Таб); 
	XMLДокумент.УстановитьСтроку("WINDOWS-1251");
	XMLДокумент.ЗаписатьОбъявлениеXML();
	
	Для каждого СтрокаЭлемента Из СтруктураДок Цикл
		ЗаписатьБлоки(XMLДокумент, СтрокаЭлемента, ОбязательныеРеквизиты, ТекстОшибкиПроверкиОбязательныхПолей);
	КонецЦикла;	

	СтрокаXML = XMLДокумент.Закрыть(); 
			
	Если ЗначениеЗаполнено(ТекстОшибкиПроверкиОбязательныхПолей) Тогда
		ТекстЛогаСобытий = ТекстОшибкиПроверкиОбязательныхПолей + Символы.ПС + "Документ был пропущен.";
        ДобавитьЗаписьВМассивЛога(МассивЛогаСобытий, ТекстЛогаСобытий, "Предупреждение", ИмяСобытия);
        Продолжить;	
	Иначе 
	
		СтруктураДляСовместимости = Новый Структура("СтрокаXML, Отказ, ВидДокумента, ЗаказДата, ЗаказНомер, Идентификатор, Контрагент, Номер, Организация, Ссылка, Статус, ФайлИмя, ЭлектронныйДокумент, ИдентификаторЦепочки");
		 		
		СтруктураФайлаДанных = Новый Структура;
		СтруктураФайлаДанных.Вставить("ВидДокумента"					, СтрокаШапкиДокумента.ВидДокумента);
		СтруктураФайлаДанных.Вставить("Документ"						, СтрокаШапкиДокумента.Ссылка);
		СтруктураФайлаДанных.Вставить("ИдентификаторЦепочки"			, СтрокаШапкиДокумента.ИдентификаторЦепочки);
		СтруктураФайлаДанных.Вставить("Идентификатор"					, СтрокаШапкиДокумента.ИдентификаторЭлДокумента);
		СтруктураФайлаДанных.Вставить("ИмяФайлаXML"						, СтрокаШапкиДокумента.ФайлИмя);
		СтруктураФайлаДанных.Вставить("КодировкаФайла"					, "WINDOWS-1251");
		СтруктураФайлаДанных.Вставить("Организация"						, СтрокаШапкиДокумента.Организация);
		СтруктураФайлаДанных.Вставить("Отправлен"						, НЕОПРЕДЕЛЕНО);		
		СтруктураФайлаДанных.Вставить("Статус"							, СтрокаШапкиДокумента.Статус);
		СтруктураФайлаДанных.Вставить("СтрокаXML"						, СтрокаXML);
		СтруктураФайлаДанных.Вставить("СтруктураДокумента"				, СтруктураДляСовместимости);
		СтруктураФайлаДанных.Вставить("ТипФайла"						, СтрокаШапкиДокумента.ТипФайла); 
		СтруктураФайлаДанных.Вставить("СертификатНаСервере"     		, СтрокаШапкиДокумента.СертификатНаСервере);
		СтруктураФайлаДанных.Вставить("ДанныеСертификатаЭКОМ"			, СтрокаШапкиДокумента.ОрганизацияДанныеСертификата);
		
		Если ИспользованиеМЧД Тогда
			СтруктураФайлаДанных.Вставить("СтрокаМЧД", СтрЗаменить(СтрокаШапкиДокумента.СтрокаМЧД, "&amp;GUID", СтрЗаменить(СтрокаШапкиДокумента.ИдентификаторЭлДокумента, "-", "")));
		КонецЕсли;
		
		
		МассивСтруктурИсходящих.Добавить(СтруктураФайлаДанных);
		
	КонецЕсли;
КонецЦикла;

//Возврат РезультатШапкаПодвалУПД;	//раскомментировать для отображения значений таблицы "Результат" на вкладке "Тестирование"  
//Возврат РезультатНоменклатур;		//раскомментировать для отображения значений таблицы "РезультатНоменклатур" на вкладке "Тестирование"
    
Если НЕ ВызовМастерКнопкойУКД Тогда
	Выполнить("Возврат МассивСтруктурИсходящих");		
КонецЕсли;</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:decimal">0</Value>
		<Value xsi:type="xs:string">Исходящий УКД</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">9</lastId>
			<item>
				<value xsi:type="xs:string">Неструкт. докум.</value>
				<id xsi:type="xs:decimal">0</id>
			</item>
			<item>
				<value xsi:type="xs:string">Прайс-лист</value>
				<id xsi:type="xs:decimal">1</id>
			</item>
			<item>
				<value xsi:type="xs:string">Поставщик</value>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">2</id>
			</item>
			<item>
				<value xsi:type="xs:string">Покупатель</value>
				<id xsi:type="xs:decimal">3</id>
			</item>
			<item>
				<value xsi:type="xs:string">Синоним</value>
				<presentation>Исходящий УКД</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">4</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИмяКнопки</value>
				<presentation>ИсходящийУКДКорректировкаРеализации</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">5</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПередаватьТекстПричины</value>
				<id xsi:type="xs:decimal">6</id>
			</item>
			<item>
				<value xsi:type="xs:string">ПриемникВидДокумента</value>
				<presentation>ON_NKORSCHFDOPPR_01_Исходящий; ON_NKORSCHFDOPPRMARK_01_Исходящий; ON_NKORSCHFDOPPRPROS_01_Исходящий</presentation>
				<id xsi:type="xs:decimal">7</id>
			</item>
			<item>
				<value xsi:type="xs:string">ИсточникВидДокумента</value>
				<presentation>СчетФактура_Исходящий</presentation>
				<id xsi:type="xs:decimal">8</id>
			</item>
			<item>
				<value xsi:type="xs:string">НужнаПодпись</value>
				<presentation>Да</presentation>
				<checkState>1</checkState>
				<id xsi:type="xs:decimal">9</id>
			</item>
		</Value>
		<Value xsi:type="xs:string"/>
		<Value xsi:type="xs:string">ИсходящийУКДКорректировкаРеализации</Value>
		<Value xsi:type="ValueListType">
			<valueType/>
			<lastId xsi:type="xs:decimal">1</lastId>
			<item>
				<value xsi:type="xs:string">ТекстЗапроса = "ВЫБРАТЬ
               |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	DR_События.Документ КАК Документ,
               |	DR_События.Идентификатор КАК Идентификатор
               |ПОМЕСТИТЬ ВТ_КорСЧФ
               |ИЗ
               |	РегистрСведений.DR_События КАК DR_События
               |ГДЕ
               |	DR_События.ВидДокумента = ""СчетФактура_Исходящий""
               |	И ТИПЗНАЧЕНИЯ(DR_События.Документ.ДокументОснование) = ТИП(Документ.КорректировкаРеализации)
               |	И ВЫРАЗИТЬ(DR_События.Документ КАК Документ.СчетФактураВыданный).Корректировочный
               |	И НЕ ВЫРАЗИТЬ(DR_События.Документ КАК Документ.СчетФактураВыданный).Исправление
               |	И DR_События.Статус &lt;&gt; ""Архивный""
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ
               |	DR_События.ИдентификаторЦепочки КАК ИдентификаторЦепочки,
               |	DR_События.ИдентификаторОснования КАК ИдентификаторОснования,
               |	DR_События.Документ КАК Документ,
               |	МАКСИМУМ(DR_События.ДатаЗаписи) КАК ДатаЗаписи
               |ПОМЕСТИТЬ ВТ_Кор_NSCHFDOPPR
               |ИЗ
               |	РегистрСведений.DR_События КАК DR_События
               |ГДЕ
               |	(DR_События.ВидДокумента = ""ON_NKORSCHFDOPPR_01_Исходящий""
               |			ИЛИ DR_События.ВидДокумента = ""ON_NKORSCHFDOPPRMARK_01_Исходящий""
               |			ИЛИ DR_События.ВидДокумента = ""ON_NKORSCHFDOPPRPROS_01_Исходящий"")
               |
               |СГРУППИРОВАТЬ ПО
               |	DR_События.ИдентификаторЦепочки,
               |	DR_События.ИдентификаторОснования,
               |	DR_События.Документ
               |;
               |
               |////////////////////////////////////////////////////////////////////////////////
               |ВЫБРАТЬ ПЕРВЫЕ 2
               |	ВТ_КорСЧФ.Документ КАК Документ,
               |	""СчетФактура_Исходящий"" КАК ВидДокумента,
               |	"""" КАК СтатусОбработкиДокумента
               |ИЗ
               |	ВТ_КорСЧФ КАК ВТ_КорСЧФ
               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Кор_NSCHFDOPPR КАК ВТ_Кор_NSCHFDOPPR
               |		ПО (ВТ_КорСЧФ.ИдентификаторЦепочки = ВТ_Кор_NSCHFDOPPR.ИдентификаторЦепочки)
               |			И (ВТ_КорСЧФ.Идентификатор = ВТ_Кор_NSCHFDOPPR.ИдентификаторОснования)
               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.DR_ЦепочкиДокументов КАК DR_ЦепочкиДокументов
               |		ПО (ВТ_КорСЧФ.ИдентификаторЦепочки = DR_ЦепочкиДокументов.ИдентификаторЦепочки)
               |ГДЕ
               |	ВТ_КорСЧФ.Документ.Проведен
               |	И ВТ_Кор_NSCHFDOPPR.ИдентификаторЦепочки ЕСТЬ NULL
               |
               |УПОРЯДОЧИТЬ ПО
               |	DR_ЦепочкиДокументов.ДатаЗаказа УБЫВ";</value>
				<presentation>ТекстЗапроса</presentation>
				<id xsi:type="xs:decimal">0</id>
			</item>
		</Value>
	</row>
</ValueTree>